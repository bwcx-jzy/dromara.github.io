const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/zh/\":{\"documentCount\":307,\"nextId\":307,\"documentIds\":{\"0\":\"v-3100e6d8\",\"1\":\"v-1c782d50\",\"2\":\"v-1c782d50#dromara-梦码读书会-dromara-2020-活动介绍\",\"3\":\"v-1c782d50#活动背景\",\"4\":\"v-1c782d50#活动目的-意义和目标\",\"5\":\"v-1c782d50#活动开展\",\"6\":\"v-1c782d50#活动负责人以及主要参与者\",\"7\":\"v-1c782d50#负责人\",\"8\":\"v-1c782d50#主要参与者\",\"9\":\"v-583fae6e\",\"10\":\"v-583fae6e#dromara-源码阅读-soul-2021-首次活动\",\"11\":\"v-583fae6e#活动详情\",\"12\":\"v-a74bd796\",\"13\":\"v-a74bd796#dromara-源码阅读-soul-2021-首次活动\",\"14\":\"v-a74bd796#活动详情\",\"15\":\"v-4450d954\",\"16\":\"v-4450d954#我们的愿景\",\"17\":\"v-4450d954#社区口号\",\"18\":\"v-4450d954#官网\",\"19\":\"v-4450d954#社区项目\",\"20\":\"v-4450d954#加入组织\",\"21\":\"v-4450d954#组织责任\",\"22\":\"v-4450d954#行为准则\",\"23\":\"v-4450d954#项目捐赠\",\"24\":\"v-4450d954#赞助-支持\",\"25\":\"v-4450d954#联系我们\",\"26\":\"v-2b4be8a5\",\"27\":\"v-4038dd53\",\"28\":\"v-4038dd53#hmily-高并发事务处理\",\"29\":\"v-4038dd53#_1-hmily-的性能问题\",\"30\":\"v-4038dd53#_2-关于-rpc-调用超时-hmily-是怎么处理的\",\"31\":\"v-4038dd53#_3-hmily-支持集群部署的问题-以及集群环境中-定时任务日志恢复的问题\",\"32\":\"v-4038dd53#_4-hmily-是异步保存日志的-那么很极端情况下-代码刚好执行到这一行-然后-jvm-退出-断电啦什么的-日志还没保存那怎么处理呢\",\"33\":\"v-54df0e8c\",\"34\":\"v-54df0e8c#_1-采用-disruptor-进行事务日志的异步读写-disruptor-是一个无锁-无-gc-的并发编程框架\",\"35\":\"v-54df0e8c#_2-异步执行-confrim-cancel-方法。\",\"36\":\"v-54df0e8c#这里有人可能会问-那么-cancel-方法异常-或者-confrim-方法异常怎么办呢\",\"37\":\"v-54df0e8c#有人又会问-这里如果日志保存异常了怎么办\",\"38\":\"v-54df0e8c#_3-threadlocal-缓存的使用。\",\"39\":\"v-54df0e8c#_4-guavacache-的使用\",\"40\":\"v-54df0e8c#以上-4-点造就了-hmily-是一个异步的高性能分布式事务-tcc-框架的原因。\",\"41\":\"v-54df0e8c#hmily-如何使用-https-github-com-yu199195-hmily-tree-master-hmily-tcc-demo\",\"42\":\"v-54df0e8c#_1-dubbo-用户\",\"43\":\"v-54df0e8c#springcloud-用户\",\"44\":\"v-54df0e8c#motan-用户\",\"45\":\"v-54df0e8c#hmily-spring-boot-start-那这个就更容易了-只需要根据你的-rpc-框架去引入不同的-jar-包。\",\"46\":\"v-9279702a\",\"47\":\"v-cd99f858\",\"48\":\"v-cd99f858#_1-源代码准备\",\"49\":\"v-cd99f858#_1-1-fork-dromara-soul源代码至自己的仓库cchenxi-soul\",\"50\":\"v-cd99f858#_1-2-clone-自己仓库中的-soul-源代码至本地\",\"51\":\"v-cd99f858#_1-3-使用-idea-打开-soul-源代码\",\"52\":\"v-cd99f858#_1-4-编译-soul-源代码\",\"53\":\"v-cd99f858#_2-启动-soul\",\"54\":\"v-cd99f858#_2-1-启动soul-admin模块\",\"55\":\"v-cd99f858#_2-2-启动soul-bootstrap模块\",\"56\":\"v-cd99f858#_3-测试-http-请求转发\",\"57\":\"v-cd99f858#_3-1-启动一个服务\",\"58\":\"v-cd99f858#_3-1-1-测试-http-服务\",\"59\":\"v-cd99f858#_3-1-2-测试网关转发\",\"60\":\"v-cd99f858#_3-2-启动两个服务模拟负载均衡\",\"61\":\"v-cd99f858#_3-2-1-测试-http-服务\",\"62\":\"v-cd99f858#_3-2-2-测试负载均衡\",\"63\":\"v-cd99f858#_3-2-3-压测\",\"64\":\"v-cd99f858#_3-2-4-问题\",\"65\":\"v-03b4590e\",\"66\":\"v-03b4590e#一、启动项目\",\"67\":\"v-03b4590e#二、divide-插件介绍\",\"68\":\"v-03b4590e#选择器\",\"69\":\"v-03b4590e#选择器规则\",\"70\":\"v-03b4590e#三、divide-插件使用\",\"71\":\"v-03b4590e#测试网关路由\",\"72\":\"v-03b4590e#测试负载均衡\",\"73\":\"v-82df6d82\",\"74\":\"v-78e31f20\",\"75\":\"v-78e31f20#_1-注册入口\",\"76\":\"v-78e31f20#_2-springmvc-register-接口逻辑\",\"77\":\"v-78e31f20#_2-1-先看看这个方法-handlerspringmvcselector-处理-selector。\",\"78\":\"v-78e31f20#_2-1-1-第一次接入-soul-网关\",\"79\":\"v-78e31f20#_2-1-2-已经接入-soul-网关\",\"80\":\"v-78e31f20#_2-2-再来看看这个方法-handlerspringmvcrule-处理-rule。\",\"81\":\"v-78e31f20#_3-总结\",\"82\":\"v-24edce70\",\"83\":\"v-24edce70#abstractsoulplugin\",\"84\":\"v-24edce70#soulpluginchain\",\"85\":\"v-24edce70#插件项目结构\",\"86\":\"v-24edce70#负载均衡\",\"87\":\"v-24edce70#hash\",\"88\":\"v-24edce70#randomloadbalance\",\"89\":\"v-24edce70#roundrobinloadbalance\",\"90\":\"v-24edce70#webclientplugin\",\"91\":\"v-24edce70#webclientresponseclient\",\"92\":\"v-09f19465\",\"93\":\"v-09f19465#后台与网关数据同步-http-长轮询篇\",\"94\":\"v-09f19465#配置\",\"95\":\"v-09f19465#datachangedlistener-体系\",\"96\":\"v-09f19465#其他同步策略此时在干什么\",\"97\":\"v-09f19465#长轮询实现方式思考\",\"98\":\"v-09f19465#httplongpollingdatachangedlistener-长轮询实现\",\"99\":\"v-09f19465#总结\",\"100\":\"v-e0528bf6\",\"101\":\"v-e0528bf6#后台与网关数据同步-http-长轮询篇\",\"102\":\"v-e0528bf6#网关启动时拉取数据\",\"103\":\"v-e0528bf6#网关轮询监听变化\",\"104\":\"v-30374624\",\"105\":\"v-30374624#_2-1-启动-2-个系统\",\"106\":\"v-30374624#_2-2-页面操作查找接口\",\"107\":\"v-30374624#_2-3-后台接口\",\"108\":\"v-30374624#_2-4-发布事件\",\"109\":\"v-30374624#_2-5-监听事件\",\"110\":\"v-30374624#_2-5-1-监听器注入\",\"111\":\"v-30374624#_2-5-2-监听事件处理逻辑\",\"112\":\"v-30374624#_2-6-同步数据给-soul-bootstrap\",\"113\":\"v-30374624#后台与网关数据同步-websocket-篇\",\"114\":\"v-30374624#后台如何建立-websocket\",\"115\":\"v-30374624#网关如何建立-websocket\",\"116\":\"v-30374624#网关数据变动调用链\",\"117\":\"v-30374624#tips\",\"118\":\"v-85ba6f30\",\"119\":\"v-85ba6f30#java-spi\",\"120\":\"v-85ba6f30#从一个-demo-开始\",\"121\":\"v-85ba6f30#spi-的实现\",\"122\":\"v-85ba6f30#java-spi-思考\",\"123\":\"v-85ba6f30#jdbc-spi-使用方式\",\"124\":\"v-85ba6f30#mysql-驱动包-spi\",\"125\":\"v-85ba6f30#筛选-driver-约定大于配置\",\"126\":\"v-85ba6f30#总结-mysql-jdbc\",\"127\":\"v-85ba6f30#jdbc-demo\",\"128\":\"v-85ba6f30#soul-spi-实现\",\"129\":\"v-85ba6f30#java-spi-缺陷\",\"130\":\"v-85ba6f30#优化的-extensionloader\",\"131\":\"v-85ba6f30#增强型搜索-getjoin\",\"132\":\"v-85ba6f30#多层缓存\",\"133\":\"v-85ba6f30#第一层缓存-cachedinstances\",\"134\":\"v-85ba6f30#第二层缓存之-cachedclasses\",\"135\":\"v-85ba6f30#第二层缓存之-joininstances\",\"136\":\"v-85ba6f30#缓存小结\",\"137\":\"v-85ba6f30#详细源码分析-可跳过\",\"138\":\"v-72beb47c\",\"139\":\"v-72beb47c#介绍\",\"140\":\"v-72beb47c#ak-sk-介绍\",\"141\":\"v-72beb47c#插件使用-以-dubbo-findall-为例\",\"142\":\"v-72beb47c#在-soulbootstrap-的-pom-xml-文件中添加-sign-的支持\",\"143\":\"v-72beb47c#新增-appkey-secretkey\",\"144\":\"v-72beb47c#配置选择器和规则器\",\"145\":\"v-72beb47c#增加获取鉴权服务\",\"146\":\"v-72beb47c#在网关中增加鉴权头信息\",\"147\":\"v-72beb47c#请求的结果演示\",\"148\":\"v-72beb47c#sign-插件的实现分析\",\"149\":\"v-72beb47c#java-中-pair\",\"150\":\"v-e838d468\",\"151\":\"v-e838d468#启动-soul-admin、soul-bootstrap-使用-zookeeper-同步数据到网关\",\"152\":\"v-e838d468#一、配置环境\",\"153\":\"v-e838d468#二、启动服务\",\"154\":\"v-e838d468#三、soul-网关-zookeeper-数据同步原理解析\",\"155\":\"v-e838d468#四、总结\",\"156\":\"v-e4cf232a\",\"157\":\"v-e4cf232a#启动-admin-与网关。-admin-操作-使用-zookeeper-同步数据到网关\",\"158\":\"v-e4cf232a#一、soul-admin-变更网关数据-跟踪数据同步过程\",\"159\":\"v-e4cf232a#二、soul-bootstrap-如何获取-zookeeper-数据的-如何感知网关数据变化的。\",\"160\":\"v-e4cf232a#三、soul-bootstrap-是如何感知网关数据变化的\",\"161\":\"v-e4cf232a#四、总结\",\"162\":\"v-85a42546\",\"163\":\"v-85a42546#soul-admin-如何同步网关数据\",\"164\":\"v-85a42546#soul-bootstrap-如何同步网关数据\",\"165\":\"v-85a42546#总结\",\"166\":\"v-5786670d\",\"167\":\"v-5786670d#一、引言\",\"168\":\"v-5786670d#二、微内核架构\",\"169\":\"v-5786670d#_1、架构释义\",\"170\":\"v-5786670d#_2、设计关键点\",\"171\":\"v-5786670d#三、soul-的插件化设计\",\"172\":\"v-5786670d#四、soul-的插件化实现\",\"173\":\"v-5786670d#_1、插件实现\",\"174\":\"v-5786670d#_2、插件链实现\",\"175\":\"v-5786670d#总结\",\"176\":\"v-c2878338\",\"177\":\"v-c2878338#插件概述\",\"178\":\"v-c2878338#插件处理流程\",\"179\":\"v-c2878338#主机探活\",\"180\":\"v-c2878338#_3-1-探活时机\",\"181\":\"v-c2878338#_3-2-探活任务\",\"182\":\"v-c2878338#_3-3-活性检查\",\"183\":\"v-c2878338#负载均衡\",\"184\":\"v-c2878338#总结\",\"185\":\"v-79eeff9c\",\"186\":\"v-79eeff9c#globalplugin-soulcontext-对象封装插件\",\"187\":\"v-79eeff9c#divideplugin-路由选择插件\",\"188\":\"v-79eeff9c#abstractsoulplugin\",\"189\":\"v-79eeff9c#divideplugin\",\"190\":\"v-79eeff9c#webclientplugin-http-请求调用插件\",\"191\":\"v-79eeff9c#webclientresponseplugin-http-结果处理插件\",\"192\":\"v-92e572f6\",\"193\":\"v-92e572f6#回顾\",\"194\":\"v-92e572f6#学习使用\",\"195\":\"v-92e572f6#阅读官方文档-对其有大概认知\",\"196\":\"v-92e572f6#初步使用\",\"197\":\"v-92e572f6#启用对应插件\",\"198\":\"v-92e572f6#添加限流选择器、规则\",\"199\":\"v-92e572f6#接口对应访问\",\"200\":\"v-92e572f6#源码阅读-带着问题读源码\",\"201\":\"v-92e572f6#如何保证在页面修改-redis-配置后立即生效的-后台对应的-redis-连接立马变更的。\",\"202\":\"v-92e572f6#限流插件是底层是如何实现的呢\",\"203\":\"v-92e572f6#debug-调用链\",\"204\":\"v-92e572f6#方法-getkeys-id\",\"205\":\"v-92e572f6#execute-this-script-keys-scriptargs\",\"206\":\"v-92e572f6#lua-限流算法分析\",\"207\":\"v-2a063bca\",\"208\":\"v-2a063bca#插件配置\",\"209\":\"v-2a063bca#maven-依赖\",\"210\":\"v-2a063bca#场景\",\"211\":\"v-2a063bca#重定向\",\"212\":\"v-2a063bca#网关自身接口转发\",\"213\":\"v-2a063bca#源码解析\",\"214\":\"v-2a063bca#参考链接\",\"215\":\"v-23b8cbd0\",\"216\":\"v-23b8cbd0#场景描述\",\"217\":\"v-23b8cbd0#流量控制\",\"218\":\"v-23b8cbd0#熔断\",\"219\":\"v-23b8cbd0#熔断-1\",\"220\":\"v-23b8cbd0#流量控制-1\",\"221\":\"v-1fc031d4\",\"222\":\"v-1fc031d4#目标\",\"223\":\"v-1fc031d4#什么是-resilience4j\",\"224\":\"v-1fc031d4#soul-的-resilience4j-体验\",\"225\":\"v-1fc031d4#限流\",\"226\":\"v-1fc031d4#熔断\",\"227\":\"v-1fc031d4#resilience4j-插件源码解读\",\"228\":\"v-1fc031d4#总结\",\"229\":\"v-552cbe11\",\"230\":\"v-552cbe11#目标\",\"231\":\"v-552cbe11#apache-dubbo-插件介绍\",\"232\":\"v-552cbe11#元数据介绍\",\"233\":\"v-552cbe11#apache-dubbo-插件配置\",\"234\":\"v-552cbe11#soul-bootstrap-pom-配置\",\"235\":\"v-552cbe11#soul-admin-配置\",\"236\":\"v-552cbe11#dubbo-服务-pom-配置\",\"237\":\"v-552cbe11#apache-dubbo-泛化调用介绍\",\"238\":\"v-552cbe11#通过-api-方式使用泛化调用-网关目前使用方式\",\"239\":\"v-552cbe11#通过-spring-使用泛化调用\",\"240\":\"v-552cbe11#泛化调用实现流程\",\"241\":\"v-552cbe11#soul-dubbo-插件调用解析\",\"242\":\"v-552cbe11#apachdubboplugin-泛化调用准备\",\"243\":\"v-552cbe11#apachedubboproxyservice\",\"244\":\"v-552cbe11#dubboresponseplugin\",\"245\":\"v-552cbe11#webfluxresultutils-返回结果\",\"246\":\"v-552cbe11#dubbo-泛化调用介绍\",\"247\":\"v-552cbe11#服务消费端-org-apache-dubbo-rpc-filter-genericimplfilter-是如何拦截泛化调用\",\"248\":\"v-552cbe11#服务提供端通过-genericfilter-拦截泛化请求\",\"249\":\"v-552cbe11#总结\",\"250\":\"v-552cbe11#参考\",\"251\":\"v-1260dd10\",\"252\":\"v-1260dd10#基本条件\",\"253\":\"v-1260dd10#源仓库影响\",\"254\":\"v-1260dd10#仓库权限\",\"255\":\"v-1260dd10#仓库文档\",\"256\":\"v-1260dd10#版本发布\",\"257\":\"v-1260dd10#组织-社区\",\"258\":\"v-1260dd10#捐赠项目退出事宜-初版\",\"259\":\"v-1260dd10#权责与组织形式\",\"260\":\"v-1260dd10#以上规定-dromara-组委会有最终解释权\",\"261\":\"v-7761875e\",\"262\":\"v-2bf1f394\",\"263\":\"v-9f83481e\",\"264\":\"v-9f83481e#hmily-发布-2-0-2-release-版本\",\"265\":\"v-9f83481e#hmily-对现在流行-rpc-框架以及-spring-的支持情况。\",\"266\":\"v-9f83481e#hmily-在-2-0-2-版本对使用者-rpc-集群时候负载均衡策略。\",\"267\":\"v-9f83481e#hmily-的具体使用文档\",\"268\":\"v-166ab031\",\"269\":\"v-166ab031#架构全景图\",\"270\":\"v-166ab031#功能\",\"271\":\"v-166ab031#重构部分\",\"272\":\"v-166ab031#解决疑难-bug\",\"273\":\"v-166ab031#用户使用与升级指南\",\"274\":\"v-166ab031#下一个版本\",\"275\":\"v-166ab031#社区共建\",\"276\":\"v-2dae727a\",\"277\":\"v-2dae727a#调整-hmily-架构-更合理的模块划分\",\"278\":\"v-2dae727a#梳理-hmily-社区-issue-解决-bug。\",\"279\":\"v-2dae727a#社区共建\",\"280\":\"v-2dae727a#最近\",\"281\":\"v-2dae727a#大约在冬季\",\"282\":\"v-2dae727a#以后的以后\",\"283\":\"v-5224044c\",\"284\":\"v-5224044c#hutool-是什么\",\"285\":\"v-5224044c#_5-8-0-m1\",\"286\":\"v-5224044c#❌-不兼容特性\",\"287\":\"v-5224044c#🐣-新特性\",\"288\":\"v-5224044c#🐞bug-修复\",\"289\":\"v-5224044c#社区共建\",\"290\":\"v-adf1a874\",\"291\":\"v-adf1a874#soul-网关发布-1-0-4-release-版本\",\"292\":\"v-adf1a874#对-dubbo-用户使用的更改。\",\"293\":\"v-adf1a874#关于使用-1-0-4-版本的建议。\",\"294\":\"v-adf1a874#如果您之前使用的-1-0-2-版本-想要更新到-1-0-4-版本。\",\"295\":\"v-adf1a874#遇到问题\",\"296\":\"v-793b5400\",\"297\":\"v-793b5400#公司入口网关-开放平台\",\"298\":\"v-793b5400#零零总总还有很多其他功能\",\"299\":\"v-793b5400#最后最后\",\"300\":\"v-663f9427\",\"301\":\"v-663f9427#体验新架构-10-分钟搞定一个高可用高性能网关。\",\"302\":\"v-663f9427#体验新架构下的插件热插拔\",\"303\":\"v-663f9427#soul-网关的特性\",\"304\":\"v-663f9427#soul-网关有哪些使用场景-又有哪些值得你关注或者学习的\",\"305\":\"v-663f9427#从发布-2-2-0-谈谈近几年的开源体会。\",\"306\":\"v-210f2266\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2,2],\"2\":[5,8],\"3\":[1,6],\"4\":[2,10],\"5\":[1,19],\"6\":[1],\"7\":[1,3],\"8\":[1,2],\"9\":[3,2],\"10\":[6,14],\"11\":[1,40],\"12\":[2,2],\"13\":[6,14],\"14\":[1,44],\"15\":[1],\"16\":[1,6],\"17\":[1,4],\"18\":[1,7],\"19\":[1,40],\"20\":[1,11],\"21\":[1,6],\"22\":[1,12],\"23\":[1,35],\"24\":[2,9],\"25\":[1,5],\"26\":[1],\"27\":[2],\"28\":[2,36],\"29\":[4,42],\"30\":[7,33],\"31\":[6,18],\"32\":[11,206],\"33\":[2,23],\"34\":[9,119],\"35\":[6,106],\"36\":[8,11],\"37\":[3,18],\"38\":[4,75],\"39\":[3,118],\"40\":[8],\"41\":[12,9],\"42\":[3,196],\"43\":[2,16],\"44\":[2,16],\"45\":[11,118],\"46\":[1,378],\"47\":[3,19],\"48\":[2],\"49\":[6],\"50\":[6,8],\"51\":[7],\"52\":[5,16],\"53\":[3],\"54\":[6,26],\"55\":[5,101],\"56\":[4,7],\"57\":[3,42],\"58\":[5,10],\"59\":[4,52],\"60\":[3,9],\"61\":[6,10],\"62\":[3,75],\"63\":[3,90],\"64\":[4,13],\"65\":[4],\"66\":[2,26],\"67\":[3,43],\"68\":[1,56],\"69\":[1,5],\"70\":[3,37],\"71\":[1,15],\"72\":[1,22],\"73\":[3,2],\"74\":[4],\"75\":[2,47],\"76\":[4,58],\"77\":[7,81],\"78\":[5,139],\"79\":[5,167],\"80\":[6,225],\"81\":[2,34],\"82\":[1,18],\"83\":[1,103],\"84\":[1,158],\"85\":[1,133],\"86\":[1,15],\"87\":[1,63],\"88\":[1,50],\"89\":[1,123],\"90\":[1,121],\"91\":[1,68],\"92\":[1],\"93\":[4],\"94\":[1,32],\"95\":[2,155],\"96\":[2,86],\"97\":[1,22],\"98\":[2,202],\"99\":[1,69],\"100\":[1],\"101\":[4,6],\"102\":[1,238],\"103\":[1,179],\"104\":[1,53],\"105\":[4,3],\"106\":[2,17],\"107\":[3,82],\"108\":[3,55],\"109\":[3,66],\"110\":[4,169],\"111\":[3,98],\"112\":[5,119],\"113\":[4],\"114\":[3,54],\"115\":[3,140],\"116\":[1,140],\"117\":[1,21],\"118\":[1,56],\"119\":[2,52],\"120\":[3,66],\"121\":[2,190],\"122\":[3,34],\"123\":[3,7],\"124\":[3,107],\"125\":[3,98],\"126\":[3,37],\"127\":[2,77],\"128\":[3,38],\"129\":[3,30],\"130\":[2,68],\"131\":[3,31],\"132\":[1,27],\"133\":[2,44],\"134\":[2,48],\"135\":[2,36],\"136\":[1,5],\"137\":[3,145],\"138\":[1],\"139\":[1,2],\"140\":[3,12],\"141\":[5],\"142\":[8,23],\"143\":[3],\"144\":[1,2],\"145\":[1,64],\"146\":[1,2],\"147\":[1,9],\"148\":[2],\"149\":[3,93],\"150\":[1],\"151\":[7],\"152\":[2,47],\"153\":[2,152],\"154\":[5,232],\"155\":[2,15],\"156\":[1],\"157\":[7,26],\"158\":[5,25],\"159\":[8,146],\"160\":[4,91],\"161\":[2,1],\"162\":[1,303],\"163\":[4,159],\"164\":[4,107],\"165\":[1,1],\"166\":[1],\"167\":[2,18],\"168\":[2],\"169\":[2,13],\"170\":[2,24],\"171\":[3,39],\"172\":[3,6],\"173\":[2,157],\"174\":[2,158],\"175\":[1,22],\"176\":[1],\"177\":[1,16],\"178\":[1,121],\"179\":[1,40],\"180\":[3,47],\"181\":[3,61],\"182\":[2,78],\"183\":[1,75],\"184\":[1,18],\"185\":[1,180],\"186\":[3,113],\"187\":[2,10],\"188\":[1,147],\"189\":[1,114],\"190\":[3,158],\"191\":[3,103],\"192\":[1],\"193\":[1,21],\"194\":[1],\"195\":[2,20],\"196\":[1],\"197\":[1,14],\"198\":[2,13],\"199\":[1,27],\"200\":[2],\"201\":[6,89],\"202\":[2],\"203\":[2,139],\"204\":[4,16],\"205\":[6,27],\"206\":[2,94],\"207\":[1,18],\"208\":[1,21],\"209\":[2,25],\"210\":[1,6],\"211\":[1,11],\"212\":[1,9],\"213\":[1,195],\"214\":[2,4],\"215\":[1,17],\"216\":[1,28],\"217\":[1,60],\"218\":[1,89],\"219\":[1,66],\"220\":[1,316],\"221\":[1],\"222\":[1,9],\"223\":[2,55],\"224\":[4,86],\"225\":[1,175],\"226\":[1,69],\"227\":[2,170],\"228\":[1,5],\"229\":[2],\"230\":[1,29],\"231\":[3,27],\"232\":[1,109],\"233\":[3],\"234\":[4,29],\"235\":[3,9],\"236\":[4,55],\"237\":[3,13],\"238\":[5,19],\"239\":[3,12],\"240\":[1,70],\"241\":[3,59],\"242\":[2,86],\"243\":[1,109],\"244\":[1,39],\"245\":[2,2],\"246\":[2,8],\"247\":[8,89],\"248\":[3,155],\"249\":[1,5],\"250\":[1,18],\"251\":[1],\"252\":[1,40],\"253\":[1,14],\"254\":[1,13],\"255\":[1,7],\"256\":[1,6],\"257\":[2,12],\"258\":[3,37],\"259\":[1,43],\"260\":[3],\"261\":[1],\"262\":[1],\"263\":[4],\"264\":[6,20],\"265\":[7,19],\"266\":[8,39],\"267\":[3,21],\"268\":[4,12],\"269\":[1,1],\"270\":[1,43],\"271\":[1,55],\"272\":[3,28],\"273\":[1,243],\"274\":[1,26],\"275\":[1,16],\"276\":[1,20],\"277\":[4,60],\"278\":[7,47],\"279\":[1,27],\"280\":[1,21],\"281\":[1,22],\"282\":[1,21],\"283\":[7,7],\"284\":[2,54],\"285\":[4],\"286\":[2,76],\"287\":[2,117],\"288\":[2,81],\"289\":[1,13],\"290\":[4],\"291\":[7,16],\"292\":[4,17],\"293\":[6,9],\"294\":[8,16],\"295\":[2,19],\"296\":[5,202],\"297\":[3,22],\"298\":[1,6],\"299\":[1,33],\"300\":[5,61],\"301\":[4,98],\"302\":[1,68],\"303\":[2,55],\"304\":[4,103],\"305\":[5,108],\"306\":[1]},\"averageFieldLength\":[2.6514657980456033,57.03950700533098],\"storedFields\":{\"0\":{\"h\":\"活动\"},\"1\":{\"h\":\"Dromara 梦码读书会介绍\",\"t\":[\"Dromara 梦码读书会介绍\"]},\"2\":{\"h\":\"Dromara 梦码读书会（Dromara 2020 活动介绍）\",\"t\":[\"日期：2020 年 12 月 27 日，星期日\"]},\"3\":{\"h\":\"活动背景\",\"t\":[\"为了提高社区参与者的积极性, 促进 Dromara 社区的建设, 锻炼大家的表达能力和提升技术核心力量, 社区以源码阅读形式自发行的组织本次活动\"]},\"4\":{\"h\":\"活动目的,意义和目标\",\"t\":[\"提高积极性\",\"提升技术力量,扩展大家视野\",\"锻炼语言表达能力\",\"促进社区的和谐、团结、共进\",\"将 Dromara 社区做的越来越大\"]},\"5\":{\"h\":\"活动开展\",\"t\":[\"活动分多期,先是挑选十二位组员进行为期 12 天的源码阅读,期间进行两次线上分享\",\"为了提高大家的自觉性我们设立了惩罚制度,先交出 500 元/人给管理员,隔天的早上 8 点作业未提交,分享迟到者扣 100 元/次,提前请假者无需惩罚\",\"每人根据每天阅读的内容,以文字形式写到各自的作业提交区\"]},\"6\":{\"h\":\"活动负责人以及主要参与者\"},\"7\":{\"h\":\"负责人\",\"t\":[\"崔,kimming,猫大人\"]},\"8\":{\"h\":\"主要参与者\",\"t\":[\"Dromara 社区组员\"]},\"9\":{\"h\":\"Dromara Soul 源码01期阅读分享会02\",\"t\":[\"Dromara 线上活动\"]},\"10\":{\"h\":\"Dromara 源码阅读（Soul 2021 首次活动）\",\"t\":[\"日期：2021 年 2 月 6 日，星期日\",\"时间：20:00 – 23:00\",\"地点：线上腾讯会议室\"]},\"11\":{\"h\":\"活动详情\",\"t\":[\"20:00 - 20:10 开场介绍近期梦码分享情况 by kimming & 崔\",\"20:10 - 20:25 SPI 介绍以及 Soul SPI 如何增强实现 by 朱明\",\"20:25 - 20:50 响应式编程介绍 by Ztzzz\",\"20:50 - 21:10 Soul 单测小结 by 阿行\",\"21:10 - 21:25 容错设计 by 蒋文博\",\"21:25 - 21:40 Soul WebFlux 加载流程以及处理请求分析 by rwby\",\"21:40 - 21:55 Soul 限流和熔断分析 by 刘鹏辉\",\"21:55 - 22:05 Java 常见问题总结 by 木偶\",\"22:05 - 22:20 如何打开社交面 by 伟楷\",\"22:20 - 22:30 Soul 作者 猫大人 总结与 展望 by 猫大人\"]},\"12\":{\"h\":\"Dromara Soul源码01期阅读分享会01\",\"t\":[\"Dromara 线上活动\"]},\"13\":{\"h\":\"Dromara 源码阅读（Soul 2021 首次活动）\",\"t\":[\"日期：2021 年 1 月 24 日，星期日\",\"时间：15:00 – 17:00\",\"地点：线上腾讯会议室\"]},\"14\":{\"h\":\"活动详情\",\"t\":[\"15:00 - 15:10 开场介绍梦码分享流程 by kimming & 崔\",\"15:10 - 15:25 Soul 数据同步之 websocket by 婷\",\"15:25 - 15:50 Http 探活分享 by 朱明\",\"15:50 - 16:10 基于 Sofa-Rpc 协议的分析 by 东东\",\"16:10 - 16:25 Metrics 监控 by 葛天野\",\"16:25 - 16:40 Http 长轮询分享 by 杜宇航\",\"16:40 - 16:55 数据同步整体架构分享与介绍 by 夏文涛\",\"16:55 - 17:05 微内核架构分享 by 沈祥俊\",\"17:05 - 17:20 分享读源码的心得与感悟 by 金泽\",\"17:20 - 17:30 Soul 作者 猫大人 总结与 社区发展 展望 by 猫大人\"]},\"15\":{\"h\":\"关于我们\"},\"16\":{\"h\":\"我们的愿景\",\"t\":[\"为往圣继绝学，一个人或许能走的更快，但一群人会走的更远,让每一位开源爱好者，体会到开源的快乐。\"]},\"17\":{\"h\":\"社区口号\",\"t\":[\"技术栈全面开源共建、保持社区中立、和谐快乐做开源 。\"]},\"18\":{\"h\":\"官网\",\"t\":[\"https://dromara.org 是 Dromara 开源社区官方网站。\"]},\"19\":{\"h\":\"社区项目\",\"t\":[\"目前已加入 Dromara 社区的项目包括：\",\"项目名称\",\"关注量\",\"项目介绍\",\"高性能一站式分布式事务解决方案。\",\"强一致性分布式事务解决方案。\",\"可靠消息分布式事务解决方案。\",\"轻量级的分布式日志标记追踪神器。\",\"高层的、极简的轻量级 HTTP 调用 API 框架。\",\"一个使 Java 保持甜美的工具类库。\",\"业界领先的企业级开源 IAM 身份管理和身份认证产品。\",\"无侵入分布式监控，致力于应用级监控，帮助开发人员快速定位问题。\",\"专门用于图片合成的工具。\",\"一款简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件。\",\"史上功能最全的 Java 权限认证框架！。\",\"面向 REST API 的高性能认证鉴权框架。\",\"企业生产级百亿日 PV 高可用可拓展的 RPC 框架。\",\"点击查看全部项目\"]},\"20\":{\"h\":\"加入组织\",\"t\":[\"Dromara 社区欢迎所有热爱开源的小伙伴加入，可以点击组织界面 【申请加入组织】链接进行申请，也可以发送电子邮件至 xiaoyu@dromara.org 联系我们。\"]},\"21\":{\"h\":\"组织责任\",\"t\":[\"组织不得从事违法或损人利己的事情\",\"负责社区新旧捐赠项目评审工作\",\"负责新旧社区成员管理工作\",\"负责社区下所有孵化项目推广，宣传和项目版本更新日志维护\",\"负责统筹和执行社区组织的活动\"]},\"22\":{\"h\":\"行为准则\",\"t\":[\"捐赠项目准则：所有捐赠给 Dromara 社区的项目均保留原有项目的所有权利及商业化行为，Dromara 社区除协助推广、宣传、运营不做任何干涉，但捐赠项目不得从事违法行为或诋毁 Dromara 社区名声。\",\"社区成员准则：不得从事违法或损人利己的事情。\",\"社区项目：不得从事违法或损人利己的事情\"]},\"23\":{\"h\":\"项目捐赠\",\"t\":[\"Dromara 开源社区组织对捐赠项目有以下最基本条件要求：\",\"项目必须是原创且不能是 Fork 版本。\",\"项目必须是完整的应用解决方案。\",\"项目必须有良好的代码注释和不断完善的使用文档。\",\"项目至少在近 2 个月内有实际有效的代码提交记录。\",\"项目必须得到 dromara 社区组织评委会的认可。\",\"优先考虑 Gitee 推荐项目或已获得 GVP 的项目。（GVP 项目需联系 Gitee 官方人员取消 GVP 后才能转移到组织，转移成功后恢复 GVP）\",\"优选考虑 容器工具、微服务框架和工具、分布式事务、分布式中间件、大数据处理、人工智能、IoT 物联网、开发/测试/运维相关工具链等领域项目。\",\"点击查看项目捐赠\"]},\"24\":{\"h\":\"赞助/支持\",\"t\":[\"Dromara 社区能够持续运营和提供更加优质的服务离不开大家的支持。如果想成为 Dromara 社区赞助商或支持者，请考虑支持：\",\"Dromara 社区承诺将收到的所有赞助支持资金完全公开化，且后续资金用途仅限于 Dromara 社区运营支出。\",\"点击查看全部赞助商\"]},\"25\":{\"h\":\"联系我们\",\"t\":[\"捐赠项目/加入组织：xiaoyu@dromara.org\"]},\"26\":{\"h\":\"博客\"},\"27\":{\"h\":\"Hmily：轻松搞定高并发分布式事务\"},\"28\":{\"h\":\"Hmily 高并发事务处理\",\"t\":[\"开始先打个小小的广告 Hmily 在参加开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索 Hmily 帮忙投下票,在第 11 横排第二个，感谢大家！ 也欢迎大家关注，或者提交 pr，让 Hmily 变的更好，更完美。 gitHub: [https://github.com/yu199195/hmily] gitee: [https://gitee.com/dromara/hmily]\",\"接下来回答一下 社区的一些问题，和大家一些疑惑的地方！\"]},\"29\":{\"h\":\"1. Hmily 的性能问题？\",\"t\":[\"答：Hmily 是采用 AOP 切面的方式与你的 RPC 方法绑定，无非就是在你 RPC 调用的时候，保存了日志（通过异步 disruptor），传递了一些参数。现在 confrim，cancel 也都为异步的调用，因此其性能与你的 rpc 性能一样。记住 Hmily 不生产事务，Hmily 只是分布式事务的搬运工。之前 Hmily 在 AOP 切面加了一把锁，导致了性能下降，也就是 Spring cloud 中国社区做的那篇文章。现在已经全部修复，并且全部异步化。其实那么测试时不合理的，因为是压测的 demo，都是默认的配置。下文我会讲解，怎么样才能提高 Hmiy 性能。\"]},\"30\":{\"h\":\"2. 关于 RPC 调用超时 Hmily 是怎么处理的？\",\"t\":[\"答： 我们支持在分布式环境中调用一个 RPC 方法，如果超时了。比如 dubbo 设置的超时时间是 100ms,可能你的方法用了 140ms,但是你的方法是执行成功了的。但是对调用方来说，你是失败的。这个时候需要回滚。所以 Hmily 的做法是。调用者认为你是失败的，不会将加入的回滚调用链条中。因此超时的 rpc 接口方，进行自身的回滚。会有一个定时任务来进行回滚，因为日志状态是 try 阶段，会调用 cancel 方法进行回滚，从而到达最终一致性！\"]},\"31\":{\"h\":\"3.Hmily 支持集群部署的问题？以及集群环境中，定时任务日志恢复的问题？\",\"t\":[\"答：Hmily 是和你的应用 AOP 切面绑定在一起的，天然支持集群。集群环境中定时恢复问题，其实几乎没有，除非你的集群同时一下挂掉，才会有这个问题。当你集群同时挂掉，在恢复的时候，日志会有一个 version 字段，更新成功的，才会去进行恢复。\"]},\"32\":{\"h\":\"4.Hmily 是异步保存日志的，那么很极端情况下（代码刚好执行到这一行,然后 jvm 退出，断电啦什么的），日志还没保存那怎么处理呢？\",\"t\":[\"答:这种想法的，肯定是没看源码，或者是看了没怎么看懂。在 AOP 切面中，会先进行日志的异步保存，注意状态是 PRE_TRY。在 try 执行完成后，更新为 try。就算存在可能你说的什么断电，什么你在打断电调试，然后 kill 服务之类的。（Mysql 我都可以让他事务失效，你信不信？）我只能说，不要花大力气去解决那些偶然的事情，最好的解决办法是不解决它。 Hmily 针对高并发时候的参数配置调优。 可能这部门内容针对熟悉 Hmily 的人来说，不熟悉的也没关系。直接上 github 上看相关文档就好。 hmily 支持 Spring bean xml 方式的配置，同时也支持 spring boot start yml 方式的配置。\",\" <bean id=\\\"hmilyTransactionBootstrap\\\" class=\\\"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap\\\"> <property name=\\\"serializer\\\" value=\\\"kryo\\\"/> <property name=\\\"recoverDelayTime\\\" value=\\\"120\\\"/> <property name=\\\"retryMax\\\" value=\\\"3\\\"/> <property name=\\\"loadFactor\\\" value=\\\"2\\\"/> <property name=\\\"scheduledDelay\\\" value=\\\"120\\\"/> <property name=\\\"scheduledThreadMax\\\" value=\\\"4\\\"/> <property name=\\\"bufferSize\\\" value=\\\"4096\\\"/> <property name=\\\"consumerThreads\\\" value=\\\"32\\\"/> <property name=\\\"started\\\" value=\\\"false\\\"/> <property name=\\\"asyncThreads\\\" value=\\\"32\\\"/> <property name=\\\"repositorySupport\\\" value=\\\"db\\\"/> <property name=\\\"tccDbConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccDbConfig\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> </bean> \",\"serializer :这里我推荐使用是 kroy。当然 hmily 也支持 hessian,protostuff,jdk。在我们测试中表现为: kroy>hessian>protostuff>jdk\",\"recoverDelayTime :定时任务延迟时间（单位是秒，默认 120。这个参数只是要大于你的 rpc 调用的超时时间设置。\",\"retryMax : 最大重复次数，默认 3 次。当你的服务 down 机，定时任务会执行 retryMax 次数去执行你的 cancel 还是 confrim。\",\"bufferSize: disruptor 的 bufferSize,当高并发的时候，可以调大。注意是 2n 次方\",\"consumerThreads distuptor 消费线程数量,高并发的时候，可以调大。\",\"started: 注意在是发起方的时候，把此属性设置为 true。参与方为 false。\",\"asyncThreads 异步执行 confirm 和 cancel 线程池线程的大小，高并发的时候请调大\",\"接下来是最重要的事务日志的存储 在我们的压测中，推荐使用 mongo。表现为 mongodb>redis 集群>mysql>zookeeper\",\"如果你采用 mongodb 存储日志,配置如下(url 可以配置成 mongdb 集群的 url)\",\" <property name=\\\"repositorySupport\\\" value=\\\"mongodb\\\"/> <property name=\\\"tccMongoConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccMongoConfig\\\"> <property name=\\\"mongoDbUrl\\\" value=\\\"192.168.1.68:27017\\\"/> <property name=\\\"mongoDbName\\\" value=\\\"happylife\\\"/> <property name=\\\"mongoUserName\\\" value=\\\"xiaoyu\\\"/> <property name=\\\"mongoUserPwd\\\" value=\\\"123456\\\"/> </bean> </property> \",\"如果你采用 redis 存储日志,配置如下：\",\"redis 单节点\",\" <property name=\\\"repositorySupport\\\" value=\\\"redis\\\" /> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"hostName\\\" value=\\\"192.168.1.68\\\"/> <property name=\\\"port\\\" value=\\\"6379\\\"/> <property name=\\\"password\\\" value=\\\"\\\"/> </bean> </property> \",\"redis 哨兵模式集群:\",\"<property name=\\\"repositorySupport\\\" value=\\\"redis\\\"/> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"masterName\\\" value=\\\"aaa\\\"/> <property name=\\\"sentinel\\\" value=\\\"true\\\"/> <property name=\\\"sentinelUrl\\\" value=\\\"192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> \",\"redis 集群:\",\"<property name=\\\"repositorySupport\\\" value=\\\"redis\\\"/> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"cluster\\\" value=\\\"true\\\"/> <property name=\\\"clusterUrl\\\" value=\\\"192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> \",\"如果你采用 zookeeper 存储日志,配置如下：\",\" <property name=\\\"repositorySupport\\\" value=\\\"zookeeper\\\"/> <property name=\\\"tccZookeeperConfig\\\"> <bean class=\\\"om.hmily.tcc.common.config.TccZookeeperConfig\\\"> <property name=\\\"host\\\" value=\\\"192.168.1.73:2181\\\"/> <property name=\\\"sessionTimeOut\\\" value=\\\"100000\\\"/> <property name=\\\"rootPath\\\" value=\\\"/tcc\\\"/> </bean> </property> \",\"数据库的配置在上面已经有了，使用 file 方式的存储我就不介绍了.\",\"以上就是今天分享的内容，一个注解，几行配置轻轻松松搞定高并发分布式事务！\"]},\"33\":{\"h\":\"Hmily：高性能异步分布式事务TCC框架\",\"t\":[\"无缝集成 Spring,Spring boot start。\",\"无缝集成 Dubbo,SpringCloud,Motan 等 rpc 框架。\",\"多种事务日志的存储方式（redis，mongdb,mysql 等）。\",\"多种不同日志序列化方式（Kryo,protostuff,hession）。\",\"事务自动恢复。\",\"支持内嵌事务的依赖传递。\",\"代码零侵入,配置简单灵活。\"]},\"34\":{\"h\":\"1.采用 disruptor 进行事务日志的异步读写（disruptor 是一个无锁，无 GC 的并发编程框架）\",\"t\":[\"package com.hmily.tcc.core.disruptor.publisher; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.common.enums.EventTypeEnum; import com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory; import com.hmily.tcc.core.coordinator.CoordinatorService; import com.hmily.tcc.core.disruptor.event.HmilyTransactionEvent; import com.hmily.tcc.core.disruptor.factory.HmilyTransactionEventFactory; import com.hmily.tcc.core.disruptor.handler.HmilyConsumerDataHandler; import com.hmily.tcc.core.disruptor.translator.HmilyTransactionEventTranslator; import com.lmax.disruptor.BlockingWaitStrategy; import com.lmax.disruptor.IgnoreExceptionHandler; import com.lmax.disruptor.RingBuffer; import com.lmax.disruptor.dsl.Disruptor; import com.lmax.disruptor.dsl.ProducerType; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import java.util.concurrent.Executor; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; /** * event publisher. * * @author xiaoyu(Myth) */ @Component public class HmilyTransactionEventPublisher implements DisposableBean { private Disruptor<HmilyTransactionEvent> disruptor; private final CoordinatorService coordinatorService; @Autowired public HmilyTransactionEventPublisher(final CoordinatorService coordinatorService) { this.coordinatorService = coordinatorService; } /** * disruptor start. * * @param bufferSize this is disruptor buffer size. * @param threadSize this is disruptor consumer thread size. */ public void start(final int bufferSize, final int threadSize) { disruptor = new Disruptor<>(new HmilyTransactionEventFactory(), bufferSize, r -> { AtomicInteger index = new AtomicInteger(1); return new Thread(null, r, \\\"disruptor-thread-\\\" + index.getAndIncrement()); }, ProducerType.MULTI, new BlockingWaitStrategy()); final Executor executor = new ThreadPoolExecutor(threadSize, threadSize, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), HmilyThreadFactory.create(\\\"hmily-log-disruptor\\\", false), new ThreadPoolExecutor.AbortPolicy()); HmilyConsumerDataHandler[] consumers = new HmilyConsumerDataHandler[threadSize]; for (int i = 0; i < threadSize; i++) { consumers[i] = new HmilyConsumerDataHandler(executor, coordinatorService); } disruptor.handleEventsWithWorkerPool(consumers); disruptor.setDefaultExceptionHandler(new IgnoreExceptionHandler()); disruptor.start(); } /** * publish disruptor event. * * @param tccTransaction {@linkplain com.hmily.tcc.common.bean.entity.TccTransaction } * @param type {@linkplain EventTypeEnum} */ public void publishEvent(final TccTransaction tccTransaction, final int type) { final RingBuffer<HmilyTransactionEvent> ringBuffer = disruptor.getRingBuffer(); ringBuffer.publishEvent(new HmilyTransactionEventTranslator(type), tccTransaction); } @Override public void destroy() { disruptor.shutdown(); } } \",\"在这里 bufferSize 的默认值是 4094 * 4,用户可以根据自行的情况进行配置。\",\" HmilyConsumerDataHandler[] consumers = new HmilyConsumerDataHandler[threadSize]; for (int i = 0; i < threadSize; i++) { consumers[i] = new HmilyConsumerDataHandler(executor, coordinatorService); } disruptor.handleEventsWithWorkerPool(consumers); \",\"这里是采用多个消费者去处理队列里面的任务。\"]},\"35\":{\"h\":\"2.异步执行 confrim,cancel 方法。\",\"t\":[\"package com.hmily.tcc.core.service.handler; import com.hmily.tcc.common.bean.context.TccTransactionContext; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.common.enums.TccActionEnum; import com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory; import com.hmily.tcc.core.service.HmilyTransactionHandler; import com.hmily.tcc.core.service.executor.HmilyTransactionExecutor; import org.aspectj.lang.ProceedingJoinPoint; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import java.util.concurrent.Executor; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * this is transaction starter. * * @author xiaoyu */ @Component public class StarterHmilyTransactionHandler implements HmilyTransactionHandler { private static final int MAX_THREAD = Runtime.getRuntime().availableProcessors() << 1; private final HmilyTransactionExecutor hmilyTransactionExecutor; private final Executor executor = new ThreadPoolExecutor(MAX_THREAD, MAX_THREAD, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), HmilyThreadFactory.create(\\\"hmily-execute\\\", false), new ThreadPoolExecutor.AbortPolicy()); @Autowired public StarterHmilyTransactionHandler(final HmilyTransactionExecutor hmilyTransactionExecutor) { this.hmilyTransactionExecutor = hmilyTransactionExecutor; } @Override public Object handler(final ProceedingJoinPoint point, final TccTransactionContext context) throws Throwable { Object returnValue; try { TccTransaction tccTransaction = hmilyTransactionExecutor.begin(point); try { //execute try returnValue = point.proceed(); tccTransaction.setStatus(TccActionEnum.TRYING.getCode()); hmilyTransactionExecutor.updateStatus(tccTransaction); } catch (Throwable throwable) { //if exception ,execute cancel final TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction(); executor.execute(() -> hmilyTransactionExecutor .cancel(currentTransaction)); throw throwable; } //execute confirm final TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction(); executor.execute(() -> hmilyTransactionExecutor.confirm(currentTransaction)); } finally { hmilyTransactionExecutor.remove(); } return returnValue; } } \",\"当 try 方法的 AOP 切面有异常的时候，采用线程池异步去执行 cancel，无异常的时候去执行 confrim 方法。\"]},\"36\":{\"h\":\"这里有人可能会问：那么 cancel 方法异常，或者 confrim 方法异常怎么办呢？\",\"t\":[\"答：首先这种情况是非常罕见的，因为你上一面才刚刚执行完 try。其次如果出现这种情况，在 try 阶段会保存好日志，Hmily 有内置的调度线程池来进行恢复，不用担心。\"]},\"37\":{\"h\":\"有人又会问：这里如果日志保存异常了怎么办？\",\"t\":[\"答：首先这又是一个牛角尖问题，首先日志配置的参数，在框架启动的时候，会要求你配置的。其次，就算在运行过程中日志保存异常，这时候框架会取缓存中的，并不会影响程序正确执行。最后，万一日志保存异常了，系统又在很极端的情况下 down 机了，恭喜你，你可以去买彩票了，最好的解决办法就是不去解决它。\"]},\"38\":{\"h\":\"3.ThreadLocal 缓存的使用。\",\"t\":[\" /** * transaction begin. * * @param point cut point. * @return TccTransaction */ public TccTransaction begin(final ProceedingJoinPoint point) { LogUtil.debug(LOGGER, () -> \\\"......hmily transaction！start....\\\"); //build tccTransaction final TccTransaction tccTransaction = buildTccTransaction(point, TccRoleEnum.START.getCode(), null); //save tccTransaction in threadLocal CURRENT.set(tccTransaction); //publishEvent hmilyTransactionEventPublisher.publishEvent(tccTransaction, EventTypeEnum.SAVE.getCode()); //set TccTransactionContext this context transfer remote TccTransactionContext context = new TccTransactionContext(); //set action is try context.setAction(TccActionEnum.TRYING.getCode()); context.setTransId(tccTransaction.getTransId()); context.setRole(TccRoleEnum.START.getCode()); TransactionContextLocal.getInstance().set(context); return tccTransaction; } \",\"首先要理解，threadLocal 保存的发起者一方法的事务信息。这个很重要，不要会有点懵逼。rpc 的调用，会形成调用链，进行保存。\",\" /** * add participant. * * @param participant {@linkplain Participant} */ public void enlistParticipant(final Participant participant) { if (Objects.isNull(participant)) { return; } Optional.ofNullable(getCurrentTransaction()) .ifPresent(c -> { c.registerParticipant(participant); updateParticipant(c); }); } \"]},\"39\":{\"h\":\"4.GuavaCache 的使用\",\"t\":[\"package com.hmily.tcc.core.cache; import com.google.common.cache.CacheBuilder; import com.google.common.cache.CacheLoader; import com.google.common.cache.LoadingCache; import com.google.common.cache.Weigher; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.core.coordinator.CoordinatorService; import com.hmily.tcc.core.helper.SpringBeanUtils; import org.apache.commons.lang3.StringUtils; import java.util.Optional; import java.util.concurrent.ExecutionException; /** * use google guava cache. * @author xiaoyu */ public final class TccTransactionCacheManager { private static final int MAX_COUNT = 10000; private static final LoadingCache<String, TccTransaction> LOADING_CACHE = CacheBuilder.newBuilder().maximumWeight(MAX_COUNT) .weigher((Weigher<String, TccTransaction>) (string, tccTransaction) -> getSize()) .build(new CacheLoader<String, TccTransaction>() { @Override public TccTransaction load(final String key) { return cacheTccTransaction(key); } }); private static CoordinatorService coordinatorService = SpringBeanUtils.getInstance().getBean(CoordinatorService.class); private static final TccTransactionCacheManager TCC_TRANSACTION_CACHE_MANAGER = new TccTransactionCacheManager(); private TccTransactionCacheManager() { } /** * TccTransactionCacheManager. * * @return TccTransactionCacheManager */ public static TccTransactionCacheManager getInstance() { return TCC_TRANSACTION_CACHE_MANAGER; } private static int getSize() { return (int) LOADING_CACHE.size(); } private static TccTransaction cacheTccTransaction(final String key) { return Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(new TccTransaction()); } /** * cache tccTransaction. * * @param tccTransaction {@linkplain TccTransaction} */ public void cacheTccTransaction(final TccTransaction tccTransaction) { LOADING_CACHE.put(tccTransaction.getTransId(), tccTransaction); } /** * acquire TccTransaction. * * @param key this guava key. * @return {@linkplain TccTransaction} */ public TccTransaction getTccTransaction(final String key) { try { return LOADING_CACHE.get(key); } catch (ExecutionException e) { return new TccTransaction(); } } /** * remove guava cache by key. * @param key guava cache key. */ public void removeByKey(final String key) { if (StringUtils.isNotEmpty(key)) { LOADING_CACHE.invalidate(key); } } } \",\"在参与者中，我们使用了 ThreadLocal，而在参与者中，我们为什么不使用呢？ 其实原因有二点：首先.因为 try，和 confrim 会不在一个线程里，会造成 ThreadLocal 失效。当考虑到 RPC 集群的时候，可能会负载到不同的机器上。这里有一个细节就是：\",\" private static TccTransaction cacheTccTransaction(final String key) { return Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(new TccTransaction()); } \",\"当 GuavaCache 里面没有的时候，会去查询日志返回，这样就保证了对集群环境的支持。\"]},\"40\":{\"h\":\"以上 4 点造就了 Hmily 是一个异步的高性能分布式事务 TCC 框架的原因。\"},\"41\":{\"h\":\"Hmily 如何使用？（ https://github.com/yu199195/hmily/tree/master/hmily-tcc-demo）\",\"t\":[\"首先因为之前的包命名问题，框架包并没有上传到 maven 中心仓库，固需要使用者自己拉取代码，编译 deploy 到自己的私服。\"]},\"42\":{\"h\":\"1.dubbo 用户\",\"t\":[\"在你的 Api 接口项目引入\",\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-annotation</artifactId> <version>{you version}</version> </dependency> \",\"在你的服务提供者项目引入\",\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-dubbo</artifactId> <version>{you version}</version> </dependency> \",\"配置启动 bean\",\" <!-- Aspect 切面配置，是否开启AOP切面--> <aop:aspectj-autoproxy expose-proxy=\\\"true\\\"/> <!--扫描框架的包--> <context:component-scan base-package=\\\"com.hmily.tcc.*\\\"/> <!--启动类属性配置--> <bean id=\\\"hmilyTransactionBootstrap\\\" class=\\\"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap\\\"> <property name=\\\"serializer\\\" value=\\\"kryo\\\"/> <property name=\\\"recoverDelayTime\\\" value=\\\"120\\\"/> <property name=\\\"retryMax\\\" value=\\\"3\\\"/> <property name=\\\"scheduledDelay\\\" value=\\\"120\\\"/> <property name=\\\"scheduledThreadMax\\\" value=\\\"4\\\"/> <property name=\\\"repositorySupport\\\" value=\\\"db\\\"/> <property name=\\\"tccDbConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccDbConfig\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> </bean> \",\"当然配置属性很多，这里我只给出了 demo，具体可以参考这个类：\",\"package com.hmily.tcc.common.config; import com.hmily.tcc.common.enums.RepositorySupportEnum; import lombok.Data; /** * hmily config. * * @author xiaoyu */ @Data public class TccConfig { /** * Resource suffix this parameter please fill in about is the transaction store path. * If it's a table store this is a table suffix, it's stored the same way. * If this parameter is not filled in, the applicationName of the application is retrieved by default */ private String repositorySuffix; /** * log serializer. * {@linkplain com.hmily.tcc.common.enums.SerializeEnum} */ private String serializer = \\\"kryo\\\"; /** * scheduledPool Thread size. */ private int scheduledThreadMax = Runtime.getRuntime().availableProcessors() << 1; /** * scheduledPool scheduledDelay unit SECONDS. */ private int scheduledDelay = 60; /** * retry max. */ private int retryMax = 3; /** * recoverDelayTime Unit seconds * (note that this time represents how many seconds after the local transaction was created before execution). */ private int recoverDelayTime = 60; /** * Parameters when participants perform their own recovery. * 1.such as RPC calls time out * 2.such as the starter down machine */ private int loadFactor = 2; /** * repositorySupport. * {@linkplain RepositorySupportEnum} */ private String repositorySupport = \\\"db\\\"; /** * disruptor bufferSize. */ private int bufferSize = 4096 * 2 * 2; /** * this is disruptor consumerThreads. */ private int consumerThreads = Runtime.getRuntime().availableProcessors() << 1; /** * db config. */ private TccDbConfig tccDbConfig; /** * mongo config. */ private TccMongoConfig tccMongoConfig; /** * redis config. */ private TccRedisConfig tccRedisConfig; /** * zookeeper config. */ private TccZookeeperConfig tccZookeeperConfig; /** * file config. */ private TccFileConfig tccFileConfig; } \"]},\"43\":{\"h\":\"SpringCloud 用户\",\"t\":[\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-springcloud</artifactId> <version>{you version}</version> </dependency> \"]},\"44\":{\"h\":\"Motan 用户\",\"t\":[\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-motan</artifactId> <version>{you version}</version> </dependency> \"]},\"45\":{\"h\":\"hmily-spring-boot-start 那这个就更容易了，只需要根据你的 RPC 框架去引入不同的 jar 包。\",\"t\":[\"如果你是 dubbo 用户，那么引入\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-dubbo</artifactId> <version>${your version}</version> </dependency> \",\"如果你是 SpringCloud 用户，那么引入\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-springcloud</artifactId> <version>${your version}</version> </dependency> \",\"如果你是 Motan 用户，那么引入:\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-motan</artifactId> <version>${your version}</version> </dependency> \",\"然后在你的 yml 里面进行如下配置：\",\"hmily: tcc: serializer: kryo recoverDelayTime: 128 retryMax: 3 scheduledDelay: 128 scheduledThreadMax: 10 repositorySupport: db tccDbConfig: driverClassName: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8 username: root password: 123456 #repositorySupport : redis #tccRedisConfig: #masterName: mymaster #sentinel : true #sentinelUrl : 192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379 #password : foobaredbbexONE123 # repositorySupport : zookeeper # host : 92.168.1.73:2181 # sessionTimeOut : 100000 # rootPath : /tcc # repositorySupport : mongodb # mongoDbUrl : 192.168.1.68:27017 # mongoDbName : happylife # mongoUserName : xiaoyu # mongoUserPwd : 123456 # repositorySupport : file # path : /account # prefix : account \",\"就这么简单，然后就可以在接口方法上加上@Tcc 注解，进行愉快的使用了。\",\"当然因为篇幅问题，很多东西只是简单的描述，尤其是逻辑方面的。\",\"如果你感兴趣，可以在 github 上进行 star 和 fork，也可以加微信和 QQ 群进行交流。\",\"下面是 github 地址：https://github.com/yu199195/hmily\",\"最后再次感谢大家，如果有兴趣的朋友，可以提供你的优秀牛逼轰轰的 PR。。。。\"]},\"46\":{\"h\":\"Soul网关学习Admin源码分析\",\"t\":[\"页面操作源码分析\",\"在分析源码之前，先看下图，页面显示加载的插件列表会对应后端的请求，根据后端请求，找到对应的 controller 类 然后找到对应的方法，在上图可以看到这里是访问 plugin 中默认为空的 mapping，传入到分页相关的参数，然后去查询数据库中对应的插件记录 数据库中对应的表为下图所示，divide 状态是启用，在上一篇中，就是用这个插件来测试网关 同时请求的还有选择器，请求的 controller 见下图。在上篇的演示中，我们直接在页面把选择器中的条件 CRUD，可以实时反应到网关中去，而不需要重启网关，所以这里除了 query 方法中，增加、删除、和修改方法中,在保存到数据库之后都有一个 publishEvent 方法。就是这个事件方法，可以让用户直接在 soul 后台配置规则，从而达到时时生效的目地\",\"public int createOrUpdate(final SelectorDTO selectorDTO) { int selectorCount; SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO); List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions(); if (StringUtils.isEmpty(selectorDTO.getId())) { selectorCount = selectorMapper.insertSelective(selectorDO); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); selectorConditionMapper.insertSelective(SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO)); }); } else { selectorCount = selectorMapper.updateSelective(selectorDO); //delete rule condition then add selectorConditionMapper.deleteByQuery(new SelectorConditionQuery(selectorDO.getId())); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); SelectorConditionDO selectorConditionDO = SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO); selectorConditionMapper.insertSelective(selectorConditionDO); }); } publishEvent(selectorDO, selectorConditionDTOs); return selectorCount; } \",\"与 soul-bootstrap 数据同步(websocket)源码分析\",\"之前介绍了 admin 页面操作之后把数据保存数据库，然后用了 spring 自带的响应式编程把数据同步到 bootstrap 项目，以达到动态刷新网关规则及插件，而不用添加配置后去重启网关。 当 soul-bootstrap 启动时，看日志会打出来这么一段\",\"2021-01-21 00:33:39.620 INFO 14276 --- [0.0-9095-exec-5] o.d.s.a.l.websocket.WebsocketCollector : websocket on open successful.... \",\"那么问题来了，它用 websocket 和谁连接了，又是怎么连接的？下面通过找到打日志的代码，再通过打断点的方式来调试一下，这里是打日志出来的地方 先来分析一下这个代码：\",\"从 websocketConfig 这个配置里面拿到配的请求地址，这个配置文件当然是在下图的这个地方配的\",\"拿到这个配置地址后，创建了一个定时的线程池，线程池大小为 urls.length，线程名称前缀为\\\"websocket-connect\\\"的守护线程。这里为什么要创建守护线程，因为这只是为了保证 bootstrap 和 admin 的 websocket 连接不断，类似于心跳的作用，所以用守护线程是最好的\",\"根据创建的 client 端，一个一个的去请求配置文件配的地址，然后打印之前所找到的日志\",\"后面就启动线程去判断 client 是否关闭，如果关闭就会去重新连接(初始间隔 10 秒，然后每 30 秒去执行一次检查，所以如果你看到控制台有时会打印多个连接成功的日志，说明重连了)\",\"我们再来看看在 admin 后台操作的数据是怎么同步到 bootstrap 中的呢，之前有说过，在后台保存或者更新数据之后，会调用 publishEvent 方法，这个是 spring 自带响应式编程的方法，既然是响应式，那就是基于事件的，那就得有 listener\",\"一找果不其然，上图画红框的地方是不是很眼熟，没错，监听器，和 websocket 相关的监听器，如果还是有点看不明白监听和之前的 publishEvent 有什么关系，那就把监听器里的代码打上断点，调试一把。我这里为了方便，就点了这个同步所有数据 这里进的是 DataChangedEventDispatcher 这个类，调用了 event 相关的方法，在左下角这个地方，是不是看到了熟悉了方法了，没错就是上面说的 publishEvent\",\"然后会跳转到 WebsocketDataChangedListener 这个类中，这里重点看一下在调试方法中 send 方法\",\"这里通过 send 方法把更新的数据发到 bootstrap 中，到此 admin 怎么同步数据到 bootstrap 中就真相大白了\",\"与 soul-bootstrap 数据同步(zookeeper)源码分析 话不多说，先上图，把 websocket 的配置先注释掉，打开 zookeeper 的配置，前提是把本地或者远程的 zookeeper 服务打开，然后启动 soul-admin 首先进入了 ZookeeperDataInit 类的 run 方法，这个方法执行完之后，奇怪的一点是跳到了 WebsocketDataChangedListener 类中去了 这一点没弄明白，等这个类里面的 onPluginChanged 方法执行完了之后，回到了 ZookeeperDataChangedListener 类里来了 如果不是删除的话，就会更新 zkNode 节点数据 更新 zk 节点的方法 而且之后的 onSelectorChanged、onMetaDataChanged 、onRuleChanged 方法都会先走 WebsocketDataChangedListener 类里面相对应的方法，然后才会进 ZookeeperDataChangedListener 类的方法。如果插件数据有更改，也是通过上面的步骤重新来一遍。 这里面同步数据会进两个 Listener 类的问题到这还没解决，突然想到在 pom 文件里面有对 websocket 的依赖，因为 application.yml 文件中已经把 websocket 这个配置注释掉了(不是把 enable=false)，先把这个依赖注释掉再看，然后看着代码编译都不通过了。还有一个办法是把 websocket 改成不启用，改完重启发现不会再跳到 websocket 相关的类中了\",\"与 soul-bootstrap 数据同步(http)源码分析\",\"老规矩，改 yml 文件中的配置，然后找到对应的 listener 类打断点调试，这里如果是用 http 的话 websocket 相关的类还是会被访问到，所以这里一样的不能直接注释\",\"下面来看看里面的代码： 这里一个构造方法，里面实例化了一个 clients 数组阻塞队列，大小为 1024。一个定时任务线程池，线程数为 1，名字前缀为 \\\"long-polling\\\" 的后台守护线程，看名字可以知道，这是用来长轮询的。一个相关的属性配置 初始化前方法里面启动了定时线程，间隔 5 分钟之后，每 5 分钟执行一次，去执行 refreshLocalCache 这个刷新本地缓存的方法\",\" private void refreshLocalCache() { this.updateAppAuthCache(); this.updatePluginCache(); this.updateRuleCache(); this.updateSelectorCache(); this.updateMetaDataCache(); } \",\"如果是手动点同步数据时，会去执行下面这些相关的方法，也是通过定时线程池来执行，只不过是立即执行 五分钟后，执行相关的刷新方法，打印的日志\",\"2021-01-22 01:00:19.007 INFO 20800 --- [-long-polling-2] a.l.h.HttpLongPollingDataChangedListener : http sync strategy refresh config start. 2021-01-22 01:00:19.010 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[APP_AUTH], old: {group='APP_AUTH', md5='d751713988987e9331980363e24189ce', lastModifyTime=1611248118794}, updated: {group='APP_AUTH', md5='d751713988987e9331980363e24189ce', lastModifyTime=1611248419010} 2021-01-22 01:00:19.012 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[PLUGIN], old: {group='PLUGIN', md5='70b269257d47f0f6404ae7b7e976d8f1', lastModifyTime=1611248295740}, updated: {group='PLUGIN', md5='70b269257d47f0f6404ae7b7e976d8f1', lastModifyTime=1611248419012} 2021-01-22 01:00:19.069 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[RULE], old: {group='RULE', md5='5811b56257e31109621976d39fc226aa', lastModifyTime=1611248301607}, updated: {group='RULE', md5='5811b56257e31109621976d39fc226aa', lastModifyTime=1611248419069} 2021-01-22 01:00:19.075 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[SELECTOR], old: {group='SELECTOR', md5='70bad5ebb1cf6e3fc55278eef2df42f3', lastModifyTime=1611248299419}, updated: {group='SELECTOR', md5='70bad5ebb1cf6e3fc55278eef2df42f3', lastModifyTime=1611248419075} 2021-01-22 01:00:19.077 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[META_DATA], old: {group='META_DATA', md5='5f79d821e3b601330631a2d53294fb34', lastModifyTime=1611248302571}, updated: {group='META_DATA', md5='5f79d821e3b601330631a2d53294fb34', lastModifyTime=1611248419077} 2021-01-22 01:00:19.077 INFO 20800 --- [-long-polling-2] a.l.h.HttpLongPollingDataChangedListener : http sync strategy refresh config success. \",\"soul 中还有其它方法同步数据，这些后面有精力再分析，soul-admin 源码先分析到这，如果后续再分析的话，会另外再写一遍文章，这里就先到此为止\",\"soul-admin 中还有功能现在还没有使用到，还有很多好玩的东西，这篇会持续更新，到用到的时候再去具体分析里面的源码。\",\"2021-01-20 分析了 soul-admin 用 websocket 同步数据到 soul-bootstrap 中\",\"2021-01-21 分析了 soul-admin 用 zookeeper 同步数据到 soul-bootstrap 中\",\"2021-01-21 分析了 soul-admin 用 http 同步数据到 soul-bootstrap 中\"]},\"47\":{\"h\":\"Soul网关学习(1)环境配置\",\"t\":[\"soul is a High-Performance Java API Gateway\",\"GitHub：https://github.com/dromara/soul\",\"官方文档：https://dromara.org/zh-cn/docs/soul/soul.html\"]},\"48\":{\"h\":\"1. 源代码准备\"},\"49\":{\"h\":\"1.1. fork dromara/soul 源代码至自己的仓库 cchenxi/soul\"},\"50\":{\"h\":\"1.2. clone 自己仓库中的 soul 源代码至本地\",\"t\":[\"git clone https://github.com/cchenxi/soul.git \"]},\"51\":{\"h\":\"1.3.使用 idea 打开 soul 源代码\"},\"52\":{\"h\":\"1.4.编译 soul 源代码\",\"t\":[\"执行以下 maven 命令，等待编译完成\",\"-w1723\",\"mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true \"]},\"53\":{\"h\":\"2. 启动 soul\"},\"54\":{\"h\":\"2.1. 启动 soul-admin 模块\",\"t\":[\"soul-admin是 soul 网关的后台管理系统\",\"选择使用 MySQL 数据库存储网关数据，修改数据源配置为自己的数据库配置。\",\"-w1186\",\"运行启动类 org.dromara.soul.admin.SoulAdminBootstrap。\",\"启动成功后，访问地址 http://localhost:9095/ ，跳转到登录页 ↓\",\"-w593\",\"使用用户名admin，密码 123456 登录。\",\"-w1262\"]},\"55\":{\"h\":\"2.2. 启动 soul-bootstrap 模块\",\"t\":[\"soul-bootstrap是网关系统的核心\",\"检查soul-bootstrap的配置\",\"-w917\",\"这里需要配置成 soul-admin的 ip 和端口\",\"控制台输出如下内容表示 soul-bootstrap启动成功\",\"2021-01-14 15:01:15.832 INFO 17943 --- [ main] b.s.s.d.w.WebsocketSyncDataConfiguration : you use websocket sync soul data....... 2021-01-14 15:01:15.924 INFO 17943 --- [ main] o.d.s.p.s.d.w.WebsocketSyncDataService : websocket connection is successful..... 2021-01-14 15:01:16.113 INFO 17943 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' log4j:WARN No appenders could be found for logger (com.alibaba.dubbo.common.logger.LoggerFactory). log4j:WARN Please initialize the log4j system properly. log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. 2021-01-14 15:01:17.150 INFO 17943 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 9195 2021-01-14 15:01:17.154 INFO 17943 --- [ main] o.d.s.b.SoulBootstrapApplication : Started SoulBootstrapApplication in 5.508 seconds (JVM running for 6.762) \"]},\"56\":{\"h\":\"3. 测试 http 请求转发\",\"t\":[\"为了方便测试，把soul-examples模块添加到 soul 的 pom 里\"]},\"57\":{\"h\":\"3.1. 启动一个服务\",\"t\":[\"启动soul-examples-http项目\",\"soul-examples-http的 pom 中引入了依赖\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-client-springmvc</artifactId> <version>${soul.version}</version> </dependency> \",\"在 application.yml中配置\",\"soul: http: adminUrl: http://localhost:9095 port: 8188 contextPath: /http appName: http full: false \",\"如果 soul.http.full=false，则需要在具体的 http 接口上配置 @SoulSpringMvcClient 注解\"]},\"58\":{\"h\":\"3.1.1. 测试 http 服务\",\"t\":[\"执行 http 请求 http://localhost:8188/test/findByUserId?userId=1 结果如下图\",\"-w684\"]},\"59\":{\"h\":\"3.1.2. 测试网关转发\",\"t\":[\"执行 http 请求 http://localhost:9195/http/test/findByUserId?userId=1 结果如下图\",\" 在soul-bootstrap的控制台中输出如下信息\",\"2021-01-14 20:42:57.123 INFO 29812 --- [work-threads-11] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:42:57.125 INFO 29812 --- [work-threads-11] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:42:57.126 INFO 29812 --- [work-threads-11] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 \",\"可以观察到网关可以将请求正常转发。\"]},\"60\":{\"h\":\"3.2. 启动两个服务模拟负载均衡\",\"t\":[\"勾选 Allow parallel run，修改端口为8189，再次启动soul-examples-http项目\",\"-w1104\"]},\"61\":{\"h\":\"3.2.1. 测试 http 服务\",\"t\":[\"执行 http 请求 http://localhost:8189/test/findByUserId?userId=1 结果如下图\",\"-w693\"]},\"62\":{\"h\":\"3.2.2. 测试负载均衡\",\"t\":[\"-w1096\",\"将 8188 和 8189 两个端口对应的服务配置到选择器中\",\"多次执行 http 请求 http://localhost:9195/http/test/findByUserId?userId=1 结果如下图\",\" 在soul-bootstrap的控制台中输出如下信息\",\"2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8189/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:38.755 INFO 29812 --- [work-threads-23] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:38.756 INFO 29812 --- [work-threads-23] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:38.756 INFO 29812 --- [work-threads-23] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8189/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:40.976 INFO 29812 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:40.976 INFO 29812 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:40.977 INFO 29812 --- [-work-threads-1] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 \",\"可以观察到请求既有转发到 8188 端口的，也有转发到 8189 的，可以实现负载均衡\"]},\"63\":{\"h\":\"3.2.3. 压测\",\"t\":[\"简单对直连和使用网关两种方式的请求进行压测\",\"➜ soul git:(master) ✗ wrk -t8 -c40 -d30s http://localhost:8189/test/findByUserId\\\\?userId\\\\=1 Running 30s test @ http://localhost:8189/test/findByUserId?userId=1 8 threads and 40 connections Thread Stats Avg Stdev Max +/- Stdev Latency 6.06ms 28.81ms 442.25ms 98.22% Req/Sec 2.05k 493.86 2.84k 74.82% 486269 requests in 30.05s, 51.01MB read Requests/sec: 16179.68 Transfer/sec: 1.70MB ➜ soul git:(master) ✗ wrk -t8 -c40 -d30s http://localhost:9195/http/test/findByUserId\\\\?userId\\\\=1 Running 30s test @ http://localhost:9195/http/test/findByUserId?userId=1 8 threads and 40 connections Thread Stats Avg Stdev Max +/- Stdev Latency 14.37ms 18.11ms 255.66ms 93.06% Req/Sec 459.41 139.11 1.01k 74.23% 109533 requests in 30.09s, 11.49MB read Requests/sec: 3639.60 Transfer/sec: 390.98KB \",\"可以发现，使用网关后性能有些下降，主要是因为多了一层转发。\"]},\"64\":{\"h\":\"3.2.4. 问题\",\"t\":[\"在启动 8189 端口时，注册的客户端端口还是 8188\",\"-w1675\",\"先手动配置选择器的配置，后来在群友的帮助下定位到是 soul.http.port没有改\",\"修改后的配置如下\",\"-w520\"]},\"65\":{\"h\":\"Soul网关学习(2-1)Http代理之divide插件使用\"},\"66\":{\"h\":\"一、启动项目\",\"t\":[\"先启动 soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过 bootstrap 配置文件可以看到，两者是通过 WebSocket 协议进行数据同步：\",\"图片\",\"通过 bootstrap 日志也可以看到：\",\"图片\",\"所谓的数据同步是指将 soul-admin 中配置的数据，同步到 soul 集群中的 JVM 内存里面，是网关高性能的关键。\",\"我们启动两个项目之后就可以通过后台管理系统测试 divide 插件了。\"]},\"67\":{\"h\":\"二、divide 插件介绍\",\"t\":[\"divide 插件是网关处理 http 协议请求的核心处理插件，也是 soul 唯一默认开启的插件：\",\"图片\",\"我们可以想象一下网关到底是做什么的，去猜测一下处理 http 请求的 divide 插件可能具备哪些功能呢？\",\"首先，作为微服务网关，它的背后一定存在多条业务线的分布式微服务集群，而网关作为所有服务的统一入口，必须具备的能力就是流量分发/路由/负载均衡等，而 divide 这个单词顾名思义就是分配、分发的意思，所以我们可以猜测 divide 插件就是对 http 请求进行各种规则的路由转发，这也是网关最基础的能力。\",\"我们打开管理界面上的插件列表，可以看到所有插件都是由两部分组成：选择器（selector）和选择器规则。\",\"插件化设计思想是 soul 网关最核心的设计思想，而选择器和规则这两个概念也是 soul 网关的灵魂所在，理论上来说，我们掌握好它，就能对任何接入网关的流量进行管理。\",\"一个插件有多个选择器，一个选择器对应多种规则。选择器相当于是对流量的第一次筛选，规则就是最终的筛选。\"]},\"68\":{\"h\":\"选择器\",\"t\":[\"图片\",\"* **名称**：为你的选择器起一个容易分辨的名字 * **类型**：custom flow 是自定义流量。full flow 是全流量。自定义流量就是请求会走你下面的匹配方式与条件。全流量则不走。 * **匹配方式**：and 或者or 是指下面多个条件是按照and 还是or的方式来组合。 * **条件**： * uri：是指你根据uri的方式来筛选流量，match的方式支持模糊匹配（/**） * header：是指根据请求头里面的字段来筛选流量。 * query：是指根据uri的查询条件来进行筛选流量。 * ip：是指根据你请求的真实ip，来筛选流量。 * host：是指根据你请求的真实host，来筛选流量。 * post：建议不要使用。 * 条件匹配： * match : 模糊匹配，建议和uri条件搭配，支持 restful风格的匹配。（/test/**） * = : 前后值相等，才能匹配。 * regEx : 正则匹配，表示前面一个值去匹配后面的正则表达式。 * like ：字符串模糊匹配。 * **是否开启**：打开才会生效 * **打印日志**：打开的时候，当匹配上的时候，会打印匹配日志。 * **执行顺序**：当多个选择器的时候，执行顺序小的优先执行。 \"]},\"69\":{\"h\":\"选择器规则\",\"t\":[\"图片\",\"图片\",\"可以看到，规则的配置和选择器类似，可以理解为更细粒度的自定义配置。\"]},\"70\":{\"h\":\"三、divide 插件使用\",\"t\":[\"废话少说，我们直接运行 soul 提供的 examples 模块来演示 divide 插件。\",\"图片\",\"注意，我们最终运行的是 soul-examples-http 模块。配置文件可以使用默认的，也可以自定义 contextPath 和 appName，如上图。\",\"我们需要注意，contextPath 这个属性非常重要，相当于是我们所有 http 请求的 namespace，和选择器一一对齐。一般来说，我们可以配置一个业务对应一个 contextPath，一个业务下面配置相同 contextPath 的多个服务实例会自动映射到同一个选择器进行负载均衡。\",\"我们启动端口为 8188 的这个进程后，可以发现管理控制台 divide 插件列表中自动配置了这个实例对应的选择器、规则：\",\"图片\",\"可以看到我启动的这个 8188 项目地址自动注册上去了：\",\"图片\"]},\"71\":{\"h\":\"测试网关路由\",\"t\":[\"通过 postman 先测试不经过网关转发：\",\"http://localhost:8188/order/findById?id=1 \",\"图片\",\"然后再测试通过网关转发到这个接口：\",\"http://localhost:9195/my-http/order/findById?id=1 \",\"图片\",\"看日志发现确实经过了网关转发到了 8188 接口地址：\",\"图片\"]},\"72\":{\"h\":\"测试负载均衡\",\"t\":[\"我们修改端口为 8189，启动第二个进程。\",\"图片\",\"注意 IDEA 需要取消 Single instance only 的限制：\",\"图片\",\"我们再进入管理控制台，发现 my-http 选择器下出现两个配置地址：\",\"图片\",\"此时我们继续测试，发现负载均衡策略确实生效了：\",\"图片\",\"今天只是演示了 divide 插件最基础的配置，还有其他各种规则配置后面都可以试一试~\"]},\"73\":{\"h\":\"Soul网关学习(2-2)Http代理之divide插件源码解析\",\"t\":[\"待补，文章内部有报错\"]},\"74\":{\"h\":\"Soul网关学习(2-3)Http客户端接入源码解析\"},\"75\":{\"h\":\"1. 注册入口\",\"t\":[\"HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。\",\"先看下调用的接口信息如下：\",\"// SpringMvcClientBeanPostProcessor.java /** * Instantiates a new Soul client bean post processor. * * @param soulSpringMvcConfig the soul spring mvc config */ public SpringMvcClientBeanPostProcessor(final SoulSpringMvcConfig soulSpringMvcConfig) { ValidateUtils.validate(soulSpringMvcConfig); this.soulSpringMvcConfig = soulSpringMvcConfig; url = soulSpringMvcConfig.getAdminUrl() + \\\"/soul-client/springmvc-register\\\"; executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>()); } \"]},\"76\":{\"h\":\"2. springmvc-register 接口逻辑\",\"t\":[\"全局搜索 \\\"springmvc-register\\\"，找到 soul-admin 模块下的 SoulClientController，看到这里，对于经常写 CRUD 的我们是不是很熟悉？哈哈~\",\"// SoulClientController.java /** * Register spring mvc string. * * @param springMvcRegisterDTO the spring mvc register dto * @return the string */ @PostMapping(\\\"/springmvc-register\\\") public String registerSpringMvc(@RequestBody final SpringMvcRegisterDTO springMvcRegisterDTO) { return soulClientRegisterService.registerSpringMvc(springMvcRegisterDTO); } \",\"Service 层实现类：\",\"// SoulClientRegisterServiceImpl.java @Override @Transactional public String registerSpringMvc(final SpringMvcRegisterDTO dto) { if (dto.isRegisterMetaData()) { MetaDataDO exist = metaDataMapper.findByPath(dto.getPath()); if (Objects.isNull(exist)) { saveSpringMvcMetaData(dto); } } String selectorId = handlerSpringMvcSelector(dto); handlerSpringMvcRule(selectorId, dto); return SoulResultMessage.SUCCESS; } \",\"dto.isRegisterMetaData() 这个是否注册元数据信息的判断，不知道什么时候用，存疑 //TODO，先往下走。\"]},\"77\":{\"h\":\"2.1 先看看这个方法 handlerSpringMvcSelector，处理 Selector。\",\"t\":[\"// SoulClientRegisterServiceImpl.java private String handlerSpringMvcSelector(final SpringMvcRegisterDTO dto) { String contextPath = dto.getContext(); // 根据 contextPath 到数据库里查询，是否已经注册过。 SelectorDO selectorDO = selectorService.findByName(contextPath); String selectorId; String uri = String.join(\\\":\\\", dto.getHost(), String.valueOf(dto.getPort())); if (Objects.isNull(selectorDO)) { // 还没有注册过 selectorId = registerSelector(contextPath, dto.getRpcType(), dto.getAppName(), uri); } else { // 已经注册过，业务系统重启了会到这里 selectorId = selectorDO.getId(); //update upstream String handle = selectorDO.getHandle(); String handleAdd; DivideUpstream addDivideUpstream = buildDivideUpstream(uri); SelectorData selectorData = selectorService.buildByName(contextPath); if (StringUtils.isBlank(handle)) { handleAdd = GsonUtils.getInstance().toJson(Collections.singletonList(addDivideUpstream)); } else { List<DivideUpstream> exist = GsonUtils.getInstance().fromList(handle, DivideUpstream.class); for (DivideUpstream upstream : exist) { if (upstream.getUpstreamUrl().equals(addDivideUpstream.getUpstreamUrl())) { return selectorId; } } exist.add(addDivideUpstream); handleAdd = GsonUtils.getInstance().toJson(exist); } selectorDO.setHandle(handleAdd); selectorData.setHandle(handleAdd); // update db selectorMapper.updateSelective(selectorDO); // submit upstreamCheck upstreamCheckService.submit(contextPath, addDivideUpstream); // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(selectorData))); } return selectorId; } \"]},\"78\":{\"h\":\"2.1.1 第一次接入 Soul 网关\",\"t\":[\"新接入的，到数据库里肯定查不到 selectorDO，进入 registerSelector 方法，仔细看看到底往哪些数据库表中插数据了。\",\"// SoulClientRegisterServiceImpl.java private String registerSelector(final String contextPath, final String rpcType, final String appName, final String uri) { SelectorDTO selectorDTO = SelectorDTO.builder() .name(contextPath) .type(SelectorTypeEnum.CUSTOM_FLOW.getCode()) .matchMode(MatchModeEnum.AND.getCode()) .enabled(Boolean.TRUE) .loged(Boolean.TRUE) .continued(Boolean.TRUE) .sort(1) .build(); if (RpcTypeEnum.DUBBO.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.DUBBO.getName())); } else if (RpcTypeEnum.SPRING_CLOUD.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.SPRING_CLOUD.getName())); selectorDTO.setHandle(GsonUtils.getInstance().toJson(buildSpringCloudSelectorHandle(appName))); } else if (RpcTypeEnum.SOFA.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.SOFA.getName())); selectorDTO.setHandle(appName); } else if (RpcTypeEnum.TARS.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.TARS.getName())); selectorDTO.setHandle(appName); } else { //is divide DivideUpstream divideUpstream = buildDivideUpstream(uri); String handler = GsonUtils.getInstance().toJson(Collections.singletonList(divideUpstream)); selectorDTO.setHandle(handler); selectorDTO.setPluginId(getPluginId(PluginEnum.DIVIDE.getName())); upstreamCheckService.submit(selectorDTO.getName(), divideUpstream); } SelectorConditionDTO selectorConditionDTO = new SelectorConditionDTO(); selectorConditionDTO.setParamType(ParamTypeEnum.URI.getName()); selectorConditionDTO.setParamName(\\\"/\\\"); selectorConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); selectorConditionDTO.setParamValue(contextPath + \\\"/**\\\"); selectorDTO.setSelectorConditions(Collections.singletonList(selectorConditionDTO)); return selectorService.register(selectorDTO); } \",\"看到这么多 if else，是不是很兴奋，小伙伴们可以想想怎么优化掉这么多 if else，PR 搞起来 ^ - ^。\",\"写了这么多，无非是封装 SelectorDTO 对象，最后调用 selectorService.register(selectorDTO) 入库，继续跟进去。\",\"// SelectorServiceImpl.java @Override public String register(final SelectorDTO selectorDTO) { SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO); List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions(); if (StringUtils.isEmpty(selectorDTO.getId())) { selectorMapper.insertSelective(selectorDO); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); // 这里在 for 循环里调用 dao 层插入数据，是不是可以考虑挪出去一次性批量插入？ selectorConditionMapper.insertSelective(SelectorConditionDO .buildSelectorConditionDO(selectorConditionDTO)); }); } publishEvent(selectorDO, selectorConditionDTOs); return selectorDO.getId(); } \",\"看到这里有 2 条入库方法，分别向 selector 和 selector_condition 表中插入了数据。这里我们先不具体追究表结构及业务意义，后面补上。\",\"publishEvent 方法，涉及到 ApplicationEventPublisher 接口，是观察者模式的一个实现，发布事件后通过监听器完成后续操作，这里先按下不表，后续单写一篇文章分析。\"]},\"79\":{\"h\":\"2.1.2 已经接入 Soul 网关\",\"t\":[\"就跟盗梦空间似的，我们回退 2 层梦境，回到插入数据的另一个分支，可以想见，就是，已经接入过 Soul 网关的系统重启，或新节点启动走的逻辑。\",\"把前面的代码再贴过来：\",\"// SoulClientRegisterServiceImpl.java private String handlerSpringMvcSelector(final SpringMvcRegisterDTO dto) { String contextPath = dto.getContext(); // 根据 contextPath 到数据库里查询，是否已经注册过。 SelectorDO selectorDO = selectorService.findByName(contextPath); String selectorId; String uri = String.join(\\\":\\\", dto.getHost(), String.valueOf(dto.getPort())); if (Objects.isNull(selectorDO)) { // 还没有注册过 selectorId = registerSelector(contextPath, dto.getRpcType(), dto.getAppName(), uri); } else { // 已接入的业务系统重启，或新节点启动，会到这里 selectorId = selectorDO.getId(); //update upstream // handle 字段存储这个接口真实节点信息，可能存在多台机器需要负载均衡的场景 String handle = selectorDO.getHandle(); String handleAdd; DivideUpstream addDivideUpstream = buildDivideUpstream(uri); SelectorData selectorData = selectorService.buildByName(contextPath); if (StringUtils.isBlank(handle)) { // 这个接口虽然之前注册过，但第1个服务器节点接入 Soul 时会进来 handleAdd = GsonUtils.getInstance().toJson(Collections.singletonList(addDivideUpstream)); } else { // 如果已经至少有1个服务器节点已接入，会进到这里，判断是否是同一个节点（使用 upstreamUrl 区分），如果相同直接返回 List<DivideUpstream> exist = GsonUtils.getInstance().fromList(handle, DivideUpstream.class); for (DivideUpstream upstream : exist) { if (upstream.getUpstreamUrl().equals(addDivideUpstream.getUpstreamUrl())) { return selectorId; } } // 如果不是同一个节点，把新节点加入到 handle 字段中 exist.add(addDivideUpstream); handleAdd = GsonUtils.getInstance().toJson(exist); } selectorDO.setHandle(handleAdd); selectorData.setHandle(handleAdd); // update db 更新数据库 selectorMapper.updateSelective(selectorDO); // submit upstreamCheck upstreamCheckService.submit(contextPath, addDivideUpstream); // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(selectorData))); } return selectorId; } \",\"因为还没有研究数据库表结构设计，根据已知部分猜测，1 个 selector 对应一个 divide 插件，这个插件以 contextPath 为标识（在这里就是 \\\"/http\\\"），一个 contextPath 可以部署多个服务器节点，这些节点信息已 json 形式保存在 handle 字段中。\",\"// handle/handleAdd 数据格式 [ { \\\"upstreamHost\\\": \\\"localhost\\\", \\\"protocol\\\": \\\"http://\\\", \\\"upstreamUrl\\\": \\\"10.0.0.12:8188\\\", \\\"weight\\\": 50, \\\"status\\\": true, \\\"timestamp\\\": 0, \\\"warmup\\\": 0 } ] \",\"下面紧接着就是更新数据库 updateSelective。\",\"upstreamCheckService.submit(contextPath, addDivideUpstream); 把真实服务器节点信息缓存在一个 Map(UPSTREAM_MAP) 里，有定时任务定期探活，如果发现服务节点宕机了，就把他剔除出去，防止把请求发送到已经宕机的节点上。\",\"然后就是 eventPublisher.publishEvent()，跟前面的 publishEvent 方法一样，发布事件后通过监听器完成后续操作（简单介绍下，这里是通过与 Soul 网关建立的 websocket 长连接发送数据 SelectorData 修改的消息，Soul 网关根据消息修改数据，这个具体改的什么数据，怎么修改的，后面分析）。\",\"到这里终于把 handlerSpringMvcSelector 这个方法分析完了。\"]},\"80\":{\"h\":\"2.2 再来看看这个方法 handlerSpringMvcRule，处理 Rule。\",\"t\":[\"// SoulClientRegisterServiceImpl.java private void handlerSpringMvcRule(final String selectorId, final SpringMvcRegisterDTO dto) { RuleDO ruleDO = ruleMapper.findByName(dto.getRuleName()); if (Objects.isNull(ruleDO)) { registerRule(selectorId, dto.getPath(), dto.getRpcType(), dto.getRuleName()); } } \",\"首先拿着规则名字，到 rule 表里捞数据，如果捞到了表名已经注册过了，无操作。\",\"看下数据库数据，就是业务系统下的接口地址。\",\"mysql> use soul; Database changed mysql> select * from rule where name = '/http/order/findById' \\\\G *************************** 1. row *************************** id: 1349650371868782592 selector_id: 1349650371302551552 match_mode: 0 name: /http/order/findById enabled: 1 loged: 1 sort: 1 handle: {\\\"loadBalance\\\":\\\"random\\\",\\\"retry\\\":0,\\\"timeout\\\":3000} date_created: 2021-01-14 17:31:39 date_updated: 2021-01-14 17:31:39 1 row in set (0.00 sec) \",\"如果没捞到数据，注册这个规则。\",\"// SoulClientRegisterServiceImpl.java private void registerRule(final String selectorId, final String path, final String rpcType, final String ruleName) { RuleHandle ruleHandle = RuleHandleFactory.ruleHandle(RpcTypeEnum.acquireByName(rpcType), path); RuleDTO ruleDTO = RuleDTO.builder() .selectorId(selectorId) .name(ruleName) .matchMode(MatchModeEnum.AND.getCode()) .enabled(Boolean.TRUE) .loged(Boolean.TRUE) .sort(1) .handle(ruleHandle.toJson()) .build(); RuleConditionDTO ruleConditionDTO = RuleConditionDTO.builder() .paramType(ParamTypeEnum.URI.getName()) .paramName(\\\"/\\\") .paramValue(path) .build(); if (path.indexOf(\\\"*\\\") > 1) { ruleConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); } else { ruleConditionDTO.setOperator(OperatorEnum.EQ.getAlias()); } ruleDTO.setRuleConditions(Collections.singletonList(ruleConditionDTO)); ruleService.register(ruleDTO); } \",\"第 1 行，根据 rpcType(\\\"http\\\") 获取其对应的 RuleHandle，这里，默认内置 3 种类型，我们这里的是 HTTP，对应 DivideRuleHandle。\",\"// RuleHandleFactory.java public final class RuleHandleFactory { /** * The RpcType to RuleHandle class map. */ private static final Map<RpcTypeEnum, Class<? extends RuleHandle>> RPC_TYPE_TO_RULE_HANDLE_CLASS = new ConcurrentHashMap<>(); /** * The default RuleHandle. */ private static final Class<? extends RuleHandle> DEFAULT_RULE_HANDLE = SpringCloudRuleHandle.class; static { RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.HTTP, DivideRuleHandle.class); RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.DUBBO, DubboRuleHandle.class); RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.SOFA, SofaRuleHandle.class); } /** * Get a RuleHandle object with given rpc type and path. * @param rpcType rpc type. * @param path path. * @return RuleHandle object. */ public static RuleHandle ruleHandle(final RpcTypeEnum rpcType, final String path) { if (Objects.isNull(rpcType)) { return null; } Class<? extends RuleHandle> clazz = RPC_TYPE_TO_RULE_HANDLE_CLASS.getOrDefault(rpcType, DEFAULT_RULE_HANDLE); try { return clazz.newInstance().createDefault(path); } catch (InstantiationException | IllegalAccessException e) { throw new SoulException( String.format(\\\"Init RuleHandle failed with rpc type: %s, rule class: %s, exception: %s\\\", rpcType, clazz.getSimpleName(), e.getMessage())); } } } \",\"下面构造 RuleDTO 对象，注册规则。\",\"// RuleServiceImpl.java @Override public String register(final RuleDTO ruleDTO) { RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO); List<RuleConditionDTO> ruleConditions = ruleDTO.getRuleConditions(); if (StringUtils.isEmpty(ruleDTO.getId())) { ruleMapper.insertSelective(ruleDO); ruleConditions.forEach(ruleConditionDTO -> { ruleConditionDTO.setRuleId(ruleDO.getId()); // 这里在 for 循环里调用 dao 层插入数据，是不是可以考虑挪出去一次性批量插入？ ruleConditionMapper.insertSelective(RuleConditionDO .buildRuleConditionDO(ruleConditionDTO)); }); } publishEvent(ruleDO, ruleConditions); return ruleDO.getId(); } \",\"分别向 rule 和 rule_condition 表中插入数据。\",\"publishEvent() 方法，通过 websocket 长连接，向 Soul 网关发送 RuleData 数据。\"]},\"81\":{\"h\":\"3.总结\",\"t\":[\"到这里，调用 \\\"/soul-client/springmvc-register\\\" 接口逻辑分析完了，我们总结下：\",\"处理 selector \",\"新增或修改 selector、selector_condition 表数据，持久化到 MySQL。\",\"通过 websocket 向 Soul 网关发送数据改动信息。\",\"处理 rule \",\"新增或修改 rule、rule_condition 表数据，持久化到 MySQL。\",\"通过 websocket 向 Soul 网关发送数据改动信息。\",\"其中表结构及字段含义还需进一步学习和研究，websocket 发送给 Soul 网关后，网关做了什么处理也需要后续分析。\",\"到这里，HTTP 用户接入 Soul 网关注册逻辑就分析完了。\",\"如果在工作中你有使用网关的需求，或是个人有学习网关的追求，欢迎来跟我一起分析和学习，Soul 网关，你值得拥有。\"]},\"82\":{\"h\":\"Soul网关学习插件链与负载均衡解析\",\"t\":[\"从一个类关系图说起:\",\"plugin关系图\",\"其中两个最基本的插件类:\",\"SoulPlugin: 定义插件职责的接口, 重点方法execute() 被上层调用, skip() 方法可以使某些插件在某些请求中被跳过.\",\"AbstractPlugin: 抽象类, 实现接口的 execute(), 定义一套通用的执行流程, 并使用模板方法的设计模式, 提供doExecute()抽象方法供实现类写自己的逻辑.\"]},\"83\":{\"h\":\"AbstractSoulPlugin\",\"t\":[\"具体分析下 AbstractSoulPlugin 类的 execute():\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String pluginName = named(); final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); // 如果 pluginData.getEnabled() 为 false, 会直接跳到下个插件, 仅有为数不多的插件会进入这个条件判断 (DividePlugin、AlibabaDubboPlugin等) if (pluginData != null && pluginData.getEnabled()) { // 获得插件上的所有选择器 final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); if (CollectionUtils.isEmpty(selectors)) { return CheckUtils.checkSelector(pluginName, exchange, chain); } // 检查上下文中的请求路径, 是否与选择器匹配, 并得到唯一一个匹配的选择器数据 final SelectorData selectorData = matchSelector(exchange, selectors); if (Objects.isNull(selectorData)) { if (PluginEnum.WAF.getName().equals(pluginName)) { return doExecute(exchange, chain, null, null); } return CheckUtils.checkSelector(pluginName, exchange, chain); } if (selectorData.getLoged()) { log.info(\\\"{} selector success match , selector name :{}\\\", pluginName, selectorData.getName()); } // 获得选择器中的各个资源规则 final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); if (CollectionUtils.isEmpty(rules)) { if (PluginEnum.WAF.getName().equals(pluginName)) { return doExecute(exchange, chain, null, null); } return CheckUtils.checkRule(pluginName, exchange, chain); } RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { rule = rules.get(rules.size() - 1); } else { // 匹配路径, 获得唯一一个规则 rule = matchRule(exchange, rules); } if (Objects.isNull(rule)) { return CheckUtils.checkRule(pluginName, exchange, chain); } if (rule.getLoged()) { log.info(\\\"{} rule success match ,rule name :{}\\\", pluginName, rule.getName()); } // 执行子类的方法 return doExecute(exchange, chain, selectorData, rule); } // 执行插件链上的下个插件 return chain.execute(exchange); } \",\"通过代码分析, 可以得到一些结论:\",\"execute() 有两个逻辑: 一是请求路径与选择器和规则的匹配, 最终确认一个唯一规则, 并调用子类 doExecute(); 二是执行插件链上的下个插件.\",\"execute() 实际抽象了一套规则匹配逻辑, 供所有\\\"转发类型\\\"的插件使用的, 转发类型的插件目前我了解的有 DividePlugin (http 请求) 和 AlibabaDubboPlugin (dubbo 请求), 其他类型的插件如果不重写 execute() 的方法, 会直接走入下个插件.\"]},\"84\":{\"h\":\"SoulPluginChain\",\"t\":[\"这里还有个点, 就是插件链的形成与链式调用, 我们来分析下 SoulPluginChain 这块:\",\"plugin02\",\"SoulPluginChain 接口同样定义了 execute() 方法供调用者使用, 它的唯一子类 DefaultSoulPluginChain 实现了链式调用:\",\"public Mono<Void> execute(final ServerWebExchange exchange) { return Mono.defer(() -> { // plugins 中包含所有网关加载的插件 if (this.index < plugins.size()) { // 每次调用execute()方法, index索引自增, 会调用到下一个插件 SoulPlugin plugin = plugins.get(this.index++); // 结合上下文判断当前插件是否需要跳过 Boolean skip = plugin.skip(exchange); if (skip) { return this.execute(exchange); } else { return plugin.execute(exchange, this); } } else { return Mono.empty(); } }); } \",\"看到这会很好奇 plugins 这个插件列表是哪里来的, 这里来解释下, DefaultSoulPluginChain 是 SoulWebHandler 的静态内部类, plugins就是 SoulWebHandle 中的一个属性:\",\"public final class SoulWebHandler implements WebHandler { private List<SoulPlugin> plugins; public SoulWebHandler(final List<SoulPlugin> plugins) { this.plugins = plugins; // ... } @Override public Mono<Void> handle(@NonNull final ServerWebExchange exchange) { // ... return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler) .doOnSuccess(t -> startTimer.ifPresent(time -> MetricsTrackerFacade.getInstance().histogramObserveDuration(time))); } private static class DefaultSoulPluginChain implements SoulPluginChain { } } \",\"那么 SoulWebHandler 中的 plugins 又是怎么来的呢? 可以继续追溯下它构造器被调用的地方:\",\"@Configuration public class SoulConfiguration { @Bean(\\\"webHandler\\\") public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { List<SoulPlugin> pluginList = plugins.getIfAvailable(Collections::emptyList); final List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); soulPlugins.forEach(soulPlugin -> log.info(\\\"loader plugin:[{}] [{}]\\\", soulPlugin.named(), soulPlugin.getClass().getName())); return new SoulWebHandler(soulPlugins); } } \",\"可以看到是通过 Spring Bean 的方式开始写入 plugins, 即在容器启动时, 加载了所有插件. 这里入口参数使用 ObjectProvider 就是延迟加载所有 SoulPlugin 类型的 Bean(若一个都没有也不会报错), 并注入到 SoulWebHandler 中.\",\"有个小坑需要注意 !\",\"包括 DividePlugin、AlibabaDubboPlugin 等等的所有插件, 都是由各自的 soul-spring-boot-starter-plugin-xx 项目中的 XXPluginConfiguration 配置类, 注册自己的插件成为 Bean, 类似下面示例:\",\"@Configuration public class DividePluginConfiguration { @Bean public SoulPlugin dividePlugin() { return new DividePlugin(); } } \",\"所以在网关项目 soul-bootstrap 中, 如果需要用到某个插件, 不仅仅是在管理后台开启这个插件, 还需要确认下 soul-bootstrap 的 pom.xml 中是否存在相关插件所在的 soul-spring-boot-starter-plugin-xx 依赖, 比如:\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-divide</artifactId> <version>${project.version}</version> </dependency> \",\"如果这里你给注释了或者根本不存在, 不要幻想在插件链上看到它...\"]},\"85\":{\"h\":\"插件项目结构\",\"t\":[\"最后简单说下各个插件项目的功能:\",\"首先是刚刚提到的 spring bean 启动类项目 , 列出个大概:\",\"soul-spring-boot-starter-plugin-alibaba-dubbo soul-spring-boot-starter-plugin-apache-dubbo soul-spring-boot-starter-plugin-context-path soul-spring-boot-starter-plugin-divide soul-spring-boot-starter-plugin-global soul-spring-boot-starter-plugin-httpclient soul-spring-boot-starter-plugin-hystrix soul-spring-boot-starter-plugin-monitor soul-spring-boot-starter-plugin-ratelimiter soul-spring-boot-starter-plugin-resilience4j soul-spring-boot-starter-plugin-rewrite soul-spring-boot-starter-plugin-sentinel soul-spring-boot-starter-plugin-sign soul-spring-boot-starter-plugin-sofa soul-spring-boot-starter-plugin-springcloud soul-spring-boot-starter-plugin-tars soul-spring-boot-starter-plugin-waf \",\"它们的主要作用刚刚也提到了, 将自身的 SoulPlugin 子类注册为 spring bean, 以及注册 spring bean 给 AbstractSoulPlugin 中调用到的 PluginDataHandler 接口, 提供自身的实现子类, 比如 DividePluginDataHandler.\",\"具体的插件类所在项目:\",\"soul-plugin-alibaba-dubbo soul-plugin-apache-dubbo soul-plugin-api soul-plugin-base soul-plugin-context-path soul-plugin-divide soul-plugin-global soul-plugin-httpclient soul-plugin-hystrix soul-plugin-monitor soul-plugin-ratelimiter soul-plugin-resilience4j soul-plugin-rewrite soul-plugin-sentinel soul-plugin-sign soul-plugin-sofa soul-plugin-springcloud soul-plugin-tars soul-plugin-waf \",\"拿 soul-plugin-divide 项目举例, 刚刚提到的 DividePlugin 与 DividePluginDataHandler 就在其中. 并且项目里还有节点信息缓存管理器 UpstreamCacheManager, 负载均衡策略类 LoadBalance 等等.\",\"DividePlugin 的作用是匹配 Http 请求, 既然有 Http 请求自然也有转发下游和返回响应, 所以这里我们会分析到三个插件: DividePlugin、WebClientPlugin、WebClientResponsePlugin.\",\"首先来看 DividePlugin 中 doExecute() 具体实现, 这里我只保留了核心点:\",\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // 通过选择器ID, 在缓存中得到服务节点集群 final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); // 调用负载均衡方法并传入策略类型, 得到唯一节点 DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); // 获得节点的真实url, 并放入 exchange 上下文中 String domain = buildDomain(divideUpstream); String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); // 继续调用下个插件 return chain.execute(exchange); } \",\"可以看到, 在执行完 DividePlugin 的 doExecute() 方法后, 我们的 ServerWebExchange 上下文中已经有了下游服务节点的真实路径, 接下来只要请求它就搞定. 不过先别着急, 这里的负载均衡策略也是关键点, 接着分析下.\"]},\"86\":{\"h\":\"负载均衡\",\"t\":[\"Soul 网关的负载均衡如何执行, 不止涉及到各种策略 (hasn、随机、轮询), 也涉及到 \\\"权重分数\\\" 这个概念, 管理后台的具体配置如下:\",\"待补，文章内部有报错\",\"待补，文章内部有报错\",\"待补，文章内部有报错\",\"展示完后台配置, 我们具体看看各个策略的代码实现.\"]},\"87\":{\"h\":\"Hash\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { final ConcurrentSkipListMap<Long, DivideUpstream> treeMap = new ConcurrentSkipListMap<>(); for (DivideUpstream address : upstreamList) { // 每个节点*VIRTUAL_NODE_NUM(默认5), 使hash更加均匀 for (int i = 0; i < VIRTUAL_NODE_NUM; i++) { long addressHash = hash(\\\"SOUL-\\\" + address.getUpstreamUrl() + \\\"-HASH-\\\" + i); treeMap.put(addressHash, address); } } // 从当前ip得到一个hash值, 并比对treemap(有序), 找到大于此hash值的位置 long hash = hash(String.valueOf(ip)); SortedMap<Long, DivideUpstream> lastRing = treeMap.tailMap(hash); // 只要服务节点不增减, 同一个ip得到的节点就可以保持不变 if (!lastRing.isEmpty()) { return lastRing.get(lastRing.firstKey()); } return treeMap.firstEntry().getValue(); } \",\"hash 算法的负载均衡, 并没有使用到 \\\"权重分数\\\" 这个概念, 也就是说针对每个未知的 IP 各个节点被访问的可能性是一致的. (当然, 同一个 IP 多次调用只会访问同个节点)\"]},\"88\":{\"h\":\"RandomLoadBalance\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { // 总个数 int length = upstreamList.size(); // 总权重 int totalWeight = 0; // 权重是否都一样 boolean sameWeight = true; for (int i = 0; i < length; i++) { int weight = upstreamList.get(i).getWeight(); // 累计总权重 totalWeight += weight; if (sameWeight && i > 0 && weight != upstreamList.get(i - 1).getWeight()) { // 计算所有权重是否一样 sameWeight = false; } } if (totalWeight > 0 && !sameWeight) { // 如果权重不相同且权重大于0则按总权重数随机 int offset = RANDOM.nextInt(totalWeight); // 并确定随机值落在哪个片断上 for (DivideUpstream divideUpstream : upstreamList) { offset -= divideUpstream.getWeight(); if (offset < 0) { return divideUpstream; } } } // 如果权重相同或权重为0则均等随机 return upstreamList.get(RANDOM.nextInt(length)); } \",\"当使用 random 规则时, 所有节点权重分累加并随机得到数字, 看具体是落在那个节点的权重片段上; 如果分数 0 或者相同则很直接的随机集群长度即可.\"]},\"89\":{\"h\":\"RoundRobinLoadBalance\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { String key = upstreamList.get(0).getUpstreamUrl(); ConcurrentMap<String, WeightedRoundRobin> map = methodWeightMap.get(key); if (map == null) { methodWeightMap.putIfAbsent(key, new ConcurrentHashMap<>(16)); map = methodWeightMap.get(key); } int totalWeight = 0; long maxCurrent = Long.MIN_VALUE; long now = System.currentTimeMillis(); DivideUpstream selectedInvoker = null; WeightedRoundRobin selectedWRR = null; for (DivideUpstream upstream : upstreamList) { String rKey = upstream.getUpstreamUrl(); // 取出节点在缓存中的信息 WeightedRoundRobin weightedRoundRobin = map.get(rKey); int weight = upstream.getWeight(); if (weightedRoundRobin == null) { weightedRoundRobin = new WeightedRoundRobin(); weightedRoundRobin.setWeight(weight); map.putIfAbsent(rKey, weightedRoundRobin); } if (weight != weightedRoundRobin.getWeight()) { weightedRoundRobin.setWeight(weight); } // 这里是第一个关键: 缓存中的分数增加当前节点权重分 long cur = weightedRoundRobin.increaseCurrent(); weightedRoundRobin.setLastUpdate(now); // 选择缓存分值高的节点 if (cur > maxCurrent) { maxCurrent = cur; selectedInvoker = upstream; selectedWRR = weightedRoundRobin; } totalWeight += weight; } if (!updateLock.get() && upstreamList.size() != map.size() && updateLock.compareAndSet(false, true)) { try { ConcurrentMap<String, WeightedRoundRobin> newMap = new ConcurrentHashMap<>(map); newMap.entrySet().removeIf(item -> now - item.getValue().getLastUpdate() > recyclePeriod); methodWeightMap.put(key, newMap); } finally { updateLock.set(false); } } if (selectedInvoker != null) { // 这里是第二个关键: 缓存中的分数, 减少总节点权重分 selectedWRR.sel(totalWeight); return selectedInvoker; } return upstreamList.get(0); } \",\"这个算法有点复杂, 我解释下核心计算权重的方面:\",\"两个分值分别为 2、100 的节点进入, 缓存中保留它们各自, 分值从 0 开始\",\"经过 for 循环后, 两个节点在缓存中的分值会以自身为基数增加, 假设后面步骤不进行, 则缓存第一次为 2、100, 第二次为 4、200, 依次类推.\",\"关键的第三步, 选出节点缓存中分值最高的, 进行\\\"处罚\\\"措施, 减少所有节点的累计分值, 即 102.\",\"根据这个算法的步骤, 一直没有被选中的节点, 作为\\\"成长奖励\\\", 会持续以自身为基数自增; 而被选中的节点, 作为\\\"惩罚\\\", 会减少其他节点的权重分之和.\",\"可以预见, 权重分小的节点, 要自增到很久之后, 才会等来自身被选中的一刻, 然而那一刻它被惩罚的力度会非常大, 导致它一朝回到解放前, 又要开始漫长的积蓄力量. 而权重分大的节点, 每次被选上的惩罚力度很小, 即使多次后分数太低没被选上, 他的奖励分数(自身)也特别高, 一次增加就远远超越其他节点.\"]},\"90\":{\"h\":\"WebClientPlugin\",\"t\":[\"经过 DividePlugin 插件的调用后, 下游服务节点路径被确定, 接着就是 WebClientPlugin 插件发挥作用了. 它直接实现了 SoulPlugin 接口并实现了 execute() 方法 (仅保留核心代码):\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String urlPath = exchange.getAttribute(Constants.HTTP_URL); // 请求类型: Get请求orPost请求等 HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue()); // 构建一个请求对象空壳, 注入请求类型和URL WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath); return handleRequestBody(requestBodySpec, exchange, timeout, chain); } private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBodySpec, final ServerWebExchange exchange, final long timeout, final SoulPluginChain chain) { return requestBodySpec.headers(httpHeaders -> { // 补充上下文中请求头... 后面也是补充些属性, 不赘述 httpHeaders.addAll(exchange.getRequest().getHeaders()); httpHeaders.remove(HttpHeaders.HOST); }) .contentType(buildMediaType(exchange)) .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody())) // 开始异步http调用下游服务 .exchange() .doOnError(e -> log.error(e.getMessage())) .timeout(Duration.ofMillis(timeout)) // 回调接收返回值 .flatMap(e -> doNext(e, exchange, chain)); } // 这里是异步的回调方法, 在另一个线程中工作 private Mono<Void> doNext(final ClientResponse res, final ServerWebExchange exchange, final SoulPluginChain chain) { // ... // 继续完成剩下的插件链调用 return chain.execute(exchange); } \",\"简单看下 handleRequestBody() 中 exchange() 这个方法的实现, 这里有关键的 Http 调用:\",\"class DefaultWebClient implements WebClient { @Override public Mono<ClientResponse> exchange() { ClientRequest request = (this.inserter != null ? initRequestBuilder().body(this.inserter).build() : initRequestBuilder().build()); // 这里是关键调用, 会走到 spring-web-reactive return Mono.defer(() -> exchangeFunction.exchange(request) .checkpoint(\\\"Request to \\\" + this.httpMethod.name() + \\\" \\\" + this.uri + \\\" [DefaultWebClient]\\\") .switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR)); } } \",\"总结下, 经过 WebClientPlugin 的处理会异步调用下游服务, 等待响应后再在另一个线程中, 执行后续的插件链调用.\"]},\"91\":{\"h\":\"WebClientResponseClient\",\"t\":[\"最后插件链走到 WebClientResponseClient 这一环, 封装响应信息:\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { // 获取上下文中存放的响应信息 ServerHttpResponse response = exchange.getResponse(); ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR); if (Objects.isNull(clientResponse) || response.getStatusCode() == HttpStatus.BAD_GATEWAY || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) { Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } else if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) { Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // 各种拼装 response.setStatusCode(clientResponse.statusCode()); response.getCookies().putAll(clientResponse.cookies()); response.getHeaders().putAll(clientResponse.headers().asHttpHeaders()); return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())); })); } \"]},\"92\":{\"h\":\"Soul网关学习Http长轮询解析01\"},\"93\":{\"h\":\"后台与网关数据同步 (Http 长轮询篇)\"},\"94\":{\"h\":\"配置\",\"t\":[\"后台信息模式切换\",\"在上篇分析 Zookeeper 同步的文章 (Soul 网关源码分析-11 期) 中, 我们通过 DataSyncConfiguration 这个配置类做的切换, 这次有了经验, 直接贴配置\",\"soul: sync: websocket: enabled: false http: enabled: true \",\"网关信息模式切换\",\"后台模式切换完成, 接下来就是网关, 继续照葫芦画瓢找到关键配置类上的参数设置. 这里也直接贴网关配置\",\"soul: sync: # websocket: # urls: ws://localhost:9095/websocket http: url: http://localhost:9095 \"]},\"95\":{\"h\":\"DataChangedListener 体系\",\"t\":[\"后台数据初始化 DataSyncConfiguration 配置关键 Bean , 看看这里关于 Http 长轮询的 Bean\",\"@Configuration public class DataSyncConfiguration { @Configuration @ConditionalOnProperty(name = \\\"soul.sync.http.enabled\\\", havingValue = \\\"true\\\") @EnableConfigurationProperties(HttpSyncProperties.class) static class HttpLongPollingListener { @Bean @ConditionalOnMissingBean(HttpLongPollingDataChangedListener.class) public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) { return new HttpLongPollingDataChangedListener(httpSyncProperties); } } } \",\"HttpLongPollingDataChangedListener 继承自 AbstractDataChangedListener, 他们都实现自接口 DataChangedListener.\",\"DataChangedListener 这个接口我们应该非常熟悉了, 它提供了众多不同数据类型变动的方法, 供 DataChangedEventDispatcher 调用, 这个类更是一个 \\\"老朋友\\\" 了, 作为一个中转站, 辛勤的处理数据同步的事件分类及分发\",\"public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { // 持有 DataChangedListener 集合 private List<DataChangedListener> listeners; // 事件变动时, 通知 DataChangedListener 的不同事件类型的方法 public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } } \",\"public interface DataChangedListener { default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum eventType) {} default void onPluginChanged(List<PluginData> changed, DataEventTypeEnum eventType) {} default void onSelectorChanged(List<SelectorData> changed, DataEventTypeEnum eventType) {} default void onMetaDataChanged(List<MetaData> changed, DataEventTypeEnum eventType) {} default void onRuleChanged(List<RuleData> changed, DataEventTypeEnum eventType) {} } \",\"这两个的作用了解了, 那 AbstractDataChangedListener 又做了什么事情? 举个 onPluginChanged() 的例子:\",\"public abstract class AbstractDataChangedListener implements DataChangedListener, InitializingBean { protected static final ConcurrentMap<String, ConfigDataCache> CACHE = new ConcurrentHashMap<>(); @Override public void onPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { if (CollectionUtils.isEmpty(changed)) { return; } this.updatePluginCache(); this.afterPluginChanged(changed, eventType); } // 修改缓存 (可重写) protected void updatePluginCache() { this.updateCache(ConfigGroupEnum.PLUGIN, pluginService.listAll()); } protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data) { String json = GsonUtils.getInstance().toJson(data); ConfigDataCache newVal = new ConfigDataCache(group.name(), json, Md5Utils.md5(json), System.currentTimeMillis()); ConfigDataCache oldVal = CACHE.put(newVal.getGroup(), newVal); log.info(\\\"update config cache[{}], old: {}, updated: {}\\\", group, oldVal, newVal); } // 钩子, 自定义结束数据变动后要干什么 (可重写) protected void afterPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { } } \",\"对于一个插件数据变动方法 (onPluginChanged), 其实 AbstractDataChangedListener 就是定义了一个模板, 让子类可以按照指定步骤进行工作, 具体每个步骤的工作细节可以由子类自己实现.\",\"其次, 如果不重写它的缓存更新, 就由这个类在 CACHE 中维护.\"]},\"96\":{\"h\":\"其他同步策略此时在干什么?\",\"t\":[\"在 DataChangedEventDispatcher 调取 onPluginChanged() 之后, 长轮询模块会怎么实现呢? 不妨先想想其他同步方式在此时做了什么\",\"举例 websocket 模式, 它自己重写了 onPluginChanged(), 发送 websocket 信息给持有会话, 其中就有网关.\",\"public class WebsocketDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> pluginDataList, final DataEventTypeEnum eventType) { WebsocketData<PluginData> websocketData = new WebsocketData<>(ConfigGroupEnum.PLUGIN.name(), eventType.name(), pluginDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } } \",\"再看 zookeeper 模式, 它也重写了 onPluginChanged(), 去修改 zookeeper 上的节点信息, 这样网关端会监听到他们的节点变动.\",\"public class ZookeeperDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { for (PluginData data : changed) { String pluginPath = ZkPathConstants.buildPluginPath(data.getName()); // delete if (eventType == DataEventTypeEnum.DELETE) { deleteZkPathRecursive(pluginPath); String selectorParentPath = ZkPathConstants.buildSelectorParentPath(data.getName()); deleteZkPathRecursive(selectorParentPath); String ruleParentPath = ZkPathConstants.buildRuleParentPath(data.getName()); deleteZkPathRecursive(ruleParentPath); continue; } //create or update insertZkNode(pluginPath, data); } } } \",\"可以知道, 到这个节骨眼, 其他同步策略已经在忙着通知网关了, 那 Http 长轮询也肯定要做这事.\",\"这两个策略的通知方式也不同, websocket 是好人做到底, 直接找到 session 会话把信息亲自送过去. zookeeper 将节点信息改变后撒手不管, 网关自己监听到变更再做的同步.\",\"那么我们的 Http 长轮询现在要以何种方式去通知网关呢? 接着看.\"]},\"97\":{\"h\":\"长轮询实现方式思考\",\"t\":[\"先思考下我自己设计长轮询, 会怎么实现 ?\",\"正常的长轮询实现应该由网关主动请求, 后台接住这个请求并 hold 住, 如果有更新就直接返回, 没有就阻塞一定时间. 而后台则是做好数据的更新, hold 住时检查数据是否有变化.\",\"那这里涉及到三个点:\",\"数据怎样知道是有变化的, 是不是设置个最后更新时间, 与网关的请求时间比较, 得出是否有数据修改?\",\"hold 住之后, 后台怎么获知是否数据更新, 反复遍历还是阻塞等待?\",\"那些用于更新的数据放哪里, 用缓存的话, 考虑后台缓存与数据库的交互是怎样的.\"]},\"98\":{\"h\":\"HttpLongPollingDataChangedListener 长轮询实现\",\"t\":[\"围绕我们的思考, 看看 HttpLongPollingDataChangedListener 是如何实现的. 先看看关于父类 onPluginChanged() 这块的实现\",\"public class HttpLongPollingDataChangedListener extends AbstractDataChangedListener { private final ScheduledExecutorService scheduler; @Override protected void afterPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { scheduler.execute(new DataChangeTask(ConfigGroupEnum.PLUGIN)); } } \",\"Http 长轮询不会直接覆盖 onPluginChanged() 而是直接使用其父类的, 意味着使用了它的 CACHE, 那最终我们的信息获取肯定也少不了分析这个, 先暂放一边.\",\"接下来的逻辑会调用到我们这块实现的 afterPluginChanged() 方法, 这里用了一个定时类型的线程池, 去跑一个 Runnable 类型的任务 DataChangeTask.\",\"class DataChangeTask implements Runnable { @Override public void run() { // 遍历 clients for (Iterator<LongPollingClient> iter = clients.iterator(); iter.hasNext();) { LongPollingClient client = iter.next(); iter.remove(); // 说明完成 response 响应了 client.sendResponse(Collections.singletonList(groupKey)); log.info(\\\"send response with the changed group,ip={}, group={}, changeTime={}\\\", client.ip, groupKey, changeTime); } } } \",\"数据变动后使用线程池调到了这个方法, 拿取所有 clients , 一边遍历一边剔除元素, 且调用方法 sendResponse(), 像是标记已完成了响应.\",\"我来猜测下它干了什么, 这里的 clients 很有可能就是网关被 hold 住的请求, 而 sendResponse() 则很有可能就是真的给请求上下文加了响应信息. 还有一个关键动作就是结束 hold, 让网关接收到响应信息, 并在集合中剔除这个请求.\",\"我们现在追踪下 client 的产生, 它是 HttpLongPollingDataChangedListener 里的一个 BlockingQueue 阻塞队列, 在 LongPollingClient 中被定时检测\",\"class LongPollingClient implements Runnable { @Override public void run() { this.asyncTimeoutFuture = scheduler.schedule(() -> { clients.remove(LongPollingClient.this); List<ConfigGroupEnum> changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest()); sendResponse(changedGroups); }, timeoutTime, TimeUnit.MILLISECONDS); // 这里是关键, 表明来源 clients.add(this); } } \",\"先不去分析这个 remove() 的检测代码块, 直接看到最后一句的 add(), 这里就是 clients 数据来源.\",\"找到 LongPollingClient 被调用处, HttpLongPollingDataChangedListener#doLongPolling\",\"public void doLongPolling(final HttpServletRequest request, final HttpServletResponse response) { // ... // listen for configuration changed. // 开启同步阻塞请求 final AsyncContext asyncContext = request.startAsync(); // AsyncContext.settimeout() does not timeout properly, so you have to control it yourself asyncContext.setTimeout(0L); // block client's thread. // 线程池调用 LongPollingClient#run scheduler.execute(new LongPollingClient(asyncContext, clientIp, HttpConstants.SERVER_MAX_HOLD_TIMEOUT)); } \",\"这里的最后一句会调用并添加 client, 这里有行关键代码阻塞住了请求:\",\"final AsyncContext asyncContext = request.startAsync(); \",\"而在 LongPollingClient#sendResponse 中, 刚刚也分析了, 除了包装注入响应信息, 还会将 hold 住的请求释放\",\"class LongPollingClient implements Runnable { void sendResponse(final List<ConfigGroupEnum> changedGroups) { // cancel scheduler if (null != asyncTimeoutFuture) { asyncTimeoutFuture.cancel(false); } generateResponse((HttpServletResponse) asyncContext.getResponse(), changedGroups); // 同步完成结束阻塞 asyncContext.complete(); } } \",\"这块分析完了再回到 doLongPolling(), 其中线程池调用这还有个关键点\",\"scheduler.execute(new LongPollingClient(asyncContext, clientIp, HttpConstants.SERVER_MAX_HOLD_TIMEOUT)); \",\"这里给 LongPollingClient 传入了 60S 的 timeout 时间, 做什么用的呢? 还记得我们在 LongPollingClient#run 时略过的一块代码吗\",\"class LongPollingClient implements Runnable { @Override public void run() { // 定时启动, 延迟时间根据 timeoutTime this.asyncTimeoutFuture = scheduler.schedule(() -> { // 移除管理的连接 clients.remove(LongPollingClient.this); List<ConfigGroupEnum> changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest()); // 这个方法会将阻塞的请求释放 sendResponse(changedGroups); }, timeoutTime, TimeUnit.MILLISECONDS); clients.add(this); } } \",\"这里我们已经搞懂了后台这块对长轮询流程的实现, 最后再看看 doLongPolling() 是怎么被调用到的, 找到调用类 ConfigController\",\"@ConditionalOnBean(HttpLongPollingDataChangedListener.class) @RestController @RequestMapping(\\\"/configs\\\") @Slf4j public class ConfigController { @PostMapping(value = \\\"/listener\\\") public void listener(final HttpServletRequest request, final HttpServletResponse response) { longPollingListener.doLongPolling(request, response); } } \",\"看到这也基本明了, 后台通过这个 Controller 暴露 http 路径供网关调用并监听数据变化.\"]},\"99\":{\"h\":\"总结\",\"t\":[\"后台通过 Controller 层暴露 API 给网关, 网关请求后台时后台并不是立即返回响应 (数据有无变化), 而是 hold 住请求最大 60 秒的时间. 这些被 hold 住的请求会加入到阻塞队列中作为内存缓存.\",\"这 60 秒钟如果有数据变化, 通过 DataChangedEventDispatcher 分发到我们的 HttpLongPollingDataChangedListener , 则 立即调用线程池 在阻塞队列中遍历所有被 hold 住的请求, 塞入响应信息并释放掉.\",\"如果 60 秒过后依然没有数据变化, hold 住的请求会被释放, 且阻塞队列的对应请求对象被剔除.\",\"到这里, 我们已经理清它最最基本的长轮询逻辑, 那么对应下一开始的思考, 看有什么结论 or 疑惑.\",\"数据怎样知道是有变化的, 是不是设置个最后更新时间, 与网关的请求时间比较, 得出是否有数据修改?\",\"hold 住之后, 后台怎么获知是否数据更新, 反复遍历还是阻塞等待?\",\"那些用于更新的数据放哪里, 用缓存的话, 考虑后台缓存与数据库的交互是怎样的.\",\"针对第 1 点, 我们是如何得知数据有变化的呢?\",\"目前我们分析的数据变动来源是 DataChangedEventDispatcher, 它可不仅仅只会在数据变动时告知我们信息, 每次手动点下后台同步这里立马就来调用了.\",\"那么这里肯定有新旧数据比对之类的东西了, 不然每次调用就直接把网关的阻塞请求放跑了, 这可不成, 白白的 IO 消耗肯定不是个好设计.\",\"针对第 2 点, 我们现在知道了模式是阻塞等待, 利用的是 AsyncContext 这种方式, 这块我也没有了解过, 会出个番外讨论一二.\",\"针对第 3 点, 我们知道后台配置肯定修改完是要落盘到数据库的, 所以这块缓存与数据库的交互也是个值得分析的点. 这些疑问我会在下一章继续分析~\"]},\"100\":{\"h\":\"Soul网关学习Http长轮询解析02\"},\"101\":{\"h\":\"后台与网关数据同步 (Http 长轮询篇)\",\"t\":[\"长轮询分析的最后一篇, 总结网关端的长轮询的实现, 以及数据流动方式.\",\"网关端长轮询的流程总体也分两个模块: 一是启动时拉取, 二是轮询监听变化\"]},\"102\":{\"h\":\"网关启动时拉取数据\",\"t\":[\"网关启动后, 会调用后台提供的接口拉取数据, 并将数据发送到各个插件的数据处理类中\",\"下面展示下网关启动拉取数据的处理流程:\",\"这几个处理步骤被分散到下面这些类的方法协作中:\",\"02\",\"HttpSyncDataService#start: 网关启动时, HttpSyncDataService 初始化会调用 start() 方法, 该方法会调用后台拉取数据, 并开启多个线程进行轮询监听 (这块在下个模块分析)\",\"public class HttpSyncDataService implements SyncDataService, AutoCloseable { private void start() { // 防止二次调用的CAS操作 if (RUNNING.compareAndSet(false, true)) { // 这里是本次流程的重点, 调用拉取数据的方法 this.fetchGroupConfig(ConfigGroupEnum.values()); int threadSize = serverList.size(); // 这里将在下个模块分析, 会根据后台集群开启线程轮询监听 this.executor = new ThreadPoolExecutor(threadSize, threadSize, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), SoulThreadFactory.create(\\\"http-long-polling\\\", true)); this.serverList.forEach(server -> this.executor.execute(new HttpLongPollingTask(server))); } else { log.info(\\\"soul http long polling was started, executor=[{}]\\\", executor); } } } \",\"HttpSyncDataService#fetchGroupConfig: 作用仅是根据数据类型, 循环多次调用拉取数据方法(针对同一个后台会请求多次, 每次拉取某一种数据类型的信息), 这里的数据类型指的是 plugin、rule、selector 等\",\"private void fetchGroupConfig(final ConfigGroupEnum... groups) throws SoulException { for (int index = 0; index < this.serverList.size(); index++) { String server = serverList.get(index); try { // 根据传入的数据类型枚举, 多次调用拉取数据方法 this.doFetchGroupConfig(server, groups); break; } catch (SoulException e) { if (index >= serverList.size() - 1) { throw e; } log.warn(\\\"fetch config fail, try another one: {}\\\", serverList.get(index + 1)); } } } \",\"HttpSyncDataService#doFetchGroupConfig: 请求后台的 /configs/fetch 接口, 拿到某个类型的数据, 并更新缓存. 更新缓存前会检测是否变动, 如果变动则结束, 数据未发生变动则睡眠 30s (由于是第一次启动, 数据为空的情况下肯定会更新缓存, 所以会直接结束)\",\"private void doFetchGroupConfig(final String server, final ConfigGroupEnum... groups) { StringBuilder params = new StringBuilder(); for (ConfigGroupEnum groupKey : groups) { params.append(\\\"groupKeys\\\").append(\\\"=\\\").append(groupKey.name()).append(\\\"&\\\"); } // 具体请求路径, 拉取后台数据 String url = server + \\\"/configs/fetch?\\\" + StringUtils.removeEnd(params.toString(), \\\"&\\\"); log.info(\\\"request configs: [{}]\\\", url); String json = null; try { json = this.httpClient.getForObject(url, String.class); } catch (RestClientException e) { String message = String.format(\\\"fetch config fail from server[%s], %s\\\", url, e.getMessage()); log.warn(message); throw new SoulException(message, e); } // 修改缓存信息 boolean updated = this.updateCacheWithJson(json); // 判断是否修改, 修改则直接结束 if (updated) { log.info(\\\"get latest configs: [{}]\\\", json); return; } log.info(\\\"The config of the server[{}] has not been updated or is out of date. Wait for 30s to listen for changes again.\\\", server); ThreadUtils.sleep(TimeUnit.SECONDS, 30); } \",\"HttpSyncDataService#updateCacheWithJson: 取出响应信息中的 data , 即变化的数据信息, 传给数据刷新工厂 DataRefreshFactory\",\"private DataRefreshFactory factory; public HttpSyncDataService(...){ this.factory = new DataRefreshFactory(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers); } private boolean updateCacheWithJson(final String json) { JsonObject jsonObject = GSON.fromJson(json, JsonObject.class); JsonObject data = jsonObject.getAsJsonObject(\\\"data\\\"); return factory.executor(data); } \",\"DataRefreshFactory#executor: 将数据发送给各类数据刷新类 (这里没有去区别信息类型, 而是通知所有数据刷新类, 可考虑优化)\",\"public final class DataRefreshFactory { private static final EnumMap<ConfigGroupEnum, DataRefresh> ENUM_MAP = new EnumMap<>(ConfigGroupEnum.class); public DataRefreshFactory(final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { // 注入各类型订阅器到 MAP 中 ENUM_MAP.put(ConfigGroupEnum.PLUGIN, new PluginDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.SELECTOR, new SelectorDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.RULE, new RuleDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.APP_AUTH, new AppAuthDataRefresh(authDataSubscribers)); ENUM_MAP.put(ConfigGroupEnum.META_DATA, new MetaDataRefresh(metaDataSubscribers)); } public boolean executor(final JsonObject data) { final boolean[] success = {false}; // Tureen: 所有数据类型的 DataRefresh 全调用 ENUM_MAP.values().parallelStream().forEach(dataRefresh -> success[0] = dataRefresh.refresh(data)); return success[0]; } } \",\"AbstractDataRefresh#refresh: 判断是否要更新缓存, 若更新则调用各类型的 refresh() 方法\",\"@Override public Boolean refresh(final JsonObject data) { boolean updated = false; JsonObject jsonObject = convert(data); if (null != jsonObject) { ConfigData<T> result = fromJson(jsonObject); if (this.updateCacheIfNeed(result)) { updated = true; // Turren: 调用 refresh refresh(result.getData()); } } return updated; } \",\"PluginDataRefresh#refresh: 调用 plugin 的订阅器, 接下来会通知所有扩展插件的相关事件变动\",\"@Override protected void refresh(final List<PluginData> data) { if (CollectionUtils.isEmpty(data)) { log.info(\\\"clear all plugin data cache\\\"); pluginDataSubscriber.refreshPluginDataAll(); } else { pluginDataSubscriber.refreshPluginDataAll(); // Turren: http同步, 调用插件数据订阅器 data.forEach(pluginDataSubscriber::onSubscribe); } } \"]},\"103\":{\"h\":\"网关轮询监听变化\",\"t\":[\"网关启动时, 同时也开启了线程做后台监听请求, 监听请求做了 while 死循环来轮询, 在后台端会劫持住请求, 这块在后台总结中有具体分析 (后台与网关数据同步 (Http 长轮询篇 <二>))\",\"下面展示下网关监听数据变动的整体流程:\",\"03\",\"对应的实际代码实现如下:\",\"04\",\"网关端监听的流程实现都在 HttpSyncDataService 类中, 在最后会经由 doFetchGroupConfig() 传到到各类订阅器, 后面的流程与启动时的一致\",\"HttpSyncDataService#start: 启动线程执行 HttpLongPollingTask 这个 Runnable\",\"HttpLongPollingTask#run: 开启循环调用轮询方法.\",\"@Override public void run() { while (RUNNING.get()) { for (int time = 1; time <= retryTimes; time++) { try { doLongPolling(server); } catch (Exception e) { if (time < retryTimes) { log.warn(\\\"Long polling failed, tried {} times, {} times left, will be suspended for a while! {}\\\", time, retryTimes - time, e.getMessage()); ThreadUtils.sleep(TimeUnit.SECONDS, 5); continue; } log.error(\\\"Long polling failed, try again after 5 minutes!\\\", e); ThreadUtils.sleep(TimeUnit.MINUTES, 5); } } } } \",\"HttpLongPollingTask#doLongPolling: 得到监听请求的响应结果, 如果返回值中有变化的类型, 则调用数据拉取方法.\",\"private void doLongPolling(final String server) { // 从缓存中获取数据 MultiValueMap<String, String> params = new LinkedMultiValueMap<>(8); for (ConfigGroupEnum group : ConfigGroupEnum.values()) { ConfigData<?> cacheConfig = factory.cacheConfigData(group); String value = String.join(\\\",\\\", cacheConfig.getMd5(), String.valueOf(cacheConfig.getLastModifyTime())); params.put(group.name(), Lists.newArrayList(value)); } // 构建 http 请求信息 HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED); HttpEntity httpEntity = new HttpEntity(params, headers); String listenerUrl = server + \\\"/configs/listener\\\"; log.debug(\\\"request listener configs: [{}]\\\", listenerUrl); JsonArray groupJson = null; try { String json = this.httpClient.postForEntity(listenerUrl, httpEntity, String.class).getBody(); groupJson = GSON.fromJson(json, JsonObject.class).getAsJsonArray(\\\"data\\\"); } catch (RestClientException e) { String message = String.format(\\\"listener configs fail, server:[%s], %s\\\", server, e.getMessage()); throw new SoulException(message, e); } // 得到变化的类型 if (groupJson != null) { ConfigGroupEnum[] changedGroups = GSON.fromJson(groupJson, ConfigGroupEnum[].class); if (ArrayUtils.isNotEmpty(changedGroups)) { log.info(\\\"Group config changed: {}\\\", Arrays.toString(changedGroups)); // 拉取后台对应类型的数据 this.doFetchGroupConfig(server, changedGroups); } } } \",\"LongPollingClient#doFetchGroupConfig:\",\"之前的启动里分析了这块的代码, 它与启动里最不同的点是, 如果拉取的数据与缓存比对后, 发现没有变化则睡眠 30s, 会导致下次的监听延后 30s.\",\"什么意思呢? 如果网关去 fetch 后台的数据, 拿回来比对后发现被骗了! 啥变化也没有, 就等 30s 再启动下次监听, 这个期间如果后台发生数据变化肯定是没法通知到网关的.\",\"网关为什么这么做? 自然是为了防止大量的循环的无用拉取, 如果后台出现问题不断的通知数据变动, 但实际没有任何变动, 那么网关不延迟就会与后台产生大量无用的 网络 IO 与 数据交换\"]},\"104\":{\"h\":\"Soul网关学习WebSocket数据同步解析\",\"t\":[\"范金鹏\",\"在第 4 篇中，我们分析了 HTTP 用户业务系统接入 Soul 网关后，会调用 soul-admin 的注册接口，把需要网关代理的接口信息全部注册到 soul-admin 上，在最后，会通过 websocket 长连接，将 soul-admin 接收到的接口信息同步给 Soul 网关（即 soul-bootstrap），今天就来接着继续分析，数据是怎么同步到 soul-bootstrap 的。\",\"不清楚流程的可以出门左转看下第 4 篇文章 【Soul 源码阅读】4.HTTP 用户接入 Soul 调用 /soul-client/springmvc-register 接口逻辑分析\",\"这里为了验证数据同步流程，其实也没必要非得启动业务系统，完全可以只启动 soul-admin 和 soul-bootstrap 两个系统即可，可以在页面打开或关闭插件，看看这个流程是怎么实现的。\",\"数据同步策略官网链接 https://dromara.org/zh-cn/docs/soul/user-dataSync.html\"]},\"105\":{\"h\":\"2.1 启动 2 个系统\",\"t\":[\"都是按照项目默认启动的，无需修改任何配置文件。\"]},\"106\":{\"h\":\"2.2 页面操作查找接口\",\"t\":[\"这里把 divide 插件启动，F12，看下前台会调用 soul-admin 哪个接口。\",\"open_divide_plugin\",\"可以看到前台向后台发送了一个 PUT 请求：http://localhost:9095/plugin/5\"]},\"107\":{\"h\":\"2.3 后台接口\",\"t\":[\"在项目中搜索这个接口\",\"// PluginController.java @RestController @RequestMapping(\\\"/plugin\\\") public class PluginController { ... /** * update plugin. * * @param id primary key. * @param pluginDTO plugin. * @return {@linkplain SoulAdminResult} */ @PutMapping(\\\"/{id}\\\") public SoulAdminResult updatePlugin(@PathVariable(\\\"id\\\") final String id, @RequestBody final PluginDTO pluginDTO) { Objects.requireNonNull(pluginDTO); pluginDTO.setId(id); final String result = pluginService.createOrUpdate(pluginDTO); if (StringUtils.isNoneBlank(result)) { return SoulAdminResult.error(result); } return SoulAdminResult.success(SoulResultMessage.UPDATE_SUCCESS); } ... } \",\"进到实现类里\",\"// PluginServiceImpl.java /** * create or update plugin. * * @param pluginDTO {@linkplain PluginDTO} * @return rows */ @Override @Transactional(rollbackFor = Exception.class) public String createOrUpdate(final PluginDTO pluginDTO) { final String msg = checkData(pluginDTO); if (StringUtils.isNoneBlank(msg)) { return msg; } PluginDO pluginDO = PluginDO.buildPluginDO(pluginDTO); DataEventTypeEnum eventType = DataEventTypeEnum.CREATE; if (StringUtils.isBlank(pluginDTO.getId())) { pluginMapper.insertSelective(pluginDO); } else { eventType = DataEventTypeEnum.UPDATE; pluginMapper.updateSelective(pluginDO); } // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, eventType, Collections.singletonList(PluginTransfer.INSTANCE.mapToData(pluginDO)))); return StringUtils.EMPTY; } \",\"这里可以看出来，前半部分都是在操作数据库，把相关信息持久化；后半部分是发布了一个事件。\"]},\"108\":{\"h\":\"2.4 发布事件\",\"t\":[\"这里发布的事件用 DataChangedEvent 封装了一层，再看里面有 1 个枚举，这里有很多种类型：\",\"/** * configuration group. * * @author huangxiaofeng */ public enum ConfigGroupEnum { APP_AUTH, PLUGIN, RULE, SELECTOR, META_DATA; ... } \",\"看到这几种类型，如果对第 4 篇还有印象的话，可以看出当时发送事件的类型就是 SELECTOR 和 RULE，现在是 PLUGIN，虽然类型不同，但不影响我们继续分析后面的逻辑，我们继续。\",\"另外一个 eventType 也是枚举，这里有 DELETE、CREATE、UPDATE、REFRESH、MYSELF 5 种类型，此时是 UPDATE。\",\"/** * The enum Data event type. * * @author xiaoyu */ public enum DataEventTypeEnum { /** * delete event. */ DELETE, /** * insert event. */ CREATE, /** * update event. */ UPDATE, /** * REFRESH data event type enum. */ REFRESH, /** * Myself data event type enum. */ MYSELF; ... } \"]},\"109\":{\"h\":\"2.5 监听事件\",\"t\":[\"找到监听事件的代码：\",\"// DataChangedEventDispatcher.java @Component public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { private ApplicationContext applicationContext; private List<DataChangedListener> listeners; public DataChangedEventDispatcher(final ApplicationContext applicationContext) { this.applicationContext = applicationContext; } @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } } \"]},\"110\":{\"h\":\"2.5.1 监听器注入\",\"t\":[\"可以看到 DataChangedEventDispatcher 实现了 InitializingBean 接口，覆写了 afterPropertiesSet 方法，并且使用了 @Component，当 Spring 启动时，会在容器加载完成后调用这个覆写方法。 afterPropertiesSet 方法中，把 DataChangedListener 类型的 Bean 全部获取后，放到类属性 listeners 里。\",\"那么问题来了，这些监听器是什么时候注入到容器中的呢？\",\"先看下 DataChangedListener 接口定义：\",\"/** * Event listener, used to send notification of event changes, * used to support HTTP, websocket, zookeeper and other event notifications. * * @author huangxiaofeng * @author xiaoyu */ public interface DataChangedListener { /** * invoke this method when AppAuth was received. * * @param changed the changed * @param eventType the event type */ default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Plugin was received. * * @param changed the changed * @param eventType the event type */ default void onPluginChanged(List<PluginData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Selector was received. * * @param changed the changed * @param eventType the event type */ default void onSelectorChanged(List<SelectorData> changed, DataEventTypeEnum eventType) { } /** * On meta data changed. * * @param changed the changed * @param eventType the event type */ default void onMetaDataChanged(List<MetaData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Rule was received. * * @param changed the changed * @param eventType the event type */ default void onRuleChanged(List<RuleData> changed, DataEventTypeEnum eventType) { } } \",\"可以看到接口中定义了 5 个方法，分别针对当监听到 appAuth、plugin、selector、metaData、rule 数据变动时对应的处理方法。\",\"其继承关系：\",\"DataChangedListener\",\"因为默认是采用的 websocket，这里的监听器对应的就是 WebsocketDataChangedListener，Alt + F7，搜索到这个类实例化的地方，就是如下的配置类：\",\"// DataSyncConfiguration.java @Configuration public class DataSyncConfiguration { /** * http long polling. */ @Configuration @ConditionalOnProperty(name = \\\"soul.sync.http.enabled\\\", havingValue = \\\"true\\\") @EnableConfigurationProperties(HttpSyncProperties.class) static class HttpLongPollingListener { @Bean @ConditionalOnMissingBean(HttpLongPollingDataChangedListener.class) public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) { return new HttpLongPollingDataChangedListener(httpSyncProperties); } } /** * The type Zookeeper listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.zookeeper\\\", name = \\\"url\\\") @Import(ZookeeperConfiguration.class) static class ZookeeperListener { @Bean @ConditionalOnMissingBean(ZookeeperDataChangedListener.class) public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) { return new ZookeeperDataChangedListener(zkClient); } @Bean @ConditionalOnMissingBean(ZookeeperDataInit.class) public ZookeeperDataInit zookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { return new ZookeeperDataInit(zkClient, syncDataService); } } /** * The type Nacos listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.nacos\\\", name = \\\"url\\\") @Import(NacosConfiguration.class) static class NacosListener { @Bean @ConditionalOnMissingBean(NacosDataChangedListener.class) public DataChangedListener nacosDataChangedListener(final ConfigService configService) { return new NacosDataChangedListener(configService); } } /** * The WebsocketListener(default strategy). */ @Configuration @ConditionalOnProperty(name = \\\"soul.sync.websocket.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) @EnableConfigurationProperties(WebsocketSyncProperties.class) static class WebsocketListener { @Bean @ConditionalOnMissingBean(WebsocketDataChangedListener.class) public DataChangedListener websocketDataChangedListener() { return new WebsocketDataChangedListener(); } @Bean @ConditionalOnMissingBean(WebsocketCollector.class) public WebsocketCollector websocketCollector() { return new WebsocketCollector(); } @Bean @ConditionalOnMissingBean(ServerEndpointExporter.class) public ServerEndpointExporter serverEndpointExporter() { return new ServerEndpointExporter(); } } } \",\"一共有 4 种同步数据策略，http 长轮询、zookeeper、nacos、websocket（默认策略）。\",\"看到 websocket 的注解 @ConditionalOnProperty(name = \\\"soul.sync.websocket.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true)，到配置文件中找到如下配置：\",\"soul: sync: websocket: enabled: true \",\"到这里就真相大白了。\",\"如果不想使用 websocket 的默认同步策略，在配置文件中写上对应的配置即可。\"]},\"111\":{\"h\":\"2.5.2 监听事件处理逻辑\",\"t\":[\"为了防止大家再翻回去看，不方便，我这里再把处理逻辑代码贴出来：\",\"// DataChangedEventDispatcher.java @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } \",\"这里遍历所有的监听器，对于目前的 websocket 只会有一个监听器，其他多个的情况暂时不知道什么时候会出现，这里存疑，后续碰到相关的 case 时再回来补充（// TODO）。\",\"根据发布事件的类型走不同的逻辑，这里分的类型跟 DataChangedListener 接口中定义的方法一一对应。\",\"这里的 listener 是 WebsocketDataChangedListener 的实例，会进到类中对应的方法：\",\"// WebsocketDataChangedListener.java public class WebsocketDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> pluginDataList, final DataEventTypeEnum eventType) { WebsocketData<PluginData> websocketData = new WebsocketData<>(ConfigGroupEnum.PLUGIN.name(), eventType.name(), pluginDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } @Override public void onSelectorChanged(final List<SelectorData> selectorDataList, final DataEventTypeEnum eventType) { WebsocketData<SelectorData> websocketData = new WebsocketData<>(ConfigGroupEnum.SELECTOR.name(), eventType.name(), selectorDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } @Override public void onRuleChanged(final List<RuleData> ruleDataList, final DataEventTypeEnum eventType) { WebsocketData<RuleData> configData = new WebsocketData<>(ConfigGroupEnum.RULE.name(), eventType.name(), ruleDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } @Override public void onAppAuthChanged(final List<AppAuthData> appAuthDataList, final DataEventTypeEnum eventType) { WebsocketData<AppAuthData> configData = new WebsocketData<>(ConfigGroupEnum.APP_AUTH.name(), eventType.name(), appAuthDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } @Override public void onMetaDataChanged(final List<MetaData> metaDataList, final DataEventTypeEnum eventType) { WebsocketData<MetaData> configData = new WebsocketData<>(ConfigGroupEnum.META_DATA.name(), eventType.name(), metaDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } } \",\"看到代码中，将数据封装为 WebsocketData 后，使用 WebsocketController.send 方法发送出去了。\"]},\"112\":{\"h\":\"2.6 同步数据给 soul-bootstrap\",\"t\":[\"// WebsocketCollector.java @Slf4j @ServerEndpoint(\\\"/websocket\\\") public class WebsocketCollector { private static final Set<Session> SESSION_SET = new CopyOnWriteArraySet<>(); private static final String SESSION_KEY = \\\"sessionKey\\\"; /** * On open. * * @param session the session */ @OnOpen public void onOpen(final Session session) { log.info(\\\"websocket on open successful....\\\"); SESSION_SET.add(session); } /** * On message. * * @param message the message * @param session the session */ @OnMessage public void onMessage(final String message, final Session session) { if (message.equals(DataEventTypeEnum.MYSELF.name())) { try { ThreadLocalUtil.put(SESSION_KEY, session); SpringBeanUtils.getInstance().getBean(SyncDataService.class).syncAll(DataEventTypeEnum.MYSELF); } finally { ThreadLocalUtil.clear(); } } } /** * On close. * * @param session the session */ @OnClose public void onClose(final Session session) { SESSION_SET.remove(session); ThreadLocalUtil.clear(); } /** * On error. * * @param session the session * @param error the error */ @OnError public void onError(final Session session, final Throwable error) { SESSION_SET.remove(session); ThreadLocalUtil.clear(); log.error(\\\"websocket collection error: \\\", error); } /** * Send. * * @param message the message * @param type the type */ public static void send(final String message, final DataEventTypeEnum type) { if (StringUtils.isNotBlank(message)) { if (DataEventTypeEnum.MYSELF == type) { try { Session session = (Session) ThreadLocalUtil.get(SESSION_KEY); if (session != null) { session.getBasicRemote().sendText(message); } } catch (IOException e) { log.error(\\\"websocket send result is exception: \\\", e); } return; } for (Session session : SESSION_SET) { try { session.getBasicRemote().sendText(message); } catch (IOException e) { log.error(\\\"websocket send result is exception: \\\", e); } } } } } \",\"WebsocketController 使用了 @ServerEndpoint(\\\"/websocket\\\") 注解，开启了一个 websocket 服务接口，等待连接。\",\"当 soul-bootstrap 启动后，会连接这个 websocket，这时触发 onOpen 方法，将此次连接信息的 Session 存放在 SESSION_SET 这个 Set 集合里。\",\"在 send 方法中，会先判断 DataEventTypeEnum type 是不是 MYSELF，这个 type 可以追溯到 2.3-2.4，此次是 UPDATE，关于什么时候是 MYSELF，还需要后续补充，此处存疑（// TODO）。\",\"下面的 for 循环遍历所有的 websocket 连接 Session，发送变动数据。\",\"到这里，默认的 websocket 同步数据策略就分析清楚了。\",\"朱明\"]},\"113\":{\"h\":\"后台与网关数据同步 (Websocket 篇)\"},\"114\":{\"h\":\"后台如何建立 Websocket?\",\"t\":[\" DataSyncConfiguration: 作为 Spring Bean 的配置工厂, 可以根据配置信息, 构建各类监听器, 包括 HTTP 长轮询方式、Zookeeper 方式、Nacos 方式、Websocket 方法.\",\"@Configuration public class DataSyncConfiguration { // soul-admin 项目的配置信息中, 使用 soul.sync.websocket.enabled 开启或关闭 websocket @Configuration @ConditionalOnProperty(name = \\\"soul.sync.websocket.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) @EnableConfigurationProperties(WebsocketSyncProperties.class) static class WebsocketListener { @Bean @ConditionalOnMissingBean(WebsocketCollector.class) public WebsocketCollector websocketCollector() { return new WebsocketCollector(); } } } \",\"WebsocketListener: 作为 DataSyncConfiguration 的内部类, 负责 websocket 监听器初始化. WebsocketCollector: 监听 websocket 连接及接收信息, 维护所有连接后台的 session 会话, 提供 send() 方法通知 session 信息.\"]},\"115\":{\"h\":\"网关如何建立 Websocket?\",\"t\":[\"06\",\"WebsocketSyncDataConfiguration: 作为 Spring Bean 的配置工厂, 是网关端构建 Websocket 通信的入口. (独立出一个启动项目 soul-spring-boot-starter-sync-data-websocket , 供网关自由选用)\",\"@Configuration @ConditionalOnClass(WebsocketSyncDataService.class) @ConditionalOnProperty(prefix = \\\"soul.sync.websocket\\\", name = \\\"urls\\\") @Slf4j public class WebsocketSyncDataConfiguration { // 收集所有注册为 Bean 的订阅器, 如 PluginDataSubscriber、MetaDataSubscriber、AuthDataSubscriber @Bean public SyncDataService websocketSyncDataService(final ObjectProvider<WebsocketConfig> websocketConfig, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use websocket sync soul data.......\\\"); return new WebsocketSyncDataService(websocketConfig.getIfAvailable(WebsocketConfig::new), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } // soul-bootstrap 项目的配置信息中, 使用 soul.sync.websocket 配置要建立连接的后台路径 @Bean @ConfigurationProperties(prefix = \\\"soul.sync.websocket\\\") public WebsocketConfig websocketConfig() { return new WebsocketConfig(); } } \",\"WebsocketSyncDataService: 获取所有注册为 Bean 的 WebsocketConfig 以及各种 DataSubscriber 订阅器, 构建实现了 WebsocketClient 的 SoulWebsocketClient 列表\",\"SoulWebsocketClient: Websocket 通信类, 监听 websocket 连接及接收信息, 在接收到后台传来的信息后会通知各个订阅器.\",\"public final class SoulWebsocketClient extends WebSocketClient { private final WebsocketDataHandler websocketDataHandler; private void handleResult(final String result) { WebsocketData websocketData = GsonUtils.getInstance().fromJson(result, WebsocketData.class); ConfigGroupEnum groupEnum = ConfigGroupEnum.acquireByName(websocketData.getGroupType()); // 根据传入信息得到数据变更的事件类型, 如 refresh、update、delete 等 String eventType = websocketData.getEventType(); String json = GsonUtils.getInstance().toJson(websocketData.getData()); websocketDataHandler.executor(groupEnum, json, eventType); } } \",\"WebsocketDataHandler: 初始化时构建各类实现 AbstractDataHandler 的数据处理类并缓存.\",\"public class WebsocketDataHandler { // 缓存所有 DataHandler 数据变动处理类 private static final EnumMap<ConfigGroupEnum, DataHandler> ENUM_MAP = new EnumMap<>(ConfigGroupEnum.class); public WebsocketDataHandler(final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { ENUM_MAP.put(ConfigGroupEnum.PLUGIN, new PluginDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.SELECTOR, new SelectorDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.RULE, new RuleDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.APP_AUTH, new AuthDataHandler(authDataSubscribers)); ENUM_MAP.put(ConfigGroupEnum.META_DATA, new MetaDataHandler(metaDataSubscribers)); } public void executor(final ConfigGroupEnum type, final String json, final String eventType) { // 根据数据变动事件类型, 调用相应的 DataHandler 数据处理类 ENUM_MAP.get(type).handle(json, eventType); } } \"]},\"116\":{\"h\":\"网关数据变动调用链\",\"t\":[\"实现 Websocket 通信的入口类 SoulWebsocketClient 在接到后台通信后, 调用 WebsocketDataHandler 的 executor() 方法匹配信息类型, 并调用对应的 DataHandler 的 handler() 去处理信息.\",\"07\",\"AbstractDataHandler: 实现 handler() 方法, 根据事件的类型 (如刷新、更新、创建、删除等), 调用对应事件抽象方法.\",\"public abstract class AbstractDataHandler<T> implements DataHandler { // 根据数据的事件类型 (eventType) 分发到各自方法, 这些被调用的方法由子类实现, 因为不同类型的元数据处理类的处理方式不同 @Override public void handle(final String json, final String eventType) { List<T> dataList = convert(json); if (CollectionUtils.isNotEmpty(dataList)) { DataEventTypeEnum eventTypeEnum = DataEventTypeEnum.acquireByName(eventType); switch (eventTypeEnum) { case REFRESH: case MYSELF: doRefresh(dataList); break; case UPDATE: case CREATE: doUpdate(dataList); break; case DELETE: doDelete(dataList); break; default: break; } } } } \",\"XXXDataHandler: 这里指的是 AbstractDataHandler 的各个实现类 (如 PluginDataHandler 等), 主要作用是调用其订阅器.\",\"不同的 DataHandler 调用的订阅方法不同:\",\"PluginDataHandler 会调用 onSubscribe() 通知插件元数据变更\",\"SelectorDataHandler 会调用 onSelectorSubscribe() 通知选择器元数据变更\",\"RuleDataHandler 会调用 onRuleSubscribe() 通知规则元数据变更\",\"@RequiredArgsConstructor public class PluginDataHandler extends AbstractDataHandler<PluginData> { private final PluginDataSubscriber pluginDataSubscriber; @Override protected void doUpdate(final List<PluginData> dataList) { // 调用订阅器的 onSubscribe(), 发送数据对象 PluginData dataList.forEach(pluginDataSubscriber::onSubscribe); } // ... } \",\"CommonPluginDataSubscriber: 订阅器的 onSubscribe() 方法会通知到所有注入为 Bean 的 PluginDataHandler 类 (不要和前面的同名类混淆, 它是 soul-plugin-base 下的接口, 它的实现类在各个可插拔插件包)\",\"image-20210122172333111\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { // 收集所有注册为 Bean 的数据处理器并缓存, 比如 HTTP 插件 divide 下的 DividePluginDataHandler private final Map<String, PluginDataHandler> handlerMap; // 插件元数据变动调用 @Override public void onSubscribe(final PluginData pluginData) { BaseDataCache.getInstance().cachePluginData(pluginData); Optional.ofNullable(handlerMap.get(pluginData.getName())).ifPresent(handler -> handler.handlerPlugin(pluginData)); } // 选择器元数据变动调用 @Override public void onSelectorSubscribe(final SelectorData selectorData) { BaseDataCache.getInstance().cacheSelectData(selectorData); Optional.ofNullable(handlerMap.get(selectorData.getPluginName())).ifPresent(handler -> handler.handlerSelector(selectorData)); } // 规则元数据变动调用 @Override public void onRuleSubscribe(final RuleData ruleData) { BaseDataCache.getInstance().cacheRuleData(ruleData); Optional.ofNullable(handlerMap.get(ruleData.getPluginName())).ifPresent(handler -> handler.handlerRule(ruleData)); } } \"]},\"117\":{\"h\":\"TIPS\",\"t\":[\"整个大项目下存在两个同名的类 PluginDataHandler, 其中一个在项目 soul-sync-data-websocket 下, 用于通知插件元数据变更, 另一个在 soul-plugin-base 下, 用于定义各个插件的各个类型元数据更新.\",\"总结下这两个类命名的意义, soul-sync-data-websocket 下类名的 \\\"plugin\\\" 指元数据的类型为插件类, soul-plugin-base 下类名的 \\\"plugin\\\" 指继承它的子类来自与各个可插播插件, 比如 divide、dubbo 插件等\"]},\"118\":{\"h\":\"Soul网关学习SPI学习使用\",\"t\":[\"在之前分析 divide 插件的负载均衡策略时, 有看到过一行代码:\",\"DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); \",\"当时很简单的略过了它的实现, 它的作用很容易分析, 调用一个看似工具类的方法, 传入多个节点组成的集群, 返回一个节点. 这是一个负载均衡器.\",\"但是细节却非常多, 最重要的一点是使用 SPI 来选择具体的实现类. 看看这个方法的代码:\",\"public class LoadBalanceUtils { public static DivideUpstream selector(final List<DivideUpstream> upstreamList, final String algorithm, final String ip) { // 调用自定义的 SPI 得到一个子类 LoadBalance loadBalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); return loadBalance.select(upstreamList, ip); } } \",\"后面的是调用具体子类的 select() 方法, 根据子类的不同实现, 最终会表现出各种形式. 目前的子类实现有:\",\"HashLoadBalance\",\"RandomLoadBalance\",\"RoundRobinLoadBalance\",\"关键就在于 ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); 这行.\",\"在研究它之前, 我们先不妨研究下 Java 提供的 SPI 机制.\"]},\"119\":{\"h\":\"Java SPI\",\"t\":[\"<<高可用可伸缩微服务架构>> 第 3 章 Apache Dubbo 框架的原理与实现 中有这样的一句定义.\",\"SPI 全称为 Service Provider Interface, 是 JDK 内置的一种服务提供发现功能, 一种动态替换发现的机制. 举个例子, 要想在运行时动态地给一个接口添加实现, 只需要添加一个实现即可.\",\"书中也有个非常形象的脑图, 展示了 SPI 的使用:\",\"08\",\"也就是说在我们代码中的实现里, 无需去写入一个 Factory 工厂, 用 MAP 去包装一些子类, 最终返回的类型是父接口. 只需要定义好资源文件, 让父接口与它的子类在文件中写明, 即可通过设置好的方式拿到所有定义的子类对象:\",\"ServiceLoader<Interface> loaders = ServiceLoader.load(Interface.class) for(Interface interface : loaders){ System.out.println(interface.toString()); } \",\"这种方式相比与普通的工厂模式, 肯定是更符合开闭原则, 新加入一个子类不用去修改工厂方法, 而是编辑资源文件.\"]},\"120\":{\"h\":\"从一个 Demo 开始\",\"t\":[\"按照 SPI 的规范, 我建了一个 demo, 看看具体的实现效果\",\"image-20210129095623013\",\"image-20210129095703911\",\"Animal 中定义一个 run() 方法, 而子类实现它.\",\"public interface Animal { void run(); } public class Dog implements Animal { @Override public void run() { System.out.println(\\\"狗在跑\\\"); } } public class Horse implements Animal { @Override public void run() { System.out.println(\\\"马在跑\\\"); } } \",\"使用 SPI 的加载类, 得到子类的执行结果:\",\"private static void test() { final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\"image-20210129103047851\",\"在调用后我们得到之前在资源文件中写入的实现类, 并成功调取它们各自的 run() 方法.\",\"到这里我产生一个疑问, 是否每次调用 ServiceLoader.load(Animal.class) 返回的都是同一个对象? 如果是我猜测它是在启动时加载到缓存了, 如果不是, 可能就是在底层用了反射, 每次调用都有一定消耗. 我们看看下面的实验:\",\"public static void main(String[] args) { for (int i = 0; i < 2; i++) { test(); System.out.println(\\\"----------\\\"); } } private static void test() { final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\"image-20210129103451844\",\"两次调用出现的对象却不一样, 不由让我替其性能揪心一下, 所以我们先分析下它的代码, 看看到底怎么实现.\"]},\"121\":{\"h\":\"SPI 的实现\",\"t\":[\"找到 java.util,ServiceLoaders 这个类, 入眼最醒目的就是之前我们按照规范放置资源文件的目录\",\"public final class ServiceLoader<S> implements Iterable<S> { private static final String PREFIX = \\\"META-INF/services/\\\"; } \",\"在 debug PREFIX 属性的被调用处时, 发现 ServiceLoader.load 实际是使用懒加载的方式, 并没有在调用它的时候, 找寻到实际返回类, 而是在遍历时查找.\",\"它的懒加载具体实现在如下代码:\",\"public final class ServiceLoader<S> implements Iterable<S> { public static <S> ServiceLoader<S> load(Class<S> service) { // 获取当前的类加载器 (我们自己的通常是弟中弟 AppClassLoader ) ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); } public static <S> ServiceLoader<S> load(Class<S> service, ClassLoader loader) { // 调用构造器初始化对象 (说明每次调用都使用新的 ServiceLoader 对象) return new ServiceLoader<>(service, loader); } private ServiceLoader(Class<S> svc, ClassLoader cl) { service = Objects.requireNonNull(svc, \\\"Service interface cannot be null\\\"); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; // 上面都是将信息放入对象实例属性中, 这行才是关键调用 reload(); } public void reload() { providers.clear(); // 创建懒加载迭代器, 传入关键的接口 Class 以及加载器 lookupIterator = new LazyIterator(service, loader); } } \",\"调用 ServiceLoader.load 后关键事情都没干, 仅仅是将接口 class 和加载器传给 LazyIterator 这个迭代器的实现类.\",\"看到这可以猜测, 真正迭代调用返回的对象时, 肯定需要迭代器完成实现类的搜索和初始化, 而传参是 Class 信息和加载器, 实现类的初始化也明显会是反射了.\",\"看下 LazyIterator 的实现方式, 先从其最开始会被调用到的 hasNext() 开始:\",\"private class LazyIterator implements Iterator<S> { public boolean hasNext() { if (acc == null) { return hasNextService(); } else { // ... } } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else // 加载资源文件 configs = loader.getResources(fullName); } catch (IOException x) { fail(service, \\\"Error locating configuration files\\\", x); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } // 解析出资源文件中写入的实现类类名 pending = parse(service, configs.nextElement()); } // 获取一个类名 nextName = pending.next(); return true; } } \",\"image-20210129111231212\",\"hasNext() 的调用可以获取到我们资源中的类名, 写入到实例属性 nextName 中, 并返回 true, 让迭代器可以进行 next() 的调用\",\"public S next() { if (acc == null) { return nextService(); } else { // ... } } private S nextService() { if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class<?> c = null; try { // 反射得到 Class 对象 c = Class.forName(cn, false, loader); } catch (ClassNotFoundException x) { fail(service, \\\"Provider \\\" + cn + \\\" not found\\\"); } if (!service.isAssignableFrom(c)) { fail(service, \\\"Provider \\\" + cn + \\\" not a subtype\\\"); } try { // 初始化对象, 并判断是否与接口符合 S p = service.cast(c.newInstance()); // 将初始化的对象放入hash缓存 (关键步骤) providers.put(cn, p); return p; } catch (Throwable x) { fail(service, \\\"Provider \\\" + cn + \\\" could not be instantiated\\\", x); } throw new Error(); // This cannot happen } \",\"看到这里我们明白了, 在初始化后会将对象放入缓存中, key 就是接口 class 二次调用不会再有反射消耗.\",\"那么之前我们在测试时的方式为什么会产生不同对象实例呢? 原因就是每次调用 ServiceLoader.load() 都会产生新的 ServiceLoader 对象. 我们将测试方法改进下:\",\"public static void main(String[] args) { // 复用 ServiceLoaders final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (int i = 0; i < 2; i++) { test(load); System.out.println(\\\"----------\\\"); } } private static void test(ServiceLoader<Animal> load) { for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\"image-20210129113307494\"]},\"122\":{\"h\":\"Java SPI 思考\",\"t\":[\"Java SPI 中我们还有很多的细节没有描述到, 但主流程就是这些. 我们之前的两个疑问点, 如何实现以及性能情况也可以得到解答:\",\"如何实现: 通过 IO 流读取到资源文件, 反射加载对应路径并生成 Class 对象, 初始化后放入缓存中\",\"性能情况: 首次迭代调用即会有反射调用, 但多次使用时, 只要保证是用同一个 ServiceLoader 对象, 即可避免多次反射, 因为会直接复用缓存中的对象.\",\"写到这我有个非常疑惑的地方, 之前我觉得它和工厂方法很类似但比它有优势, 因为添加子类后仅需用改动资源文件不用变动工厂类.\",\"但我尝试用 Java SPI 去真正实现时, 发现并不能达到这个效果, 一个重要的原因是, 资源文件中的各个实现类没有区分度, 我无法去筛选出某一个我需要的缓存在 ServiceLoaders 中的实现类.\",\"那么它的使用场景在哪呢?\"]},\"123\":{\"h\":\"JDBC SPI 使用方式\",\"t\":[\"经过查阅资料得知, 在 JDBC 中最关键的可插拔式驱动设计就是由 SPI 实现.\"]},\"124\":{\"h\":\"Mysql 驱动包 SPI\",\"t\":[\"各个数据库连接包中关于 JDBC 方式实现, 都需要实现其 Driver 接口, 这块其实用的就是 SPI 的方式, 我们看看 mysql-connector-java.jar\",\"image-20210130202512831\",\"那么 JDK 中的 JDBC 相关类, 是如何实现这块的? 关键类就是 DriverManager\",\"public class DriverManager { static { loadInitialDrivers(); } private static void loadInitialDrivers() { // ... AccessController.doPrivileged(new PrivilegedAction<Void>() { public Void run() { // 这里就是 SPI 的实现, 迭代时实际会 Class.forName() 初始化实现类 ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); Iterator<Driver> driversIterator = loadedDrivers.iterator(); try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); // ... } } \",\"如果代码中调用到 DriverManager 的静态方法, 即会触发上面这些代码, 而这些代码的作用便是将 SPI 资源文件中 Driver 实现类全部初始化, 那么初始化实现类后又有什么作用呢? 接着看看 com.mysql.jdbc.Driver\",\"public class Driver extends NonRegisteringDriver implements java.sql.Driver { static { try { // 调用 DriverManager 的注册方法, 将此 Driver 实现类注册到 JDBC 的 Driver 管理器中 java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(\\\"Can't register driver!\\\"); } } } \",\"DriverManager 的注册方法实现很简单, 即将入参放入静态变量作为全局缓存\",\"public class DriverManager { // 缓存 Driver 实现类 private final static CopyOnWriteArrayList<DriverInfo> registeredDrivers = new CopyOnWriteArrayList<>(); public static synchronized void registerDriver(java.sql.Driver driver) throws SQLException { registerDriver(driver, null); } public static synchronized void registerDriver(java.sql.Driver driver, DriverAction da) throws SQLException { if(driver != null) { // 注册到变量中 registeredDrivers.addIfAbsent(new DriverInfo(driver, da)); } else { throw new NullPointerException(); } } } \"]},\"125\":{\"h\":\"筛选 Driver: 约定大于配置\",\"t\":[\"正常使用时, 我们会直接用 DriverManager.getConnection(url, user, passwd) 获取到连接, 但这里就有疑问了, 我们在 DriverManager 中注册了多个 Driver, 为什么这里能确定一个唯一 Driver 呢?\",\"先找到 DriverManager 的 getConnection() 方法:\",\"public static Connection getConnection(String url, String user, String password) throws SQLException { // ... return (getConnection(url, info, Reflection.getCallerClass())); } private static Connection getConnection( String url, java.util.Properties info, Class<?> caller) throws SQLException { // ... for(DriverInfo aDriver : registeredDrivers) { // isDriverAllowed() 仅是通过 Class.forName() 初始化, 没有甄别作用 if(isDriverAllowed(aDriver.driver, callerCL)) { try { // 最关键的点在这行, 筛选工作其实在实现类自身的 connect() 方法中, 会根据传入的 url 筛选 Connection con = aDriver.driver.connect(url, info); if (con != null) { return (con); } } catch (SQLException ex) { } } else { } } // ... } \",\"看看最重要的 Mysql 的 Driver 中如何实现筛选 (Driver 继承自 NonRegisteringDriver)\",\"public class NonRegisteringDriver implements java.sql.Driver { private static final String URL_PREFIX = \\\"jdbc:mysql://\\\"; private static final String REPLICATION_URL_PREFIX = \\\"jdbc:mysql:replication://\\\"; private static final String MXJ_URL_PREFIX = \\\"jdbc:mysql:mxj://\\\"; public static final String LOADBALANCE_URL_PREFIX = \\\"jdbc:mysql:loadbalance://\\\"; public java.sql.Connection connect(String url, Properties info) throws SQLException { // ... // parseURL() 会匹配 url 是否符合其所在 Driver 的连接方式 // 这里就是采用\\\"约定大于配置\\\"的思想, 通过匹配路径头做筛选 if ((props = parseURL(url, info)) == null) { return null; } // ... } public Properties parseURL(String url, Properties defaults) throws java.sql.SQLException { // ... // 如果 url 不匹配此 Driver 的路径则返回null, 最外层会继续尝试下个 Driver if (!StringUtils.startsWithIgnoreCase(url, URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, MXJ_URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, LOADBALANCE_URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, REPLICATION_URL_PREFIX)) { return null; } // ... } } \"]},\"126\":{\"h\":\"总结 MySQL & JDBC\",\"t\":[\"看到这里我想你已经了解 MySQL & JDBC 中关于 SPI 的实现方式了, 归纳几点\",\"JDBC 中的 DriverManager 会加载 SPI 资源文件, 将 java.sql.Driver 的实现类全部初始化\",\"其实现类初始化时, 会自主创建自身对象并注入到 DriverManager 中进行统一管理\",\"DriverManager 对于管理的 Driver 筛选方式是交由 Driver 实现类自身进行的, 它仅负责遍历并取出可用的 Driver\",\"Driver 实现类通过传入的数据库 url 头, 判断是否该返回自身. 如果判断为否则返回 null. JDBC 的 DriverManager 接收到 null 会继续下个 Driver 实现类的调用.\",\"MySql 驱动实选方案是路径头匹配, 是一种 约定大于配置的思想\"]},\"127\":{\"h\":\"JDBC Demo\",\"t\":[\"写完这些分析我们再来看如果实现个简单的 demo.\",\"先分享个我以前写的方式\",\"static { try { // 反射, 该类加载时会在静态块中, 向 DriverManager 注册 Driver Class.forName(\\\"com.mysql.jdbc.Driver\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } public static void main(String[] args) { try ( final Connection conn = DriverManager.getConnection(url, user, passwd); final Statement stmt = conn.createStatement(); final ResultSet rs = stmt.executeQuery(\\\"select count(1) from test\\\") ) { while (rs.next()) { int count = rs.getInt(\\\"count(1)\\\"); System.out.println(count); } } catch (Exception e) { e.printStackTrace(); } } \",\"虽然这样可以使用, 但不觉得有多余的代码吗? 看看我新写的方式\",\"public static void main(String[] args) throws ClassNotFoundException { try ( final Connection conn = DriverManager.getConnection(url, user, passwd); final Statement stmt = conn.createStatement(); final ResultSet rs = stmt.executeQuery(\\\"select count(1) from test\\\") ) { while (rs.next()) { int count = rs.getInt(\\\"count(1)\\\"); System.out.println(count); } } catch (Exception e) { e.printStackTrace(); } } \",\"仅仅需要这些简单的代码即可, DriverManager.getConnection() 被调用时 DriverManager 会自动加载 SPI 中的实现类, 不需要我们再去 Class.forName() 手动调用 java.mysql.Driver 的初始化.\",\"看到这里我想你依然明白 SPI 最最重要的作用了. 无需显式的写出接口对应的实现类\",\"那么我们还有个在 \\\"Java SPI 思考\\\" 中的问题也解开了. **如何区分出 SPI 中要使用的实现类呢? 让实现类自己判定即可, 外层调用仅需迭代所有. **\"]},\"128\":{\"h\":\"SOUL SPI 实现\",\"t\":[\"Java 中 SPI 的使用方式我们已经掰开来了解透彻了, 而 Soul 中的 SPI 是自己设计的, 采用 Dubbo 中 SPI 的设计思想. 在 org.dromara.soul.spi.SPI 注释类上可以看到相关注释.\",\"/** * SPI Extend the processing. * All spi system reference the apache implementation of * https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension. */ \"]},\"129\":{\"h\":\"Java SPI 缺陷\",\"t\":[\"在上两个模块中分析 Java SPI 使用时, 发现了些缺点:\",\"如果使用 ServiceLoader 不当, 没有正确利用到它的缓存机制, 会导致每次获取具体实现类都要反射出类对象以及初始化实例对象, 性能完蛋不说, 每次得到的对象都不一样可能会引发程序问题.\",\"即每次找寻具体实现类都要迭代一遍才行, 虽然子类少的使用没什么影响, 但这种方式还是很傻. 另外参考 MySQL 驱动中 JDBC 的实现, 还需要自行设计一套比较复杂的筛选机制.\",\"那么 Soul SPI 的实现, 是如何解决这两个问题的? 关键就在接下来的两个子模块中\",\"优化的 ExtensionLoader\",\"增强型 getJoin()\"]},\"130\":{\"h\":\"优化的 ExtensionLoader\",\"t\":[\"先来看 SPI 实现项目的全貌, 项目为 soul-spi:\",\"image-20210130214402997\",\"其中最核心的类就是 ExtensionLoader, 可以说是 Soul 版的 ServiceLoader, 它也定义了 SPI 资源文件的路径位置\",\"public final class ExtensionLoader<T> { private static final String SOUL_DIRECTORY = \\\"META-INF/soul/\\\"; } \",\"通过检查它各个方法的调用处, 我们找到入口方法 getExtensionLoader()\",\"public final class ExtensionLoader<T> { private static final Map<Class<?>, ExtensionLoader<?>> LOADERS = new ConcurrentHashMap<>(); public static <T> ExtensionLoader<T> getExtensionLoader(final Class<T> clazz) { // ... // 根据加载类对象取出缓存中数据, 如果没有则新建 ExtensionLoader 对象并放入缓存 ExtensionLoader<T> extensionLoader = (ExtensionLoader<T>) LOADERS.get(clazz); if (extensionLoader != null) { return extensionLoader; } LOADERS.putIfAbsent(clazz, new ExtensionLoader<>(clazz)); return (ExtensionLoader<T>) LOADERS.get(clazz); } } \",\"这个方法的作用其实就像是 ServiceLoader 的 load() 方法, 会返回一个 ServiceLoader 对象.\",\"只是 Soul 中的实现改了种方式, 将 ExtensionLoader 对象缓存起来, 这样 二次调用时传入相同 Class 对象也会返回同样的 ExtensionLoader, 避免了 ServiceLoader 使用时不理解其机制导致没有用到它的缓存, 每次迭代都去反射初始化所有实现类\"]},\"131\":{\"h\":\"增强型搜索 getJoin()\",\"t\":[\"再来看看 ExtensionLoader 的 getJoin() 方法, 我将它理解为 更优的 ServiceLoader 迭代器版实现. 它同样是做了两件 ServiceLoader 迭代时做过的事情:\",\"初始化 SPI 中的实现类\",\"将实现类缓存 -> 缓存为 Key-Value 形式的 Map 集合\",\"基于 K-V 缓存模式, 它还做了一件我最期待的改造:\",\"时间复杂度 O(1) 的直接匹配实现类方式\"]},\"132\":{\"h\":\"多层缓存\",\"t\":[\"ExtensionLoader 之所以能做到这种增强型搜索, 无需每次都迭代所有, 是依靠三种不同类型的缓存.\",\"这三种缓存我将它分为二层, 它们各有不同用途, 总览如下:\",\"// 一层缓存 private final Map<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>(); // 二层缓存之一 private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>(); // 二层缓存之一 private final Map<Class<?>, Object> joinInstances = new ConcurrentHashMap<>(); \"]},\"133\":{\"h\":\"第一层缓存: cachedInstances\",\"t\":[\"首先是第一层缓存, 它是我们搜索接口的具体实现类时最先接触到的, 如果命中它则直接可以得到实现类的对象\",\"private final Map<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>(); \",\"它的 key 其实就是 Soul SPI 资源文件中我们配置的信息, 比如 Divide 插件的负载均衡实现类的资源文件\",\"image-20210130230250748\",\"而它的 value 则是 Holder 对象, 其中存有实现类的对象. 调用 getJoin() 时传入标识 (比如 random) 获得实现类对象.\",\"public T getJoin(final String name) { // ... Holder<Object> objectHolder = cachedInstances.get(name); Object value = objectHolder.getValue(); // ... return (T) value; } \"]},\"134\":{\"h\":\"第二层缓存之: cachedClasses\",\"t\":[\"cachedClasses 存放的是 标识(random) 与 类对象 的映射\",\"private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>(); \",\"cachedClasses 缓存的信息如何填充的呢? 是直接触发到检索 SPI 资源文件, 然后解析成 cachedClasses 缓存. 具体方法在 loadResources() 中\",\"private void loadResources(final Map<String, Class<?>> classes, final URL url) throws IOException { Properties properties = new Properties(); // 解析资源文件 properties.load(inputStream); properties.forEach((name, classPath) -> { // 读出 K-V 结构并组装成 classes, 外层调用会包装到 cachedClasses loadClass(classes, name, classPath); }); } \"]},\"135\":{\"h\":\"第二层缓存之: joinInstances\",\"t\":[\"joinInstances 缓存存放的是 类对象与对象实例 的映射\",\"private final Map<Class<?>, Object> joinInstances = new ConcurrentHashMap<>(); \",\"这一层缓存会借助第二层缓存, 得到对应标识(random) 的类对象, 并通过类对象初始化实例, 缓存到自身中. 对应实现方法为 createExtension()\",\"private T createExtension(final String name) { Class<?> aClass = getExtensionClasses().get(name); Object o = joinInstances.get(aClass); if (o == null) { joinInstances.putIfAbsent(aClass, aClass.newInstance()); } return (T) o; } \"]},\"136\":{\"h\":\"缓存小结\",\"t\":[\"通过 ExtensionLoader 加载某个接口的实现类时, 缓存调用流程图如下:\",\"09\"]},\"137\":{\"h\":\"详细源码分析 (可跳过)\",\"t\":[\"// name 理解为标识, 用于甄别 SPI 文件中, 想要获取的某个实现类 public T getJoin(final String name) { // ... // cachedInstances 缓存所有 Holder 对象. Holder 对象的 value 属性存放具体实现类 // 我将 cachedInstances 理解为第一层缓存, 命中则直接返回要找的类 Holder<Object> objectHolder = cachedInstances.get(name); if (objectHolder == null) { cachedInstances.putIfAbsent(name, new Holder<>()); objectHolder = cachedInstances.get(name); } Object value = objectHolder.getValue(); // 双重锁, 如果没有命中则调用 createExtension() if (value == null) { synchronized (cachedInstances) { value = objectHolder.getValue(); if (value == null) { value = createExtension(name); objectHolder.setValue(value); } } } return (T) value; } \",\"private T createExtension(final String name) { // 关键代码, 搜索标识对应的类对象 Class<?> aClass = getExtensionClasses().get(name); if (aClass == null) { throw new IllegalArgumentException(\\\"name is error\\\"); } // joinInstances 理解为第二层缓存, K-V 存放类对象与其初始化对象 Object o = joinInstances.get(aClass); if (o == null) { try { joinInstances.putIfAbsent(aClass, aClass.newInstance()); o = joinInstances.get(aClass); } catch (InstantiationException | IllegalAccessException e) { // ... } } return (T) o; } \",\"public Map<String, Class<?>> getExtensionClasses() { // cachedClasses 为第三层缓存, 存放标识与类对象映射 Map<String, Class<?>> classes = cachedClasses.getValue(); if (classes == null) { synchronized (cachedClasses) { classes = cachedClasses.getValue(); if (classes == null) { // 构造 classes 缓存, classes 的 K-V 结构为 标识-类对象 classes = loadExtensionClass(); cachedClasses.setValue(classes); } } } return classes; } \",\"private Map<String, Class<?>> loadExtensionClass() { // 拿到接口的 SPI 注解 SPI annotation = clazz.getAnnotation(SPI.class); if (annotation != null) { String value = annotation.value(); if (StringUtils.isNotBlank(value)) { cachedDefaultName = value; } } // 构造 classes 缓存, classes 的 K-V 结构为 标识-类对象 Map<String, Class<?>> classes = new HashMap<>(16); loadDirectory(classes); return classes; } \",\"private void loadDirectory(final Map<String, Class<?>> classes) { String fileName = SOUL_DIRECTORY + clazz.getName(); try { ClassLoader classLoader = ExtensionLoader.class.getClassLoader(); // 读取 SPI 资源文件 Enumeration<URL> urls = classLoader != null ? classLoader.getResources(fileName) : ClassLoader.getSystemResources(fileName); if (urls != null) { while (urls.hasMoreElements()) { URL url = urls.nextElement(); // 构造 classes 缓存, classes 的 K-V 结构为 标识-类对象 loadResources(classes, url); } } } } \",\"private void loadResources(final Map<String, Class<?>> classes, final URL url) throws IOException { try (InputStream inputStream = url.openStream()) { Properties properties = new Properties(); properties.load(inputStream); // 解析资源文件为 KV 结构 properties.forEach((k, v) -> { String name = (String) k; String classPath = (String) v; if (StringUtils.isNotBlank(name) && StringUtils.isNotBlank(classPath)) { try { // 加载路径, 传入 classes 缓存、标识、类路径 loadClass(classes, name, classPath); } catch (ClassNotFoundException e) { throw new IllegalStateException(\\\"load extension resources error\\\", e); } } }); } } \",\"private void loadClass(final Map<String, Class<?>> classes, final String name, final String classPath) throws ClassNotFoundException { // 将资源文件中的类路径反射成类对象 Class<?> subClass = Class.forName(classPath); // 拿到实现类的 Join 注解 Join annotation = subClass.getAnnotation(Join.class); Class<?> oldClass = classes.get(name); if (oldClass == null) { // 放入入参 classes 缓存中, K-V 形式为 标识-类对象 classes.put(name, subClass); } } \"]},\"138\":{\"h\":\"Soul网关学习Sign插件\"},\"139\":{\"h\":\"介绍\",\"t\":[\"sign 插件用来对请求进行签名认证的插件\"]},\"140\":{\"h\":\"AK/SK 介绍\",\"t\":[\"AK/SK（Access Key ID/Secret Access Key）即访问密钥，包含访问密钥 ID（AK）和秘密访问密钥（SK）两部分，主要用于对用户的调用行为进行鉴权和认证。\"]},\"141\":{\"h\":\"插件使用-以（/dubbo/findAll）为例\"},\"142\":{\"h\":\"在 SoulBootstrap 的 pom.xml 文件中添加 sign 的支持\",\"t\":[\" <!-- soul sign plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-sign</artifactId> <version>${last.version}</version> </dependency> <!-- soul sign plugin end--> \"]},\"143\":{\"h\":\"新增 appKey，secretKey\"},\"144\":{\"h\":\"配置选择器和规则器\",\"t\":[\"添加选择器 添加规则器\"]},\"145\":{\"h\":\"增加获取鉴权服务\",\"t\":[\"在自己服务中增加一个对外访问的方法\",\" @GetMapping(\\\"/authUrl\\\") public String authUrl() { Map<String, String> map = Maps.newHashMapWithExpectedSize(2); //timestamp为毫秒数的字符串形式 String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(\\\"+8\\\")).toEpochMilli()) String timetamp = String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(\\\"+8\\\")).toEpochMilli()) ; System.out.println(timetamp); map.put(\\\"timestamp\\\",timetamp); //值应该为毫秒数的字符串形式 map.put(\\\"path\\\", \\\"/dubbo/findAll\\\"); map.put(\\\"version\\\", \\\"1.0.0\\\"); List<String> storedKeys = Arrays.stream(map.keySet() .toArray(new String[]{})) .sorted(Comparator.naturalOrder()) .collect(Collectors.toList()); final String sign = storedKeys.stream() .map(key -> String.join(\\\"\\\", key, map.get(key))) .collect(Collectors.joining()).trim() .concat(\\\"D19CF79F647A465AB9C5C66F430CAD28\\\");//SECRETkey return DigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase(); } \",\"下面需要注意的\"]},\"146\":{\"h\":\"在网关中增加鉴权头信息\",\"t\":[\"image.png\"]},\"147\":{\"h\":\"请求的结果演示\",\"t\":[\"通过的返回 5min 超时的返回 appKey 填写错误的返回 签名错误的返回 禁用 sign 插件的返回\"]},\"148\":{\"h\":\"sign 插件的实现分析\"},\"149\":{\"h\":\"java 中 Pair\",\"t\":[\"简单的说就是 pair 保存的是一对 key value，而 map 可以保存多对 key value。 SignPlugin 插件调用 DefaultSignService 中 signVerify 方法 判断 sign 插件是否可用，如果可用获取在 global 插件存入的 soulContext 并调用 verify 方法\",\"if (signData != null && signData.getEnabled()) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; return verify(soulContext, exchange); } \",\"verify 方法中 判断请求头信息是否正确 如果不正确就抛出 log.error(\\\"sign parameters are incomplete,{}\\\", soulContext)异常\",\"if (StringUtils.isBlank(soulContext.getAppKey()) || StringUtils.isBlank(soulContext.getSign()) || StringUtils.isBlank(soulContext.getTimestamp())) { log.error(\\\"sign parameters are incomplete,{}\\\", soulContext); return Pair.of(Boolean.FALSE, Constants.SIGN_PARAMS_ERROR); } \",\"判断请求时间是否超时\",\" if (between > delay) { return Pair.of(Boolean.FALSE, String.format(SoulResultEnum.SING_TIME_IS_TIMEOUT.getMsg(), delay)); } \",\"没有超时继续调用 sign 方法 获取认证数据，这个数据在 soulAdmin 中配置\",\"AppAuthData appAuthData = SignAuthDataCache.getInstance().obtainAuthData(soulContext.getAppKey()); \",\"后面对 appAuthData 数据进行判断，数据有错误就不通过 对获取的参数再次签名，判断传入的和再次签名的是否一样\",\"String sigKey = SignUtils.generateSign(appAuthData.getAppSecret(), buildParamsMap(soulContext)); \",\"如果都校验都通过就完成认证 访问请求。\"]},\"150\":{\"h\":\"Soul网关学习Zookeeper数据同步01\"},\"151\":{\"h\":\"启动 soul-admin、soul-bootstrap， 使用 zookeeper 同步数据到网关\"},\"152\":{\"h\":\"一、配置环境\",\"t\":[\"1、soul-admin 服务配置，需要重启服务\",\"soul-admin/src/main/resources/application.yml\",\"soul: sync: zookeeper: url: localhost:2181 sessionTimeout: 5000 connectionTimeout: 2000 \",\"2、soul-bootstrap 网关服务配置，需要重启\",\"soul-bootstrap/pom.xml\",\"<!--soul data sync start use zookeeper--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-zookeeper</artifactId> <version>${project.version}</version> </dependency> \",\"soul-bootstrap/src/main/resources/application-local.yml\",\"soul: sync: zookeeper: url: localhost:2181 sessionTimeout: 5000 connectionTimeout: 2000 \"]},\"153\":{\"h\":\"二、启动服务\",\"t\":[\"1、 启动 zookeeper\",\"zookeeper ./bin/zkServer.sh start /usr/bin/java ZooKeeper JMX enabled by default Using config: /Documents/soft/zookeeper/bin/../conf/zoo.cfg Starting zookeeper ... STARTED \",\"2、soul-admin 网关后台服务启动，服务启动后可以看到发起的 ZooKeeper 请求调用\",\" 2021-01-20 17:34:48.752 INFO 64500 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread : Starting ZkClient event thread. 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:zookeeper.version=3.5.6-c11b7e26bc554b8523dc929761dd28808913f091, built on 10/08/2019 20:18 GMT 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:host.name=10.7.254.31 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:java.version=1.8.0_261 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:java.vendor=Oracle Corporation ...... 2021-01-20 17:34:48.806 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error) 2021-01-20 17:34:48.826 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Socket connection established, initiating session, client: /0:0:0:0:0:0:0:1:58214, server: localhost/0:0:0:0:0:0:0:1:2181 2021-01-20 17:34:48.857 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x1000b5e22f50001, negotiated timeout = 5000 2021-01-20 17:34:48.861 INFO 64500 --- [ain-EventThread] org.I0Itec.zkclient.ZkClient : zookeeper state changed (SyncConnected) \",\"3、soul-bootstrap 网关服务启动，服务启动后可以看到发起的 ZooKeeper 请求调用\",\"2021-01-20 17:35:58.996 INFO 64583 --- [ main] s.b.s.d.z.ZookeeperSyncDataConfiguration : you use zookeeper sync soul data....... 2021-01-20 17:35:59.003 INFO 64583 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread : Starting ZkClient event thread. ...... 2021-01-20 17:35:59.012 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:user.home=/Users/liquan 2021-01-20 17:35:59.012 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:os.memory.total=310MB 2021-01-20 17:35:59.018 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Initiating client connection, connectString=localhost:2181 sessionTimeout=5000 watcher=org.I0Itec.zkclient.ZkClient@114a5e0 2021-01-20 17:35:59.121 INFO 64583 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1000b5e22f50002, negotiated timeout = 5000 2021-01-20 17:35:59.126 INFO 64583 --- [ain-EventThread] org.I0Itec.zkclient.ZkClient : zookeeper state changed (SyncConnected) \",\"4、查看 zookeeper 上的 soul 网关同步的注册信息\"]},\"154\":{\"h\":\"三、Soul 网关 Zookeeper 数据同步原理解析\",\"t\":[\"在 soul-admin 启动后在控制台中看到了 org.I0Itec.zkclient.ZkClient，以此为入口进行跟踪调试。\",\"1、ZookeeperConfiguration 作用：注册 zkClient 到 Spring 容器。\",\"// EnableConfigurationProperties 作用：使用 @ConfigurationProperties 注解的类生效。如果一个配置类只配置@ConfigurationProperties注解，而没有使用@Component，那么在IOC容器中是获取不到properties 配置文件转化的bean。@EnableConfigurationProperties 相当于把使用@ConfigurationProperties 的类进行了一次注入。 // @ConditionalOnMissingBean 容器中没有指定的类，就进行注入，@ConditionalOnBean与之相反 /** * ZookeeperConfiguration . * @author xiaoyu(Myth) */ @EnableConfigurationProperties(ZookeeperProperties.class) public class ZookeeperConfiguration { /** * register zkClient in spring ioc. * * @param zookeeperProp the zookeeper configuration * @return ZkClient {@linkplain ZkClient} */ @Bean @ConditionalOnMissingBean(ZkClient.class) public ZkClient zkClient(final ZookeeperProperties zookeeperProp) { return new ZkClient(zookeeperProp.getUrl(), zookeeperProp.getSessionTimeout(), zookeeperProp.getConnectionTimeout()); } } \",\"soul-admin 启动后，会实读取 zookeeper 配置信息，向容器中注入 zkClient 和 zookeeper 建立连接。\",\"在这里插入图片描述\",\"2、实例化 ZkClient 的调用栈中会调用 DataChangedEventDispatcher 的 afterPropertiesSet 方法。\",\"org.dromara.soul.admin.listener.DataChangedEventDispatcher 作用：事件转发器，将更改的事件转发到每个 ConfigEventListener。\",\"此类 实现了 InitializingBean，在 DataChangedEventDispatcher 初始化过程中，会执行 afterPropertiesSet 方法。\",\"afterPropertiesSet 方法会在容器中查找类型是 DataChangedListener.class 的 bean。\",\"@Component public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { private ApplicationContext applicationContext; private List<DataChangedListener> listeners; public DataChangedEventDispatcher(final ApplicationContext applicationContext) { this.applicationContext = applicationContext; } @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; ....... default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } ...... @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } } \",\"3、afterPropertiesSet 方法的执行会查找 DataChangedListener.class 相关类的实例化。\",\"org.dromara.soul.admin.config.DataSyncConfiguration 作用：数据同步配置类。\",\"ZookeeperDataChangedListener 数据变化监听器，作用：应该是监听元数据变化，然后同步到 zookeeper。\",\"ZookeeperDataInit zookeeper 数据初始化，作用：向 zookeeper 同步初始化数据。\",\"/** * The type Zookeeper listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.zookeeper\\\", name = \\\"url\\\") @Import(ZookeeperConfiguration.class) static class ZookeeperListener { /** * Config event listener data changed listener. * @param zkClient the zk client * @return the data changed listener */ @Bean @ConditionalOnMissingBean(ZookeeperDataChangedListener.class) public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) { return new ZookeeperDataChangedListener(zkClient); } /** * Zookeeper data init zookeeper data init * @param zkClient the zk client * @param syncDataService the sync data service * @return the zookeeper data init */ @Bean @ConditionalOnMissingBean(ZookeeperDataInit.class) public ZookeeperDataInit zookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { return new ZookeeperDataInit(zkClient, syncDataService); } } \",\"4、org.dromara.soul.admin.listener.zookeeper.ZookeeperDataInit 作用：负责向 zookeeper 同步初始化数据。此类实现了 CommandLineRunner。\",\"CommandLineRunner：作用：SpringBoot 在项目启动后会遍历所有实现 CommandLineRunner 的实体类并执行 run 方法，如果需要按照一定的顺序去执行，那么就需要在实体类上使用一个@Order 注解（或者实现 Order 接口）来表明顺序。\",\"run 方法会调用 syncDataService.syncAll 方法。\",\"public class ZookeeperDataInit implements CommandLineRunner { private final ZkClient zkClient; private final SyncDataService syncDataService; /** * Instantiates a new Zookeeper data init. * @param zkClient the zk client * @param syncDataService the sync data service */ public ZookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { this.zkClient = zkClient; this.syncDataService = syncDataService; } @Override public void run(final String... args) { String pluginPath = ZkPathConstants.PLUGIN_PARENT; String authPath = ZkPathConstants.APP_AUTH_PARENT; String metaDataPath = ZkPathConstants.META_DATA; if (!zkClient.exists(pluginPath) && !zkClient.exists(authPath) && !zkClient.exists(metaDataPath)) { syncDataService.syncAll(DataEventTypeEnum.REFRESH); } } } \",\"5、org.dromara.soul.admin.service.sync.SyncDataServiceImpl\",\"syncAll 方法会调用事件发布器进行事件发布，事件类型是 DataEventTypeEnum.REFRESH。\",\"/** * The type sync data service. * @author xiaoyu(Myth) */ @Service(\\\"syncDataService\\\") public class SyncDataServiceImpl implements SyncDataService { // 发布事件，也就是把某个事件告诉的所有与这个事件相关的监听器 private final ApplicationEventPublisher eventPublisher; ...... @Override public boolean syncAll(final DataEventTypeEnum type) { appAuthService.syncData(); List<PluginData> pluginDataList = pluginService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, type, pluginDataList)); List<SelectorData> selectorDataList = selectorService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, type, selectorDataList)); List<RuleData> ruleDataList = ruleService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, type, ruleDataList)); metaDataService.syncData(); return true; } ...... } \",\"在这里插入图片描述\",\"6、事件发布后 org.dromara.soul.admin.listener.DataChangedEventDispatcher 类的 onApplicationEvent 方法会监听事件变化，遍历所有的监听者进行数据同步处理，这里的监听者实现类是 ZookeeperDataChangedListener，根据对应的事件类型通过 zkClient 向 zookeeper 同步数据。\",\"在这里插入图片描述\",\"7、soul-admin 初始化到数据到 zookeeper 思维导图\",\"在这里插入图片描述\"]},\"155\":{\"h\":\"四、总结\",\"t\":[\"soul-admin 启动就会同步网关数据 rule、metaData、selector、plugin 等到 zookeeper。数据变化会发布 DataChangedEvent 事件，监听事件将数据同步至 zookeeper。\",\"Soul 网关数据同步原理\"]},\"156\":{\"h\":\"Soul网关学习Zookeeper数据同步02\"},\"157\":{\"h\":\"启动 admin，与网关。 admin 操作，使用 zookeeper 同步数据到网关\",\"t\":[\"上一篇，通过 soul-admin 启动过程为入口，分析了 soul-admin 启动就会同步网关数据 rule、metaData、selector、plugin 等到 zookeeper。\",\"数据变化会发布 DataChangedEvent 事件，监听事件将数据同步至 zookeeper。 本篇接着上一篇继续跟踪源码分析 zookeeper 同步数据到网关原理：\",\"soul-admin 变更网关数据，跟踪数据同步过程。\",\"soul-bootstrap 如何获取 zookeeper 数据的，如何感知网关数据变化的。\"]},\"158\":{\"h\":\"一、soul-admin 变更网关数据，跟踪数据同步过程\",\"t\":[\"1、在网关后台尝试更改 divide 插件状态，debug 跟踪。\",\"在这里插入图片描述\",\"2、插件更新后会发布一个 DataChangedEvent 事件\",\"在这里插入图片描述\",\"3、org.dromara.soul.admin.listener.DataChangedEventDispatcher --> onApplicationEvent() 负责监听事件\",\"在这里插入图片描述\",\"4、org.dromara.soul.admin.listener.zookeeper.ZookeeperDataChangedListener 负责同步数据至 zookeeper\",\"在这里插入图片描述\"]},\"159\":{\"h\":\"二、soul-bootstrap 如何获取 zookeeper 数据的，如何感知网关数据变化的。\",\"t\":[\"1、soul-bootstrap 依赖\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-zookeeper</artifactId> <version>${project.version}</version> </dependency> \",\"2、soul-bootstrap 启动后会自动注入 org.dromara.soul.spring.boot.sync.data.zookeeper.ZookeeperSyncDataConfiguration\",\"读取 Zookeeper 配置向容器中注入 ZkClient。\",\"SyncDataService 向容器注入数据同步服务 bean，从 Spring 容器中获取，ZkClient（zookeeper 客户端）， pluginSubscriber（插件数据订阅）、metaSubscribers （元数据订阅）、authSubscribers（权限订阅）。\",\"public class ZookeeperSyncDataConfiguration { /** * Sync data service sync data service. * @param zkClient the zk client * @param pluginSubscriber the plugin subscriber * @param metaSubscribers the meta subscribers * @param authSubscribers the auth subscribers * @return the sync data service */ @Bean public SyncDataService syncDataService(final ObjectProvider<ZkClient> zkClient, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use zookeeper sync soul data.......\\\"); return new ZookeeperSyncDataService(zkClient.getIfAvailable(), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } /** * register zkClient in spring ioc. * @param zookeeperConfig the zookeeper configuration * @return ZkClient {@linkplain ZkClient} */ @Bean public ZkClient zkClient(final ZookeeperConfig zookeeperConfig) { return new ZkClient(zookeeperConfig.getUrl(), zookeeperConfig.getSessionTimeout(), zookeeperConfig.getConnectionTimeout()); } } \",\"3、org.dromara.soul.sync.data.zookeeper.ZookeeperSyncDataService 初始化，也就是 soul-bootstrap 启动后就会从 zookeeper 获取数据，同步至内存。\",\"watcherData()--> watcherAll() --> watcherPlugin() --> cachePluginData()。\",\"zkClient.subscribeDataChanges() 监听 当前节点和子节点的内容修改、删除。\",\"public class ZookeeperSyncDataService implements SyncDataService, AutoCloseable { private final ZkClient zkClient; private final PluginDataSubscriber pluginDataSubscriber; private final List<MetaDataSubscriber> metaDataSubscribers; private final List<AuthDataSubscriber> authDataSubscribers; /** * Instantiates a new Zookeeper cache manager. * @param zkClient the zk client * @param pluginDataSubscriber the plugin data subscriber * @param metaDataSubscribers the meta data subscribers * @param authDataSubscribers the auth data subscribers */ public ZookeeperSyncDataService(final ZkClient zkClient, final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { this.zkClient = zkClient; this.pluginDataSubscriber = pluginDataSubscriber; this.metaDataSubscribers = metaDataSubscribers; this.authDataSubscribers = authDataSubscribers; watcherData(); watchAppAuth(); watchMetaData(); } ...... private void watcherData() { final String pluginParent = ZkPathConstants.PLUGIN_PARENT; List<String> pluginZKs = zkClientGetChildren(pluginParent); for (String pluginName : pluginZKs) { watcherAll(pluginName); } zkClient.subscribeChildChanges(pluginParent, (parentPath, currentChildren) -> { if (CollectionUtils.isNotEmpty(currentChildren)) { for (String pluginName : currentChildren) { watcherAll(pluginName); } } }); } ...... private void watcherPlugin(final String pluginName) { String pluginPath = ZkPathConstants.buildPluginPath(pluginName); if (!zkClient.exists(pluginPath)) { zkClient.createPersistent(pluginPath, true); } cachePluginData(zkClient.readData(pluginPath)); subscribePluginDataChanges(pluginPath, pluginName); } } \",\"4、debug 过程\",\"在这里插入图片描述\"]},\"160\":{\"h\":\"三、soul-bootstrap 是如何感知网关数据变化的\",\"t\":[\"1、org.dromara.soul.sync.data.zookeeper.ZookeeperSyncDataService cacheRuleData 方法上打上断点，更新插件规则，观察是否会进入此断点。\",\"private void cacheRuleData(final RuleData ruleData) { Optional.ofNullable(ruleData) .ifPresent(data -> Optional.ofNullable(pluginDataSubscriber).ifPresent(e -> e.onRuleSubscribe(data))); } \",\"2、soul-admin 后台操作更改 divide 插件规则，首先 soul-admin 会发布事件，并监听事件同步更新数据至 zookeeper。\",\"在这里插入图片描述\",\"3、soul-bootstrap 确实收到了插件数据的更新，根据 Soul 官网介绍的\\\"zookeeper 的同步原理\\\"这里主要是依赖 zookeeper 的 watch 机制。\",\"org.dromara.soul.sync.data.zookeeper.ZookeeperSyncDataService 类：\",\"zkClient.subscribeDataChanges() 监听 当前节点和子节点的内容修改、删除。\",\"zkClient.subscribeChildChanges(groupParentPath, (parentPath, currentChildren) -> { if (CollectionUtils.isNotEmpty(currentChildren)) { List<String> addSubscribePath = addSubscribePath(childrenList, currentChildren); // Get the newly added node data and subscribe to that node addSubscribePath.stream().map(addPath -> { String realPath = buildRealPath(parentPath, addPath); cacheRuleData(zkClient.readData(realPath)); return realPath; }).forEach(this::subscribeRuleDataChanges); } }); private void subscribeRuleDataChanges(final String path) { zkClient.subscribeDataChanges(path, new IZkDataListener() { @Override public void handleDataChange(final String dataPath, final Object data) { cacheRuleData((RuleData) data); } @Override public void handleDataDeleted(final String dataPath) { unCacheRuleData(dataPath); } }); } \",\"在这里插入图片描述\"]},\"161\":{\"h\":\"四、总结\",\"t\":[\"在这里插入图片描述\"]},\"162\":{\"h\":\"Soul网关学习Nacos数据同步\",\"t\":[\"本篇分析一下 Nacos 同步数据原理\",\"1、先配置一下环境\",\"soul-admin soul-admin/src/main/resources/application.yml\",\"soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: \",\"soul-admin/pom.xml，这里默认配置是有的\",\"<dependency> <groupId>com.alibaba.nacos</groupId> <artifactId>nacos-client</artifactId> <version>${nacos-client.version}</version> </dependency> \",\"soul-bootstrap soul-bootstrap/src/main/resources/application-local.yml\",\"soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: \",\"soul-bootstrap/pom.xml，下面的配置默认是没有的，需要手动添加\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-nacos</artifactId> <version>${project.version}</version> </dependency> \",\"启动服务\",\"1、启动 nacos 2、启动 soul-admin 3、启动 soul-bootstrap \",\"2、上面看着挺顺利，这个过程遇到了坑，soul-bootstrap 启动不起来报空指针异常，下面详细记录一下。 首先 soul-admin 启动后不会主动向 nacos 同步网关数据，需要手动同步，官网这一点没有提到。这个问题绊了我好久，最后是看到了群里其他同学遇到了同样的问题，参考了他们的文章才解决，下面记录一下解决过程。\",\"1）soul-bootstrap 启动的时候遇到了如下的错误，NullPointerException。\",\"soul-bootstrap 启动的时候会去，nacos 获取网关数据，看到下面的断点，拿到的是空数据。\",\"Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2021-01-25 16:49:06.052 ERROR 5273 --- [ main] o.s.boot.SpringApplication : Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'nacosSyncDataService' defined in class path resource [org/dromara/soul/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.dromara.soul.sync.data.api.SyncDataService]: Factory method 'nacosSyncDataService' threw exception; nested exception is java.lang.NullPointerException ...... at org.dromara.soul.bootstrap.SoulBootstrapApplication.main(SoulBootstrapApplication.java:37) [classes/:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.dromara.soul.sync.data.api.SyncDataService]: Factory method 'nacosSyncDataService' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] ... 19 common frames omitted Caused by: java.lang.NullPointerException: null at org.dromara.soul.sync.data.nacos.handler.NacosCacheHandler.updateMetaDataMap(NacosCacheHandler.java:128) ~[classes/:na] at org.dromara.soul.sync.data.nacos.handler.NacosCacheHandler.watcherData(NacosCacheHandler.java:167) ~[classes/:na] at org.dromara.soul.sync.data.nacos.NacosSyncDataService.start(NacosSyncDataService.java:59) ~[classes/:na] at org.dromara.soul.sync.data.nacos.NacosSyncDataService.<init>(NacosSyncDataService.java:49) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration.nacosSyncDataService(NacosSyncDataConfiguration.java:66) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7.CGLIB$nacosSyncDataService$0(<generated>) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7$$FastClassBySpringCGLIB$$3830e886.invoke(<generated>) ~[classes/:na] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7.nacosSyncDataService(<generated>) ~[classes/:na] ...... at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] ... 20 common frames omitted \",\"在这里插入图片描述\",\"2）到 nacos 去看一下是否有网关的数据，根据配置的 “namespace: 1c10d748-af86-43b9-8265-75f487d20c6c” 结果是什么都没有。\",\"在这里插入图片描述\",\"在这里插入图片描述\",\"3、尝试去 soul-admin 手动同步，nacos 也看不到数据，必须需要手动创建命名空间“1c10d748-af86-43b9-8265-75f487d20c6c”，如下图。\",\"在这里插入图片描述\",\"4、去 soul-admin 手动同步数据后，就看到了 nacos 上有了网关的配置信息，这时候 soul-bootstrap 还是启动不起来，因为这里还缺少元数据信息。元数据只有 dubbo、springcloud 服务有数据，http 是没有元数据的，所以还得去启动一下 dubbo 服务。然后在 soul-admin 同步一下元数据。\",\"在这里插入图片描述\",\"soul-admin 点击同步数据，将元数据会同步到 nacos\",\"在这里插入图片描述\",\"soul-admin 点击同步数据，将认证数据会同步到 nacos\",\"在这里插入图片描述\",\"这时候 nacos 已经看到了全部的网关数据\",\"在这里插入图片描述\",\"5、再去启动 soul-bootstrap，终于启动成功\",\"2021-01-25 17:56:54.798 INFO 10051 --- [ main] o.d.s.w.configuration.SoulConfiguration : load plugin:[monitor] [org.dromara.soul.plugin.monitor.MonitorPlugin] 2021-01-25 17:56:54.798 INFO 10051 --- [ main] o.d.s.w.configuration.SoulConfiguration : load plugin:[response] [org.dromara.soul.plugin.httpclient.response.WebClientResponsePlugin] 2021-01-25 17:56:54.990 INFO 10051 --- [ main] d.s.s.s.s.d.n.NacosSyncDataConfiguration : you use nacos sync soul data....... 2021-01-25 17:56:58.890 INFO 10051 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' 2021-01-25 17:56:59.758 INFO 10051 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 9195 2021-01-25 17:56:59.764 INFO 10051 --- [ main] o.d.s.b.SoulBootstrapApplication : Started SoulBootstrapApplication in 8.401 seconds (JVM running for 9.95) \",\"6、小结：\",\"配置下来感觉使用 nacos 同步数据不是很友好，配置过程遇到了很多坑，首先 soul-admin 不会主动同步网关数据到 nacos，需要手动同步。soul-bootstrap 必须依赖所有的网关配置数据 soul.plugin、soul.selector、soul.selector、soul.meta、soul.auth，缺一不可。如果网关只代理 http 服务（无元数据），soul-bootstrap 是启动不起来的。官网这一块没有做详细说明，对小白不是很友好。\",\"我们知道 soul-admin 启动后不会自动向 nacos 同步数据，需要手动操作。\",\"下面分析一下 soul-admin，nacos，soul-bootstrap 同步数据的过程。\"]},\"163\":{\"h\":\"soul-admin 如何同步网关数据？\",\"t\":[\"1、插件信息更新后会发布一个 DataChangedEvent 事件\",\"/** * create or update plugin * @param pluginDTO {@linkplain PluginDTO} * @return rows */ @Override @Transactional(rollbackFor = Exception.class) public String createOrUpdate(final PluginDTO pluginDTO) { ...... // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, eventType, Collections.singletonList(PluginTransfer.INSTANCE.mapToData(pluginDO)))); return StringUtils.EMPTY; } \",\"2、由监听事件处理类 DataChangedEventDispatcher 负责调用具体的监听实现类对 DataChangedEvent 事件进行处理，这里的具体实现类是 NacosDataChangedListener。\",\"org.dromara.soul.admin.listener.DataChangedEventDispatcher\",\"DataChangedEventDispatcher 初始化完成后会执行 afterPropertiesSet()，在容器中获取所有类型是 DataChangedListener.class 的 bean\",\" @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } \",\"DataChangedEventDispatcher 监听到变更事件后，会执行 onApplicationEvent，遍历所有的监听类对监听事件进行处理，这里是 NacosDataChangedListener，如下图的 debug。\",\" @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { ...... case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; ...... default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } \",\"在这里插入图片描述\",\"3、NacosDataChangedListener 会执行 onRuleChanged，updateRuleMap 先将网关数据同步至内存，在通过 publishConfig 同步至 nacos。\",\"org.dromara.soul.admin.listener.nacos.NacosDataChangedListener\",\"// 执行监听事件 @Override public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) { updateRuleMap(getConfig(RULE_DATA_ID)); switch (eventType) { ...... default: changed.forEach(rule -> { List<RuleData> ls = RULE_MAP .getOrDefault(rule.getSelectorId(), new ArrayList<>()) .stream() .filter(s -> !s.getId().equals(rule.getSelectorId())) .sorted(RULE_DATA_COMPARATOR) .collect(Collectors.toList()); ls.add(rule); RULE_MAP.put(rule.getSelectorId(), ls); }); break; } publishConfig(RULE_DATA_ID, RULE_MAP); } // 同步至内存 private void updateRuleMap(final String configInfo) { JsonObject jo = GsonUtils.getInstance().fromJson(configInfo, JsonObject.class); Set<String> set = new HashSet<>(RULE_MAP.keySet()); ...... RULE_MAP.keySet().removeAll(set); } // 同步至nacos @SneakyThrows private void publishConfig(final String dataId, final Object data) { configService.publishConfig(dataId, GROUP, GsonUtils.getInstance().toJson(data)); } \",\"在这里插入图片描述\",\"4、DataChangedEventDispatcher 、NacosDataChangedListener 类继承关系\",\"在这里插入图片描述\",\"在这里插入图片描述\",\"5、小结\",\"1、例如 soul-admin 更新网关数据，发布一个 DataChangedEvent 事件，eventPublisher.publishEvent(new DataChangedEvent()) 2、DataChangedEventDispatcher --> onApplicationEvent()方法监听事件到事件，判断监听类是 NacosDataChangedListener 3、NacosDataChangedListener --> onRuleChanged()处理事件 4、同步至内存 updateRuleMap(getConfig(RULE_DATA_ID)) 5、同步至 nacos publishConfig(RULE_DATA_ID, RULE_MAP)\"]},\"164\":{\"h\":\"soul-bootstrap 如何同步网关数据？\",\"t\":[\"1、soul-bootstrap 添加了 nacos 依赖 soul-spring-boot-starter-sync-data-nacos，服务启动后会自动注入 NacosSyncDataConfiguration\",\"org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration\",\"NacosSyncDataService 负责读取和同步 nacos 网关数据\",\"@Configuration @ConditionalOnClass(NacosSyncDataService.class) @ConditionalOnProperty(prefix = \\\"soul.sync.nacos\\\", name = \\\"url\\\") @Slf4j public class NacosSyncDataConfiguration { // 注入nacos数据同步服务 @Bean public SyncDataService nacosSyncDataService(final ObjectProvider<ConfigService> configService, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use nacos sync soul data.......\\\"); return new NacosSyncDataService(configService.getIfAvailable(), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } // 注入nacos客户端配置服务 @Bean public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Exception { Properties properties = new Properties(); ...... return NacosFactory.createConfigService(properties); } // 注入nacos配置服务 @Bean @ConfigurationProperties(prefix = \\\"soul.sync.nacos\\\") public NacosConfig nacosConfig() { return new NacosConfig(); } } \",\"2、org.dromara.soul.sync.data.nacos.NacosSyncDataService\",\"初始化会执行 start\",\"watcherData 负责监听 nacos 网关数据\",\"updatePluginMap 同步网关数据到内存\",\"public void start() { ...... watcherData(RULE_DATA_ID, this::updateRuleMap); ...... } @SneakyThrows private String getConfigAndSignListener(final String dataId, final Listener listener) { return configService.getConfigAndSignListener(dataId, GROUP, 6000, listener); } protected void watcherData(final String dataId, final OnChange oc) { Listener listener = new Listener() { @Override public void receiveConfigInfo(final String configInfo) { oc.change(configInfo); } ...... }; oc.change(getConfigAndSignListener(dataId, listener)); LISTENERS.getOrDefault(dataId, new ArrayList<>()).add(listener); } \",\"在这里插入图片描述\",\"3、NacosSyncDataService 类关系图\",\"在这里插入图片描述\",\"4、小结\",\"1、soul-bootstrap 启动向容器自动注入 NacosSyncDataConfiguration 2、NacosSyncDataConfiguration 类中会向容器注入 NacosSyncDataService 3、NacosSyncDataService --> start() --> watcherData() 监听 nacos，同步网关数据到内存 4、watcherData() --> updatePluginMap()\"]},\"165\":{\"h\":\"总结\",\"t\":[\"在这里插入图片描述\"]},\"166\":{\"h\":\"Soul网关学习插件链实现\"},\"167\":{\"h\":\"一、引言\",\"t\":[\"插件是 Soul 的灵魂。\",\"Soul 使用了插件化设计思想，实现了插件的热插拔，且极易扩展。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。\",\"image-20210122021834793\",\"Soul 是如何实现插件化设计的呢？\",\"在探究插件化设计之前，我们需要先了解下微内核架构（又称插件化架构）。\"]},\"168\":{\"h\":\"二、微内核架构\"},\"169\":{\"h\":\"1、架构释义\",\"t\":[\"img\",\"微内核架构也被称为插件化架构，是一种面向功能进行拆分的可扩展性架构，通常用于实现基于产品的应用。\",\"应用逻辑被分割为独立的插件模块和核心系统，提供了可扩展性、灵活性、功能隔离和自定义处理逻辑的特性。\",\"微内核架构的本质，是将变化封装在插件里面，从而达到快速灵活扩展的目的，而又不影响整体系统的稳定。\"]},\"170\":{\"h\":\"2、设计关键点\",\"t\":[\"核心系统设计的关键技术：\",\"**插件管理：**当前有哪些插件可用？如何加载这些插件？什么时候加载插件？\",\"常见的实现方法是插件注册表机制。\",\"**插件连接：**插件如何连接到核心系统？\",\"通常由核心系统制定连接规范，然后插件按照规范实现，核心系统按照规范加载即可。\",\"常见连接机制主要有：OSGi（Eclipse 使用）、消息模式、依赖注入（Spring 使用）。\",\"**插件通信：**插件与插件、插件与核心系统如何通信？\",\"通信必须经过核心系统，因此通常由核心系统提供插件通信机制。\"]},\"171\":{\"h\":\"三、Soul 的插件化设计\",\"t\":[\"参照微内核架构来看，Soul 的 soul-web 模块相当于核心系统，soul-plugin 下的子模块相当于插件模块。\",\"插件管理方面：\",\"soul-bootstrap 模块的 pom 文件充当插件列表， 以硬编码的方式引入各插件。\",\"在容器启动阶段，借助 springboot 的 starter 机制自动扫描并注册插件 bean 到 Spring 容器。\",\"插件连接方面：\",\"借助 springboot 支持的多实例自动注入能力（ObjectProvider<List> plugins），将插件 Bean 列表注入到网关的插件链，实现插件与网关的连接。\",\"插件通信方面：\",\"先在插件链初始化阶段完成插件排序，然后在插件处理时，借助贯穿整个插件链的 ServerWebExchange 完成向下游插件的定向传参，即某种意义上的插件通信机制。\"]},\"172\":{\"h\":\"四、Soul 的插件化实现\",\"t\":[\"Soul 网关中定义了一条插件链，所有的插件都在这条链上依次处理。\",\"在探究插件链之前，我们先来看看插件实现。\"]},\"173\":{\"h\":\"1、插件实现\",\"t\":[\"Soul 中所有插件最终均继承自 SoulPlugin，其完整继承关系如下所示：\",\"SoulPlugin\",\"可以看到，Soul 的插件生态极其丰富，正是如此丰富的插件支撑起了 Soul 网关强大的扩展能力。\",\"我们以常用的 DividePlugin 为例，分析插件内部所做工作。\",\"DividePlugin 继承结构：\",\"DividePlugin\",\"DividePlugin 继承自 AbstractSoulPlugin，最终实现了 SoulPlugin 接口。\",\"1）先关注 SoulPlugin，该插件接口结构如下：\",\"image-20210122025700589\",\"execute 方法：处理方法，需要传入 exchange 交换区 和 SoulPluginChain 插件链\",\"getOrder 方法：取得序号，用作插件排序\",\"named 方法：获得插件名\",\"skip 方法：判断是否跳过本次处理\",\"每次处理时，将先进行 skip 判断，不跳过则执行 excute 处理方法。\",\"2）再来看下 AbstractSoulPlugin，该抽象类结构如下：\",\"image-20210122030444704\",\"重点关注 execute 方法，其核心代码如下：\",\"if (pluginData.getEnable()){ // 获取插件数据 final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); // 获取选择器数据 final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); final SelectorData selectorData = matchSelector(exchange, selectors); // 获取规则 final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { //get last rule = rules.get(rules.size() - 1); } else { rule = matchRule(exchange, rules); } // 执行具体处理 return doExecute(exchange, chain, selectorData, rule); } // 继续执行后续插件处理 return chain.execute(exchange); \",\"获取选择器数据和规则，然后传入 doExecute 方法进行具体处理，doExecute 方法为抽象方法，交由子类具体实现。\",\"3）查看插件子类 DividePlugin，其结构如下：\",\"image-20210122032336069\",\"重点关注 doExecute 方法，以下是核心代码：\",\"// 获取网关上下文和规则处理器 final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // 获取上游列表 final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); // 选择待分发的目标上游 final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress(); DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); // 设置 http url String domain = buildDomain(divideUpstream); String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); // 设置 http timeout exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout()); exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry()); return chain.execute(exchange); \",\"很明显，divide 插件只是完成目标上游服务的待分发，即根据选择器和规则找到对应服务，再通过负载均衡策略分配上游服务实例。\",\"而调用上游服务的工作是由其他相应的 client 类插件完成。\"]},\"174\":{\"h\":\"2、插件链实现\",\"t\":[\"借由插件链，Soul 将众多插件整合到一起进行统一调度处理。\",\"插件链继承结构：\",\"SoulPluginChain\",\"可以看到，Soul 中插件链 SoulPluginChain 仅有一个默认实现类 DefaultSoulPluginChain。\",\"1）DefaultSoulPluginChain 类结构如下：\",\"image-20210122040245671\",\"其持有通过构造方法传入的插件链，看看 execute 方法：\",\"public Mono<Void> execute(final ServerWebExchange exchange) { // 反应式编程语法：Mono.defer return Mono.defer(() -> { if (this.index < plugins.size()) { SoulPlugin plugin = plugins.get(this.index++); // 判断是否需要调过 Boolean skip = plugin.skip(exchange); if (skip) { return this.execute(exchange); } // 依次执行插件处理逻辑 return plugin.execute(exchange, this); } return Mono.empty(); }); } \",\"依次处理插件链上的插件，执行插件处理逻辑。\",\"DefaultSoulPluginChain 是 SoulWebHandler 的内部类，看下 SoulWebHandler 的实现。\",\"2）SoulWebHandler 结构如下：\",\"image-20210122035525261\",\"SoulWebHandler 是 web 请求处理的起点，在此创建并开始插件链的处理。\",\"同 DefaultSoulPluginChain 一样，SoulWebHandler 也是持有通过构造方法传入的插件链。\",\"看看 handle 方法：\",\"public Mono<Void> handle(@NonNull final ServerWebExchange exchange) { MetricsTrackerFacade.getInstance().counterInc(MetricsLabelEnum.REQUEST_TOTAL.getName()); Optional<HistogramMetricsTrackerDelegate> startTimer = MetricsTrackerFacade.getInstance().histogramStartTimer(MetricsLabelEnum.REQUEST_LATENCY.getName()); return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler) .doOnSuccess(t -> startTimer.ifPresent(time -> MetricsTrackerFacade.getInstance().histogramObserveDuration(time))); } \",\"handle 方法负责插件链执行指标度量的采集，通过在 DefaultSoulPluginChain 执行时加订阅实现，DefaultSoulPluginChain 在此处完成初始化。\",\"全局查找 SoulWebHandler 构造方法，定位到 SoulConfiguration 的 soulWebHandler 方法。\",\"3）SoulConfiguration 结构如下：\",\"image-20210122042354171\",\"SoulConfiguration 是 Soul 的核心配置类，负责自动装配网关所需的核心 bean 对象。\",\"如装配 SoulWebHandler：\",\"@Bean(\\\"webHandler\\\") public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { // 获取可用的插件 List<SoulPlugin> pluginList = plugins.getIfAvailable(Collections::emptyList); // 插件重排 final List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); soulPlugins.forEach(soulPlugin -> log.info(\\\"load plugin:[{}] [{}]\\\", soulPlugin.named(), soulPlugin.getClass().getName())); return new SoulWebHandler(soulPlugins); } \",\"注意此处的插件列表经过了一次重排，重排顺序参见 PluginEnum。\",\"4）初始化 SoulWebHandler\",\"soul-bootstrap 启动的过程中，所有插件是怎么形成 ObjectProvider<List<SoulPlugin>> plugins，然后初始化 SoulWebHandler 的呢？\",\"SoulWebHandler 所在的配置类通过配置 @ComponentScan(\\\"org.dromara.soul\\\")，通知 spring 扫描 org.dromara.soul 包。\",\"借助 springboot 的 starter 机制，将 spring.factories 里指定的配置类自动加载到容器。\",\"DividePluginConfiguration\",\"最后，借助 spring4.3 开始支持的 ObjectProvider，实现容器内插件 bean 的集合式注入，最终形成我们看到的插件链。\"]},\"175\":{\"h\":\"总结\",\"t\":[\"本篇从微内核架构说起，并以此为框架分析 Soul 的插件化设计，再结合源码实现，基本理清了 Soul 中插件式设计的实现。\",\"需要注意：\",\"1）由 SoulConfiguration 自动装配 SoulWebHandler，此时 SoulWebHandler 持有插件列表，但未初始化插件链。\",\"2）待调用 handle 方法处理请求时，才初始化插件链进入插件处理。\"]},\"176\":{\"h\":\"Soul网关学习divide插件源码解读\"},\"177\":{\"h\":\"插件概述\",\"t\":[\"插件定位\",\"divide 插件是一个 http 正向代理插件，所有的 http 请求都由该插件进行负载均衡处理（具体的负载均衡策略在规则中指定）。\",\"生效时机\",\"当请求头的 rpcType = http 且插件开启时，它将根据请求参数匹配规则，最终交由下游插件进行响应式代理调用。\"]},\"178\":{\"h\":\"插件处理流程\",\"t\":[\"1）先回顾下请求处理类插件的通用流程（AbstractSoulPlugin # execute）：\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { // 获取插件数据 String pluginName = named(); final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); if (pluginData != null && pluginData.getEnabled()) { // 获取选择器数据 final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); ... // 匹配选择器 final SelectorData selectorData = matchSelector(exchange, selectors); ... // 获取规则数据 final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); ... // 匹配规则 RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { //get last rule = rules.get(rules.size() - 1); } else { rule = matchRule(exchange, rules); } ... // 执行自定义处理 return doExecute(exchange, chain, selectorData, rule); } // 继续执行插件链处理 return chain.execute(exchange); } \",\"AbstractSoulPlugin 先匹配到对应的选择器和规则，匹配通过则执行插件的自定义处理。\",\"2）再来看看 divide 插件的自定义处理流程（DividePlugin # doExecute）：\",\"protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { ... // 准备规则处理对象（内部持有：负载均衡算法名、重试次数以及超时时间） final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // 获取选择器对应的可用服务列表 final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); ... // 选择具体分发的服务实例ip（负载均衡） final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress(); DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); ... //设置 http url、超时时间以及重试次数 String domain = buildDomain(divideUpstream); String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout()); exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry()); // 继续执行插件链处理 return chain.execute(exchange); } \",\"DividePlugin 先获取到选择器对应的可用服务列表，然后进行负载均衡选择即将分发的目标服务器实例 ip，最后设置最终的 url、超时时间以及重试次数并交由插件链下游进行处理。\",\"注意：\",\"divide 插件自身只是负责根据选择器、规则和负载均衡策略选出待分发的服务器实例，并不直接向后端服务发起 http 请求。\"]},\"179\":{\"h\":\"主机探活\",\"t\":[\"上面提到，divide 需要获取服务列表，看下获取的实现（UpstreamCacheManager # findUpstreamListBySelectorId）：\",\"public List<DivideUpstream> findUpstreamListBySelectorId(final String selectorId) { return UPSTREAM_MAP_TEMP.get(selectorId); } \",\"内部通过 UPSTREAM_MAP_TEMP 获取存活服务列表。\",\"UpstreamCacheManager 内部维护了两份散列表：\",\"UPSTREAM_MAP：\",\"全量服务散列表，负责存放全量的上游服务信息，key 为 选择器 id，value 为使用相同选择器的服务列表。\",\"UPSTREAM_MAP_TEMP：\",\"临时服务散列表，负责存放活动的上游服务信息，key 为 选择器 id，value 为使用相同选择器的服务列表。\",\"前面章节我们提到，数据同步时，submit 方法同时更新了 UPSTREAM_MAP 和 UPSTREAM_MAP_TEMP，但后续服务下线如何维护 UPSTREAM_MAP_TEMP 呢，一切还得从 ip 探活说起。\"]},\"180\":{\"h\":\"3.1 探活时机\",\"t\":[\"探活时机得从 UpstreamCacheManager 初始化说起：\",\"private UpstreamCacheManager() { // 探活开关检查 boolean check = Boolean.parseBoolean(System.getProperty(\\\"soul.upstream.check\\\", \\\"false\\\")); if (check) { // 启动定时探活任务 new ScheduledThreadPoolExecutor(1, SoulThreadFactory.create(\\\"scheduled-upstream-task\\\", false)) .scheduleWithFixedDelay(this::scheduled, 30, Integer.parseInt(System.getProperty(\\\"soul.upstream.scheduledTime\\\", \\\"30\\\")), TimeUnit.SECONDS); } } \",\"UpstreamCacheManager 初始化时，若探活开关打开，则创建定时探活任务，此处默认 30 秒执行一次。\",\"此处共涉及到两个配置参数：\",\"soul.upstream.check 探活开关：默认为 ture，设置为 false 表示不检测\",\"soul.upstream.scheduledTime 探活时间间隔，默认 10 秒\"]},\"181\":{\"h\":\"3.2 探活任务\",\"t\":[\"1）接下来看看探活任务实现（UpstreamCacheManager # scheduled）：\",\"private void scheduled() { if (UPSTREAM_MAP.size() > 0) { UPSTREAM_MAP.forEach((k, v) -> { // 活动检查 List<DivideUpstream> result = check(v); if (result.size() > 0) { UPSTREAM_MAP_TEMP.put(k, result); } else { UPSTREAM_MAP_TEMP.remove(k); } }); } } \",\"任务负责逐条遍历登记全量服务散列表，检查服务活性：\",\"若存活数大于 0，则更新存活服务散列表\",\"否则，移除存活服务散列表相应内容\",\"2）继续看服务列表活性检查处理（UpstreamCacheManager # check）：\",\"private List<DivideUpstream> check(final List<DivideUpstream> upstreamList) { List<DivideUpstream> resultList = Lists.newArrayListWithCapacity(upstreamList.size()); for (DivideUpstream divideUpstream : upstreamList) { // 检查服务活性 final boolean pass = UpstreamCheckUtils.checkUrl(divideUpstream.getUpstreamUrl()); if (pass) { // 更新服务状态 if (!divideUpstream.isStatus()) { divideUpstream.setTimestamp(System.currentTimeMillis()); divideUpstream.setStatus(true); ... } // 记录存活的服务 resultList.add(divideUpstream); } else { // 更新服务状态 divideUpstream.setStatus(false); ... } } return resultList; } \",\"负责遍历服务列表，根据 url 检查各服务活性并登记存活的服务。\"]},\"182\":{\"h\":\"3.3 活性检查\",\"t\":[\"1）服务活性检查实现（UpstreamCheckUtils # checkUrl）：\",\"public static boolean checkUrl(final String url) { ... // 检查url是否为ip+端口格式 if (checkIP(url)) { // 处理 ip 和端口 String[] hostPort; if (url.startsWith(HTTP)) { final String[] http = StringUtils.split(url, \\\"\\\\\\\\/\\\\\\\\/\\\"); hostPort = StringUtils.split(http[1], Constants.COLONS); } else { hostPort = StringUtils.split(url, Constants.COLONS); } // 测试主机是否可连通 return isHostConnector(hostPort[0], Integer.parseInt(hostPort[1])); } else { // 测试主机是否可达 return isHostReachable(url); } } \",\"检查 url 是否为 ip + port 格式：\",\"若为 ip + 端口格式，则测试主机是否可连接\",\"否则，测试主机是否可达\",\"2）测试主机是否可连接（UpstreamCheckUtils # isHostConnector）：\",\"private static boolean isHostConnector(final String host, final int port) { try (Socket socket = new Socket()) { socket.connect(new InetSocketAddress(host, port)); } catch (IOException e) { return false; } return true; } \",\"通过 socket 的 connection 测试 ip 的连通性。\",\"3）测试主机是否可达（UpstreamCheckUtils # isHostReachable）：\",\"private static boolean isHostReachable(final String host) { try { return InetAddress.getByName(host).isReachable(1000); } catch (IOException ignored) { } return false; } \",\"非 ip + 端口格式 url 尝试使用域名格式测试主机是否可达。\",\"整体看下来，divide 插件从缓存里拿到的服务器信息，来源于数据同步，由探活任务定期主动更新。\"]},\"183\":{\"h\":\"负载均衡\",\"t\":[\"上面提到，divide 通过负载均衡算法挑选最终分发的服务 ip，看下负载均衡的实现（LoadBalanceUtils # selector）：\",\"public static DivideUpstream selector(final List<DivideUpstream> upstreamList, final String algorithm, final String ip) { LoadBalance loadBalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); return loadBalance.select(upstreamList, ip); } \",\"内部使用 ExtensionLoader 实现 SPI 机制，然后通过算法名加载对应的负载均衡算法，执行负载均衡计算最终分发到的服务 ip。\",\"soul 网关里默认支持三种负载均衡策略\",\"HASH(需要计算，可能存在不均衡的情况)\",\"RANDOM(最简单最快，大量请求下几乎平均)\",\"ROUND_ROBIN(需要记录状态，有一定的影响，大数据量下随机和轮询并无太大结果上的差异)\",\"默认为 RANDOM 随机算法，算法处理如下（RandomLoadBalance # doSelect）：\",\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { int totalWeight = calculateTotalWeight(upstreamList); boolean sameWeight = isAllUpStreamSameWeight(upstreamList); // 若权重不一致，则按总权重随机 if (totalWeight > 0 && !sameWeight) { return random(totalWeight, upstreamList); } // 按服务数随机 return random(upstreamList); } \",\"判断服务列表内服务的权重是否一致：\",\"若权重不一致，则按总权重随机\",\"否则，按服务数随机\",\"按总权重随机细节（RandomLoadBalance # random）：\",\"private DivideUpstream random(final int totalWeight, final List<DivideUpstream> upstreamList) { // 按总权重取随机数 int offset = RANDOM.nextInt(totalWeight); // 确定随机值落在哪个段上 for (DivideUpstream divideUpstream : upstreamList) { offset -= getWeight(divideUpstream); if (offset < 0) { return divideUpstream; } } return upstreamList.get(0); } \"]},\"184\":{\"h\":\"总结\",\"t\":[\"divide 插件处理流程：\",\"获取可用服务列表\",\"服务列表最初来自 soul-admin 数据同步\",\"可用服务列表默认每 30 秒主动探活更新\",\"负载均衡\",\"扩展加载器加载目标负载均衡算法\",\"执行具体均衡策略\",\"返回一个最终选择的服务信息\",\"设置最终服务的的 url 信息\",\"交由插件链下游进行处理\"]},\"185\":{\"h\":\"Soul网关学习Http请求探险\",\"t\":[\"在 Soul 请求处理概览概览这篇文章中，我们已经知晓了 Soul 针对于请求的处理入库在DefaultSoulPluginChain 的 excute，其中执行了一个插件链的模式来完成了请求的处理。\",\"我们大体梳理了注入到plugins的插件，但是即使这样依然不能纵观全局，对此特地对 soul 插件所涉及的类进行了相关梳理，整体梳理结果如下图。\",\"在梳理文章中可以看到核心类是SoulPlugin、PluginEnum、PluginDataHandler、MetaDataSubscriber，在梳理请求的相关文章中我们目前只需要重点关注 SoulPlugin 与 PluginEnum 类。\",\"SoulPlugin 类我们已经有了一定的理解，那 PluginEnum 枚举类的主要作用是什么呢？\",\"PluginEnum:插件的枚举类\",\"属性\",\"作用\",\"code\",\"插件的执行顺序 越小越先执行\",\"role\",\"角色 暂时未发现实际引用地址\",\"name\",\"插件名称\",\"其实我们不难发现在DefaultSoulPluginChain 的 plugins的插件都是有固定的执行顺序的，那这个插件的执行顺序是在哪定义的呢？\",\"最终可以追溯到SoulConfiguration类下\",\" public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { //省略 final List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); return new SoulWebHandler(soulPlugins); } \",\"整理整个 PluginEnum 类相关引用，整理出如下表格，不难看出插件与插件之间的顺序关系\",\"等级\",\"作用\",\"第一等级\",\"只有 GlobalPlugin 全局插件\",\"第二等级到第八等级\",\"可以理解为在请求发起前的前置处理插件\",\"第九等级到第十一等级\",\"可以理解为针对调用方的方式所针对的不同调用处理\",\"第十二等级\",\"只有 MonitorPlugin 监控插件\",\"第十三等级\",\"是针对于各个调用方返回结果处理的 Response 相关插件\",\"在刚才的回顾中我们已经明白 soul 处理请求的大体流程\",\"1.GloBalPlugin 插件 进行全局的初始化\",\"2.部分插件根据鉴权、限流、熔断等规则对请求进行处理\",\"3.选择适合自己的调用方式进行拼装参数，发起调用。\",\"4.进行监控\",\"5.对调用的结果进行处理\",\"以下演示代码截图来自于 soul-examples 下的 http demo，调用的接口地址为http://127.0.0.1:9195/http/test/findByUserId?userId=10\",\"在DefaultSoulPluginChain 的 excute方法进行埋点，查看一次 http 请求调用经过了哪些类？\",\"public Mono<Void> execute(final ServerWebExchange exchange) { return Mono.defer(() -> { if (this.index < plugins.size()) { SoulPlugin plugin = plugins.get(this.index++); Boolean skip = plugin.skip(exchange); if (skip) { System.out.println(\\\"跳过的插件为\\\"+plugin.getClass().getName().replace(\\\"org.dromara.soul.plugin.\\\",\\\"\\\")); return this.execute(exchange); } System.out.println(\\\"未跳过的插件为\\\"+plugin.getClass().getName().replace(\\\"org.dromara.soul.plugin.\\\",\\\"\\\")); return plugin.execute(exchange, this); } return Mono.empty(); }); } \",\"最终输出的未跳过的插件如下：\",\"未跳过的插件为 global.GlobalPlugin 未跳过的插件为 sign.SignPlugin 未跳过的插件为 waf.WafPlugin 未跳过的插件为 ratelimiter.RateLimiterPlugin 未跳过的插件为 hystrix.HystrixPlugin 未跳过的插件为 resilience4j.Resilience4JPlugin 未跳过的插件为 divide.DividePlugin 未跳过的插件为 httpclient.WebClientPlugin 未跳过的插件为 alibaba.dubbo.param.BodyParamPlugin 未跳过的插件为 monitor.MonitorPlugin 未跳过的插件为 httpclient.response.WebClientResponsePlugin\",\"这里有个小疑惑，为啥这个 alibaba.dubbo.param.BodyParamPlugin 插件会被执行，暂时忽略，后期跟踪。\",\"我们发现一次针对于 http 请求的网关调用 所执行的插件的大体流程与我们猜想的处理流程一致。 目前我们只挑重点来讲，即GlobalPlugin、DividePlugin、WebClientPlugin、WebClientResponsePlugin。\",\"发起 Debug 调用依次追踪上述四个插件的作用。\"]},\"186\":{\"h\":\"GlobalPlugin SoulContext 对象封装插件\",\"t\":[\"GlobalPlugin 的插件的 excute 方法如下所示\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { final ServerHttpRequest request = exchange.getRequest(); final HttpHeaders headers = request.getHeaders(); final String upgrade = headers.getFirst(\\\"Upgrade\\\"); SoulContext soulContext; if (StringUtils.isBlank(upgrade) || !\\\"websocket\\\".equals(upgrade)) { soulContext = builder.build(exchange); } else { final MultiValueMap<String, String> queryParams = request.getQueryParams(); soulContext = transformMap(queryParams); } exchange.getAttributes().put(Constants.CONTEXT, soulContext); return chain.execute(exchange); } \",\"不难看出 在 GlobalPlugin 的 excute 方法中主要目的就是封装一个SoulContext 对象，放入 exchange 中（exchange 对象是整个插件链上的共享对象，有一个插件执行完成后传递给下一个插件，本人理解的就是一个类似于 ThreadLocal 对象）。\",\"那 SoulContext 对象中又包含哪些属性呢？\",\"属性\",\"含义\",\"module\",\"每种 RPCType 针对的值不同 http 调用时指代网关调用的前置地址\",\"method\",\"切割后的方法名（在 RpcType 为 http 时）\",\"rpcType\",\"RPC 调用类型有 Http、dubbo、sofa 等\",\"httpMethod\",\"Http 调用的方式目前只支持 get、post\",\"sign\",\"鉴权的相关属性目前不知道具体作用，可能与 SignPlugin 插件有关\",\"timestamp\",\"时间戳\",\"appKey\",\"鉴权的相关属性目前不知道具体作用，可能与 SignPlugin 插件有关\",\"path\",\"路径指代调用到 soul 网关的全路径（在 RpcType 为 http 时）\",\"contextPath\",\"与 module 取值一致（在 RPCType 为 http 时）\",\"realUrl\",\"与 method 的值一致（在 RpcType 为 http 时）\",\"dubboParams\",\"dubbo 的参数？\",\"startDateTime\",\"开始时间怀疑与监控插件和统计指标模块有联用\",\"在执行完 GlobalPlugin 插件后，最终封装完成的 SoulContext 对象如下所示。\",\"其他 RPCType 的 SoulContext 的参数封装可以查看DefaultSoulContextBuilder 的 build方法进行追踪，由于本编文章主要追溯 http 调用，故在这里不在多余讨论。\"]},\"187\":{\"h\":\"DividePlugin 路由选择插件\",\"t\":[\"在执行完成 GlobalPlugin 插件后，最终封装成了一个SoulContext 对象，并将其放在了ServerWebExchange中，供下游的调用链使用。\",\"接下来让我们看一下DividePlugin 插件在整个链式调用过程中到底起了一个什么样的作用？\"]},\"188\":{\"h\":\"AbstractSoulPlugin\",\"t\":[\"通过追溯源码得知DividePlugin 插件继承于 AbstractSoulPlugin 类，而 AbstractSoulPlugin 类实现了 SoulPlugin 接口。\",\"那么AbstractSoulPlugin又做了哪些扩展呢？让我们梳理一下该类的方法。\",\"方法名\",\"作用\",\"excute\",\"实现于 SoulPlugin 接口，在 AbstractSoulPlugin 中起到一个模板方法的作用\",\"doexcute\",\"抽象方法 交由各个子类实现\",\"matchSelector\",\"匹配选择器\",\"filterSelector\",\"筛选选择器\",\"matchRule\",\"匹配规则\",\"filterRule\",\"筛选规则\",\"handleSelectorIsNull\",\"处理选择器为空情况\",\"handleRuleIsNull\",\"处理规则为空情况\",\"selectorLog\",\"选择器日志打印\",\"ruleLog\",\"规则日志打印\",\"看一下excute方法的具体作用\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String pluginName = named(); //获取对应插件 final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); //判断插件是否启用 if (pluginData != null && pluginData.getEnabled()) { //获取插件下的所有选择器 final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); if (CollectionUtils.isEmpty(selectors)) { return handleSelectorIsNull(pluginName, exchange, chain); } //匹配选择器 final SelectorData selectorData = matchSelector(exchange, selectors); if (Objects.isNull(selectorData)) { return handleSelectorIsNull(pluginName, exchange, chain); } //打印选择器日志 selectorLog(selectorData, pluginName); final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); if (CollectionUtils.isEmpty(rules)) { return handleRuleIsNull(pluginName, exchange, chain); } RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { rule = rules.get(rules.size() - 1); } else { //匹配规则 rule = matchRule(exchange, rules); } if (Objects.isNull(rule)) { return handleRu![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f523f655f0014d288b7a4502cc6a08d1~tplv-k3u1fbpfcp-watermark.image)leIsNull(pluginName, exchange, chain); } //打印规则日志 ruleLog(rule, pluginName); //执行子类具体实现 return doExecute(exchange, chain, selectorData, rule); } return chain.execute(exchange); } \",\"最终整理的流程图如下所示：\",\"ps：在上述的流程图中并没有细化到具体的方法级别的处理。\",\"但仍有几个点需要着重解释一下：\",\"1.插件数据、选择器数据、规则数据的获取全部来自于BaseDataCache，该类是数据同步过程中最终会影响的类。\",\"2.选择器的类型，在使用 SpringMvc 项目进行接口注册时，会有一个 isFull 的选项为 true 代表全局代理，在全局代理模式下只会注册一个选择器\\\\规则(指代代理所有的接口),所以这里的对应处理为 rule.size()-1.\",\"3.选择器和规则的选择，实际的处理要复杂的多，考虑到是介绍一次请求流程的大体逻辑，所以这里不展开阐述，有兴趣的可以查看MatchStrategy、AbstractMatchStrategy 及其相关实现类（后期会单独开一篇具体讲解），此处对应页面的如下：\",\"梳理一下AbstractSoulPlugin 的 exeute 方法作用，经过上述流程图的引导，我们已经知晓该方法的作用是为了选取插件--->选取选择器--->选取规则，最后交由子类的doexcute方法。\",\"接下来让我们看一下DividePlugin 的 doexcute方法具体做了哪些事。\"]},\"189\":{\"h\":\"DividePlugin\",\"t\":[\"protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; //获取规则处理数据 final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); //获取该选择器下的注入的地址 final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); if (CollectionUtils.isEmpty(upstreamList)) { log.error(\\\"divide upstream configuration error： {}\\\", rule.toString()); Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress(); //通过规则对应的负载均衡策略选择一个地址 DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); if (Objects.isNull(divideUpstream)) { log.error(\\\"divide has no upstream\\\"); Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // set the http url String domain = buildDomain(divideUpstream); //拼装真实调用地址 String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); //设置超时时间 及重试次数 exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout()); exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry()); return chain.execute(exchange); } \",\"通过上述代码梳理完成后大体逻辑如下：\",\"1.获取选择器对应的注册地址，对应页面数据如下\",\"2.根据规则的 handle 字段获取负载均衡策略，并选择真实的调用地址（LoadBalanceUtils），重试次数和超时时间，对应页面数据如下。\",\"3.将真实调用地址，超时时间，重试次数传递到ServerWebExchange中，供下游调用链使用。 debug 演示： ps：在上述的主题逻辑中我们没有看到参数在哪里？那这个参数在哪封装的呢？答案在buildRealURL 方法中，是从exchange上下文中获取到的。\"]},\"190\":{\"h\":\"WebClientPlugin Http 请求调用插件\",\"t\":[\"接下来让我们看看 Soul 如何发起的请求调用\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; //获取真实地址 String urlPath = exchange.getAttribute(Constants.HTTP_URL); if (StringUtils.isEmpty(urlPath)) { Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } //获取超时时间 long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L); //获取重试次数 int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0); log.info(\\\"The request urlPath is {}, retryTimes is {}\\\", urlPath, retryTimes); HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue()); WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath); return handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain); } \",\"在 webClient 的excute方法中，主要做了三个事\",\"1.将从 Divide 插件中放入 exchange 的属性取出来，调用的真实地址、超时时间、重试次数。\",\"2.封装了一个RequestBodySpec对象（不认识这个响应式编程的东西）\",\"3.调用了一个handleRequestBody方法\",\"先认识handleRequestBody方法\",\"private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBodySpec, final ServerWebExchange exchange, final long timeout, final int retryTimes, final SoulPluginChain chain) { return requestBodySpec.headers(httpHeaders -> { httpHeaders.addAll(exchange.getRequest().getHeaders()); httpHeaders.remove(HttpHeaders.HOST); }) .contentType(buildMediaType(exchange)) .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody())) .exchange() //失败打印日志 .doOnError(e -> log.error(e.getMessage())) //设置超时时间 .timeout(Duration.ofMillis(timeout)) //设置请求重试实际 .retryWhen(Retry.onlyIf(x -> x.exception() instanceof ConnectTimeoutException) .retryMax(retryTimes) .backoff(Backoff.exponential(Duration.ofMillis(200), Duration.ofSeconds(20), 2, true))) //请求结束后对应的处理 .flatMap(e -> doNext(e, exchange, chain)); } \",\"在这个方法里，大体可以理解为\",\"exchange 中的请求头放到本次调用的请求头中\",\"设置 contentType\",\"设置超时时间\",\"设置失败响应\",\"设置重试的场景及重试次数\",\"最终结果的处理。 在流程中需要还需要看一个doNext 方法\",\"大体逻辑就是判断请求是否成功，将请求结果放入 exchange 中交给下游插件处理。\",\"private Mono<Void> doNext(final ClientResponse res, final ServerWebExchange exchange, final SoulPluginChain chain) { if (res.statusCode().is2xxSuccessful()) { exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName()); } else { exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName()); } exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res); return chain.execute(exchange); } \",\"ps： 虽然并不懂响应式编程，但并不影响我们阅读代码。\"]},\"191\":{\"h\":\"WebClientResponsePlugin Http 结果处理插件\",\"t\":[\"该实现的 excute 方法没有什么核心逻辑，就是判断请求状态码，根据状态码返回给前端不同的数据格式。\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { ServerHttpResponse response = exchange.getResponse(); ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR); if (Objects.isNull(clientResponse) || response.getStatusCode() == HttpStatus.BAD_GATEWAY || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } response.setStatusCode(clientResponse.statusCode()); response.getCookies().putAll(clientResponse.cookies()); response.getHeaders().putAll(clientResponse.headers().asHttpHeaders()); return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())); })); } \",\"到此为止，一个基于 Soul 网关发起的 Http 请求调用流程大体已经结束。\",\"梳理 http 请求调用流程\",\"Global 插件封装 SoulContext 对象\",\"前置插件处理熔断限流鉴权等操作。\",\"Divide 插件选择对应调用的真实地址，重试次数，超时时间。\",\"WebClient 插件发起真实的 Http 调用\",\"WebClientResponse 插件处理对应结果，返回前台。\",\"基于 Http 调用的大体流程，我们可以大体猜测出基于别 RPC 调用的流程，就是替换发起请求的插件和返回结果处理的插件。\",\"在上文中我们还提到了路由规则的选择LoadBalanceUtils，选择器和规则的处理MatchStrategy。\",\"之后将会开启新篇章一步步揭开 RPC 泛化调用，路由选择，选择器、规则匹配的神秘面纱。\"]},\"192\":{\"h\":\"Soul网关学习RateLimiter插件原理解析\"},\"193\":{\"h\":\"回顾\",\"t\":[\"在之前的 HTTP 请求初探的文章中，大体梳理了 Soul 插件的处理流程，也得知了 DividePlugin、GlobalPlugin，WebClientPlugin，WebCilentResponsePlugin 插件的具体作用，在梳理流程中，发现 Soul 的插件是有先后顺序的，在 DividePlugin 插件之前做了很多前置插件的操作，其中包含了我们本章分析的主题RateLimiterPlugin 限流插件（其中一种）。\"]},\"194\":{\"h\":\"学习使用\"},\"195\":{\"h\":\"阅读官方文档 对其有大概认知\",\"t\":[\"rateLimiter 插件\",\"通过官方文档的阅读我们得知了RateLimiterPlugin的两个核心点速率、容量\",\"以下讲解来源于官方文档\",\"容量：是允许用户在一秒钟内执行的最大请求数。这是令牌桶可以保存的令牌数。\",\"速率：是你允许用户每秒执行多少请求，而丢弃任何请求。这是令牌桶的填充速率。\",\"可以看出RateLimiterPlugin限流核心在于令牌桶算法的实现。\",\"ps：关于限流算法常见的有四种实现令牌桶算法，漏斗算法，计数器（固定窗口）算法，滑动窗口算法，详情看对应博客介绍\"]},\"196\":{\"h\":\"初步使用\"},\"197\":{\"h\":\"启用对应插件\",\"t\":[\"在 Soul 网关系统管理-插件管理处，将状态更改为启用状态，注意此处需要填写 redis 相关配置，Soul 令牌桶基于 Redis。\",\"为什么 Soul 的令牌桶算法要基于 redis？\",\"在集群部署情况下单机的令牌桶算法无法满足集群状态下的限流功能。\"]},\"198\":{\"h\":\"添加限流选择器、规则\",\"t\":[\"在 Soul 网关插件列表处，选择 rate_limiter 处添加规则及选择器配置，不懂如何添加的可以先阅读选择器\\\\规则的匹配逻辑. 在此处添加的容量及速率都为 1 主要为了验证插件是否启用。\"]},\"199\":{\"h\":\"接口对应访问\",\"t\":[\"调用http://127.0.0.1:9195/http/test/findByUserId?userId=10 进行访问，速率高于 1 的情况下出现如下接口返回结果，代表插件成功使用。\",\"{ \\\"code\\\": 429, \\\"message\\\": \\\"You have been restricted, please try again later!\\\", \\\"data\\\": null } \"]},\"200\":{\"h\":\"源码阅读 带着问题读源码\"},\"201\":{\"h\":\"如何保证在页面修改 redis 配置后立即生效的，后台对应的 redis 连接立马变更的。\",\"t\":[\"答案自然数据同步脱不了干系。\",\"在修改插件的配置时，也发布了一个插件数据变更的事件通知，在之前梳理Soul 网关同步数据整体流程时,已经得知修改的插件数据除了更改了 JVM 缓存内的数据外，还对对应的插件进行下发操作，如下图 而针对于RateLimiterPlugin而言，其主要实现了handlePlugin的接口，那这个对应的实现到底做了哪些事呢？\",\"具体的方法为RateLimiterPluginDataHandler 的 handlerPlugin。\",\"public void handlerPlugin(final PluginData pluginData) { if (Objects.nonNull(pluginData) && pluginData.getEnabled()) { //加载限流插件配置 RateLimiterConfig rateLimiterConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), RateLimiterConfig.class); //判断是否需要重新加载redis连接值 if (Objects.isNull(Singleton.INST.get(ReactiveRedisTemplate.class)) || Objects.isNull(Singleton.INST.get(RateLimiterConfig.class)) || !rateLimiterConfig.equals(Singleton.INST.get(RateLimiterConfig.class))) { LettuceConnectionFactory lettuceConnectionFactory = createLettuceConnectionFactory(rateLimiterConfig); lettuceConnectionFactory.afterPropertiesSet(); RedisSerializer<String> serializer = new StringRedisSerializer(); RedisSerializationContext<String, String> serializationContext = RedisSerializationContext.<String, String>newSerializationContext().key(serializer).value(serializer).hashKey(serializer).hashValue(serializer).build(); ReactiveRedisTemplate<String, String> reactiveRedisTemplate = new ReactiveRedisTemplate<>(lettuceConnectionFactory, serializationContext); Singleton.INST.single(ReactiveRedisTemplate.class, reactiveRedisTemplate); Singleton.INST.single(RateLimiterConfig.class, rateLimiterConfig); } } } \",\"上述代码有几个较为关键的点：\",\"在上述代码中将限流插件的配置和对应的 redisTemplate 实例放入了 Singleton.INST 对应 map 中。\",\"在插件数据过来时，判断是否存在 redis 连接实例，是否存在限流配置实例，判断当前的限流配置实例是否和传递的限流实例一致，不一致就认为配置是有更改的，就重新初始化限流实例和连接池实例放入 Singleton.INST 的 map 中，由此而言就保证了更改 redis 配置的热部署。\",\"if 判断中的代码就是基于 SpringDataRedis 封装成一个对应 redis 连接池。\",\"ps：Singleton.INST 是枚举实现的单例模式。\"]},\"202\":{\"h\":\"限流插件是底层是如何实现的呢？\"},\"203\":{\"h\":\"Debug 调用链\",\"t\":[\"RateLimiterPlugin由于需要对特定规则进行限流，所以依旧实现了AbstractSoulPlugin，之前依旧梳理过AbstractSoulPlugin 的 excute的方法和作用了，所以这里不重复解释，可观看Http 调用流程梳理，加深对该类的印象。\",\"本节重点还是看具体的doexcute方法做了哪些事。\",\" protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final String handle = rule.getHandle(); final RateLimiterHandle limiterHandle = GsonUtils.getInstance().fromJson(handle, RateLimiterHandle.class); return redisRateLimiter.isAllowed(rule.getId(), limiterHandle.getReplenishRate(), limiterHandle.getBurstCapacity()) .flatMap(response -> { if (!response.isAllowed()) { //返回的错误信息 429错误编码 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); Object error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } return chain.execute(exchange); }); } \",\"在上述代码中可以看出是通过redisRateLimiter.isAllowed来判断是否获取令牌成功的。 该方法如下\",\" public Mono<RateLimiterResponse> isAllowed(final String id, final double replenishRate, final double burstCapacity) { if (!this.initialized.get()) { throw new IllegalStateException(\\\"RedisRateLimiter is not initialized\\\"); } //获取redis Key List<String> keys = getKeys(id); //封装lua脚本执行所需的参数 第一位是速率 第二位是容量 第三位是当前时间戳10位 第四位固定参数值1 代表申请的令牌数 List<String> scriptArgs = Arrays.asList(replenishRate + \\\"\\\", burstCapacity + \\\"\\\", Instant.now().getEpochSecond() + \\\"\\\", \\\"1\\\"); //执行lua脚本 Flux<List<Long>> resultFlux = Singleton.INST.get(ReactiveRedisTemplate.class).execute(this.script, keys, scriptArgs); return resultFlux.onErrorResume(throwable -> Flux.just(Arrays.asList(1L, -1L))) .reduce(new ArrayList<Long>(), (longs, l) -> { longs.addAll(l); return longs; }).map(results -> { //allowed 代表执行的结果 为1 代表执行成功 boolean allowed = results.get(0) == 1L; Long tokensLeft = results.get(1); RateLimiterResponse rateLimiterResponse = new RateLimiterResponse(allowed, tokensLeft); log.info(\\\"RateLimiter response:{}\\\", rateLimiterResponse.toString()); return rateLimiterResponse; }).doOnError(throwable -> log.error(\\\"Error determining if user allowed from redis:{}\\\", throwable.getMessage())); } \"]},\"204\":{\"h\":\"方法 getKeys(id)\",\"t\":[\"该方法是获取 redis 需要操作的 key，一共获取了两个类型的 Key，格式如下:\",\"中间那位特别长的数字是规则 ID，因为限流的最小粒度是规则。\",\"第一个 timestamp 记录的是上一次调用的时间戳\",\"第二个 tokens 记录的是上一次调用完成后剩余的令牌数量\"]},\"205\":{\"h\":\"execute(this.script, keys, scriptArgs）\",\"t\":[\"执行 lua 脚本 keys 传递的是 getKeys(id)返回值，scriptArgs 传递的是所需的参数\",\"通过阅读上述代码已经知晓 限流规则的具体实现是交给特定的 lua 脚本的。\",\"ps：这里需要提醒一下限流算法是令牌桶算法，令牌桶算法一共有两种大体实现，一种是有个线程不断生成令牌，当请求进来时，先从对应的队列中获取令牌，但这种令牌生成方式在设定阈值特别大时，会非常消耗性能，所以有了第二种令牌桶算法，在获取令牌时实时计算令牌数量，而 soul 就是基于第二种实现的。\"]},\"206\":{\"h\":\"Lua 限流算法分析\",\"t\":[\"-- 当前规则令牌剩余数量存储key local tokens_key = KEYS[1] -- 当前规则上次调用时间 local timestamp_key = KEYS[2] -- 速率 local rate = tonumber(ARGV[1]) -- 容量 local capacity = tonumber(ARGV[2]) -- 时间戳 local now = tonumber(ARGV[3]) -- 值为1 local requested = tonumber(ARGV[4]) -- 容量除以速率 计算填充时间 local fill_time = capacity/rate -- 计算过期时间 取下限 local ttl = math.floor(fill_time*2) -- 获取当前存有的令牌数 local last_tokens = tonumber(redis.call(\\\"get\\\", tokens_key)) if last_tokens == nil then -- 将令牌数量赋值为设定的容量 last_tokens = capacity end -- 获取上一次调用时间 local last_refreshed = tonumber(redis.call(\\\"get\\\", timestamp_key)) if last_refreshed == nil then last_refreshed = 0 end -- 计算出上次调用和本次调用之间的时间差 local delta = math.max(0, now-last_refreshed) -- 计算出当前剩余的令牌数量 local filled_tokens = math.min(capacity, last_tokens+(delta*rate)) -- 判断当前令牌数量 数量>=1 代表获取成功 local allowed = filled_tokens >= requested local new_tokens = filled_tokens local allowed_num = 0 if allowed then -- 申请一个令牌 new_tokens = filled_tokens - requested allowed_num = 1 end -- setex 设置过期key 过期时间 新值 redis.call(\\\"setex\\\", tokens_key, ttl, new_tokens) redis.call(\\\"setex\\\", timestamp_key, ttl, now) return { allowed_num, new_tokens } \",\"推荐先了解一下 luaKEYS ARGS的作用redis lua 中 keys[1] 和 argv[1] 的理解.\",\"Lua 代码整体逻辑还是非常明朗的，在这里细讲也讲不出个啥来，代码注释已经打全了。\",\"本人在这里疑惑的有两点\",\"ttl参数的计算 乘 2 的目的是为了怕不是整数？，所以进行的*2 取最小操作?\",\"filled_tokens参数的计算 核心代码 last_tokens+(delta*rate)，其中 delta 参数是两个十位时间戳相减得来 ，但是 rate 是按秒来生成的，难道不应该是 last_tokens+((delta/1000)*rate)吗？\"]},\"207\":{\"h\":\"Soul网关学习Redirect插件原理解析\",\"t\":[\"Soul 网关在对目标服务进行代理调用的时候，可以使用 redirect 插件来重定向请求。其中包含两种场景：一种把 redirectUrl 配置为第三方 URL 地址，直接使用 308 进行转发跳转，另一种是把 redirectUrl 配置以 / 开头的转发到网关自身。\"]},\"208\":{\"h\":\"插件配置\",\"t\":[\"在 soul-admin –> 插件管理 –> redirect，设置为开启。\",\"在 soul-bootstrap 项目的 pom.xml 文件中添加 redirect 的 maven 依赖。\",\"在 soul- admin 后台设置选择器规则，只有匹配的请求，才会进行转发和重定向，请详细看：选择器规则。\"]},\"209\":{\"h\":\"Maven 依赖\",\"t\":[\"在 soul-bootstrap 工程的 pom.xml 文件中添加插件依赖。\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-redirect</artifactId> <version>${last.version}</version> </dependency> \"]},\"210\":{\"h\":\"场景\",\"t\":[\"顾名思义，redirect 插件就是对 uri 的重新转发和重定向。\"]},\"211\":{\"h\":\"重定向\",\"t\":[\"我们在 Rule 配置自定义路径时，应该为一个可达的服务路径。\",\"当匹配到请求后，根据自定义的路径，Soul 网关会进行 308 服务跳转。\",\"重定向配置\"]},\"212\":{\"h\":\"网关自身接口转发\",\"t\":[\"当满足匹配规则时，服务内部会使用 DispatcherHandler 内部接口转发。\",\"要实现网关自身接口转发，我们需要在配置路径使用 / 作为前缀开始，具体配置如下图。\",\"自身接口转发\"]},\"213\":{\"h\":\"源码解析\",\"t\":[\"在解析 redirect 重定向源码之前，有必要说一些大前提，我们明白 Soul 网关基于 SpringBoot WebFlux 实现，其中对于 WebFlux 如果默认什么都不配置，请求会默认执行 DispatcherHandler 处理，这个是响应式 MVC 的处理核心，可以看一下初始化：\",\"protected void initStrategies(ApplicationContext context) { Map<String, HandlerMapping> mappingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false); ArrayList<HandlerMapping> mappings = new ArrayList(mappingBeans.values()); AnnotationAwareOrderComparator.sort(mappings); // handlerMapping 相关 this.handlerMappings = Collections.unmodifiableList(mappings); Map<String, HandlerAdapter> adapterBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false); // handlerAdapter 相关 this.handlerAdapters = new ArrayList(adapterBeans.values()); AnnotationAwareOrderComparator.sort(this.handlerAdapters); Map<String, HandlerResultHandler> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerResultHandler.class, true, false); // resultHandler 相关 this.resultHandlers = new ArrayList(beans.values()); AnnotationAwareOrderComparator.sort(this.resultHandlers); } \",\"再之后就是我们熟悉的 MVC 核心处理 DispatcherHandler#handle 方法\",\"public Mono<Void> handle(ServerWebExchange exchange) { return this.handlerMappings == null ? this.createNotFoundError() : Flux.fromIterable(this.handlerMappings).concatMap((mapping) -> { return mapping.getHandler(exchange); }).next().switchIfEmpty(this.createNotFoundError()).flatMap((handler) -> { return this.invokeHandler(exchange, handler); }).flatMap((result) -> { return this.handleResult(exchange, result); }); } \",\"搞清楚默认 DispatcherHandler 如何处理，我们再来说一下 Soul 网关，SoulWebHandler 实现了 WebHandler 接口，再把 BeanName 声明为 webHandler 替代了之前 DispatcherHandler 注册成默认处理 handler。\",\"@Bean(\\\"webHandler\\\") public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { List<SoulPlugin> pluginList = plugins.getIfAvailable(Collections::emptyList); List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); soulPlugins.forEach(soulPlugin -> log.info(\\\"load plugin:[{}] [{}]\\\", soulPlugin.named(), soulPlugin.getClass().getName())); return new SoulWebHandler(soulPlugins); } \",\"到此为止我们明白了，默认请求都通过了 SoulWebHandler#handle 处理，如果我们需要转发到网关自身的 MVC 如何做呢？下面通过初始化RedirectPlugin 的时候把 DispatcherHandler 注入，根据具体请求再由 DispatcherHandler 分发，具体核心代码如下：\",\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final String handle = rule.getHandle(); final RedirectHandle redirectHandle = GsonUtils.getInstance().fromJson(handle, RedirectHandle.class); if (Objects.isNull(redirectHandle) || StringUtils.isBlank(redirectHandle.getRedirectURI())) { log.error(\\\"uri redirect rule can not configuration: {}\\\", handle); return chain.execute(exchange); } // 处理以 / 开头自身转发 if (redirectHandle.getRedirectURI().startsWith(ROOT_PATH_PREFIX)) { ServerHttpRequest request = exchange.getRequest().mutate() .uri(Objects.requireNonNull(UriUtils.createUri(redirectHandle.getRedirectURI()))).build(); ServerWebExchange mutated = exchange.mutate().request(request).build(); return dispatcherHandler.handle(mutated); } else { // 否则就 308 跳转 ServerHttpResponse response = exchange.getResponse(); response.setStatusCode(HttpStatus.PERMANENT_REDIRECT); response.getHeaders().add(HttpHeaders.LOCATION, redirectHandle.getRedirectURI()); return response.setComplete(); } } \"]},\"214\":{\"h\":\"参考链接：\",\"t\":[\"Spring WebFlux 的设计及工作原理剖析\",\"Spring WebFlux 工作原理\"]},\"215\":{\"h\":\"Soul网关学习Sentinel插件原理解析\",\"t\":[\"在业务网关中熔断和流量控制都是非常必要的功能。soul 在实现这部分功能时使用了不同的成熟组件，用户可以根据自己的喜好选择。本文将介绍如何在 soul 中使用阿里的 Sentinel 组件实现熔断及流控功能。本文首先会介绍熔断和流控的场景及意义。然后介绍如何在 soul 上配置使用 sentinel 插件做流控和熔断。最后从源码的层面简略分析 soul 是如何使用 Sentinel 组件的。\"]},\"216\":{\"h\":\"场景描述\",\"t\":[\"业务网关作为流量的入口，有保护后继服务的职责。以下两个对服务有严重危害的场景在生产中经常会遇到，也是业务网关必须要关注处理的问题。一种情况是在比如双 11 或双 12 这些大型促销时，接口的请求量是平时是数倍，如果没有评估好容量，这种激增的请求很容易导致整个服务完全不可用。这种宕机往往不是因为业务逻辑的漏洞而是因为请求过多资源不够导致的。另一种情况是在整个服务体系中有一些核心服务，多个业务流程都依赖该服务。然而是服务都有出现处理不稳定或者服务损坏的情况，导致请求处理时间长或者老是频繁抛出异常。排除业务 BUG 的情况，可能就是突发的非常随机的阻塞，一般减缓请求量就会自动修复，但是如果不加保护就有出现多米诺效应导致整个服务不可用。此场景和第一种场景有略微不同，第一种场景是实际流量确实出现了不可处理的峰值，而第二种场景主要考虑的是服务本身出现了不可避免、不可预测的抖动而引发的连锁反应。\"]},\"217\":{\"h\":\"流量控制\",\"t\":[\"针对第一种场景我们通常的做法是进行流量控制，核心思路是业务网关保证打到后面的请求是业务可以承受的量，多余的请求直接拒绝或者加入等待队列，保证服务不会宕掉，大部分请求还是可以正常处理。在考虑流量控制的策略时，我们应该主要思考以下几个问题：\",\"通过什么角度控制流量？\",\"阈值是多少？\",\"流量控制的策略是什么？\",\"对于第一个问题，正常思路是通过 QPS 来监控流量，即每秒钟请求的数量超过某限额时进行流控。但其实还有一种思路是从并发数来监控流量。这种控制场景也是非常有意义的，例如当下游应用由于某种原因导致服务不稳定、响应延迟增加，对于网关来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。从某种意义上讲通过并发进行流控可以一定程度上保护网关服务本身。对于第二个问题阈值来说比较好理解，就是触发流控的边界，如果从 QPS 来考虑就是每秒达到多少时开始流控，从并发数来考量的话就是请求上下文的线程数目超过多少进行流控。对于第三个问题，我们一般有以下 3 中处理方案：\",\"直接拒绝，这种策略非常好理解就是当 QPS 高于阈值时直接拒接服务，不把请求传输到后面的服务中。\",\"预热启动，这个策略所针对的场景是系统长期处于低水位的情况下，可能出现流量突然增加时，而直接把系统拉升到高水位可能瞬间把系统压垮。预热启动的方式是让阈值缓慢增加，在一定时间内逐渐增加阈值直至达到设置，给冷系统一个预热的时间，避免冷系统被压垮。对于超出阈值的请求也是触发拒绝。\",\"匀速排队，此策略核心思路是以固定间隔时间让请求通过。当请求到来的时候，如果当前请求距离上个通过的请求通过的时间间隔不小于预设值，则让当前请求通过；否则，计算当前请求的预期通过时间，如果该请求的预期通过时间小于规则预设的 timeout 时间，则该请求会等待直到预设时间到来通过（排队等待处理）；若预期的通过时间超出最大排队时长，则直接拒接这个请求。\"]},\"218\":{\"h\":\"熔断\",\"t\":[\"针对第二种场景通常的处理方式是设置服务熔断。简单的说就是当我们探测的一个服务出现了异常，则不再访问它以免更多的请求对它造成更大的压力。一段时间后如果探测到服务恢复了再将流量发送过去。我们首先需要判断出这个服务是否出现了不稳定\\\\抖动的情况。然后思考如果发现了抖动的服务我们应该怎么办。如何判断服务是否恢复正常了。对于服务是否不稳定这一点我们一般可以通过一下 3 个方式进行判断。\",\"慢调用比例：当单位统计时长内请求数目大于设置的最小请求数目，并且超过最大忍受时间的请求大于阈值，则判断服务异常，触发熔断；\",\"异常比例：当单位统计时长内异常请求的比例大于阈值则我们判定服务异常，触发熔断；\",\"异常数：当单位时长内出现异常的请求的数量的达到阈值则判定服务异常，触发熔断；\",\"当我们通过以上 3 个指标判断服务为异常并熔断服务后，对于一定时间内（熔断时长内）的请求我们可以选择直接报错，不阻塞上游服务，让请求方来自行决定如何处理。或者直接触发服务降级。服务降级粗略的可以理解为请求此业务的简版，该简版省掉了很多非核心流程，并且只是最终保证流程处理完（最终一致性）。和现实中的熔断一样服务熔断是会自动恢复的。一般是触发熔断后的一段时间内服务处于熔断状态不提供服务，然后进入半开状态，若接下来的少量请求没有报错且响应时间合理则服务恢复，如果还是异常则继续熔断。\",\"Sentinel 是阿里开源的面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。Soul 作为国内优秀的开源网关，将 Sentinel 整合为插件融入了自己的体系中，使用户通过简单的配置就可以使用 Sentinel 提供的流量控制和服务熔断功能。下面将简要介绍在 soul 中如何配置使用 sentinel 插件。\",\"首先登陆 soul 管理平台在\\\"插件列表\\\" --> \\\"sentinel\\\"中配置插件。其中\\\"选择器\\\"的配置不是本文的重点不再介绍，点击\\\"增加规则\\\"来进行具体设置如下图。\",\"在这个配置页面中\\\"名称\\\"、\\\"匹配方式\\\"、\\\"条件\\\"、\\\"日志打印\\\"、\\\"是否开启\\\"、\\\"执行顺序\\\"属于 soul 插件的常规配置这里也不再赘述。我们重点需要关注的是\\\"处理\\\"中的配置项。这些配置项主要可以分为 2 组，前 4 个选项是关于熔断的配置，后 4 个选项是关于流量控制的配置。在 soul 中我们可以针对某一组请求同时设置它的流量控制和熔断策略。下面来重点分析下各个配置项如何使用。\"]},\"219\":{\"h\":\"熔断\",\"t\":[\"首先来看熔断相关的配置，它有四个配置项\\\"熔断阈值\\\"、\\\"是否开启熔断\\\"、\\\"熔断窗口大小\\\"以及没有注名字的是服务异常判断方式。熔断开关表示是否开启熔断（1 开\\\\0 不开）。熔断窗口大小指的是触发熔断后经过多少秒后进入半开状态，在半开状态如果请求正常则会进入正常状态如果请求依然不正常则继续熔断。熔断判定方式和熔断阈值需要结合来看。soul 中使用了 sentinel 的 3 种服务异常判定方式。分别是：\",\"慢调用比例，在此模式下阈值指的是判定为慢调用的毫秒数。慢调用的比例默认是 1 不能更改即单位统计时长内全部超过阈值则触发熔断。该模式是 sentinel 的默认模式。\",\"异常比例，在此模式下阈值指的是单位统计时长内异常请求的比例上限，需要填写 1 个[0.0, 1.0]的数，表示 0%-100%\",\"异常数策略，在该模式下阈值指的是单位统计时间内异常请求个数的上限。\",\"需要注意的是 soul 对于单位统计时长（statIntervalMs）和熔断最小请求数（minRequestAmount）使用的是 sentinel 的默认参数。分别是 1 秒钟和 5 次。单位时长指定的是异常判断以是 1 秒钟为统计范围，下一秒重新开始计数。最小请求数指的是 1 秒钟内如果请求的次数少于 5 那么即使达到阈值也不会触发熔断。\",\"如上图配置表示的意思是，开启熔断配置，如果此服务在 1 秒钟内有 5 个请求都出现了异常那么则熔断 10 秒，10 秒后进入如半开状态，如果请求都正常则变为正常状态，如果还不正常则继续熔断。熔断期间如果请求该服务则 soul 网关会直接返回请求错误，保护后端服务不会再接到请求。\"]},\"220\":{\"h\":\"流量控制\",\"t\":[\"流量控制的相关配置有 5 个，从上到下从左到右分别是\\\"流控效果\\\"，\\\"限流阈值\\\"，\\\"流控开关\\\"，\\\"限流阈值类型\\\"。首先是限流类型，我们可以选择\\\"QPS\\\"或\\\"并发线程数\\\"，这个参数规定了我们从哪个角度来设置限流的阈值。阈值则是 QPS 的上限或者是线程数量，达到此阈值则会启动限流策略。具体的限流策略在\\\"流控效果\\\"中配置，流控策略里我们可以选择\\\"直接拒绝\\\"、\\\"warm up（预热）\\\"、\\\"匀速排队\\\"、\\\"预热+匀速排队\\\"。直接拒绝比较好理解，就是 QPS 或线程数达到阈值后，多余的请求直接报错返回。预热指的是在 10 秒钟内阈值逐步增长到指定阈值，即头 2-3 秒的阈值是低于设置阈值的，但阈值是逐步增长的，10 秒后达到指定阈值，这样可以使系统有个预热过程。超过阈值的请求 soul 网关会直接报错返回。匀速队列这种模式会严格控制每个请求的时间间隔，如果流控类型是 QPS 阈值是 10，那么 soul 会控制每 100ms 将 1 个请求传导到后端服务上。多余的请求首先会进入等待队列，每个请求最多等待 500ms，如果请求预计等待时间超过 500ms 则直接报错返回。需要注意的是如果限流类型是并发线程数，那么流控效果只能是\\\"直接拒绝\\\"。如下图所示该配置表示的是 soul 网关会保证该服务的 QPS 不超过 10，多余的请求将会直接报错。\",\"需要注意的是 Sentinel 组件独立运行于 soul 的每个网关中，如果网关是集群，那么在做流控时，实际传到后面服务中的量是需要乘上 soul 网关服务的数量的。即如果我们的 soul 网关部署了 3 个节点，通过 nginx 将所有请求平均负载到了每个节点上。对应 1 个接口我们配置的流控是 10 qps，那么实际后向服务需要处理的 QPS 是 10*3。熔断同样需要考虑这种情况，只有 3 个节点上某个服务都触发熔断时，那么该服务才不会再收到任何请求。\",\"soul 中 Sentinel 插件的源码主要有 3 块，\\\"SentinelRuleHandle\\\"负责处理当有 Sentinel 规则从管理节点同步过来时的处理逻辑，\\\"SentinelPlugin\\\"插件的处理逻辑，\\\"SentinelFallbackHandler\\\"对于触发了流控或熔断的处理逻辑。下面我一个个来看一下。首先是\\\"SentinelRuleHandle\\\"，源码如下：\",\"public class SentinelRuleHandle implements PluginDataHandler { @Override public void handlerRule(final RuleData ruleData) { // 处理新的sentinel配置 SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class); sentinelHandle.checkData(sentinelHandle); // 获取所有现有流控配置，删除与新配置同resourceName的配置 List<FlowRule> flowRules = FlowRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList()); if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) { // 如果开启了流控 // 根据配置设置sentinel流控规则 FlowRule rule = new FlowRule(getResourceName(ruleData)); // 配置阈值 rule.setCount(sentinelHandle.getFlowRuleCount()); // 流控方式 QPS or 线程 rule.setGrade(sentinelHandle.getFlowRuleGrade()); // 流控行为: 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior()); flowRules.add(rule); } // 更新全部流控配置 FlowRuleManager.loadRules(flowRules); // 获取所有现有熔断配置，删除与新配置同resourceName的配置 List<DegradeRule> degradeRules = DegradeRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList()); if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) { // 如果开启了流控 // 根据配置设置sentinel熔断规则 DegradeRule rule = new DegradeRule(getResourceName(ruleData)); // 熔断阈值 rule.setCount(sentinelHandle.getDegradeRuleCount()); // 熔断判断的依据 0: average RT, 1: exception ratio, 2: exception count rule.setGrade(sentinelHandle.getDegradeRuleGrade()); // 熔断时间窗口 rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow()); degradeRules.add(rule); } // 更新全部熔断配置 DegradeRuleManager.loadRules(degradeRules); } @Override public void removeRule(final RuleData ruleData) { // 删除指定规则 FlowRuleManager.loadRules(FlowRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList())); DegradeRuleManager.loadRules(DegradeRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList())); } @Override public String pluginNamed() { return PluginEnum.SENTINEL.getName(); } /** * return sentinel resource name. * * @param ruleData ruleData * @return string string */ public static String getResourceName(final RuleData ruleData) { return ruleData.getSelectorId() + \\\"_\\\" + ruleData.getName(); } } \",\"插件执行逻辑代码\\\"SentinelPlugin\\\"如下\",\"public class SentinelPlugin extends AbstractSoulPlugin { // 异常处理的handler private final SentinelFallbackHandler sentinelFallbackHandler; public SentinelPlugin(final SentinelFallbackHandler sentinelFallbackHandler) { this.sentinelFallbackHandler = sentinelFallbackHandler; } @Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // 从插件配置中生成sentinel使用的资源名称，该名称对应1个流控或熔断策略 String resourceName = SentinelRuleHandle.getResourceName(rule); // 验证sentinel插件的配置信息 SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class); sentinelHandle.checkData(sentinelHandle); // 引入sentinel官方的Transformer，将请求交给sentinel处理 return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)) .doOnSuccess(v -> { HttpStatus status = exchange.getResponse().getStatusCode(); if (status == null || !status.is2xxSuccessful()) { exchange.getResponse().setStatusCode(null); throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }) //sentinel 触发了流控或熔断而报错调用sentinelFallbackHandler返回错误信息 .onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable)); } // 插件名sentinel @Override public String named() { return PluginEnum.SENTINEL.getName(); } // 顺序 45 @Override public int getOrder() { return PluginEnum.SENTINEL.getCode(); } public static class SentinelFallbackException extends HttpStatusCodeException { public SentinelFallbackException(final HttpStatus statusCode) { super(statusCode); } } } \",\"异常处理\\\"SentinelFallbackHandler\\\"，在 soul 中不管是熔断后请求的处理还是被流控的请求，都是有 soul 直接返回报错\",\"public class SentinelFallbackHandler implements FallbackHandler { @Override public Mono<Void> generateError(final ServerWebExchange exchange, final Throwable throwable) { Object error; if (throwable instanceof DegradeException) { // 触发熔断 // http status 设为500 exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); // request body 设置 error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); } else if (throwable instanceof FlowException) { // 流控报错 该错提示客户端再次尝试 // http status 设为429 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); // request body 设置 error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null); } else if (throwable instanceof BlockException) { // FlowException的父类 该错提示服务已阻塞 // http status 设为429 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); // request body 设置 error = SoulResultWrap.error(SoulResultEnum.SENTINEL_BLOCK_ERROR.getCode(), SoulResultEnum.SENTINEL_BLOCK_ERROR.getMsg(), null); } else { return Mono.error(throwable); } return WebFluxResultUtils.result(exchange, error); } } \",\"soul 网关封装了优秀的流控组件——sentinel，为用户提供了好用的流量控制和熔断功能。需要注意的是 soul 在使用 sentinel 时部分参数是默认配置，如果有修改的需求则需要自行调整源码。其次 soul 网关可以分布式部署，但是使用 sentinel 时并没有用分布式流控，每个 soul 网关节点对于同一个资源的流控是独立但相同的。\"]},\"221\":{\"h\":\"Soul网关学习Resilience4j插件原理解析\"},\"222\":{\"h\":\"目标\",\"t\":[\"什么是 Resilience4J\",\"soul 的 Resilience4j 体验 \",\"限流\",\"熔断\",\"Resilience4J 插件源码解读\"]},\"223\":{\"h\":\"什么是 Resilience4j\",\"t\":[\"Resilience4J 是 Spring Cloud Gateway 推荐的容错方案，它是一个轻量级的容错库\",\"借鉴了 Hystrix 而设计，并且采用 JDK8 这个函数式编程，即 lambda 表达式\",\"相比之下， Netflix Hystrix 对 Archaius 具有编译依赖性，Resilience4j 你无需引用全部依赖，可以根据自己需要的功能引用相关的模块即可 Hystrix 不更新了，Spring 提供 Netflix Hystrix 的替换方案，即 Resilence4J\",\"Resilience4J 提供了一系列增强微服务的可用性功能：\",\"断路器 CircuitBreaker\",\"限流 RateLimiter\",\"基于信号量的隔离\",\"缓存\",\"限时 Timelimiter\",\"请求重启 Retry\",\"官方提供的依赖包\",\" <dependency> <groupId>io.github.resilience4j</groupId> <artifactId>resilience4j-circuitbreaker</artifactId> <version>${resilience.version}</version> </dependency> \"]},\"224\":{\"h\":\"soul 的 Resilience4j 体验\",\"t\":[\"首先在 soul-admin 控制台插件管理开启 Resilience4j\",\"在 soul 网关添加依赖\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-ratelimiter</artifactId> <version>${project.version}</version> </dependency> \",\"启动三个服务,分别是一个 soul-admin，一个 soul-bootstrap，一个 soul-examples-http\",\"在 soul-admin 控制台找到插件列表的 Resilience4j，自定义配置，如下图，\",\"soul 官网的配置介绍\",\"* Resilience4j处理详解： * timeoutDurationRate：等待获取令牌的超时时间，单位ms，默认值：5000。 * limitRefreshPeriod：刷新令牌的时间间隔，单位ms，默认值：500。 * limitForPeriod：每次刷新令牌的数量，默认值：50。 * circuitEnable：是否开启熔断，0：关闭，1：开启，默认值：0。 * timeoutDuration：熔断超时时间，单位ms，默认值：30000。 * fallbackUri：降级处理的uri。 * slidingWindowSize：滑动窗口大小，默认值：100。 * slidingWindowType：滑动窗口类型，0：基于计数，1：基于时间，默认值：0。 * minimumNumberOfCalls：开启熔断的最小请求数，超过这个请求数才开启熔断统计，默认值：100。 * waitIntervalFunctionInOpenState：熔断器开启持续时间，单位ms，默认值：10。 * permittedNumberOfCallsInHalfOpenState：半开状态下的环形缓冲区大小，必须达到此数量才会计算失败率，默认值：10。 * failureRateThreshold：错误率百分比，达到这个阈值，熔断器才会开启，默认值50。 * automaticTransitionFromOpenToHalfOpenEnabled：是否自动从open状态转换为half-open状态，,true：是，false：否，默认值：false。 \"]},\"225\":{\"h\":\"限流\",\"t\":[\"参数配置 如下是参数配置校验，参数值小于默认值，会直接赋值默认值，因此方便测试效果直接修改源码的配置 ： 每次刷新令牌的数量为 2 ，刷新令牌的时间间隔为 1s，超时时间为 1s\",\" /** * check filed default value. * * @param resilience4JHandle {@linkplain Resilience4JHandle} * @return {@linkplain Resilience4JHandle} */ public Resilience4JHandle checkData(final Resilience4JHandle resilience4JHandle) { resilience4JHandle.setTimeoutDurationRate(Math.max(resilience4JHandle.getTimeoutDurationRate(), Constants.TIMEOUT_DURATION_RATE)); //resilience4JHandle.setLimitRefreshPeriod(Math.max(resilience4JHandle.getLimitRefreshPeriod(), Constants.LIMIT_REFRESH_PERIOD)); //resilience4JHandle.setLimitForPeriod(Math.max(resilience4JHandle.getLimitForPeriod(), Constants.LIMIT_FOR_PERIOD)); //每次刷新令牌的数量为2 ，刷新令牌的时间间隔为1s resilience4JHandle.setLimitRefreshPeriod(1000); resilience4JHandle.setLimitForPeriod(2); resilience4JHandle.setTimeoutDuration(1000); resilience4JHandle.setCircuitEnable(Math.max(resilience4JHandle.getCircuitEnable(), Constants.CIRCUIT_ENABLE)); //resilience4JHandle.setTimeoutDuration(Math.max(resilience4JHandle.getTimeoutDuration(), Constants.TIMEOUT_DURATION)); resilience4JHandle.setFallbackUri(!\\\"0\\\".equals(resilience4JHandle.getFallbackUri()) ? resilience4JHandle.getFallbackUri() : \\\"\\\"); resilience4JHandle.setSlidingWindowSize(Math.max(resilience4JHandle.getSlidingWindowSize(), Constants.SLIDING_WINDOW_SIZE)); resilience4JHandle.setSlidingWindowType(Math.max(resilience4JHandle.getSlidingWindowType(), Constants.SLIDING_WINDOW_TYPE)); resilience4JHandle.setMinimumNumberOfCalls(Math.max(resilience4JHandle.getMinimumNumberOfCalls(), Constants.MINIMUM_NUMBER_OF_CALLS)); resilience4JHandle.setWaitIntervalFunctionInOpenState(Math.max(resilience4JHandle.getWaitIntervalFunctionInOpenState(), Constants.WAIT_INTERVAL_FUNCTION_IN_OPEN_STATE)); resilience4JHandle.setPermittedNumberOfCallsInHalfOpenState(Math.max(resilience4JHandle.getPermittedNumberOfCallsInHalfOpenState(), Constants.PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE)); resilience4JHandle.setFailureRateThreshold(Math.max(resilience4JHandle.getFailureRateThreshold(), Constants.FAILURE_RATE_THRESHOLD)); return resilience4JHandle; } \",\"使用 SuperBenchmarker 工具，4 个线程，执行 10s\",\"C:\\\\Users\\\\v-yanb07>sb -u http://localhost:9195/http/test/findByUserId?userId=1 -c 4 -N 10 Starting at 2021-03-14 15:46:28 [Press C to stop the test] 23 (RPS: 1) ---------------Finished!---------------- Finished at 2021-03-14 15:46:51 (took 00:00:23.0477097) 24 (RPS: 1) Status 200: 25 RPS: 2.2 (requests/second) Max: 2020ms Min: 472ms Avg: 1677ms 50% below 1994ms 60% below 1997ms 70% below 1999ms 80% below 1999ms 90% below 2001ms 95% below 2019ms 98% below 2020ms 99% below 2020ms 99.9% below 2020ms \",\"输出日志\",\"2021-03-14 12:16:35.252 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:36.249 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:36.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:37.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:37.250 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:38.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:38.250 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:39.252 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : 限流测试 2021-03-14 12:16:39.252 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : 限流测试 \",\"控制台日志每秒输出两条，由此验证限流生效\"]},\"226\":{\"h\":\"熔断\",\"t\":[\"从配置信息我们知道熔断器默认是关闭，我们需要开打\",\"soul-examples-http 调用接口处添加休眠时间\",\" @GetMapping(\\\"/findByUserId\\\") public UserDTO findByUserId(@RequestParam(\\\"userId\\\") final String userId) throws Exception{ UserDTO userDTO = new UserDTO(); userDTO.setUserId(userId); userDTO.setUserName(\\\"hello world\\\"); log.info(\\\"限流测试\\\"); int i = RandomUtils.nextInt(1,3); if(i %2==0){ //throw new Exception(\\\"异常抛出\\\"); Thread.currentThread().sleep(2000); } return userDTO; } \",\"Resilience4JHandle#checkData 手动设置超时时间为 1s\",\" resilience4JHandle.setTimeoutDuration(1000); \",\"pos 接口调用 \",\"http://localhost:9195/http/test/findByUserId?userId=1\",\"多次请求时，有的请求返回正常数据，有的请求返回如下数据，表示超时熔断生效\",\"{ \\\"code\\\": 500, \\\"message\\\": \\\"Internal Server Error\\\", \\\"data\\\": \\\"404 NOT_FOUND\\\" } \"]},\"227\":{\"h\":\"Resilience4J 插件源码解读\",\"t\":[\"soul 网关 Resilience4j 插件源码大量使用了响应式编程方式，首先需要对响应式编程了解\",\"Resilience4J 插件目录结构\",\"└─resilience4j │ Resilience4JPlugin.java //插件处理，核心类 │ ├─build │ Resilience4JBuilder.java //构建Resilience4JConf对象 │ ├─conf │ Resilience4JConf.java │ ├─executor │ CombinedExecutor.java //限流和熔断执行器 │ Executor.java │ RateLimiterExecutor.java //限流执行器 │ ├─factory │ Resilience4JRegistryFactory.java //限流和熔断对象构建 │ └─handler Resilience4JHandler.java \",\"Resilience4JPlugn#doExecute Resilience4JPlugn 其他 soul 中插件一样继承 AbstractSoulPlugin，只要开启了，通过链式机制执行，都会走到核心方法 doExecute\",\" @Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; //获取配置信息对象 Resilience4JHandle resilience4JHandle = GsonUtils.getGson().fromJson(rule.getHandle(), Resilience4JHandle.class); //校验配置信息，如果小于默认值，则赋值默认值 resilience4JHandle = resilience4JHandle.checkData(resilience4JHandle); //circuitEnable配置：1 开启熔断组件 ，否则走限流组件 if (resilience4JHandle.getCircuitEnable() == 1) { return combined(exchange, chain, rule); } return rateLimiter(exchange, chain, rule); } \",\"限流 Resilience4JPlugin#rateLimiter\",\" private Mono<Void> rateLimiter(final ServerWebExchange exchange, final SoulPluginChain chain, final RuleData rule) { return ratelimiterExecutor.run( // chain.execute(exchange) 后续插件执行 chain.execute(exchange), fallback(ratelimiterExecutor, exchange, null), Resilience4JBuilder.build(rule)) .onErrorResume(throwable -> ratelimiterExecutor.withoutFallback(exchange, throwable)) //ratelimiterExecutor.run调用 @Override public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) { //限流器组件 RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig()); //限流执行 Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter)); if (fallback != null) { //回调的执行 return to.onErrorResume(fallback); } return to; } // to.onErrorResume(fallback); default Mono<Void> fallback(ServerWebExchange exchange, String uri, Throwable t) { if (StringUtils.isBlank(uri)) { return withoutFallback(exchange, t); } DispatcherHandler dispatcherHandler = SpringBeanUtils.getInstance().getBean(DispatcherHandler.class); ServerHttpRequest request = exchange.getRequest().mutate().uri(Objects.requireNonNull(UriUtils.createUri(uri))).build(); ServerWebExchange mutated = exchange.mutate().request(request).build(); //回调的执行地方 return dispatcherHandler.handle(mutated); } \",\"熔断 Resilience4JPlugin#combined\",\" private Mono<Void> combined(final ServerWebExchange exchange, final SoulPluginChain chain, final RuleData rule) { Resilience4JConf conf = Resilience4JBuilder.build(rule); return combinedExecutor.run( chain.execute(exchange).doOnSuccess(v -> { HttpStatus status = exchange.getResponse().getStatusCode(); if (status == null || !status.is2xxSuccessful()) { exchange.getResponse().setStatusCode(null); throw new CircuitBreakerStatusCodeException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }), fallback(combinedExecutor, exchange, conf.getFallBackUri()), conf); } //combinedExecutor#run执行的内容 public <T> Mono<T> run(final Mono<T> run, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf resilience4JConf) { RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(resilience4JConf.getId(), resilience4JConf.getRateLimiterConfig()); CircuitBreaker circuitBreaker = Resilience4JRegistryFactory.circuitBreaker(resilience4JConf.getId(), resilience4JConf.getCircuitBreakerConfig()); //断路器的操作 Mono<T> to = run.transformDeferred(CircuitBreakerOperator.of(circuitBreaker)) //限流操作 .transformDeferred(RateLimiterOperator.of(rateLimiter)) //设置超时时间 .timeout(resilience4JConf.getTimeLimiterConfig().getTimeoutDuration()) //如果超时了抛出超时异常 .doOnError(TimeoutException.class, t -> circuitBreaker.onError( resilience4JConf.getTimeLimiterConfig().getTimeoutDuration().toMillis(), TimeUnit.MILLISECONDS, t)); if (fallback != null) { to = to.onErrorResume(fallback); } return to; } \"]},\"228\":{\"h\":\"总结\",\"t\":[\"soul 网关提供限流和熔断，熔断默认是关闭的\",\"参数值小于默认值，会直接使用默认值\"]},\"229\":{\"h\":\"Soul网关学习Apache Dubbo插件原理解析\"},\"230\":{\"h\":\"目标\",\"t\":[\"Apache Dubbo 插件介绍 \",\"元数据介绍\",\"Apache Dubbo 插件配置 \",\"Bootstrap pom 配置\",\"soul-admin 配置\",\"dubbo 服务 pom 配置\",\"Apache Dubbo 泛化调用介绍 \",\"通过 API 方式使用泛化调用\",\"通过 spring 使用泛化调用\",\"泛化调用实现流程\",\"Soul Dubbo 插件调用解析 \",\"ApachDubboPlugin 泛化调用准备\",\"ApacheDubboProxySerivce\",\"DubboResponsePlugin\",\"WebFluxResultUtils 返回结果\",\"Dubbo 泛化调用介绍\",\"总结\",\"参考\"]},\"231\":{\"h\":\"Apache Dubbo 插件介绍\",\"t\":[\"Apache Dubbo 是一款高性能、轻量级的开源 Java 服务框架,主要提供了六大核心能力,面向接口代理的高性能 RPC 调用,智能容错和负载均衡,服务自动注册与发现,高度可扩展能力,运行期流量调度,可视化的服务治理与运维。 网关中 Dubbo 插件主要是将 Http协议 转换成 Dubbo协议 ,也是网关实现 Dubbo 泛化调用的关键。而 Dubbo 插件需要配合 元数据 才能实现 Dubbo 调用。\"]},\"232\":{\"h\":\"元数据介绍\",\"t\":[\"元数据作用就是在进行协议转换时候要获取真实的请求 path 、methodName 、 parameterTypes 为泛化调用做好准备\",\"image.png\",\"在数据库中,我们有一张表单独存储 Dubbo 元信息，通过数据同步方案,会把这张表的数据同步到网关的 JVM 内存中\",\"表结构如下\",\"CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'id', `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '应用名称', `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径,不能重复', `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '路径描述', `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'rpc类型', `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '服务名称', `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '方法名称', `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '参数类型 多个参数类型 逗号隔开', `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'rpc的扩展信息，json格式', `date_created` datetime(0) NOT NULL COMMENT '创建时间', `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间', `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT '启用状态', PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; \",\"path 字段主要是在请求网关的时候,会根据你的 path 字段来匹配到一条数据,然后进行后续的处理流程\",\"rpc_ext 字段如果代理的接口是 Dubbo 类型的服务接口,同时设置了 groupversion 字段时候,那么信息就会存储到 rpc_ext 中\",\"每一个 Dubbo 接口方法会应对一条元数据,对比 SpringCloud、http 分别是只存储一条/contextPath/** 和不存储\"]},\"233\":{\"h\":\"Apache Dubbo 插件配置\"},\"234\":{\"h\":\"soul-bootstrap pom 配置\",\"t\":[\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-apache-dubbo</artifactId> <version>${project.version}</version> </dependency> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo</artifactId> <version>2.7.5</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-client</artifactId> <version>${curator.version}</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>${curator.version}</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>${curator.version}</version> </dependency> \"]},\"235\":{\"h\":\"soul-admin 配置\",\"t\":[\"image.png\",\"登录 soul-admin 后台在插件管理页面打开 Dubbo 配置选项的开关,和填写注册中心的连接地址\"]},\"236\":{\"h\":\"dubbo 服务 pom 配置\",\"t\":[\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-client-apache-dubbo</artifactId> <version>${soul.version}</version> </dependency> \",\"@SoulDubboClient(path = \\\"/insert\\\", desc = \\\"Insert a row of data\\\") public DubboTest insert(final DubboTest dubboTest) { dubboTest.setName(\\\"hello world Soul Apache Dubbo: \\\" + dubboTest.getName()); return dubboTest; } \",\"被代理的服务使用提供的 soul-spring-boot-starter-client-apache-dubbo 客户端依赖,同时使用@SoulDubboClient 注解,在启动时候将接口的名称,参数类型,参数内容注册到 soul-admin 端,然后 admin 端将数据同步到 bootstrap 端。\"]},\"237\":{\"h\":\"Apache Dubbo 泛化调用介绍\",\"t\":[\"泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况,参数及返回值中的所有 POJO 均用 Map 表示, 通常用于框架集成,可通过 GenericSerivce 调用所有服务实现。\"]},\"238\":{\"h\":\"通过 API 方式使用泛化调用(网关目前使用方式)\",\"t\":[\"ReferenceConfig<GenericService> reference = new ReferenceConfig<>(); reference.setGeneric(true); reference.setApplication(applicationConfig); reference.setRegistry(registryConfig); reference.setInterface(metaData.getServiceName()); reference.setProtocol(\\\"dubbo\\\"); \",\"网关通过 API 方式声明注册使用泛化调用\"]},\"239\":{\"h\":\"通过 Spring 使用泛化调用\",\"t\":[\"<dubbo:reference id=\\\"barService\\\" interface=\\\"com.foo.BarService\\\" generic=\\\"true\\\" /> \"]},\"240\":{\"h\":\"泛化调用实现流程\",\"t\":[\"+-------------------------------------------+ +-------------------------------------------+ | consumer 端 | | provider 端 | | | | | | | | | | | | | | | | | | +------------------+ | | +--------------+ | | |GenericImplFilter | | Invocation | |GenericFilter | | | +----> | +-------------------------> | | | | | +------------------+ | | +--------------+ | | +-----------+ | | | +-----------+ | | | | | | | | | | | |Client | | | +--> | Service | | | | | | | | | | | +-----------+ | | +-------+---+ | | | | | | | ^ +------------------+ | | +--------------+ | | | | |GenericImplFilter | | | |GenericFilter | <----------+ | | +-------------+ | <-------------------------+ | | | +------------------+ | | +--------------+ | | | | | | | | | | | | | | | | | +-------------------------------------------+ +-------------------------------------------+ \",\"GenericService 这个接口和 Java 的反射调用非常像,只需提供调用的方法名称,参数的类型以及参数的值就可以直接调用对应方法了。\",\"GenericFilter : 负责 provider 端参数的转换 \",\"调用时,将 hashMap 结构的参数转换成对应 Pojo\",\"返回结果是,将 Pojo 转换成 hashMap\",\"image.png\",\"GenericImplFilter : 负责 consumer 端参数的转换,将 Pojo 转换成 hashMap 接口\",\"image.png\",\"/** * Generic service interface * * @export */ public interface GenericService { /** * Generic invocation * * @param method 方法名，如：findPerson，如果有重载方法，需带上参数列表，如：findPerson(java.lang.String) * @param parameterTypes 参数类型 * @param args 参数列表 * @return invocation 返回值 * @throws GenericException 方法抛出的异常 */ Object $invoke(String method, String[] parameterTypes, Object[] args) throws GenericException; default CompletableFuture<Object> $invokeAsync(String method, String[] parameterTypes, Object[] args) throws GenericException { Object object = $invoke(method, parameterTypes, args); if (object instanceof CompletableFuture) { return (CompletableFuture<Object>) object; } return CompletableFuture.completedFuture(object); } } \"]},\"241\":{\"h\":\"Soul Dubbo 插件调用解析\",\"t\":[\"当业务请求发起时候,首先进入 SoulWebHandler (至于为什么成为请求入口自行查询,本文不作解释) 类的 Handle 方法,下面就带了 plugins 从 DefaultSoulPluginChain 类开始进入插件链调用。\",\"@Override public Mono<Void> handle(@NonNull final ServerWebExchange exchange) { return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler); } \",\"@Override public Mono<Void> execute(final ServerWebExchange exchange) { // 响应式编程 return Mono.defer(() -> { // 判断当前index 是否 < 插件数量 if (this.index < plugins.size()) { // 依次从plugins 中获取一种插件进行调用 SoulPlugin plugin = plugins.get(this.index++); // 判断此插件是否未打开 Boolean skip = plugin.skip(exchange); if (skip) { return this.execute(exchange); } return plugin.execute(exchange, this); } return Mono.empty(); }); } \",\"本章只关注 Apache Dubbo 所以我们重点放到 Dubbo 插件的调用。 经过 Debug 网关程序我们知道其实是按照上面的顺序一个一个的进行判断调用。下面我们关注 ApacheDubboPlugin\"]},\"242\":{\"h\":\"ApachDubboPlugin 泛化调用准备\",\"t\":[\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { // 获取 dubbo_params 数据 String body = exchange.getAttribute(Constants.DUBBO_PARAMS); // 获取 exchange context的属性值 SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // 获取 exchange metaData 属性值 MetaData metaData = exchange.getAttribute(Constants.META_DATA); // 判断metaData是否有误,如果有误直接返回 metaData 有误的返回信息 if (!checkMetaData(metaData)) { assert metaData != null; log.error(\\\" path is :{}, meta data have error.... {}\\\", soulContext.getPath(), metaData.toString()); exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // 判断 metaData的parameterTypes 和 body 是否为空,如果有误则返回Body错误信息 if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) { exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // 带着exchange、body、metaData 进行 Dubbo GenericsService的异步调用 final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange); return result.then(chain.execute(exchange)); } \",\"首先对泛化调用所需要的参数进行检查\"]},\"243\":{\"h\":\"ApacheDubboProxyService\",\"t\":[\"public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException { // issue(https://github.com/dromara/soul/issues/471), add dubbo tag route String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE); if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) { RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders); } // 根据metaData路径获取ferference ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath()); if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) { ApplicationConfigCache.getInstance().invalidate(metaData.getPath()); reference = ApplicationConfigCache.getInstance().initRef(metaData); } // 根据ferference 获取泛化调用的实例 GenericService GenericService genericService = reference.get(); Pair<String[], Object[]> pair; if (ParamCheckUtils.dubboBodyIsEmpty(body)) { pair = new ImmutablePair<>(new String[]{}, new Object[]{}); } else { // 根据body 和 parameterTypes 组织Dubbo 泛化调用的参数类型和参数值 pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes()); } // 下面使用GenericSerice 默认方法$invokeAsync进行异步调用 CompletableFuture<Object> future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight()); return Mono.fromFuture(future.thenApply(ret -> { if (Objects.isNull(ret)) { ret = Constants.DUBBO_RPC_RESULT_EMPTY; } // 等调用成功之后 将结果和类型复制到exchagne 对应的属性上 exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret); exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName()); return ret; })).onErrorMap(exception -> exception instanceof GenericException ? new SoulException(((GenericException) exception).getExceptionMessage()) : new SoulException(exception)); } \"]},\"244\":{\"h\":\"DubboResponsePlugin\",\"t\":[\"@Override public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { final Object result = exchange.getAttribute(Constants.DUBBO_RPC_RESULT); if (Objects.isNull(result)) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result)); return WebFluxResultUtils.result(exchange, success); })); } \"]},\"245\":{\"h\":\"WebFluxResultUtils 返回结果\",\"t\":[\"image.png\"]},\"246\":{\"h\":\"Dubbo 泛化调用介绍\",\"t\":[\"Dubbo 泛化调用主要就分为两块分别是消费端如何使用 GenericImplFilter 拦截泛化调用、服务提供端如何使用 GenericFilter 拦截请求后把泛化参数序列化然后请求给具体服务。\"]},\"247\":{\"h\":\"服务消费端 org.apache.dubbo.rpc.filter.GenericImplFilter 是如何拦截泛化调用\",\"t\":[\"@Activate(group = CommonConstants.CONSUMER, value = GENERIC_KEY, order = 20000) public class GenericImplFilter implements Filter, Filter.Listener { @Override public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException { // ... 省略非核心代码 // 判断是否为泛化调用 if (isMakingGenericCall(generic, invocation)) { // 获取泛化参数 Object[] args = (Object[]) invocation.getArguments()[2]; // 如果泛化为nativeJava if (ProtocolUtils.isJavaGenericSerialization(generic)) { for (Object arg : args) { if (!(byte[].class == arg.getClass())) { error(generic, byte[].class.getName(), arg.getClass().getName()); } } // 如果泛化方式为bean } else if (ProtocolUtils.isBeanGenericSerialization(generic)) { for (Object arg : args) { if (!(arg instanceof JavaBeanDescriptor)) { error(generic, JavaBeanDescriptor.class.getName(), arg.getClass().getName()); } } } // 设置attachment ,以便与服务端调用 invocation.setAttachment( GENERIC_KEY, invoker.getUrl().getParameter(GENERIC_KEY)); } // 发起远程调用 return invoker.invoke(invocation); } private boolean isMakingGenericCall(String generic, Invocation invocation) { return (invocation.getMethodName().equals($INVOKE) || invocation.getMethodName().equals($INVOKE_ASYNC)) && invocation.getArguments() != null && invocation.getArguments().length == 3 && ProtocolUtils.isGeneric(generic); } } \",\"GenericImplFilter 实现接口 Filter(关于 Dubbo 中的 Filter,不做介绍)然后执行 Invoke 方法,invoke 方法主要做如下事情:\",\"参数校验,检查这个调用是否是泛化调用\",\"获取泛化参数\",\"判断泛化调用方式:遍历每个参数,然后依次判断参数的泛化方式是 nativejava 还是 bean 方式\",\"发起远程调用\"]},\"248\":{\"h\":\"服务提供端通过 GenericFilter 拦截泛化请求\",\"t\":[\"@Activate(group = CommonConstants.PROVIDER, order = -20000) public class GenericFilter implements Filter, Filter.Listener { @Override public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException { // 参数校验 if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) { // 获取参数名称、参数类型、参数值 String name = ((String) inv.getArguments()[0]).trim(); String[] types = (String[]) inv.getArguments()[1]; Object[] args = (Object[]) inv.getArguments()[2]; try { // 使用反射获取调用的方法 Method method = ReflectUtils.findMethodByMethodSignature(invoker.getInterface(), name, types); Class<?>[] params = method.getParameterTypes(); if (args == null) { args = new Object[params.length]; } // 获取泛化引用使用的泛化类型,true or bean or nativejava String generic = inv.getAttachment(GENERIC_KEY); if (StringUtils.isBlank(generic)) { generic = RpcContext.getContext().getAttachment(GENERIC_KEY); } // 如果generic=true 则使用true方式对入参进行反序列化 if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) { args = PojoUtils.realize(args, params, method.getGenericParameterTypes()); // 如果 generic=nativejava,则使用nativejava方式对入参进行反序列化 } else if (ProtocolUtils.isJavaGenericSerialization(generic)) { for (int i = 0; i < args.length; i++) { if (byte[].class == args[i].getClass()) { try (UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[]) args[i])) { args[i] = ExtensionLoader.getExtensionLoader(Serialization.class) .getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA) .deserialize(null, is).readObject(); } catch (Exception e) { throw new RpcException(\\\"Deserialize argument [\\\" + (i + 1) + \\\"] failed.\\\", e); } } else { throw new RpcException(...); } } // 如果 generic=bean 则使用bean方式对入参进行反序列化 } else if (ProtocolUtils.isBeanGenericSerialization(generic)) { for (int i = 0; i < args.length; i++) { if (args[i] instanceof JavaBeanDescriptor) { args[i] = JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor) args[i]); } else { throw new RpcException(...); } } } ... // 将本次请求传递到FilterChain的下一个Filter中,并返回结果result RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args, inv.getAttachments(), inv.getAttributes()); rpcInvocation.setInvoker(inv.getInvoker()); rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName()); return invoker.invoke(rpcInvocation); } catch (NoSuchMethodException e) { throw new RpcException(e.getMessage(), e); } catch (ClassNotFoundException e) { throw new RpcException(e.getMessage(), e); } } // 如果不是泛化调用,直接把请求传给FilterChain的下一个Filter return invoker.invoke(inv); } } \",\"以上就是 Dubbo 服务提供端如何拦截泛化请求,并进行处理的大体流程:\",\"参数校验,判断此次请求是不是泛化调用\",\"获取参数名称、参数类型、参数值\",\"使用反射获取调用的方法,和使用的泛化方式 true or nativejava or bean\",\"根据泛化方式,反序列化泛化参数\",\"将本次请求，包括调用的方法，参数和上下文信息传递给 FilterChain 的下一个 Filter 中,并返回 Result 结果\",\"根据泛化方式,反序列化 Result 结果返回给服务消费端\"]},\"249\":{\"h\":\"总结\",\"t\":[\"以上从如何配置 Dubbo 插件到整个调用流程的分析,然后分别介绍服务消费端与服务提供端如何拦截泛化调用流程对参数进行序列化细节,希望对你有所帮助\"]},\"250\":{\"h\":\"参考\",\"t\":[\"https://my.oschina.net/u/4564034/blog/4409382\",\"https://qsli.github.io/2018/05/02/dubbo-generic-invoke/\"]},\"251\":{\"h\":\"项目捐赠\"},\"252\":{\"h\":\"基本条件\",\"t\":[\"Dromara 开源社区组织对捐赠项目有以下最基本条件要求：\",\"项目必须是原创且不能是 Fork 版本。\",\"项目必须是完整的应用解决方案。\",\"项目必须有良好的代码注释和不断完善的使用文档。\",\"项目必须在 Gitee 平台托管且 Stars 关注量大于 100。\",\"项目至少在近 2 个月内有实际有效的代码提交记录。\",\"项目必须得到 dromara 社区组织评委会的认可。\",\"优先考虑 Gitee 推荐项目或已获得 GVP 的项目。（GVP 项目需联系 Gitee 官方人员取消 GVP 后才能转移到组织，转移成功后恢复 GVP）\",\"优选考虑 容器工具、微服务框架和工具、分布式事务、分布式中间件、大数据处理、人工智能、IoT 物联网、开发/测试/运维相关工具链等领域项目。\"]},\"253\":{\"h\":\"源仓库影响\",\"t\":[\"目前捐赠项目采用转移到 dromara 组织仓库方式进行处理，项目转移后会有以下影响：\",\"gitee ：https://gitee.com/dromara/仓库名\",\"github：https://github.com/dromara/仓库名\",\"项目源码中如果存在绝对路径的引用（图片，文件等）则需改为相对路径。\"]},\"254\":{\"h\":\"仓库权限\",\"t\":[\"dromara 组织负责人会给新加项目负责人设置超级管理员权限。\",\"项目 PMC/Committers 会被邀请加入 dromara 组织，设置相关读写权限。项目独立提交与运营。\",\"项目 PMC/Committers 会被分配@dromara.org 后缀邮箱。\"]},\"255\":{\"h\":\"仓库文档\",\"t\":[\"原则上需要联系 dromara 官网负责人，在 https://dromara.org 进行更新转移文档\"]},\"256\":{\"h\":\"版本发布\",\"t\":[\"原则上要求下一个版本，需要更改包名前缀为org.dromara, 并且发布到 MAVEN 仓库\"]},\"257\":{\"h\":\"组织/社区\",\"t\":[\"dromara 开源组织负责人或者秘书，邀请进入 dromara 社区群，并进行全员公告。\",\"dromara 开源社区公众号，发布欢迎加入文章，并同步到技术社区。\",\"原仓库社区群加上 dromara-xxx 前缀。\"]},\"258\":{\"h\":\"捐赠项目退出事宜（初版）\",\"t\":[\"dromara 社区组织始终抱有积极开放宽容的态度，如果捐赠项目作者加入 dromara 组织后无法认同组织的发展理念或想转移到其他组织/个人，则可向 dromara 评委会申请退出。申请退出流程：\",\"项目作者需书面或邮件编写项目退出事由并电邮至 pmc@dromara.org 。\",\"dromara 评委会收到申请后第一时间与项目作者沟通并确认退出意向，若作者执意退出，则批准处理。\",\"特别注意，如果申请退出的项目是 GVP 项目，则需联系 Gitee 官方人员取消 GVP 后转回个人名下，转回成功后联系 Gitee 官方人员恢复即可。非 GVP 项目可直接操作。\",\"项目退出后，dromara 组织会在各大平台和社区群进行公告推送告知，并将该项目历史记录进行归档保存。\",\"最后，希望项目作者在考虑退出 dromara 组织之前可以先和我们沟通，指出 dromara 组织哪里做的不好的地方，以便我们能够改进，共同发展。\"]},\"259\":{\"h\":\"权责与组织形式\",\"t\":[\"社区内各个子项目团队，共享所有开源资源，包括且不限于组织品牌、社区公众号、官方社群、主流技术网站和媒体的专属账号和频道等。\",\"原则上，每个项目内部管理自治，组织委员会由每个项目的主要负责人组成。\",\"dromara 组织相关决策事务(指定和修改规则、加入或者退出项目等)，需要由组织委员会投票通过后执行。日常事务由组织的常任负责人处理。\",\"在组织层面做出决策以后，每个项目的管理团队必须无条件服从组织，或者配合其他项目的一些工作和任务，做到整个组织在宣传活动、任务安排等方面口径一致。\",\"dromara 开源组织从 2021 年 3 月到 2022 年 3 月进入试运行阶段，本原则为组织的试运行指导方案，各个子项目在此期间，在不违反法律、道德原则，不涉及抄袭侵权，以及不伤害组织，不对社区和用户造成恶劣影响的前提下，拥有完整的自治和管理权限、以及项目子品牌的著作权和实际拥有权。\",\"在试运行期内，社区将成立正式的委员会，对于后续社区发展方式，子项目的管理和权限约束，出台正式的规则，并经由投票通过后生效。\"]},\"260\":{\"h\":\"以上规定 dromara 组委会有最终解释权\"},\"261\":{\"h\":\"成员\"},\"262\":{\"h\":\"新闻\"},\"263\":{\"h\":\"Hmily发布2.0.2-RELEASE版本\"},\"264\":{\"h\":\"Hmily 发布 2.0.2-RELEASE 版本\",\"t\":[\"解决 SpringCloud 使用 hystrix 配置线程池策略的问题。\",\"新增对 springcloud 内嵌事务调用的问题。\",\"新增 Hmily 负载均衡策略。\",\"其他 bug 的修护，与代码的优化。\",\"去除不必须的第三方 jar 包。\",\"零侵入方式的引入。\"]},\"265\":{\"h\":\"Hmily 对现在流行 RPC 框架以及 Spring 的支持情况。\",\"t\":[\"dubbo 2.7.0 以下所有版本。\",\"Springcloud Dalston 以上版本，包括支持现在的 Finchley 与 Greenwich\",\"Motan 所有版本。\",\"3.0 以上所有 Spring 版本。\"]},\"266\":{\"h\":\"Hmily 在 2.0.2 版本对使用者 RPC 集群时候负载均衡策略。\",\"t\":[\"hmily 提供了自己实现的负载均衡策略，只是针对加了@Hmily 的接口\",\"dubbo 集群配置,配置负载方式为：loadbalance=\\\"hmily\\\"\",\" <dubbo:reference timeout=\\\"50000\\\" interface=\\\"org.dromara.hmily.demo.dubbo.account.api.service.AccountService\\\" id=\\\"accountService\\\" retries=\\\"0\\\" check=\\\"false\\\" actives=\\\"20\\\" loadbalance=\\\"hmily\\\"/> \",\"Springcloud 在调用方的 yml 配置文件中新增：\",\"hmily ： ribbon: rule enabled : true \"]},\"267\":{\"h\":\"Hmily 的具体使用文档：\",\"t\":[\"官网文档 ：https://dromara.org/website/zh-cn/docs/hmily/index.html\",\"github 地址: https://github.com/yu199195/hmily\",\"gitee 地址： https://gitee.com/dromara/hmily\",\"欢迎大家 star fork ，提供优秀的代码与建议。\"]},\"268\":{\"h\":\"时隔一年，dromara团队发布全新架构Hmily分布式事务的2.1.1版本\",\"t\":[\"感谢朋友们一路以来的支持，让大家久等了。在这一个版本中，我们团队重构了整个项目，合理的划分功能模块，新增配置中心，调整底层存储结构，解决疑难 bug，以及其他新功能的支持，也吸收了更多开源社区的优秀人才的加入。\"]},\"269\":{\"h\":\"架构全景图\",\"t\":[\"架构全景图\"]},\"270\":{\"h\":\"功能\",\"t\":[\"高可靠性 ：支持分布式场景下，事务异常回滚，超时异常恢复，防止事务悬挂。\",\"易用性 ：提供零侵入性式的 Spring-Boot, Spring-Namespace 快速与业务系统集成。\",\"高性能 ：去中心化设计，与业务系统完全融合，天然支持集群部署。\",\"可观测性 ：Metrics 多项指标性能监控，以及 admin 管理后台 UI 展示。\",\"多种 RPC ：支持 Dubbo, SpringCloud,Montan ,sofa-rpc 等知名 RPC 框架。\",\"日志存储 ：支持 mysql, oracle, mongodb, redis, zookeeper 等方式。\",\"复杂场景 ：支持 RPC 嵌套调用事务。\"]},\"271\":{\"h\":\"重构部分\",\"t\":[\"在模块划分上：\",\"抽离出开箱即用的 SPI 自定义模块。\",\"定义事务日志多种存储方式的 SPI 模块。\",\"定义事务日志多种序列化方式的 SPI 模块。\",\"新增配置中心，支持各种主流的配置中心（nacos，apollo,zookeeper 等），并支持配置的动态刷新。\",\"新增 metrics 模块，用来监控运行时候的各种信息。\",\"抽离出核心的事务执行模块。\",\"抽离出多种 RPC 支持模块。\",\"抽离出 spring 与 spring boot 支持模块。\",\"在依赖包版本上：\",\"guava 升级到 29.0\",\"curator 升级到 5.1.0\",\"在代码质量上：\",\"严格的 check-style 代码检查，秉承优雅，简单易懂原则（talk is cheap ,show you code）。\",\"在开放性上：\",\"社区奉行简单，快乐，和谐基本原则\",\"在目标上：\",\"打造一款高可用，高性能，简单易用金融级的分布式事务解决方案。\"]},\"272\":{\"h\":\"解决疑难 bug：\",\"t\":[\"dubbo框架不支持注解方式的使用（spring-boot-starter-dubbo)。\",\"motan框架不支持注解方式的使用。\",\"spring-cloud用户如果使用 feign 与 hystrix 整合 hmily 时候的线程切换问题。\",\"极端情况下事务日志序列化异常。\",\"try 阶段超时异常，导致事务悬挂 bug。\",\"confirm 与 cancel 阶段异常时候，事务未能正确恢复 bug。\",\"在事务日志存储上，支持同步与异步 2 种模式，供用户选择。\"]},\"273\":{\"h\":\"用户使用与升级指南\",\"t\":[\"对于 hmily 用户来说，只需三个步骤，即可解决 RPC 服务调用之间的柔性事务\",\"引用 hmily 对各种 rpc 支持的 jar 包。\",\"添加 hmily 配置。\",\"在 rpc 接口方法上添加 @Hmily 注解。\",\"依赖的变更\",\"用户依赖的方式没有更改，只需要将版本升级到 2.1.0。下面举 dubbo 微服务列子\",\"dubbo rpc 微服务\",\"dubbo 接口服务依赖\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-annotation</artifactId> <version>2.1.0</version> </dependency> \",\"dubbo 服务提供者依赖（<2.7）\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-dubbo</artifactId> <version>2.1.0</version> </dependency> or <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-spring-boot-starter-dubbo</artifactId> <version>2.1.0</version> </dependency> \",\"hmily 配置的变更\",\"在新版 2.1.0 中，新增了 hmily-config 模块，支持本地与注册中心模式。用户首先需要在项目resouce文件下新建一个名称为hmily.yml的文件。默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。优先级别 -Dhmily.conf > user.dir >resource。文件格式如下（一部分，以下是配置成本地模式):\",\" server: configMode: local appName: account-dubbo # 如果server.configMode eq local 的时候才会读取到这里的配置信息. config: appName: account-dubbo serializer: kryo contextTransmittalMode: threadLocal scheduledThreadMax: 16 scheduledRecoveryDelay: 60 scheduledCleanDelay: 60 scheduledPhyDeletedDelay: 600 scheduledInitDelay: 30 recoverDelayTime: 60 cleanDelayTime: 180 limit: 200 retryMax: 10 bufferSize: 8192 consumerThreads: 16 asyncRepository: true autoSql: true phyDeleted: true storeDays: 3 repository: mysql repository: database: driverClassName: com.mysql.jdbc.Driver url : jdbc:mysql://127.0.0.1:3306/hmily?useUnicode=true&characterEncoding=utf8 username: root password: maxActive: 20 minIdle: 10 connectionTimeout: 30000 idleTimeout: 600000 maxLifetime: 1800000 \",\"如果你想将配置文件放在Nacos配置中心：\",\"第一步：\",\"hmily: server: configMode: nacos appName: xxxxx # 如果server.configMode eq local 的时候才会读取到这里的配置信息. remote: nacos: server: 192.168.3.22:8848 dataId: hmily.properties group: DEFAULT_GROUP timeoutMs: 6000 fileExtension: yml passive: true \",\"第二步：将 hmily 的配置，放在 nacos 配置中心上\",\"如果你想将配置文件放在Apollo配置中心：\",\"第一步:\",\"hmily: server: configMode: apollo appName: xxxx # 如果server.configMode eq local 的时候才会读取到这里的配置信息. remote: apollo: appId: hmily-xxxxx configService: http://192.168.3.22:8080 namespace: byin_hmily secret: fileExtension: yml passive: true env: dev meta: http://192.168.3.22:8080 \",\"第二步：将 hmily 的配置，放在 apollo 配置中心上\",\"还有其他的配置方式以及配置内容的详解，请参考：https://dromara.org/zh-cn/docs/hmily/config.html\",\"注解方式的使用的变更\",\"在之前的版本中，rpc 接口与实现都只需要添加 @Hmily 注解, 现在需要进行变更，在 rpc 接口方法上是添加 @Hmily,用来标识这是一个 hmily 分布式事务的接口方法， 在接口的方法实现上则需要添加 @HmilyTCC，然后指定 confirm 与 cancel方法名称.\",\"举例（dubbo 中 say 方法需要参与分布式事务):\",\"public interface HelloService { @Hmily void say(String hello); } public class HelloServiceImpl implements HelloService { @HmilyTCC(confirmMethod = \\\"sayConfrim\\\", cancelMethod = \\\"sayCancel\\\") public void say(String hello) { System.out.println(\\\"hello world\\\"); } public void sayConfrim(String hello) { System.out.println(\\\" confirm hello world\\\"); } public void sayCancel(String hello) { System.out.println(\\\" cancel hello world\\\"); } } \",\"举例(springcloud 中 say 方法需要参与分布式事务):\",\"spring-cloud 服务调用方 FeignClient 中\",\"@FeignClient(value = \\\"helle-service\\\") public interface HelloService { @Hmily @RequestMapping(\\\"/helle-service/sayHello\\\") void say(String hello); } \",\"spring-cloud 服务提供方\",\"@RestController public class HelloController { private final HelloService helloService ; @Autowired public AccountController(HelloService helloService) { this.helloService= helloService; } @RequestMapping(\\\"/sayHello\\\") public void payment(String hello) { return helloService.say(hello); } } public interface HelloService { void say(String hello); } public class HelloServiceImpl implements HelloService { @HmilyTCC(confirmMethod = \\\"sayConfrim\\\", cancelMethod = \\\"sayCancel\\\") public void say(String hello) { System.out.println(\\\"hello world\\\"); } public void sayConfrim(String hello) { System.out.println(\\\" confirm hello world\\\"); } public void sayCancel(String hello) { System.out.println(\\\" cancel hello world\\\"); } } \",\"事务日志存储结构的更改\",\"在使用上，用户使用或者升级不用关心，框架会默认初始化好。\"]},\"274\":{\"h\":\"下一个版本\",\"t\":[\"因为调整了架构，在其他模式的支持上将会变得更加容易，在下一个版本，将会发布 TAC 模式（try-auto-cancel）使用此模式，将大大简化框架的使用程度，开发者不需要关心 confirm 以及 cancel 方法的开发，对老系统的改造提供了更好的兼容性，不用担心额外的开发任务，一切就交给 hmily 吧。\",\"将对 brpc 用户进行支持。\",\"将对 tars-rpc 用户进行支持。\"]},\"275\":{\"h\":\"社区共建\",\"t\":[\"我们秉承和谐快乐，代码至上 的原则，如果你有想法，愿意和我们一起成长，一起贡献，快来加入我们吧！\",\"github：https://github.com/dromara/hmily\",\"gitee：https://gitee.com/dromara/hmily\",\"qq 群: 162614487\"]},\"276\":{\"h\":\"Hmily分布式事务重启月度报告\",\"t\":[\"Hmily 是一款高性能，高可靠，易使用的柔性分布式事务解决方案，目前提供了对 dubbo，spring-cloud，motan，grpc 等 rpc 框架的支持，在易用性上提供零侵入性式的 Spring-Boot, Spring-Namespace 快速集成，目标是打造金融级的一体系分布式事务解决方案。\"]},\"277\":{\"h\":\"调整 Hmily 架构，更合理的模块划分\",\"t\":[\"全景图：\",\"全景图\",\"架构调整：\",\"抽离核心执行模块，支持多种事务模式以及混合使用（TCC 模式，TAC 模式）\",\"核心模块去除对 spring 的依赖\",\"定义多种 SPI 接口的实现\",\"新增 hmily-rpc : 聚合多种 rpc 框架的支持\",\"新增 hmily-spi : hmily 框架自定义 spi 机制实现\",\"新增 hmily-bom : 解决版本依赖管理冲突的问题\",\"新增 hmily-metrics : 监控 JVM，线程，事务运行状态，耗时等信息\",\"新增 hmily-tcc : tcc 模式的核心实现\",\"新增 hmily-tac : tac 模式的核心实现\",\"SPI 模块划分：\",\"新增 hmily-repository: 事务日志存储模块，支持（mysql，oracle，postgresql，sqlserver，zookeeper，redis，mongodb，file）\",\"新增 hmily-serializer: 事务日志序列化模块, 支持 （hessian，jdk，kryo，protobuf）\",\"新增 hmily-config：配置模块，支持（本地模式，zookeeper，nacos，apollo，etcd）\",\"新增 hmily-tac-sqlparser ：tac 模式下，sql 解析模块\"]},\"278\":{\"h\":\"梳理 Hmily 社区 issue，解决 bug。\",\"t\":[\"hmily-bug\",\"如上图：在社区中，主要是梳理和解决之前社区反馈的问题，以及社区合作进行新的开发。\",\"解决 bug（列举几个）：\",\"dubbo框架不支持注解方式的使用（spring-boot-starter-dubbo）\",\"motan框架不支持注解方式的使用\",\"spring-cloud用户如果使用 feign 与 hystrix 整合 hmily 时候的异常问题\",\"事务日志序列化异常\",\"超时异常事务悬挂 bug\",\"事务定时恢复 bug\",\"社区完成功能（列举几个）：\",\"build：新增 travis-ci 功能\",\"事务日志支持：oracle, postgresql,sqlsever,mongo,zookeeper,file,redis\",\"配置模块：新增 apollo,etcd,nacos 配置中心支持\",\"demo：新增 motan-rpc 方式使用 hmily 分布式事务 demo\"]},\"279\":{\"h\":\"社区共建\",\"t\":[\"社区奉行简单，快乐，优雅，和谐基本原则。\",\"代码准则：代码遵循 hmily-checkstyle 标准，也有很多灵活自由的空间。（talk is cheap ,show you code）\",\"开放准则：希望在这里每个人都有好的思想和观点，大家一起讨论，反复 review 代码，思考解决 bug，快乐成长，绝不搞一言堂。\"]},\"280\":{\"h\":\"最近\",\"t\":[\"会发布最新架构的 hmily-2.1.0 版本（只会支持 TCC 模式）\",\"配置模块\",\"配置动态刷新功能，支持所有的配置中心\",\"TAC 模式:\",\"SQL-parser: 正在接入apache-shardingsphere,apache-calcite\",\"SQL-revert：正在开发\"]},\"281\":{\"h\":\"大约在冬季\",\"t\":[\"很高兴来了这里季节，在这个时间点，会发布hmily-2.2.0版本，这个版本将完全支持TAC,TCC模式。TAC(transaction auto rollback) ：有了这个模式，用户再也不用担心像 TCC 那样去写反向的 cancel 方法了。大大减少了使用成本以及学习成本。TCC: 稳定性，可靠性得到大大加强，彻底解决事务悬挂问题。\"]},\"282\":{\"h\":\"以后的以后\",\"t\":[\"更多 RPC 框架的支持：brpc 等等。\",\"支持 XA 模式。\",\"......这里空起来，很多多的规划，希望你来参与建设。\",\"github：https://github.com/dromara/hmily\",\"gitee：https://github.com/shuaiqiyu/hmily\",\"qq 群: 162614487\"]},\"283\":{\"h\":\"Hutool-5.8.0.M1 发布，尝试里程碑发布\",\"t\":[\"Hutool 是一个小而全的 Java 工具类库，提供优雅、高效和便捷的工具方法。\"]},\"284\":{\"h\":\"Hutool 是什么\",\"t\":[\"架构全景图\",\"本来这个版本应该是 5.7.23 的，可惜用户提了一些 issue，这些问题的解决必须修改原有代码结构：\",\"如 MongoDB 客户端封装，由于其驱动本身做了不兼容修改，包装的工具类不得不进行修改。\",\"涉及到 Bean 拷贝的代码部分（BeanCopier），由于一个参数失效，以为只是简单的一个 bug，后来发现是整个设计有问题……崩溃程度可想而知，肝了两个晚上重构了这部分代码。\",\"修改代码的同时才发现还有很多部分的设计有问题，顺便做了小重构。\",\"为了解决每次大版本升级的可能带来的对老用户的影响，此次版本采用里程碑方式发布，版本为 M1（感觉给用户送了颗 CPU），也是解决 Hutool 每次“激进”升级的问题（毕竟年龄大了，要稳重）\",\"希望购买代替捐赠，如果你希望支持下 Hutool，可以去 Hutool 主页点->击进入周边商店购买 Hutool 周边来支持 Hutool 哦，这比捐赠实惠的多（毕竟捐赠者我不知道如何道谢，很有道德负担……）\",\"鸣谢一下此次版本一起讨论和一起解决大量 issue 的 Hutool 几位成员： @阿超 @Cherryrum @Husky\"]},\"285\":{\"h\":\"5.8.0.M1\"},\"286\":{\"h\":\"❌ 不兼容特性\",\"t\":[\"• 【db 】 【不向下兼容 】增加 MongoDB4.x 支持返回 MongoClient 变更（pr#568@Gitee） • 【json 】 【可能兼容问题】修改 JSONObject 结构，继承自 MapWrapper • 【core 】 【可能兼容问题】BeanCopier 重构，新建 XXXCopier，删除 XXXValueProvider • 【core 】 【可能兼容问题】URLEncoder 废弃，URLEncoderUtil 使用 RFC3986 • 【core 】 【可能兼容问题】Base32 分离编码和解码，以便减少数据加载，支持 Hex 模式 • 【core 】 【可能兼容问题】Base58 分离编码和解码 • 【core 】 【可能兼容问题】Base62 分离编码和解码，增加 inverted 模式支持 • 【core 】 【兼容问题 】PunyCode 参数由 String 改为 Charsequence • 【cron 】 【可能兼容问题】SimpleValueParser 改名为 AbsValueParser，改为 abstract • 【poi 】 【可能兼容问题】ExcelUtil.getBigWriter 返回值改为 BigExcelWriter • 【core 】 【可能兼容问题】Opt.ofEmptyAble 参数由 List 改为 Collection 子类（pr#580@Gitee） • 【json 】 【可能兼容问题】JSON 转 Bean 时，使用 JSON 本身的相关设置，而非默认（issue#2212@Github） • 【json 】 【可能兼容问题】JSONConfig 中 isOrder 废弃，默认全部有序\"]},\"287\":{\"h\":\"🐣 新特性\",\"t\":[\"• 【http 】 HttpRequest.form 采用 TableMap 方式（issue#I4W427@Gitee） • 【core 】 AnnotationUtil 增加 getAnnotationAlias 方法（pr#554@Gitee） • 【core 】 FileUtil.extName 增加对 tar.gz 特殊处理（issue#I4W5FS@Gitee） • 【crypto 】 增加 XXTEA 实现（issue#I4WH2X@Gitee） • 【core 】 增加 Table 实现（issue#2179@Github） • 【core 】 增加 UniqueKeySet（issue#I4WUWR@Gitee） • 【core 】 阿拉伯数字转换成中文对发票票面金额转换的扩展（pr#570@Gitee） • 【core 】 ArrayUtil 增加 replace 方法（pr#570@Gitee） • 【core 】 CsvReadConfig 增加自定义标题行行号（issue#2180@Github） • 【core 】 FileAppender 优化初始 List 大小（pr#2197@Github） • 【core 】 Base32 增加 pad 支持（pr#2195@Github） • 【core 】 Dict 增加 setFields 方法（pr#578@Gitee） • 【db 】 新加 db.meta 的索引相关接口（pr#563@Gitee） • 【db 】 Oracle 中 Column#typeName 后的长度去掉（pr#563@Gitee） • 【poi 】 优化 ExcelReader，采用只读模式（pr#2204@Gitee） • 【poi 】 优化 ExcelBase，将 alias 放入 • 【poi 】 优化 ExcelBase，将 alias 放入 • 【core 】 改进 StrUtil#startWith、endWith 性能 • 【cron 】 增加 CronPatternParser、MatcherTable • 【http 】 GlobalHeaders 增加系统属性 allowUnsafeServerCertChange、allowUnsafeRenegotiation • 【http 】 UserAgentUtil 解析，增加 MiUI/XiaoMi 浏览器判断逻辑（pr#581@Gitee） • 【core 】 FileAppender 添加锁构造（pr#2211@Github） • 【poi 】 ExcelReader 增加构造（pr#2213@Github） • 【core 】 MapUtil 提供 change 函数，EnumUtil 提供 getBy 函数，通过 lambda 进行枚举字段映射（pr#583@Gitee） • 【core 】 CompareUtil 增加 comparingIndexed（pr#585@Gitee） • 【db 】 DruidDataSource 构建时支持自定义参数（issue#I4ZKCW@Gitee） • 【poi 】 ExcelWriter 增加 addImg 重载（issue#2218@Github） • 【bloomFilter】 增加 FuncFilter • 【http 】 增加 GlobalInterceptor（issue#2217）\"]},\"288\":{\"h\":\"🐞Bug 修复\",\"t\":[\"• 【core 】 修复 ObjectUtil.hasNull 传入 null 返回 true 的问题（pr#555@Gitee） • 【core 】 修复 NumberConverter 对数字转换的问题（issue#I4WPF4@Gitee） • 【core 】 修复 ReflectUtil.getMethods 获取接口方法问题（issue#I4WUWR@Gitee） • 【core 】 修复 NamingCase 中大写转换问题（pr#572@Gitee） • 【http 】 修复 GET 重定向时，携带参数问题（issue#2189@Github） • 【core 】 修复 FileUtil、FileCopier 相对路径获取父路径错误问题（pr#2188@Github） • 【core 】 修复 CopyOptions 中 fieldNameEditor 无效问题（issue#2202@Github） • 【json 】 修复 JSON 对 Map.Entry 的解析问题 • 【core 】 修复 MapConverter 中 map 与 map 转换兼容问题 • 【poi 】 解决 sax 读取时，POI-5.2.x 兼容性问题 • 【core 】 修复判断两段时间区间交集问题（pr#2210@Github） • 【http 】 修复标签误删问题（issue#I4Z7BV@Gitee） • 【core 】 修复 Win 下文件名带*问题（pr#584@Gitee） • 【core 】 FileUtil.getMimeType 增加 rar、7z 支持（issue#I4ZBN0@Gitee） • 【json 】 JSON 修复 transient 设置无效问题（issue#2212@Github） • 【core 】 修复 IterUtil.getElementType 获取结果为 null 的问题（issue#2222@Github） • 【core 】 修复农历转公历在闰月时错误（issue#I4ZSGJ@Gitee）\"]},\"289\":{\"h\":\"社区共建\",\"t\":[\"我们秉承和谐快乐，代码至上 的原则，如果你有想法，愿意和我们一起成长，一起贡献，快来加入我们吧！\",\"github：https://github.com/dromara/hutool\",\"gitee：https://gitee.com/dromara/hutool\"]},\"290\":{\"h\":\"Soul网关发布1.0.4-RELEASE版本\"},\"291\":{\"h\":\"Soul 网关发布 1.0.4-RELEASE 版本\",\"t\":[\"修复在 1.0.3 版本的后台管理中，出现的 bug。\",\"配置信息序列化方式支持自定义扩展。默认的序列化方式由 kroy 改为了 java 序列化方式。\",\"dubbo 框架支持的更改。\"]},\"292\":{\"h\":\"对 dubbo 用户使用的更改。\",\"t\":[\"在以前的版本中（1.0.2 or 1.0.3），dubbo 的参数是通过 header 头上传递，在 1.0.4 版本中是通过 body 传递\",\"更新了相关的文档信息。\"]},\"293\":{\"h\":\"关于使用 1.0.4 版本的建议。\",\"t\":[\"1.0.4 版本支持用户自定义插件开发，支持正则表达式的匹配。\",\"dubbo 参数传递的更改，我觉得这样会更加友好。\"]},\"294\":{\"h\":\"如果您之前使用的 1.0.2 版本，想要更新到 1.0.4 版本。\",\"t\":[\"在插件表新增 role 字段。\",\"重新启动 1.0.4 版本的管理后台。\",\"执行同步所有插件（因为序列化方式的更改）\",\"启动 1.0.4 版本的 soul-web 服务。\"]},\"295\":{\"h\":\"遇到问题？\",\"t\":[\"添加 qq 群（429951241）\",\"官网文档：https://dromara.org/website/zh-cn/docs/soul/soul.html\",\"github 地址: https://github.com/Dromara/soul\",\"gitee 地址： https://gitee.com/dromara/soul\"]},\"296\":{\"h\":\"Soul网关发布的2.1.X版本，到底有多方便？\",\"t\":[\"Soul 网关自从去年 10 月我开源以来，经历了一年的事情，接受到了来自社区很多朋友的建议，并进行持续不断的优化，已经提供了非常丰富的功能，很多功能都是高度自定义，可视化，高度可扩展的，现在做一个归纳总结。\",\"插件\",\"提供了系统自带的各种插件，比如签名，监控，限流，熔断，http 代理，dubbo 代理，websocket 等等。\",\"支持用户快速的进行插件的自定义开发。\",\"插件的所有数据，开关状态支持动态变更。\",\"数据同步\",\"提供了 http长轮询，zookeeper，websocket 三种不同的数据同步策略，让用户自由选择。\",\"推荐用户使用 websocket 方式，最轻量，在集群环境下，效率更高。\",\"对于用户\",\"首先我们提供了便于用户接入的 client 包，用户可以把快速的把自己的项目接入到 soul 网关。\",\"默认情况下，用户完全不用关心 soul 网关的选择器，规则等配置。\",\"用户之前的接口完全是零侵入，不需要任何更改，只是需要把访问域名改成网关的域名即可。\",\"比如 dubbo 用户，几乎就是 http 的方式完成了 http 协议到 dubbo 协议的互相转换。\",\"soul 使用的是 http 协议，那么注定它就是跨语言的，net 程序员，php 程序员等等，要和 java 进行数据交互，那么就大大的可行了。\",\"举个列子 ，比如你有一个 dubbo 接口 参数定义是一个 java bean,\",\"public void insert(final DubboTest dubboTest) { } public class DubboTest implements Serializable { private String id; private String name; } \",\"如果你使用 soul 网关要发起对它的调用，你的 http 传参数 就是在 body 里面 传一个 json 字符串 ，和普通的 http 调用无差别。\",\"{\\\"id\\\":\\\"123\\\",\\\"name\\\":\\\"xiaoyu\\\"} \",\"对于开发者(程序员)\",\"随着使用者越来越多，每个公司使用情况又不一样,soul 网关在 2.1.X 版本，处处留出来更多的高度自定义扩展性，让开发者，更加方便或者有信心融入进来。\",\"比如，自定义插件，过滤器，dubbo 参数解析器，iphost 解析器，返回结果等等。。这里我着重说一下自定义返回结果。 我们知道，soul 网关默认的返回结果是：\",\"{\\\"code\\\":200, \\\"message \\\": \\\"成功!\\\",\\\"data\\\" :\\\"helloWorld!\\\"} \",\"但是，在运用 soul 网关对你的业务系统进行调用的时候，你的业务系统可能定义的结果并不是上述结构，可能你的 字段叫 msg,这样就会造成结构不一样，给前端处理带来了困扰。我们注意到了这个事情 ：https://github.com/Dromara/soul/issues/109 , 现在已经优化，用户可以定制化的来定义返回结果,具体的要看 soul 文档。\",\"说了这么多，吹了这么多牛逼，那么我们来看看 soul 网关到底可以在什么场景下能发挥大作用。\",\"后台管理 web\",\"首先随便微服务的流行，我们的后台都划分成很多的微服务，我相信你们每个公司都有一个后台管理系统吧，如果我没猜错的话，他们大体上是如下架构。\",\"soul-rpc\",\"很简单对吧，就是有个运营管理平台的 web 项目，去调用每个微服务，来进行后台的查看等等。随着你们业务需要的加大，可能这里需要调用的微服务越来越多，你的 controller越来越多，现在比如你修改了 商品模块的 接口，你要发版会造成所有其他的模块也操作不了（就是你发版影响了其他模块的使用，别杠这里只是比方，不要整蓝绿发版啥的，明白意思吧）。 如果有运营人员在操作其他模块，会不会吐槽你？\",\"假如你是公司架构师，我说的是假如，那么你要怎么解决这个问题呢？当然，我们把这样一个大的 web 系统，拆分成很多小 web 系统，单独的进行发布，但是这样会引入一个问题，怎么统一登陆，鉴权？（很多后台管理系统还有权限的划分） ，这个时候，soul 网关 就能发挥重要的作用了，下面我只是列举了一下简单的调用图。\",\"soul-admin\",\"这样多方便，集成了网关，每个微服务注册到网关，网关根据路由规则来进行调用。自动发现服务，连运维配置 nginx 的工作都省了，把运维的工资给你，美滋滋。\"]},\"297\":{\"h\":\"公司入口网关（开放平台）\",\"t\":[\"如果一个公司要做开放平台或者入口网关，鉴权，限流，监控，熔断肯定少不了。\",\"如果贵公司是 dubbo 体系，开发人员写了 dubbo 服务后，还要傻乎乎的新增一个 web 项目，来提供接口给别人调用吗？\",\"如果一个接口被攻击，你怎么处理呢？如果被大流量攻击，你怎么处理呢？\",\"不巧，soul 在设计之初就是来干这种事情的，我们来看一下整体的架构图。\",\"soul-framework\"]},\"298\":{\"h\":\"零零总总还有很多其他功能\",\"t\":[\"比如支持 websocket 代理。\",\"比如支持文件上传下载。\",\"比如你可以自定义的开发你的插件啊。\"]},\"299\":{\"h\":\"最后最后\",\"t\":[\"github 地址 ：https://github.com/Dromara/soul\",\"gitee 地址 ：https://gitee.com/dromara/soul\",\"文档：https://dromara.org/zh-cn/docs/soul/soul.html\",\"欢迎大家关注，如果贵公司有使用到，或者需要学习交流，或者提供代码参与开发的朋友也可以加群来进行讨论 ，qq 群（429951241）\",\"最后 3.0 已经在进行开源了，3.0 是经历过 2 年双 11 大并发场景验证过的，现在一步一步将它开源出来，希望给大家带来帮助.\"]},\"300\":{\"h\":\"【Soul网关发布2.2.0】让高性能网关变得如此简单！\",\"t\":[\"我们还是先来看看新增功能，然后再讲故事。\",\"完全的插件化架构设计，插件热插拔。\",\"完整支持 dubbo 所有版本，alibaba-dubbo ，apache-dubbo。\",\"支持 dubbo 泛化调用，多参数，复杂参数接口。\",\"增强 monitor 插件，移除 influxdb 支持，新增内存，CPU，QPS，TPS，响应迟延等 metrics，支持接入 Prometheus。\",\"springCloud 插件支持 eureka 与 nacos 二种注册中心。\",\"waf 插件增强,支持黑白名单，以及混合模式。\",\"抽离 Hystrix 熔断功能，独立成插件支持。\",\"修护 Zookeeper 数据同步方式 bug，新增 nacos 同步数据方式。\",\"多种 soul-client 支持，提供传统 spring，以及 springboot 等方式接入。\",\"优化 soul-admin 后台控制界面。\",\"负载均衡算法 bug 修护。\",\"修护大文件上传时候的 bug。\",\"…….太多了不一一列举了。\"]},\"301\":{\"h\":\"体验新架构，10 分钟搞定一个高可用高性能网关。\",\"t\":[\"启动 soul-admin\",\"下载 soul-admin.jar 包，并启动.\",\"> wget https://yu199195.github.io/jar/soul-admin.jar > java -jar soul-admin.jar --spring.datasource.url=\\\"jdbc:mysql://你的url:3306/soul?useUnicode=true&characterEncoding=utf-8&useSSL=false\\\" --spring.datasource.username='you username' --spring.datasource.password='you password' \",\"访问 http://localhost:9095/index.html 默认的用户名：admin 密码:123456。\",\"搭建属于你的网关\",\"首先你新建一个空的 springboot 项目，可以参考 soul-bootstrap. 也可以在 spring 官网:[https://spring.io/quickstart]\",\"引入如下 jar 包：\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-webflux</artifactId> <version>2.2.2-RELEASE</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> <version>2.2.2-RELEASE</version> </dependency> <!--soul gateway start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-gateway</artifactId> <version>2.2.0</version> </dependency> <!--soul data sync start use websocket--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-websocket</artifactId> <version>2.2.0</version> </dependency> \",\"在你的 application.yaml 文件中加上如下配置：\",\"spring: main: allow-bean-definition-overriding: true management: health: defaults: enabled: false soul : sync: websocket : urls: ws://localhost:9095/websocket //设置成你的soul-admin地址 \",\"这样网关的环境就已经搭建完成。\"]},\"302\":{\"h\":\"体验新架构下的插件热插拔\",\"t\":[\"问：我想使用熔断功能，应该如何做呢？\",\"答：你可以在 pom.xml 文件 引入以下依赖,更多的还请看：https://dromara.org/zh-cn/docs/soul/soul.html\",\" <!-- soul hystrix plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-hystrix</artifactId> <version>2.2.0</version> </dependency> <!-- soul hystrix plugin end--> \",\"问:我怎么接入 dubbo 服务呢？\",\"答： 1）如果你使用的是 alibaba-dubbo，那么你应该引入如下：\",\" <!--soul alibaba dubbo plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-alibaba-dubbo</artifactId> <version>2.2.0</version> </dependency> <!-- soul alibaba dubbo plugin end--> \",\"2） 如果你使用 apache-dubbo，那么你应该引入如下：\",\" <!--soul apache dubbo plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-apache-dubbo</artifactId> <version>2.2.0</version> </dependency> <!-- soul apache dubbo plugin end--> \",\"更多的使用请你参考：https://dromara.org/zh-cn/docs/soul/user-dubbo.html\",\"问：如果我想使用限流功能呢？\",\"答：你可以引入以下依赖，具体的参考：https://dromara.org/zh-cn/docs/soul/plugin-rateLimiter.html\",\" <!-- soul ratelimiter plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-ratelimiter</artifactId> <version>2.2.0</version> </dependency> <!-- soul ratelimiter plugin end--> \",\"总而言之，你想要使用什么插件，你就新增该插件的依赖。就这？是热插拔么。。\",\"问：那有些插件我不想用了怎么办？\",\"答：在 soul-admin 后台禁用该插件即可，想用就开启。\"]},\"303\":{\"h\":\"Soul 网关的特性\",\"t\":[\"我觉得最大的特色是在流量筛选和管控方面。无论多复杂的请求，可以根据各种条件，规则，匹配方式，来进行流量过滤，筛选，处理。这个过程完全是可视化，自定义，即时生效的，程序无需任何更改。\",\"每个配置都在 soul-admin 控制台配置，会同步到每个 Soul 网关节点的 JVM 内存，这也是 Soul 集群高性能的关键之一，在 soul 网关内部，使用了 http 长轮询，websocket，zookeeper 等方式，独立实现了分布式配置中心的功能。\",\"Soul 网关使用 Reactor 编程方式来实现，独立了线程调度，低消耗，经过网关的流量，我们在开启 10 个插件都处理的情况下，延迟是 1~2ms。\",\"插件机制，默认提供了限流，熔断，黑白名单，认证等等插件。\",\"支持 A/B test，蓝绿发布（因为掌控了所有流量这个很容易做）。\"]},\"304\":{\"h\":\"Soul 网关有哪些使用场景，又有哪些值得你关注或者学习的？\",\"t\":[\"首先我觉得还是实用主义，需要用到,才会去了解。那么在什么场景下，你需要用到呢？\",\"后台管理 web\",\"首先随便微服务的流行，我们的后台都划分成很多的微服务，我相信你们每个公司都有一个后台管理系统吧，如果我没猜错的话，他们大体上是如下架构。\",\"它会有什么问题呢？大家思考一下。\",\"每个微服务项目的开发人员都在这上面进行开发，会越来越笨重。\",\"如何不停机发布的问题？你要发布商品模块的接口，会造成所有其他的模块使用不了。\",\"假如某一个模块接口的请求量很大（需要部署多个），另一个模块不需要，你又怎么拆分呢？\",\"有人又会说，那我把他们拆处理，拆成一个一个 web 不就行了么？但是这样又会带来一个新的问题，负载均衡在哪里做？统一的认证在哪里做？\",\"Soul 网关就很好了解决了以上所有问题，只需要把你的微服务注册到 Soul 网关。你想怎么玩都可以，不重样的.. 比如 order 模块有 2 个应用，你要发布新的版本，你可以在网关里面，把流量先打到其中一个，另一个进行更新，更新完了以后，再把流量放过去。改变了以前运维掌控一切的观念，java 程序员，也可以玩的更好，运维都省了，向老板申请加薪指日可待。\",\"需要统一鉴权？你只需要在网关新增一个适合自己业务的鉴权插件就 OK。公司入口网关（开放平台）\",\"如果一个公司要做开放平台或者入口网关，鉴权，限流，监控，熔断肯定少不了。\",\"如果贵公司是 dubbo 体系，开发人员写了 dubbo 服务后，还要傻乎乎的新增一个 web 项目，来提供接口给别人调用吗？\",\"如果一个接口被攻击，你怎么处理呢？如果被大流量攻击，你怎么处理呢？\",\"不巧，soul 在设计之初就是来干这种事情的，我们来看一下整体的架构图。\",\"soul-framework\",\"Soul 网关是使用响应式编程实现的，响应式编程绝对是未来 java 邻域的重要方向，看风向标 Spring 体系就好了。我在 14 年的时候，天天写 for 循环操作集合，溜的一笔。领导对我说，要使用 lambda 表达式，这是未来的重点，今天来看，如果你是 java 程序员，你不会 lambda 函数式编程，你好意思么。\"]},\"305\":{\"h\":\"从发布 2.2.0，谈谈近几年的开源体会。\",\"t\":[\"我是 17 年左右的时候，开始写开源项目的，最开始我和王亮一起讨论设计了 LCN 分布式事务，后面自己又陆续写了 Hmily，Raincat，Myth 等分布式事务中间件，再后来写了 Soul 网关，这一路走来，遇到很多很有意思的事，也遭受很多小白用户的摧残。总的感觉，一个好的开源项目，高扩展，可插拔的设计实在太重要了。\",\"案例一：Soul 网关刚开始数据同步只支持 Zookeeper 方式，有些用户反馈，我们没有 zk，那怎么办？\",\"案例二 ：Soul 网关是支持 Dubbo 的，但是有些用户是 alibaba-dubbo，有些用户 apache-dubbo，你又怎么说？\",\"案例三 ：soul 刚开始提供的客户端都是基于 Springboot 的，有些用户是传统的 Spring，你又怎么说？\",\"所以插件化设计，SPI 可插拔设计势在必行。\",\"SPI VS 可插拔\",\"诚然 SPI 扩展方式，是可插拔的基石，但是他们又不完全等同。举个列子：假如我们先存储一条数据，你定好了 SPI 接口，也有 Mysql，mongodb，elasticseach，zookeeper 等等多种方式实现，现在你要考虑的是把它组合在一起项目里面，还是放在不同的项目，按需打包和加载呢？这些都是要考虑的，所以不能一股脑的 SPI 方式。\",\"checkStyle\",\"严格的代码规范，是对源码学习中，框架使用者的尊重，更是一种开源的态度。\",\"严格的代码规范，让人看起来舒服，也更容易让人理解整个代码。\",\"也希望各位小伙伴提交 PR 的时候，至少本地要 Install 成功，之前有些 PR，为了不打击他们的积极性，合并之后流着泪修改。\",\"参与开源\",\"目前我主要专注于 Apache ShardingSphere，这是中国人在 apache 组织的第一个关于数据库分库分表的顶级项目，欢迎大家参与进来。https://github.com/apache/shardingsphere。\",\"国人在开源方面，技术方面大到芯片，小到 MATLAB ，都落后挺多的，也希望大家拥有开源的心态，多参与开源，学习技术，宣传思想，为往圣继绝学！\"]},\"306\":{\"h\":\"项目\"}},\"dirtCount\":0,\"index\":[[\"学习技术\",{\"1\":{\"305\":1}}],[\"学习使用\",{\"0\":{\"194\":1}}],[\"技术方面大到芯片\",{\"1\":{\"305\":1}}],[\"技术栈全面开源共建\",{\"1\":{\"17\":1}}],[\"国人在开源方面\",{\"1\":{\"305\":1}}],[\"合并之后流着泪修改\",{\"1\":{\"305\":1}}],[\"合理的划分功能模块\",{\"1\":{\"268\":1}}],[\"至少本地要\",{\"1\":{\"305\":1}}],[\"至于为什么成为请求入口自行查询\",{\"1\":{\"241\":1}}],[\"诚然\",{\"1\":{\"305\":1}}],[\"刚开始提供的客户端都是基于\",{\"1\":{\"305\":1}}],[\"刚刚也分析了\",{\"1\":{\"98\":1}}],[\"刚刚提到的\",{\"1\":{\"85\":1}}],[\"案例三\",{\"1\":{\"305\":1}}],[\"案例二\",{\"1\":{\"305\":1}}],[\"案例一\",{\"1\":{\"305\":1}}],[\"遇到很多很有意思的事\",{\"1\":{\"305\":1}}],[\"遇到问题\",{\"0\":{\"295\":1}}],[\"谈谈近几年的开源体会\",{\"0\":{\"305\":1}}],[\"领导对我说\",{\"1\":{\"304\":1}}],[\"溜的一笔\",{\"1\":{\"304\":1}}],[\"邻域的重要方向\",{\"1\":{\"304\":1}}],[\"统一的认证在哪里做\",{\"1\":{\"304\":1}}],[\"拆成一个一个\",{\"1\":{\"304\":1}}],[\"拆分成很多小\",{\"1\":{\"296\":1}}],[\"蓝绿发布\",{\"1\":{\"303\":1}}],[\"认证等等插件\",{\"1\":{\"303\":1}}],[\"黑白名单\",{\"1\":{\"303\":1}}],[\"延迟是\",{\"1\":{\"303\":1}}],[\"延迟时间根据\",{\"1\":{\"98\":1}}],[\"低消耗\",{\"1\":{\"303\":1}}],[\"编程方式来实现\",{\"1\":{\"303\":1}}],[\"编译\",{\"0\":{\"52\":1},\"1\":{\"41\":1}}],[\"程序无需任何更改\",{\"1\":{\"303\":1}}],[\"程序员等等\",{\"1\":{\"296\":1}}],[\"程序员\",{\"1\":{\"296\":2,\"304\":2}}],[\"想用就开启\",{\"1\":{\"302\":1}}],[\"想要更新到\",{\"0\":{\"294\":1}}],[\"想要获取的某个实现类\",{\"1\":{\"137\":1}}],[\"问\",{\"1\":{\"302\":4}}],[\"问题\",{\"0\":{\"64\":1},\"1\":{\"288\":1}}],[\"搭建属于你的网关\",{\"1\":{\"301\":1}}],[\"太多了不一一列举了\",{\"1\":{\"300\":1}}],[\"独立了线程调度\",{\"1\":{\"303\":1}}],[\"独立实现了分布式配置中心的功能\",{\"1\":{\"303\":1}}],[\"独立成插件支持\",{\"1\":{\"300\":1}}],[\"独立出一个启动项目\",{\"1\":{\"115\":1}}],[\"零零总总还有很多其他功能\",{\"0\":{\"298\":1}}],[\"零侵入方式的引入\",{\"1\":{\"264\":1}}],[\"公司入口网关\",{\"0\":{\"297\":1},\"1\":{\"304\":1}}],[\"美滋滋\",{\"1\":{\"296\":1}}],[\"连运维配置\",{\"1\":{\"296\":1}}],[\"连接池\",{\"1\":{\"201\":1}}],[\"连接实例\",{\"1\":{\"201\":1}}],[\"连接立马变更的\",{\"0\":{\"201\":1}}],[\"连接及接收信息\",{\"1\":{\"114\":1,\"115\":1}}],[\"连接\",{\"1\":{\"112\":1}}],[\"连接不断\",{\"1\":{\"46\":1}}],[\"假如我们先存储一条数据\",{\"1\":{\"305\":1}}],[\"假如某一个模块接口的请求量很大\",{\"1\":{\"304\":1}}],[\"假如你是公司架构师\",{\"1\":{\"296\":1}}],[\"假设后面步骤不进行\",{\"1\":{\"89\":1}}],[\"明白意思吧\",{\"1\":{\"296\":1}}],[\"别杠这里只是比方\",{\"1\":{\"296\":1}}],[\"商品模块的\",{\"1\":{\"296\":1}}],[\"吹了这么多牛逼\",{\"1\":{\"296\":1}}],[\"说了这么多\",{\"1\":{\"296\":1}}],[\"说明每次调用都使用新的\",{\"1\":{\"121\":1}}],[\"说明完成\",{\"1\":{\"98\":1}}],[\"说明重连了\",{\"1\":{\"46\":1}}],[\"随着你们业务需要的加大\",{\"1\":{\"296\":1}}],[\"随着使用者越来越多\",{\"1\":{\"296\":1}}],[\"随机算法\",{\"1\":{\"183\":1}}],[\"随机\",{\"1\":{\"86\":1}}],[\"效率更高\",{\"1\":{\"296\":1}}],[\"经历了一年的事情\",{\"1\":{\"296\":1}}],[\"经过网关的流量\",{\"1\":{\"303\":1}}],[\"经过上述流程图的引导\",{\"1\":{\"188\":1}}],[\"经过查阅资料得知\",{\"1\":{\"123\":1}}],[\"经过\",{\"1\":{\"89\":1,\"90\":2,\"241\":1}}],[\"序列化方式\",{\"1\":{\"291\":1}}],[\"出现的\",{\"1\":{\"291\":1}}],[\"出台正式的规则\",{\"1\":{\"259\":1}}],[\"兼容性问题\",{\"1\":{\"288\":1}}],[\"兼容问题\",{\"1\":{\"286\":1}}],[\"携带参数问题\",{\"1\":{\"288\":1}}],[\"修护大文件上传时候的\",{\"1\":{\"300\":1}}],[\"修护\",{\"1\":{\"300\":2}}],[\"修复在\",{\"1\":{\"291\":1}}],[\"修复农历转公历在闰月时错误\",{\"1\":{\"288\":1}}],[\"修复标签误删问题\",{\"1\":{\"288\":1}}],[\"修复判断两段时间区间交集问题\",{\"1\":{\"288\":1}}],[\"修复\",{\"0\":{\"288\":1},\"1\":{\"288\":12}}],[\"修改\",{\"1\":{\"286\":1}}],[\"修改代码的同时才发现还有很多部分的设计有问题\",{\"1\":{\"284\":1}}],[\"修改则直接结束\",{\"1\":{\"102\":1}}],[\"修改缓存信息\",{\"1\":{\"102\":1}}],[\"修改缓存\",{\"1\":{\"95\":1}}],[\"修改的消息\",{\"1\":{\"79\":1}}],[\"修改后的配置如下\",{\"1\":{\"64\":1}}],[\"修改端口为8189\",{\"1\":{\"60\":1}}],[\"修改数据源配置为自己的数据库配置\",{\"1\":{\"54\":1}}],[\"🐞bug\",{\"0\":{\"288\":1}}],[\"🐣\",{\"0\":{\"287\":1}}],[\"函数式编程\",{\"1\":{\"304\":1}}],[\"函数\",{\"1\":{\"287\":2}}],[\"浏览器判断逻辑\",{\"1\":{\"287\":1}}],[\"特殊处理\",{\"1\":{\"287\":1}}],[\"特别注意\",{\"1\":{\"258\":1}}],[\"废弃\",{\"1\":{\"286\":2}}],[\"废话少说\",{\"1\":{\"70\":1}}],[\"❌\",{\"0\":{\"286\":1}}],[\"阿拉伯数字转换成中文对发票票面金额转换的扩展\",{\"1\":{\"287\":1}}],[\"阿超\",{\"1\":{\"284\":1}}],[\"阿行\",{\"1\":{\"11\":1}}],[\"几乎就是\",{\"1\":{\"296\":1}}],[\"几位成员\",{\"1\":{\"284\":1}}],[\"几行配置轻轻松松搞定高并发分布式事务\",{\"1\":{\"32\":1}}],[\"鸣谢一下此次版本一起讨论和一起解决大量\",{\"1\":{\"284\":1}}],[\"毕竟捐赠者我不知道如何道谢\",{\"1\":{\"284\":1}}],[\"毕竟年龄大了\",{\"1\":{\"284\":1}}],[\"哦\",{\"1\":{\"284\":1}}],[\"周边来支持\",{\"1\":{\"284\":1}}],[\"升级的问题\",{\"1\":{\"284\":1}}],[\"升级到\",{\"1\":{\"271\":2}}],[\"激进\",{\"1\":{\"284\":1}}],[\"感觉给用户送了颗\",{\"1\":{\"284\":1}}],[\"感谢朋友们一路以来的支持\",{\"1\":{\"268\":1}}],[\"感谢大家\",{\"1\":{\"28\":1}}],[\"顺便做了小重构\",{\"1\":{\"284\":1}}],[\"顺序\",{\"1\":{\"220\":1}}],[\"肝了两个晚上重构了这部分代码\",{\"1\":{\"284\":1}}],[\"崩溃程度可想而知\",{\"1\":{\"284\":1}}],[\"拷贝的代码部分\",{\"1\":{\"284\":1}}],[\"彻底解决事务悬挂问题\",{\"1\":{\"281\":1}}],[\"稳定性\",{\"1\":{\"281\":1}}],[\"绝不搞一言堂\",{\"1\":{\"279\":1}}],[\"标准\",{\"1\":{\"279\":1}}],[\"标识\",{\"1\":{\"134\":1,\"137\":5}}],[\"耗时等信息\",{\"1\":{\"277\":1}}],[\"聚合多种\",{\"1\":{\"277\":1}}],[\"易使用的柔性分布式事务解决方案\",{\"1\":{\"276\":1}}],[\"易用性\",{\"1\":{\"270\":1}}],[\"群\",{\"1\":{\"275\":1,\"282\":1,\"295\":1,\"299\":1}}],[\"群进行交流\",{\"1\":{\"45\":1}}],[\"愿意和我们一起成长\",{\"1\":{\"275\":1,\"289\":1}}],[\"吧\",{\"1\":{\"274\":1}}],[\"快速集成\",{\"1\":{\"276\":1}}],[\"快速与业务系统集成\",{\"1\":{\"270\":1}}],[\"快来加入我们吧\",{\"1\":{\"275\":1,\"289\":1}}],[\"快乐成长\",{\"1\":{\"279\":1}}],[\"快乐\",{\"1\":{\"271\":1,\"279\":1}}],[\"秉承优雅\",{\"1\":{\"271\":1}}],[\"严格的代码规范\",{\"1\":{\"305\":2}}],[\"严格的\",{\"1\":{\"271\":1}}],[\"抽离\",{\"1\":{\"300\":1}}],[\"抽离核心执行模块\",{\"1\":{\"277\":1}}],[\"抽离出\",{\"1\":{\"271\":1}}],[\"抽离出多种\",{\"1\":{\"271\":1}}],[\"抽离出核心的事务执行模块\",{\"1\":{\"271\":1}}],[\"抽离出开箱即用的\",{\"1\":{\"271\":1}}],[\"抽象方法\",{\"1\":{\"188\":1}}],[\"抽象方法供实现类写自己的逻辑\",{\"1\":{\"82\":1}}],[\"抽象类\",{\"1\":{\"82\":1}}],[\"嵌套调用事务\",{\"1\":{\"270\":1}}],[\"复杂参数接口\",{\"1\":{\"300\":1}}],[\"复杂场景\",{\"1\":{\"270\":1}}],[\"复用\",{\"1\":{\"121\":1}}],[\"功能\",{\"0\":{\"270\":1},\"1\":{\"278\":1}}],[\"功能隔离和自定义处理逻辑的特性\",{\"1\":{\"169\":1}}],[\"架构调整\",{\"1\":{\"277\":1}}],[\"架构\",{\"0\":{\"277\":1}}],[\"架构全景图\",{\"0\":{\"269\":1},\"1\":{\"269\":1,\"284\":1}}],[\"架构释义\",{\"0\":{\"169\":1}}],[\"欢迎大家参与进来\",{\"1\":{\"305\":1}}],[\"欢迎大家关注\",{\"1\":{\"299\":1}}],[\"欢迎大家\",{\"1\":{\"267\":1}}],[\"欢迎来跟我一起分析和学习\",{\"1\":{\"81\":1}}],[\"解决版本依赖管理冲突的问题\",{\"1\":{\"277\":1}}],[\"解决疑难\",{\"0\":{\"272\":1},\"1\":{\"268\":1}}],[\"解决\",{\"0\":{\"278\":1},\"1\":{\"264\":1,\"278\":1,\"288\":1}}],[\"解析器\",{\"1\":{\"296\":1}}],[\"解析\",{\"1\":{\"287\":1}}],[\"解析模块\",{\"1\":{\"277\":1}}],[\"解析资源文件为\",{\"1\":{\"137\":1}}],[\"解析资源文件\",{\"1\":{\"134\":1}}],[\"解析出资源文件中写入的实现类类名\",{\"1\":{\"121\":1}}],[\"成功\",{\"1\":{\"296\":1,\"305\":1}}],[\"成员\",{\"0\":{\"261\":1}}],[\"成长奖励\",{\"1\":{\"89\":1}}],[\"子类\",{\"1\":{\"286\":1}}],[\"子类注册为\",{\"1\":{\"85\":1}}],[\"子项目的管理和权限约束\",{\"1\":{\"259\":1}}],[\"拥有完整的自治和管理权限\",{\"1\":{\"259\":1}}],[\"道德原则\",{\"1\":{\"259\":1}}],[\"任务安排等方面口径一致\",{\"1\":{\"259\":1}}],[\"任务负责逐条遍历登记全量服务散列表\",{\"1\":{\"181\":1}}],[\"做到整个组织在宣传活动\",{\"1\":{\"259\":1}}],[\"做什么用的呢\",{\"1\":{\"98\":1}}],[\"共享所有开源资源\",{\"1\":{\"259\":1}}],[\"共同发展\",{\"1\":{\"258\":1}}],[\"共进\",{\"1\":{\"4\":1}}],[\"希望给大家带来帮助\",{\"1\":{\"299\":1}}],[\"希望购买代替捐赠\",{\"1\":{\"284\":1}}],[\"希望你来参与建设\",{\"1\":{\"282\":1}}],[\"希望在这里每个人都有好的思想和观点\",{\"1\":{\"279\":1}}],[\"希望项目作者在考虑退出\",{\"1\":{\"258\":1}}],[\"希望对你有所帮助\",{\"1\":{\"249\":1}}],[\"评委会收到申请后第一时间与项目作者沟通并确认退出意向\",{\"1\":{\"258\":1}}],[\"评委会申请退出\",{\"1\":{\"258\":1}}],[\"邀请进入\",{\"1\":{\"257\":1}}],[\"原仓库社区群加上\",{\"1\":{\"257\":1}}],[\"原则上\",{\"1\":{\"259\":1}}],[\"原则上要求下一个版本\",{\"1\":{\"256\":1}}],[\"原则上需要联系\",{\"1\":{\"255\":1}}],[\"原因就是每次调用\",{\"1\":{\"121\":1}}],[\"仓库\",{\"1\":{\"256\":1}}],[\"仓库文档\",{\"0\":{\"255\":1}}],[\"仓库权限\",{\"0\":{\"254\":1}}],[\"仓库名\",{\"1\":{\"253\":2}}],[\"平台托管且\",{\"1\":{\"252\":1}}],[\"拦截泛化请求\",{\"0\":{\"248\":1}}],[\"拦截泛化调用\",{\"1\":{\"246\":1}}],[\"拦截请求后把泛化参数序列化然后请求给具体服务\",{\"1\":{\"246\":1}}],[\"带着exchange\",{\"1\":{\"242\":1}}],[\"带着问题读源码\",{\"0\":{\"200\":1}}],[\"$invokeasync\",{\"1\":{\"240\":1,\"243\":1}}],[\"$invoke\",{\"1\":{\"240\":2,\"247\":2,\"248\":2}}],[\"需带上参数列表\",{\"1\":{\"240\":1}}],[\"需要统一鉴权\",{\"1\":{\"304\":1}}],[\"需要部署多个\",{\"1\":{\"304\":1}}],[\"需要用到\",{\"1\":{\"304\":1}}],[\"需要由组织委员会投票通过后执行\",{\"1\":{\"259\":1}}],[\"需要更改包名前缀为org\",{\"1\":{\"256\":1}}],[\"需要填写\",{\"1\":{\"219\":1}}],[\"需要操作的\",{\"1\":{\"204\":1}}],[\"需要记录状态\",{\"1\":{\"183\":1}}],[\"需要计算\",{\"1\":{\"183\":1}}],[\"需要获取服务列表\",{\"1\":{\"179\":1}}],[\"需要注意的是如果限流类型是并发线程数\",{\"1\":{\"220\":1}}],[\"需要注意的是\",{\"1\":{\"219\":1,\"220\":2}}],[\"需要注意\",{\"1\":{\"175\":1}}],[\"需要传入\",{\"1\":{\"173\":1}}],[\"需要手动操作\",{\"1\":{\"162\":1}}],[\"需要手动同步\",{\"1\":{\"162\":2}}],[\"需要手动添加\",{\"1\":{\"162\":1}}],[\"需要重启\",{\"1\":{\"152\":1}}],[\"需要重启服务\",{\"1\":{\"152\":1}}],[\"需要取消\",{\"1\":{\"72\":1}}],[\"均用\",{\"1\":{\"237\":1}}],[\"泛化接口调用方式主要用于客户端没有\",{\"1\":{\"237\":1}}],[\"泛化调用主要就分为两块分别是消费端如何使用\",{\"1\":{\"246\":1}}],[\"泛化调用的参数类型和参数值\",{\"1\":{\"243\":1}}],[\"泛化调用的关键\",{\"1\":{\"231\":1}}],[\"泛化调用准备\",{\"0\":{\"242\":1},\"1\":{\"230\":1}}],[\"泛化调用实现流程\",{\"0\":{\"240\":1},\"1\":{\"230\":1}}],[\"泛化调用介绍\",{\"0\":{\"237\":1,\"246\":1},\"1\":{\"230\":2}}],[\"泛化调用\",{\"1\":{\"191\":1,\"300\":1}}],[\"逗号隔开\",{\"1\":{\"232\":1}}],[\"`enabled`\",{\"1\":{\"232\":1}}],[\"`date\",{\"1\":{\"232\":2}}],[\"`parameter\",{\"1\":{\"232\":1}}],[\"`path\",{\"1\":{\"232\":1}}],[\"`path`\",{\"1\":{\"232\":1}}],[\"`method\",{\"1\":{\"232\":1}}],[\"`meta\",{\"1\":{\"232\":1}}],[\"`service\",{\"1\":{\"232\":1}}],[\"`rpc\",{\"1\":{\"232\":2}}],[\"`app\",{\"1\":{\"232\":1}}],[\"`id`\",{\"1\":{\"232\":2}}],[\"智能容错和负载均衡\",{\"1\":{\"231\":1}}],[\"校验配置信息\",{\"1\":{\"227\":1}}],[\"└─handler\",{\"1\":{\"227\":1}}],[\"└─resilience4j\",{\"1\":{\"227\":1}}],[\"├─factory\",{\"1\":{\"227\":1}}],[\"├─executor\",{\"1\":{\"227\":1}}],[\"├─conf\",{\"1\":{\"227\":1}}],[\"├─build\",{\"1\":{\"227\":1}}],[\"│\",{\"1\":{\"227\":12}}],[\"输出日志\",{\"1\":{\"225\":1}}],[\"否\",{\"1\":{\"224\":1}}],[\"否则走限流组件\",{\"1\":{\"227\":1}}],[\"否则就\",{\"1\":{\"213\":1}}],[\"否则\",{\"1\":{\"181\":1,\"182\":1,\"183\":1,\"217\":1}}],[\"达到这个阈值\",{\"1\":{\"224\":1}}],[\"达到此阈值则会启动限流策略\",{\"1\":{\"220\":1}}],[\"错误率百分比\",{\"1\":{\"224\":1}}],[\"半开状态下的环形缓冲区大小\",{\"1\":{\"224\":1}}],[\"滑动窗口类型\",{\"1\":{\"224\":1}}],[\"滑动窗口大小\",{\"1\":{\"224\":1}}],[\"滑动窗口算法\",{\"1\":{\"195\":1}}],[\"降级处理的uri\",{\"1\":{\"224\":1}}],[\"刷新令牌的时间间隔为1s\",{\"1\":{\"225\":1}}],[\"刷新令牌的时间间隔为\",{\"1\":{\"225\":1}}],[\"刷新令牌的时间间隔\",{\"1\":{\"224\":1}}],[\"控制台配置\",{\"1\":{\"303\":1}}],[\"控制台日志每秒输出两条\",{\"1\":{\"225\":1}}],[\"控制台找到插件列表的\",{\"1\":{\"224\":1}}],[\"控制台插件管理开启\",{\"1\":{\"224\":1}}],[\"控制台输出如下内容表示\",{\"1\":{\"55\":1}}],[\"限时\",{\"1\":{\"223\":1}}],[\"限流操作\",{\"1\":{\"227\":1}}],[\"限流执行\",{\"1\":{\"227\":1}}],[\"限流执行器\",{\"1\":{\"227\":1}}],[\"限流器组件\",{\"1\":{\"227\":1}}],[\"限流和熔断对象构建\",{\"1\":{\"227\":1}}],[\"限流和熔断执行器\",{\"1\":{\"227\":1}}],[\"限流和熔断分析\",{\"1\":{\"11\":1}}],[\"限流测试\",{\"1\":{\"225\":9,\"226\":1}}],[\"限流阈值类型\",{\"1\":{\"220\":1}}],[\"限流阈值\",{\"1\":{\"220\":1}}],[\"限流算法分析\",{\"0\":{\"206\":1}}],[\"限流规则的具体实现是交给特定的\",{\"1\":{\"205\":1}}],[\"限流插件是底层是如何实现的呢\",{\"0\":{\"202\":1}}],[\"限流插件\",{\"1\":{\"193\":1}}],[\"限流\",{\"0\":{\"225\":1},\"1\":{\"167\":1,\"185\":1,\"222\":1,\"223\":1,\"227\":1,\"296\":1,\"297\":1,\"304\":1}}],[\"断路器的操作\",{\"1\":{\"227\":1}}],[\"断路器\",{\"1\":{\"223\":1}}],[\"断电啦什么的\",{\"0\":{\"32\":1}}],[\"具有编译依赖性\",{\"1\":{\"223\":1}}],[\"具体核心代码如下\",{\"1\":{\"213\":1}}],[\"具体配置如下图\",{\"1\":{\"212\":1}}],[\"具体的参考\",{\"1\":{\"302\":1}}],[\"具体的要看\",{\"1\":{\"296\":1}}],[\"具体的限流策略在\",{\"1\":{\"220\":1}}],[\"具体的方法为ratelimiterplugindatahandler\",{\"1\":{\"201\":1}}],[\"具体的负载均衡策略在规则中指定\",{\"1\":{\"177\":1}}],[\"具体的插件类所在项目\",{\"1\":{\"85\":1}}],[\"具体方法在\",{\"1\":{\"134\":1}}],[\"具体请求路径\",{\"1\":{\"102\":1}}],[\"具体每个步骤的工作细节可以由子类自己实现\",{\"1\":{\"95\":1}}],[\"具体实现\",{\"1\":{\"85\":1}}],[\"具体分析下\",{\"1\":{\"83\":1}}],[\"具体可以参考这个类\",{\"1\":{\"42\":1}}],[\"目录下\",{\"1\":{\"273\":1}}],[\"目标是打造金融级的一体系分布式事务解决方案\",{\"1\":{\"276\":1}}],[\"目标\",{\"0\":{\"222\":1,\"230\":1}}],[\"目前我主要专注于\",{\"1\":{\"305\":1}}],[\"目前我们只挑重点来讲\",{\"1\":{\"185\":1}}],[\"目前我们分析的数据变动来源是\",{\"1\":{\"99\":1}}],[\"目前提供了对\",{\"1\":{\"276\":1}}],[\"目前捐赠项目采用转移到\",{\"1\":{\"253\":1}}],[\"目前的子类实现有\",{\"1\":{\"118\":1}}],[\"目前已加入\",{\"1\":{\"19\":1}}],[\"触发了流控或熔断而报错调用sentinelfallbackhandler返回错误信息\",{\"1\":{\"220\":1}}],[\"触发熔断\",{\"1\":{\"218\":3,\"220\":1}}],[\"引入以下依赖\",{\"1\":{\"302\":1}}],[\"引入如下\",{\"1\":{\"301\":1}}],[\"引入sentinel官方的transformer\",{\"1\":{\"220\":1}}],[\"引用\",{\"1\":{\"273\":1}}],[\"引言\",{\"0\":{\"167\":1}}],[\"验证sentinel插件的配置信息\",{\"1\":{\"220\":1}}],[\"块\",{\"1\":{\"220\":1}}],[\"匀速队列这种模式会严格控制每个请求的时间间隔\",{\"1\":{\"220\":1}}],[\"匀速排队\",{\"1\":{\"217\":1,\"220\":1}}],[\"超过这个请求数才开启熔断统计\",{\"1\":{\"224\":1}}],[\"超过阈值的请求\",{\"1\":{\"220\":1}}],[\"超时异常事务悬挂\",{\"1\":{\"278\":1}}],[\"超时异常恢复\",{\"1\":{\"270\":1}}],[\"超时时间为\",{\"1\":{\"225\":1}}],[\"超时时间\",{\"1\":{\"189\":1,\"190\":1,\"191\":1}}],[\"超时时间以及重试次数并交由插件链下游进行处理\",{\"1\":{\"178\":1}}],[\"超时时间以及重试次数\",{\"1\":{\"178\":1}}],[\"超时的返回\",{\"1\":{\"147\":1}}],[\"预热指的是在\",{\"1\":{\"220\":1}}],[\"预热+匀速排队\",{\"1\":{\"220\":1}}],[\"预热\",{\"1\":{\"220\":1}}],[\"预热启动的方式是让阈值缓慢增加\",{\"1\":{\"217\":1}}],[\"预热启动\",{\"1\":{\"217\":1}}],[\"阈值是\",{\"1\":{\"220\":1}}],[\"阈值是多少\",{\"1\":{\"217\":1}}],[\"阈值则是\",{\"1\":{\"220\":1}}],[\"慢调用的比例默认是\",{\"1\":{\"219\":1}}],[\"慢调用比例\",{\"1\":{\"218\":1,\"219\":1}}],[\"属于\",{\"1\":{\"218\":1}}],[\"属性值\",{\"1\":{\"242\":1}}],[\"属性\",{\"1\":{\"185\":1,\"186\":1}}],[\"属性存放具体实现类\",{\"1\":{\"137\":1}}],[\"属性的被调用处时\",{\"1\":{\"121\":1}}],[\"系统\",{\"1\":{\"296\":2}}],[\"系统自适应保护等多个维度来帮助您保障微服务的稳定性\",{\"1\":{\"218\":1}}],[\"系统又在很极端的情况下\",{\"1\":{\"37\":1}}],[\"抖动的情况\",{\"1\":{\"218\":1}}],[\"排队等待处理\",{\"1\":{\"217\":1}}],[\"排除业务\",{\"1\":{\"216\":1}}],[\"避免冷系统被压垮\",{\"1\":{\"217\":1}}],[\"避免了\",{\"1\":{\"130\":1}}],[\"极端情况下事务日志序列化异常\",{\"1\":{\"272\":1}}],[\"极端情况下甚至导致线程池耗尽\",{\"1\":{\"217\":1}}],[\"极简的轻量级\",{\"1\":{\"19\":1}}],[\"流控报错\",{\"1\":{\"220\":1}}],[\"流控行为\",{\"1\":{\"220\":1}}],[\"流控方式\",{\"1\":{\"220\":1}}],[\"流控策略里我们可以选择\",{\"1\":{\"220\":1}}],[\"流控开关\",{\"1\":{\"220\":1}}],[\"流控效果\",{\"1\":{\"220\":2}}],[\"流量控制的相关配置有\",{\"1\":{\"220\":1}}],[\"流量控制的策略是什么\",{\"1\":{\"217\":1}}],[\"流量控制\",{\"0\":{\"217\":1,\"220\":1}}],[\"流读取到资源文件\",{\"1\":{\"122\":1}}],[\"组委会有最终解释权\",{\"0\":{\"260\":1}}],[\"组\",{\"1\":{\"218\":1}}],[\"组件独立运行于\",{\"1\":{\"220\":1}}],[\"组件的\",{\"1\":{\"215\":1}}],[\"组件实现熔断及流控功能\",{\"1\":{\"215\":1}}],[\"组织的第一个关于数据库分库分表的顶级项目\",{\"1\":{\"305\":1}}],[\"组织相关决策事务\",{\"1\":{\"259\":1}}],[\"组织委员会由每个项目的主要负责人组成\",{\"1\":{\"259\":1}}],[\"组织哪里做的不好的地方\",{\"1\":{\"258\":1}}],[\"组织之前可以先和我们沟通\",{\"1\":{\"258\":1}}],[\"组织会在各大平台和社区群进行公告推送告知\",{\"1\":{\"258\":1}}],[\"组织后无法认同组织的发展理念或想转移到其他组织\",{\"1\":{\"258\":1}}],[\"组织\",{\"0\":{\"257\":1},\"1\":{\"254\":1}}],[\"组织负责人会给新加项目负责人设置超级管理员权限\",{\"1\":{\"254\":1}}],[\"组织仓库方式进行处理\",{\"1\":{\"253\":1}}],[\"组织dubbo\",{\"1\":{\"243\":1}}],[\"组织不得从事违法或损人利己的事情\",{\"1\":{\"21\":1}}],[\"组织责任\",{\"0\":{\"21\":1}}],[\"替代了之前\",{\"1\":{\"213\":1}}],[\"声明为\",{\"1\":{\"213\":1}}],[\"搞清楚默认\",{\"1\":{\"213\":1}}],[\"搞起来\",{\"1\":{\"78\":1}}],[\"顾名思义\",{\"1\":{\"210\":1}}],[\"场景描述\",{\"0\":{\"216\":1}}],[\"场景\",{\"0\":{\"210\":1}}],[\"工具类库\",{\"1\":{\"283\":1}}],[\"工具\",{\"1\":{\"225\":1}}],[\"工作原理\",{\"1\":{\"214\":1}}],[\"工程的\",{\"1\":{\"209\":1}}],[\"工厂\",{\"1\":{\"119\":1}}],[\"吗\",{\"1\":{\"206\":1}}],[\"难道不应该是\",{\"1\":{\"206\":1}}],[\"核心模块去除对\",{\"1\":{\"277\":1}}],[\"核心类\",{\"1\":{\"227\":1}}],[\"核心思路是业务网关保证打到后面的请求是业务可以承受的量\",{\"1\":{\"217\":1}}],[\"核心处理\",{\"1\":{\"213\":1}}],[\"核心代码\",{\"1\":{\"206\":1}}],[\"核心系统按照规范加载即可\",{\"1\":{\"170\":1}}],[\"核心系统设计的关键技术\",{\"1\":{\"170\":1}}],[\"乘\",{\"1\":{\"206\":1}}],[\"过滤器\",{\"1\":{\"296\":1}}],[\"过期时间\",{\"1\":{\"206\":1}}],[\"过程\",{\"1\":{\"159\":1}}],[\"申请退出流程\",{\"1\":{\"258\":1}}],[\"申请一个令牌\",{\"1\":{\"206\":1}}],[\"申请加入组织\",{\"1\":{\"20\":1}}],[\"值为1\",{\"1\":{\"206\":1}}],[\"值应该为毫秒数的字符串形式\",{\"1\":{\"145\":1}}],[\"令牌桶算法一共有两种大体实现\",{\"1\":{\"205\":1}}],[\"令牌桶基于\",{\"1\":{\"197\":1}}],[\"脚本的\",{\"1\":{\"205\":1}}],[\"脚本\",{\"1\":{\"205\":1}}],[\"启用状态\",{\"1\":{\"232\":1}}],[\"启用对应插件\",{\"0\":{\"197\":1}}],[\"启动三个服务\",{\"1\":{\"224\":1}}],[\"启动定时探活任务\",{\"1\":{\"180\":1}}],[\"启动的过程中\",{\"1\":{\"174\":1}}],[\"启动的时候会去\",{\"1\":{\"162\":1}}],[\"启动的时候遇到了如下的错误\",{\"1\":{\"162\":1}}],[\"启动向容器自动注入\",{\"1\":{\"164\":1}}],[\"启动不起来报空指针异常\",{\"1\":{\"162\":1}}],[\"启动过程为入口\",{\"1\":{\"157\":1}}],[\"启动就会同步网关数据\",{\"1\":{\"155\":1,\"157\":1}}],[\"启动服务\",{\"0\":{\"153\":1},\"1\":{\"162\":1}}],[\"启动后不会自动向\",{\"1\":{\"162\":1}}],[\"启动后不会主动向\",{\"1\":{\"162\":1}}],[\"启动后就会从\",{\"1\":{\"159\":1}}],[\"启动后会自动注入\",{\"1\":{\"159\":1}}],[\"启动后在控制台中看到了\",{\"1\":{\"154\":1}}],[\"启动后\",{\"1\":{\"112\":1,\"154\":1}}],[\"启动线程执行\",{\"1\":{\"103\":1}}],[\"启动类项目\",{\"1\":{\"85\":1}}],[\"启动类属性配置\",{\"1\":{\"42\":1}}],[\"启动第二个进程\",{\"1\":{\"72\":1}}],[\"启动项目\",{\"0\":{\"66\":1}}],[\"启动两个服务模拟负载均衡\",{\"0\":{\"60\":1}}],[\"启动soul\",{\"1\":{\"57\":1}}],[\"启动一个服务\",{\"0\":{\"57\":1}}],[\"启动成功后\",{\"1\":{\"54\":1}}],[\"启动\",{\"0\":{\"53\":1,\"54\":1,\"55\":1,\"105\":1,\"151\":1,\"157\":1},\"1\":{\"153\":1,\"162\":3,\"294\":1,\"301\":1}}],[\"启动时\",{\"1\":{\"46\":1,\"110\":1}}],[\"初版\",{\"0\":{\"258\":1}}],[\"初步使用\",{\"0\":{\"196\":1}}],[\"初始化时\",{\"1\":{\"180\":1}}],[\"初始化时构建各类实现\",{\"1\":{\"115\":1}}],[\"初始化说起\",{\"1\":{\"180\":1}}],[\"初始化会执行\",{\"1\":{\"164\":1}}],[\"初始化会调用\",{\"1\":{\"102\":1}}],[\"初始化完成后会执行\",{\"1\":{\"163\":1}}],[\"初始化到数据到\",{\"1\":{\"154\":1}}],[\"初始化过程中\",{\"1\":{\"154\":1}}],[\"初始化\",{\"1\":{\"125\":1,\"131\":1,\"159\":1,\"174\":1}}],[\"初始化实现类\",{\"1\":{\"124\":1}}],[\"初始化后放入缓存中\",{\"1\":{\"122\":1}}],[\"初始化对象\",{\"1\":{\"121\":1}}],[\"初始化前方法里面启动了定时线程\",{\"1\":{\"46\":1}}],[\"初始间隔\",{\"1\":{\"46\":1}}],[\"详情看对应博客介绍\",{\"1\":{\"195\":1}}],[\"详细源码分析\",{\"0\":{\"137\":1}}],[\"固定窗口\",{\"1\":{\"195\":1}}],[\"固需要使用者自己拉取代码\",{\"1\":{\"41\":1}}],[\"计算当前请求的预期通过时间\",{\"1\":{\"217\":1}}],[\"计算出当前剩余的令牌数量\",{\"1\":{\"206\":1}}],[\"计算出上次调用和本次调用之间的时间差\",{\"1\":{\"206\":1}}],[\"计算过期时间\",{\"1\":{\"206\":1}}],[\"计算填充时间\",{\"1\":{\"206\":1}}],[\"计算所有权重是否一样\",{\"1\":{\"88\":1}}],[\"计数器\",{\"1\":{\"195\":1}}],[\"漏斗算法\",{\"1\":{\"195\":1}}],[\"速率高于\",{\"1\":{\"199\":1}}],[\"速率\",{\"1\":{\"195\":1,\"206\":1}}],[\"阅读官方文档\",{\"0\":{\"195\":1}}],[\"梳理\",{\"0\":{\"278\":1},\"1\":{\"191\":1}}],[\"梳理一下abstractsoulplugin\",{\"1\":{\"188\":1}}],[\"失败打印日志\",{\"1\":{\"190\":1}}],[\"失效\",{\"1\":{\"39\":1}}],[\"演示\",{\"1\":{\"189\":1}}],[\"及重试次数\",{\"1\":{\"189\":1}}],[\"及其相关实现类\",{\"1\":{\"188\":1}}],[\"拼装真实调用地址\",{\"1\":{\"189\":1}}],[\"考虑到是介绍一次请求流程的大体逻辑\",{\"1\":{\"188\":1}}],[\"考虑后台缓存与数据库的交互是怎样的\",{\"1\":{\"97\":1,\"99\":1}}],[\"代理\",{\"1\":{\"296\":2,\"298\":1}}],[\"代表获取成功\",{\"1\":{\"206\":1}}],[\"代表执行成功\",{\"1\":{\"203\":1}}],[\"代表执行的结果\",{\"1\":{\"203\":1}}],[\"代表申请的令牌数\",{\"1\":{\"203\":1}}],[\"代表插件成功使用\",{\"1\":{\"199\":1}}],[\"代表全局代理\",{\"1\":{\"188\":1}}],[\"代码\",{\"1\":{\"279\":1}}],[\"代码遵循\",{\"1\":{\"279\":1}}],[\"代码准则\",{\"1\":{\"279\":1}}],[\"代码至上\",{\"1\":{\"275\":1,\"289\":1}}],[\"代码检查\",{\"1\":{\"271\":1}}],[\"代码注释已经打全了\",{\"1\":{\"206\":1}}],[\"代码整体逻辑还是非常明朗的\",{\"1\":{\"206\":1}}],[\"代码零侵入\",{\"1\":{\"33\":1}}],[\"代码刚好执行到这一行\",{\"0\":{\"32\":1}}],[\"故在这里不在多余讨论\",{\"1\":{\"186\":1}}],[\"切割后的方法名\",{\"1\":{\"186\":1}}],[\"切面配置\",{\"1\":{\"42\":1}}],[\"切面有异常的时候\",{\"1\":{\"35\":1}}],[\"切面中\",{\"1\":{\"32\":1}}],[\"切面绑定在一起的\",{\"1\":{\"31\":1}}],[\"切面加了一把锁\",{\"1\":{\"29\":1}}],[\"切面的方式与你的\",{\"1\":{\"29\":1}}],[\"含义\",{\"1\":{\"186\":1}}],[\"本身的相关设置\",{\"1\":{\"286\":1}}],[\"本来这个版本应该是\",{\"1\":{\"284\":1}}],[\"本地模式\",{\"1\":{\"277\":1}}],[\"本原则为组织的试运行指导方案\",{\"1\":{\"259\":1}}],[\"本章只关注\",{\"1\":{\"241\":1}}],[\"本文不作解释\",{\"1\":{\"241\":1}}],[\"本文首先会介绍熔断和流控的场景及意义\",{\"1\":{\"215\":1}}],[\"本文将介绍如何在\",{\"1\":{\"215\":1}}],[\"本人在这里疑惑的有两点\",{\"1\":{\"206\":1}}],[\"本人理解的就是一个类似于\",{\"1\":{\"186\":1}}],[\"本节重点还是看具体的doexcute方法做了哪些事\",{\"1\":{\"203\":1}}],[\"本篇从微内核架构说起\",{\"1\":{\"175\":1}}],[\"本篇分析一下\",{\"1\":{\"162\":1}}],[\"本篇接着上一篇继续跟踪源码分析\",{\"1\":{\"157\":1}}],[\"暂时忽略\",{\"1\":{\"185\":1}}],[\"暂时未发现实际引用地址\",{\"1\":{\"185\":1}}],[\"未跳过的插件为\",{\"1\":{\"185\":12}}],[\"跳转\",{\"1\":{\"213\":1}}],[\"跳转到登录页\",{\"1\":{\"54\":1}}],[\"跳过的插件为\",{\"1\":{\"185\":1}}],[\"部分插件根据鉴权\",{\"1\":{\"185\":1}}],[\"省略非核心代码\",{\"1\":{\"247\":1}}],[\"省略\",{\"1\":{\"185\":1}}],[\"角色\",{\"1\":{\"185\":1}}],[\"越小越先执行\",{\"1\":{\"185\":1}}],[\"枚举类的主要作用是什么呢\",{\"1\":{\"185\":1}}],[\"扩展方式\",{\"1\":{\"305\":1}}],[\"扩展加载器加载目标负载均衡算法\",{\"1\":{\"184\":1}}],[\"扩展大家视野\",{\"1\":{\"4\":1}}],[\"确定随机值落在哪个段上\",{\"1\":{\"183\":1}}],[\"确实收到了插件数据的更新\",{\"1\":{\"160\":1}}],[\"按需打包和加载呢\",{\"1\":{\"305\":1}}],[\"按总权重取随机数\",{\"1\":{\"183\":1}}],[\"按总权重随机细节\",{\"1\":{\"183\":1}}],[\"按服务数随机\",{\"1\":{\"183\":2}}],[\"按照\",{\"1\":{\"120\":1}}],[\"算法\",{\"1\":{\"195\":1}}],[\"算法处理如下\",{\"1\":{\"183\":1}}],[\"算法的负载均衡\",{\"1\":{\"87\":1}}],[\"整合\",{\"1\":{\"272\":1,\"278\":1}}],[\"整合为插件融入了自己的体系中\",{\"1\":{\"218\":1}}],[\"整理出如下表格\",{\"1\":{\"185\":1}}],[\"整理整个\",{\"1\":{\"185\":1}}],[\"整体梳理结果如下图\",{\"1\":{\"185\":1}}],[\"整体看下来\",{\"1\":{\"182\":1}}],[\"整个大项目下存在两个同名的类\",{\"1\":{\"117\":1}}],[\"尝试里程碑发布\",{\"0\":{\"283\":1}}],[\"尝试使用域名格式测试主机是否可达\",{\"1\":{\"182\":1}}],[\"尝试去\",{\"1\":{\"162\":1}}],[\"非\",{\"1\":{\"182\":1,\"258\":1}}],[\"格式如下\",{\"1\":{\"204\":1}}],[\"格式\",{\"1\":{\"182\":1}}],[\"活性检查\",{\"0\":{\"182\":1}}],[\"活动检查\",{\"1\":{\"181\":1}}],[\"活动详情\",{\"0\":{\"11\":1,\"14\":1}}],[\"活动负责人以及主要参与者\",{\"0\":{\"6\":1}}],[\"活动分多期\",{\"1\":{\"5\":1}}],[\"活动开展\",{\"0\":{\"5\":1}}],[\"活动目的\",{\"0\":{\"4\":1}}],[\"活动背景\",{\"0\":{\"3\":1}}],[\"活动介绍\",{\"0\":{\"2\":1}}],[\"活动\",{\"0\":{\"0\":1}}],[\"记录的是上一次调用完成后剩余的令牌数量\",{\"1\":{\"204\":1}}],[\"记录的是上一次调用的时间戳\",{\"1\":{\"204\":1}}],[\"记录存活的服务\",{\"1\":{\"181\":1}}],[\"记住\",{\"1\":{\"29\":1}}],[\"移除\",{\"1\":{\"300\":1}}],[\"移除存活服务散列表相应内容\",{\"1\":{\"181\":1}}],[\"移除管理的连接\",{\"1\":{\"98\":1}}],[\"探活任务\",{\"0\":{\"181\":1}}],[\"探活时间间隔\",{\"1\":{\"180\":1}}],[\"探活时机得从\",{\"1\":{\"180\":1}}],[\"探活时机\",{\"0\":{\"180\":1}}],[\"探活开关\",{\"1\":{\"180\":1}}],[\"探活开关检查\",{\"1\":{\"180\":1}}],[\"探活说起\",{\"1\":{\"179\":1}}],[\"探活分享\",{\"1\":{\"14\":1}}],[\"临时服务散列表\",{\"1\":{\"179\":1}}],[\"主页点\",{\"1\":{\"284\":1}}],[\"主流技术网站和媒体的专属账号和频道等\",{\"1\":{\"259\":1}}],[\"主机探活\",{\"0\":{\"179\":1}}],[\"主要是梳理和解决之前社区反馈的问题\",{\"1\":{\"278\":1}}],[\"主要是因为多了一层转发\",{\"1\":{\"63\":1}}],[\"主要提供了六大核心能力\",{\"1\":{\"231\":1}}],[\"主要以流量为切入点\",{\"1\":{\"218\":1}}],[\"主要为了验证插件是否启用\",{\"1\":{\"198\":1}}],[\"主要做了三个事\",{\"1\":{\"190\":1}}],[\"主要用于对用户的调用行为进行鉴权和认证\",{\"1\":{\"140\":1}}],[\"主要作用是调用其订阅器\",{\"1\":{\"116\":1}}],[\"主要参与者\",{\"0\":{\"8\":1}}],[\"准备规则处理对象\",{\"1\":{\"178\":1}}],[\"生效时机\",{\"1\":{\"177\":1}}],[\"待调用\",{\"1\":{\"175\":1}}],[\"待补\",{\"1\":{\"73\":1,\"86\":3}}],[\"基本条件\",{\"0\":{\"252\":1}}],[\"基本理清了\",{\"1\":{\"175\":1}}],[\"基于时间\",{\"1\":{\"224\":1}}],[\"基于计数\",{\"1\":{\"224\":1}}],[\"基于信号量的隔离\",{\"1\":{\"223\":1}}],[\"基于\",{\"1\":{\"14\":1,\"131\":1,\"191\":1}}],[\"扫描\",{\"1\":{\"174\":1}}],[\"扫描框架的包\",{\"1\":{\"42\":1}}],[\"重新启动\",{\"1\":{\"294\":1}}],[\"重载\",{\"1\":{\"287\":1}}],[\"重构\",{\"1\":{\"286\":1}}],[\"重构部分\",{\"0\":{\"271\":1}}],[\"重定向时\",{\"1\":{\"288\":1}}],[\"重定向源码之前\",{\"1\":{\"213\":1}}],[\"重定向配置\",{\"1\":{\"211\":1}}],[\"重定向\",{\"0\":{\"211\":1}}],[\"重试次数\",{\"1\":{\"190\":1,\"191\":1}}],[\"重试次数传递到serverwebexchange中\",{\"1\":{\"189\":1}}],[\"重试次数和超时时间\",{\"1\":{\"189\":1}}],[\"重试次数以及超时时间\",{\"1\":{\"178\":1}}],[\"重排顺序参见\",{\"1\":{\"174\":1}}],[\"重点关注\",{\"1\":{\"173\":2}}],[\"重点方法execute\",{\"1\":{\"82\":1}}],[\"借鉴了\",{\"1\":{\"223\":1}}],[\"借由插件链\",{\"1\":{\"174\":1}}],[\"借助贯穿整个插件链的\",{\"1\":{\"171\":1}}],[\"借助\",{\"1\":{\"171\":2,\"174\":2}}],[\"交由各个子类实现\",{\"1\":{\"188\":1}}],[\"交由插件链下游进行处理\",{\"1\":{\"184\":1}}],[\"交由子类具体实现\",{\"1\":{\"173\":1}}],[\"交换区\",{\"1\":{\"173\":1}}],[\"取最小操作\",{\"1\":{\"206\":1}}],[\"取下限\",{\"1\":{\"206\":1}}],[\"取值一致\",{\"1\":{\"186\":1}}],[\"取得序号\",{\"1\":{\"173\":1}}],[\"取出响应信息中的\",{\"1\":{\"102\":1}}],[\"取出节点在缓存中的信息\",{\"1\":{\"89\":1}}],[\"完整支持\",{\"1\":{\"300\":1}}],[\"完全的插件化架构设计\",{\"1\":{\"300\":1}}],[\"完全可以只启动\",{\"1\":{\"104\":1}}],[\"完成向下游插件的定向传参\",{\"1\":{\"171\":1}}],[\"常见连接机制主要有\",{\"1\":{\"170\":1}}],[\"常见的实现方法是插件注册表机制\",{\"1\":{\"170\":1}}],[\"常见问题总结\",{\"1\":{\"11\":1}}],[\"设为429\",{\"1\":{\"220\":2}}],[\"设为500\",{\"1\":{\"220\":1}}],[\"设置成你的soul\",{\"1\":{\"301\":1}}],[\"设置无效问题\",{\"1\":{\"288\":1}}],[\"设置相关读写权限\",{\"1\":{\"254\":1}}],[\"设置attachment\",{\"1\":{\"247\":1}}],[\"设置过期key\",{\"1\":{\"206\":1}}],[\"设置重试的场景及重试次数\",{\"1\":{\"190\":1}}],[\"设置失败响应\",{\"1\":{\"190\":1}}],[\"设置请求重试实际\",{\"1\":{\"190\":1}}],[\"设置超时时间\",{\"1\":{\"189\":1,\"190\":2,\"227\":1}}],[\"设置最终服务的的\",{\"1\":{\"184\":1}}],[\"设置为开启\",{\"1\":{\"208\":1}}],[\"设置为\",{\"1\":{\"180\":1}}],[\"设置\",{\"1\":{\"173\":2,\"178\":1,\"190\":1,\"220\":3}}],[\"设置的超时时间是\",{\"1\":{\"30\":1}}],[\"设计关键点\",{\"0\":{\"170\":1}}],[\"灵活性\",{\"1\":{\"169\":1}}],[\"应用名称\",{\"1\":{\"232\":1}}],[\"应用逻辑被分割为独立的插件模块和核心系统\",{\"1\":{\"169\":1}}],[\"应该如何做呢\",{\"1\":{\"302\":1}}],[\"应该为一个可达的服务路径\",{\"1\":{\"211\":1}}],[\"应该是监听元数据变化\",{\"1\":{\"154\":1}}],[\"防火墙等等\",{\"1\":{\"167\":1}}],[\"防止事务悬挂\",{\"1\":{\"270\":1}}],[\"防止二次调用的cas操作\",{\"1\":{\"102\":1}}],[\"防止把请求发送到已经宕机的节点上\",{\"1\":{\"79\":1}}],[\"熔断功能\",{\"1\":{\"300\":1}}],[\"熔断肯定少不了\",{\"1\":{\"297\":1,\"304\":1}}],[\"熔断默认是关闭的\",{\"1\":{\"228\":1}}],[\"熔断器才会开启\",{\"1\":{\"224\":1}}],[\"熔断器开启持续时间\",{\"1\":{\"224\":1}}],[\"熔断超时时间\",{\"1\":{\"224\":1}}],[\"熔断时间窗口\",{\"1\":{\"220\":1}}],[\"熔断时长内\",{\"1\":{\"218\":1}}],[\"熔断判断的依据\",{\"1\":{\"220\":1}}],[\"熔断判定方式和熔断阈值需要结合来看\",{\"1\":{\"219\":1}}],[\"熔断同样需要考虑这种情况\",{\"1\":{\"220\":1}}],[\"熔断期间如果请求该服务则\",{\"1\":{\"219\":1}}],[\"熔断开关表示是否开启熔断\",{\"1\":{\"219\":1}}],[\"熔断窗口大小指的是触发熔断后经过多少秒后进入半开状态\",{\"1\":{\"219\":1}}],[\"熔断窗口大小\",{\"1\":{\"219\":1}}],[\"熔断阈值\",{\"1\":{\"219\":1,\"220\":1}}],[\"熔断降级\",{\"1\":{\"218\":1}}],[\"熔断等规则对请求进行处理\",{\"1\":{\"185\":1}}],[\"熔断\",{\"0\":{\"218\":1,\"219\":1,\"226\":1},\"1\":{\"167\":1,\"222\":1,\"227\":1,\"296\":1,\"303\":1}}],[\"鉴权的相关属性目前不知道具体作用\",{\"1\":{\"186\":2}}],[\"鉴权\",{\"1\":{\"167\":1,\"296\":1,\"297\":1,\"304\":1}}],[\"例如当下游应用由于某种原因导致服务不稳定\",{\"1\":{\"217\":1}}],[\"例如\",{\"1\":{\"163\":1}}],[\"由此验证限流生效\",{\"1\":{\"225\":1}}],[\"由此而言就保证了更改\",{\"1\":{\"201\":1}}],[\"由于一个参数失效\",{\"1\":{\"284\":1}}],[\"由于其驱动本身做了不兼容修改\",{\"1\":{\"284\":1}}],[\"由于本编文章主要追溯\",{\"1\":{\"186\":1}}],[\"由于是第一次启动\",{\"1\":{\"102\":1}}],[\"由探活任务定期主动更新\",{\"1\":{\"182\":1}}],[\"由\",{\"1\":{\"175\":1}}],[\"由监听事件处理类\",{\"1\":{\"163\":1}}],[\"缺一不可\",{\"1\":{\"162\":1}}],[\"缺陷\",{\"0\":{\"129\":1}}],[\"小到\",{\"1\":{\"305\":1}}],[\"小结\",{\"1\":{\"162\":1,\"163\":1,\"164\":1}}],[\"小伙伴们可以想想怎么优化掉这么多\",{\"1\":{\"78\":1}}],[\"终于启动成功\",{\"1\":{\"162\":1}}],[\"必须达到此数量才会计算失败率\",{\"1\":{\"224\":1}}],[\"必须依赖所有的网关配置数据\",{\"1\":{\"162\":1}}],[\"必须需要手动创建命名空间\",{\"1\":{\"162\":1}}],[\"必须具备的能力就是流量分发\",{\"1\":{\"67\":1}}],[\"手动设置超时时间为\",{\"1\":{\"226\":1}}],[\"手动同步数据后\",{\"1\":{\"162\":1}}],[\"手动同步\",{\"1\":{\"162\":1}}],[\"手动调用\",{\"1\":{\"127\":1}}],[\"~\",{\"1\":{\"162\":13}}],[\"参与开源\",{\"1\":{\"305\":1}}],[\"参与方为\",{\"1\":{\"32\":1}}],[\"参数解析器\",{\"1\":{\"296\":1}}],[\"参数定义是一个\",{\"1\":{\"296\":1}}],[\"参数传递的更改\",{\"1\":{\"293\":1}}],[\"参数由\",{\"1\":{\"286\":2}}],[\"参数和上下文信息传递给\",{\"1\":{\"248\":1}}],[\"参数值\",{\"1\":{\"248\":2}}],[\"参数值小于默认值\",{\"1\":{\"225\":1,\"228\":1}}],[\"参数校验\",{\"1\":{\"247\":1,\"248\":2}}],[\"参数列表\",{\"1\":{\"240\":1}}],[\"参数的类型以及参数的值就可以直接调用对应方法了\",{\"1\":{\"240\":1}}],[\"参数及返回值中的所有\",{\"1\":{\"237\":1}}],[\"参数内容注册到\",{\"1\":{\"236\":1}}],[\"参数类型\",{\"1\":{\"232\":1,\"236\":1,\"240\":1,\"248\":2}}],[\"参数配置\",{\"1\":{\"225\":1}}],[\"参数是两个十位时间戳相减得来\",{\"1\":{\"206\":1}}],[\"参考\",{\"0\":{\"250\":1},\"1\":{\"230\":1}}],[\"参考链接\",{\"0\":{\"214\":1}}],[\"参考了他们的文章才解决\",{\"1\":{\"162\":1}}],[\"参照微内核架构来看\",{\"1\":{\"171\":1}}],[\"观察是否会进入此断点\",{\"1\":{\"160\":1}}],[\"客户端封装\",{\"1\":{\"284\":1}}],[\"客户端依赖\",{\"1\":{\"236\":1}}],[\"客户端\",{\"1\":{\"159\":1}}],[\"跟踪\",{\"1\":{\"158\":1}}],[\"跟踪数据同步过程\",{\"0\":{\"158\":1},\"1\":{\"157\":1}}],[\"跟前面的\",{\"1\":{\"79\":1}}],[\"变更\",{\"1\":{\"286\":1}}],[\"变更网关数据\",{\"0\":{\"158\":1},\"1\":{\"157\":1}}],[\"变的更好\",{\"1\":{\"28\":1}}],[\"操作\",{\"0\":{\"157\":1}}],[\"四\",{\"0\":{\"155\":1,\"161\":1,\"172\":1}}],[\"思维导图\",{\"1\":{\"154\":1}}],[\"思考解决\",{\"1\":{\"279\":1}}],[\"思考\",{\"0\":{\"122\":1},\"1\":{\"127\":1}}],[\"建立连接\",{\"1\":{\"154\":1}}],[\"建议和uri条件搭配\",{\"1\":{\"68\":1}}],[\"建议不要使用\",{\"1\":{\"68\":1}}],[\"查看一次\",{\"1\":{\"185\":1}}],[\"查看插件子类\",{\"1\":{\"173\":1}}],[\"查看\",{\"1\":{\"153\":1}}],[\"访问\",{\"1\":{\"301\":1}}],[\"访问请求\",{\"1\":{\"149\":1}}],[\"访问地址\",{\"1\":{\"54\":1}}],[\"异常抛出\",{\"1\":{\"226\":1}}],[\"异常处理\",{\"1\":{\"220\":1}}],[\"异常处理的handler\",{\"1\":{\"220\":1}}],[\"异常数策略\",{\"1\":{\"219\":1}}],[\"异常数\",{\"1\":{\"218\":1}}],[\"异常比例\",{\"1\":{\"218\":1,\"219\":1}}],[\"异常\",{\"1\":{\"149\":1}}],[\"异步执行\",{\"0\":{\"35\":1},\"1\":{\"32\":1}}],[\"判断此次请求是不是泛化调用\",{\"1\":{\"248\":1}}],[\"判断此插件是否未打开\",{\"1\":{\"241\":1}}],[\"判断泛化调用方式\",{\"1\":{\"247\":1}}],[\"判断metadata是否有误\",{\"1\":{\"242\":1}}],[\"判断当前index\",{\"1\":{\"241\":1}}],[\"判断当前令牌数量\",{\"1\":{\"206\":1}}],[\"判断当前的限流配置实例是否和传递的限流实例一致\",{\"1\":{\"201\":1}}],[\"判断中的代码就是基于\",{\"1\":{\"201\":1}}],[\"判断插件是否启用\",{\"1\":{\"188\":1}}],[\"判断服务列表内服务的权重是否一致\",{\"1\":{\"183\":1}}],[\"判断监听类是\",{\"1\":{\"163\":1}}],[\"判断传入的和再次签名的是否一样\",{\"1\":{\"149\":1}}],[\"判断请求时间是否超时\",{\"1\":{\"149\":1}}],[\"判断请求头信息是否正确\",{\"1\":{\"149\":1}}],[\"判断\",{\"1\":{\"149\":1,\"173\":1,\"242\":1}}],[\"判断是否为泛化调用\",{\"1\":{\"247\":1}}],[\"判断是否存在\",{\"1\":{\"201\":1}}],[\"判断是否需要重新加载redis连接值\",{\"1\":{\"201\":1}}],[\"判断是否需要调过\",{\"1\":{\"174\":1}}],[\"判断是否跳过本次处理\",{\"1\":{\"173\":1}}],[\"判断是否该返回自身\",{\"1\":{\"126\":1}}],[\"判断是否要更新缓存\",{\"1\":{\"102\":1}}],[\"判断是否修改\",{\"1\":{\"102\":1}}],[\"判断是否是同一个节点\",{\"1\":{\"79\":1}}],[\"禁用\",{\"1\":{\"147\":1}}],[\"签名错误的返回\",{\"1\":{\"147\":1}}],[\"填写错误的返回\",{\"1\":{\"147\":1}}],[\"添加锁构造\",{\"1\":{\"287\":1}}],[\"添加\",{\"1\":{\"273\":1,\"295\":1}}],[\"添加限流选择器\",{\"0\":{\"198\":1}}],[\"添加了\",{\"1\":{\"164\":1}}],[\"添加规则器\",{\"1\":{\"144\":1}}],[\"添加选择器\",{\"1\":{\"144\":1}}],[\"介绍\",{\"0\":{\"139\":1,\"140\":1}}],[\"介绍以及\",{\"1\":{\"11\":1}}],[\"放在\",{\"1\":{\"273\":2}}],[\"放入\",{\"1\":{\"186\":1,\"287\":2}}],[\"放入入参\",{\"1\":{\"137\":1}}],[\"放到类属性\",{\"1\":{\"110\":1}}],[\"读取时\",{\"1\":{\"288\":1}}],[\"读取\",{\"1\":{\"137\":1,\"159\":1}}],[\"读出\",{\"1\":{\"134\":1}}],[\"构造方法\",{\"1\":{\"174\":1}}],[\"构造\",{\"1\":{\"137\":3}}],[\"构建时支持自定义参数\",{\"1\":{\"287\":1}}],[\"构建resilience4jconf对象\",{\"1\":{\"227\":1}}],[\"构建实现了\",{\"1\":{\"115\":1}}],[\"构建各类监听器\",{\"1\":{\"114\":1}}],[\"构建\",{\"1\":{\"103\":1}}],[\"构建一个请求对象空壳\",{\"1\":{\"90\":1}}],[\"双重锁\",{\"1\":{\"137\":1}}],[\"命中则直接返回要找的类\",{\"1\":{\"137\":1}}],[\"命令\",{\"1\":{\"52\":1}}],[\"理解为第二层缓存\",{\"1\":{\"137\":1}}],[\"理解为第一层缓存\",{\"1\":{\"137\":1}}],[\"理解为标识\",{\"1\":{\"137\":1}}],[\"理论上来说\",{\"1\":{\"67\":1}}],[\"外层调用会包装到\",{\"1\":{\"134\":1}}],[\"外层调用仅需迭代所有\",{\"1\":{\"127\":1}}],[\"形式为\",{\"1\":{\"137\":1}}],[\"形式的\",{\"1\":{\"131\":1}}],[\"形式保存在\",{\"1\":{\"79\":1}}],[\"迭代时做过的事情\",{\"1\":{\"131\":1}}],[\"迭代时实际会\",{\"1\":{\"124\":1}}],[\"迭代器版实现\",{\"1\":{\"131\":1}}],[\"版的\",{\"1\":{\"130\":1}}],[\"版本支持用户自定义插件开发\",{\"1\":{\"293\":1}}],[\"版本的\",{\"1\":{\"294\":1}}],[\"版本的管理后台\",{\"1\":{\"294\":1}}],[\"版本的建议\",{\"0\":{\"293\":1}}],[\"版本的后台管理中\",{\"1\":{\"291\":1}}],[\"版本中是通过\",{\"1\":{\"292\":1}}],[\"版本为\",{\"1\":{\"284\":1}}],[\"版本对使用者\",{\"0\":{\"266\":1}}],[\"版本发布\",{\"0\":{\"256\":1}}],[\"版本\",{\"0\":{\"264\":1,\"291\":1,\"294\":2},\"1\":{\"23\":1,\"252\":1,\"265\":1,\"280\":1,\"296\":1}}],[\"增强\",{\"1\":{\"300\":1}}],[\"增强型搜索\",{\"0\":{\"131\":1}}],[\"增强型\",{\"1\":{\"129\":1}}],[\"增加构造\",{\"1\":{\"287\":1}}],[\"增加系统属性\",{\"1\":{\"287\":1}}],[\"增加自定义标题行行号\",{\"1\":{\"287\":1}}],[\"增加对\",{\"1\":{\"287\":1}}],[\"增加规则\",{\"1\":{\"218\":1}}],[\"增加获取鉴权服务\",{\"0\":{\"145\":1}}],[\"增加\",{\"1\":{\"46\":1,\"286\":2,\"287\":13,\"288\":1}}],[\"虽然并不懂响应式编程\",{\"1\":{\"190\":1}}],[\"虽然子类少的使用没什么影响\",{\"1\":{\"129\":1}}],[\"虽然这样可以使用\",{\"1\":{\"127\":1}}],[\"虽然类型不同\",{\"1\":{\"108\":1}}],[\"该错提示服务已阻塞\",{\"1\":{\"220\":1}}],[\"该错提示客户端再次尝试\",{\"1\":{\"220\":1}}],[\"该名称对应1个流控或熔断策略\",{\"1\":{\"220\":1}}],[\"该模式是\",{\"1\":{\"219\":1}}],[\"该简版省掉了很多非核心流程\",{\"1\":{\"218\":1}}],[\"该方法是获取\",{\"1\":{\"204\":1}}],[\"该方法如下\",{\"1\":{\"203\":1}}],[\"该方法会调用后台拉取数据\",{\"1\":{\"102\":1}}],[\"该实现的\",{\"1\":{\"191\":1}}],[\"该类是数据同步过程中最终会影响的类\",{\"1\":{\"188\":1}}],[\"该类加载时会在静态块中\",{\"1\":{\"127\":1}}],[\"该抽象类结构如下\",{\"1\":{\"173\":1}}],[\"该插件接口结构如下\",{\"1\":{\"173\":1}}],[\"驱动中\",{\"1\":{\"129\":1}}],[\"驱动实选方案是路径头匹配\",{\"1\":{\"126\":1}}],[\"驱动包\",{\"0\":{\"124\":1}}],[\"头上传递\",{\"1\":{\"292\":1}}],[\"头\",{\"1\":{\"126\":1}}],[\"资源文件的路径位置\",{\"1\":{\"130\":1}}],[\"资源文件\",{\"1\":{\"126\":1,\"134\":1,\"137\":1}}],[\"资源文件中我们配置的信息\",{\"1\":{\"133\":1}}],[\"资源文件中\",{\"1\":{\"124\":1}}],[\"资源文件中的各个实现类没有区分度\",{\"1\":{\"122\":1}}],[\"归纳几点\",{\"1\":{\"126\":1}}],[\"呢\",{\"1\":{\"125\":1,\"179\":1}}],[\"约定大于配置的思想\",{\"1\":{\"126\":1}}],[\"约定大于配置\",{\"0\":{\"125\":1},\"1\":{\"125\":1}}],[\"筛选规则\",{\"1\":{\"188\":1}}],[\"筛选选择器\",{\"1\":{\"188\":1}}],[\"筛选方式是交由\",{\"1\":{\"126\":1}}],[\"筛选工作其实在实现类自身的\",{\"1\":{\"125\":1}}],[\"筛选\",{\"0\":{\"125\":1},\"1\":{\"125\":1,\"303\":1}}],[\"管理后台\",{\"1\":{\"270\":1}}],[\"管理后台的具体配置如下\",{\"1\":{\"86\":1}}],[\"管理平台在\",{\"1\":{\"218\":1}}],[\"管理器中\",{\"1\":{\"124\":1}}],[\"都落后挺多的\",{\"1\":{\"305\":1}}],[\"都会走到核心方法\",{\"1\":{\"227\":1}}],[\"都会产生新的\",{\"1\":{\"121\":1}}],[\"都需要实现其\",{\"1\":{\"124\":1}}],[\"都是有\",{\"1\":{\"220\":1}}],[\"都是按照项目默认启动的\",{\"1\":{\"105\":1}}],[\"都是由各自的\",{\"1\":{\"84\":1}}],[\"都是默认的配置\",{\"1\":{\"29\":1}}],[\"反复\",{\"1\":{\"279\":1}}],[\"反复遍历还是阻塞等待\",{\"1\":{\"97\":1,\"99\":1}}],[\"反序列化\",{\"1\":{\"248\":1}}],[\"反序列化泛化参数\",{\"1\":{\"248\":1}}],[\"反应式编程语法\",{\"1\":{\"174\":1}}],[\"反射\",{\"1\":{\"127\":1}}],[\"反射加载对应路径并生成\",{\"1\":{\"122\":1}}],[\"反射得到\",{\"1\":{\"121\":1}}],[\"写完这些分析我们再来看如果实现个简单的\",{\"1\":{\"127\":1}}],[\"写到这我有个非常疑惑的地方\",{\"1\":{\"122\":1}}],[\"写入到实例属性\",{\"1\":{\"121\":1}}],[\"写了这么多\",{\"1\":{\"78\":1}}],[\"肯定需要迭代器完成实现类的搜索和初始化\",{\"1\":{\"121\":1}}],[\"肯定是更符合开闭原则\",{\"1\":{\"119\":1}}],[\"肯定是没看源码\",{\"1\":{\"32\":1}}],[\"真正迭代调用返回的对象时\",{\"1\":{\"121\":1}}],[\"找寻到实际返回类\",{\"1\":{\"121\":1}}],[\"找到监听事件的代码\",{\"1\":{\"109\":1}}],[\"找到调用类\",{\"1\":{\"98\":1}}],[\"找到大于此hash值的位置\",{\"1\":{\"87\":1}}],[\"找到\",{\"1\":{\"76\":1,\"98\":1,\"121\":1}}],[\"找到对应的\",{\"1\":{\"46\":1}}],[\"入眼最醒目的就是之前我们按照规范放置资源文件的目录\",{\"1\":{\"121\":1}}],[\"入库\",{\"1\":{\"78\":1}}],[\"返回\",{\"1\":{\"288\":1}}],[\"返回结果等等\",{\"1\":{\"296\":1}}],[\"返回结果是\",{\"1\":{\"240\":1}}],[\"返回结果\",{\"0\":{\"245\":1},\"1\":{\"230\":1}}],[\"返回值改为\",{\"1\":{\"286\":1}}],[\"返回值\",{\"1\":{\"205\":1,\"240\":1}}],[\"返回的错误信息\",{\"1\":{\"203\":1}}],[\"返回的都是同一个对象\",{\"1\":{\"120\":1}}],[\"返回前台\",{\"1\":{\"191\":1}}],[\"返回一个最终选择的服务信息\",{\"1\":{\"184\":1}}],[\"返回一个节点\",{\"1\":{\"118\":1}}],[\"马在跑\",{\"1\":{\"120\":1}}],[\"狗在跑\",{\"1\":{\"120\":1}}],[\"书中也有个非常形象的脑图\",{\"1\":{\"119\":1}}],[\"要使用\",{\"1\":{\"304\":1}}],[\"要和\",{\"1\":{\"296\":1}}],[\"要稳重\",{\"1\":{\"284\":1}}],[\"要实现网关自身接口转发\",{\"1\":{\"212\":1}}],[\"要想在运行时动态地给一个接口添加实现\",{\"1\":{\"119\":1}}],[\"要自增到很久之后\",{\"1\":{\"89\":1}}],[\"内嵌事务调用的问题\",{\"1\":{\"264\":1}}],[\"内存\",{\"1\":{\"303\":1}}],[\"内存中\",{\"1\":{\"232\":1}}],[\"内存里面\",{\"1\":{\"66\":1}}],[\"内部接口转发\",{\"1\":{\"212\":1}}],[\"内部使用\",{\"1\":{\"183\":1}}],[\"内部维护了两份散列表\",{\"1\":{\"179\":1}}],[\"内部通过\",{\"1\":{\"179\":1}}],[\"内部持有\",{\"1\":{\"178\":1}}],[\"内置丰富的插件支持\",{\"1\":{\"167\":1}}],[\"内置的一种服务提供发现功能\",{\"1\":{\"119\":1}}],[\"章\",{\"1\":{\"119\":1}}],[\"来提供接口给别人调用吗\",{\"1\":{\"297\":1,\"304\":1}}],[\"来进行流量过滤\",{\"1\":{\"303\":1}}],[\"来进行后台的查看等等\",{\"1\":{\"296\":1}}],[\"来进行具体设置如下图\",{\"1\":{\"218\":1}}],[\"来考虑就是每秒达到多少时开始流控\",{\"1\":{\"217\":1}}],[\"来监控流量\",{\"1\":{\"217\":1}}],[\"来源于数据同步\",{\"1\":{\"182\":1}}],[\"来表明顺序\",{\"1\":{\"154\":1}}],[\"来选择具体的实现类\",{\"1\":{\"118\":1}}],[\"来筛选流量\",{\"1\":{\"68\":2}}],[\"指定\",{\"1\":{\"273\":1}}],[\"指定和修改规则\",{\"1\":{\"259\":1}}],[\"指出\",{\"1\":{\"258\":1}}],[\"指代代理所有的接口\",{\"1\":{\"188\":1}}],[\"指继承它的子类来自与各个可插播插件\",{\"1\":{\"117\":1}}],[\"指元数据的类型为插件类\",{\"1\":{\"117\":1}}],[\"另一个进行更新\",{\"1\":{\"304\":1}}],[\"另一个模块不需要\",{\"1\":{\"304\":1}}],[\"另一个在\",{\"1\":{\"117\":1}}],[\"另一种情况是在整个服务体系中有一些核心服务\",{\"1\":{\"216\":1}}],[\"另一种是把\",{\"1\":{\"207\":1}}],[\"另外参考\",{\"1\":{\"129\":1}}],[\"另外一个\",{\"1\":{\"108\":1}}],[\"创建时间\",{\"1\":{\"232\":1}}],[\"创建懒加载迭代器\",{\"1\":{\"121\":1}}],[\"创建\",{\"1\":{\"116\":1}}],[\"创建了一个定时的线程池\",{\"1\":{\"46\":1}}],[\"列举几个\",{\"1\":{\"278\":2}}],[\"列表注入到网关的插件链\",{\"1\":{\"171\":1}}],[\"列表\",{\"1\":{\"115\":1}}],[\"列出个大概\",{\"1\":{\"85\":1}}],[\"订阅器的\",{\"1\":{\"116\":1}}],[\"订阅器\",{\"1\":{\"115\":1}}],[\"收集所有注册为\",{\"1\":{\"115\":1,\"116\":1}}],[\"信息和加载器\",{\"1\":{\"121\":1}}],[\"信息\",{\"1\":{\"114\":1,\"184\":1}}],[\"信息给持有会话\",{\"1\":{\"96\":1}}],[\"维护所有连接后台的\",{\"1\":{\"114\":1}}],[\"此次版本采用里程碑方式发布\",{\"1\":{\"284\":1}}],[\"此次是\",{\"1\":{\"112\":1}}],[\"此策略核心思路是以固定间隔时间让请求通过\",{\"1\":{\"217\":1}}],[\"此场景和第一种场景有略微不同\",{\"1\":{\"216\":1}}],[\"此处对应页面的如下\",{\"1\":{\"188\":1}}],[\"此处共涉及到两个配置参数\",{\"1\":{\"180\":1}}],[\"此处默认\",{\"1\":{\"180\":1}}],[\"此处存疑\",{\"1\":{\"112\":1}}],[\"此类实现了\",{\"1\":{\"154\":1}}],[\"此类\",{\"1\":{\"154\":1}}],[\"此时\",{\"1\":{\"175\":1}}],[\"此时是\",{\"1\":{\"108\":1}}],[\"此时我们继续测试\",{\"1\":{\"72\":1}}],[\"种模式\",{\"1\":{\"272\":1}}],[\"种服务异常判定方式\",{\"1\":{\"219\":1}}],[\"种同步数据策略\",{\"1\":{\"110\":1}}],[\"种类型\",{\"1\":{\"80\":1,\"108\":1}}],[\"覆写了\",{\"1\":{\"110\":1}}],[\"封装lua脚本执行所需的参数\",{\"1\":{\"203\":1}}],[\"封装成一个对应\",{\"1\":{\"201\":1}}],[\"封装了一个requestbodyspec对象\",{\"1\":{\"190\":1}}],[\"封装了一层\",{\"1\":{\"108\":1}}],[\"封装响应信息\",{\"1\":{\"91\":1}}],[\"哪个接口\",{\"1\":{\"106\":1}}],[\"篇\",{\"0\":{\"113\":1}}],[\"篇还有印象的话\",{\"1\":{\"108\":1}}],[\"篇文章\",{\"1\":{\"104\":1}}],[\"篇中\",{\"1\":{\"104\":1}}],[\"范金鹏\",{\"1\":{\"104\":1}}],[\"网络\",{\"1\":{\"103\":1}}],[\"网关是支持\",{\"1\":{\"305\":1}}],[\"网关是使用响应式编程实现的\",{\"1\":{\"304\":1}}],[\"网关刚开始数据同步只支持\",{\"1\":{\"305\":1}}],[\"网关就很好了解决了以上所有问题\",{\"1\":{\"304\":1}}],[\"网关有哪些使用场景\",{\"0\":{\"304\":1}}],[\"网关使用\",{\"1\":{\"303\":1}}],[\"网关内部\",{\"1\":{\"303\":1}}],[\"网关节点的\",{\"1\":{\"303\":1}}],[\"网关节点对于同一个资源的流控是独立但相同的\",{\"1\":{\"220\":1}}],[\"网关根据路由规则来进行调用\",{\"1\":{\"296\":1}}],[\"网关根据消息修改数据\",{\"1\":{\"79\":1}}],[\"网关到底可以在什么场景下能发挥大作用\",{\"1\":{\"296\":1}}],[\"网关对你的业务系统进行调用的时候\",{\"1\":{\"296\":1}}],[\"网关默认的返回结果是\",{\"1\":{\"296\":1}}],[\"网关在\",{\"1\":{\"296\":1}}],[\"网关在对目标服务进行代理调用的时候\",{\"1\":{\"207\":1}}],[\"网关要发起对它的调用\",{\"1\":{\"296\":1}}],[\"网关程序我们知道其实是按照上面的顺序一个一个的进行判断调用\",{\"1\":{\"241\":1}}],[\"网关通过\",{\"1\":{\"238\":1}}],[\"网关目前使用方式\",{\"0\":{\"238\":1}}],[\"网关中\",{\"1\":{\"231\":1}}],[\"网关中定义了一条插件链\",{\"1\":{\"172\":1}}],[\"网关提供限流和熔断\",{\"1\":{\"228\":1}}],[\"网关添加依赖\",{\"1\":{\"224\":1}}],[\"网关可以分布式部署\",{\"1\":{\"220\":1}}],[\"网关封装了优秀的流控组件\",{\"1\":{\"220\":1}}],[\"网关部署了\",{\"1\":{\"220\":1}}],[\"网关会保证该服务的\",{\"1\":{\"220\":1}}],[\"网关会直接报错返回\",{\"1\":{\"220\":1}}],[\"网关会直接返回请求错误\",{\"1\":{\"219\":1}}],[\"网关会进行\",{\"1\":{\"211\":1}}],[\"网关基于\",{\"1\":{\"213\":1}}],[\"网关自从去年\",{\"1\":{\"296\":1}}],[\"网关自身接口转发\",{\"0\":{\"212\":1}}],[\"网关自己监听到变更再做的同步\",{\"1\":{\"96\":1}}],[\"网关同步数据整体流程时\",{\"1\":{\"201\":1}}],[\"网关同步的注册信息\",{\"1\":{\"153\":1}}],[\"网关插件列表处\",{\"1\":{\"198\":1}}],[\"网关系统管理\",{\"1\":{\"197\":1}}],[\"网关发布\",{\"0\":{\"291\":1}}],[\"网关发起的\",{\"1\":{\"191\":1}}],[\"网关发送数据改动信息\",{\"1\":{\"81\":2}}],[\"网关发送\",{\"1\":{\"80\":1}}],[\"网关里默认支持三种负载均衡策略\",{\"1\":{\"183\":1}}],[\"网关强大的扩展能力\",{\"1\":{\"173\":1}}],[\"网关数据\",{\"1\":{\"164\":2}}],[\"网关数据同步原理\",{\"1\":{\"155\":1}}],[\"网关数据变动调用链\",{\"0\":{\"116\":1}}],[\"网关服务的数量的\",{\"1\":{\"220\":1}}],[\"网关服务启动\",{\"1\":{\"153\":1}}],[\"网关服务配置\",{\"1\":{\"152\":1}}],[\"网关如何建立\",{\"0\":{\"115\":1}}],[\"网关为什么这么做\",{\"1\":{\"103\":1}}],[\"网关端监听的流程实现都在\",{\"1\":{\"103\":1}}],[\"网关端长轮询的流程总体也分两个模块\",{\"1\":{\"101\":1}}],[\"网关轮询监听变化\",{\"0\":{\"103\":1}}],[\"网关启动时\",{\"1\":{\"102\":1,\"103\":1}}],[\"网关启动时拉取数据\",{\"0\":{\"102\":1}}],[\"网关启动后\",{\"1\":{\"102\":1}}],[\"网关请求后台时后台并不是立即返回响应\",{\"1\":{\"99\":1}}],[\"网关信息模式切换\",{\"1\":{\"94\":1}}],[\"网关源码分析\",{\"1\":{\"94\":1}}],[\"网关注册逻辑就分析完了\",{\"1\":{\"81\":1}}],[\"网关做了什么处理也需要后续分析\",{\"1\":{\"81\":1}}],[\"网关后台服务启动\",{\"1\":{\"153\":1}}],[\"网关后\",{\"1\":{\"81\":1,\"104\":1}}],[\"网关建立的\",{\"1\":{\"79\":1}}],[\"网关\",{\"0\":{\"78\":1,\"79\":1,\"154\":1},\"1\":{\"81\":1,\"104\":1,\"213\":1,\"227\":1,\"296\":2,\"304\":1,\"305\":1}}],[\"网关管理的接口注册\",{\"1\":{\"75\":1}}],[\"网关时\",{\"1\":{\"75\":1}}],[\"网关的特性\",{\"0\":{\"303\":1}}],[\"网关的选择器\",{\"1\":{\"296\":1}}],[\"网关的全路径\",{\"1\":{\"186\":1}}],[\"网关的负载均衡如何执行\",{\"1\":{\"86\":1}}],[\"网关的系统重启\",{\"1\":{\"79\":1}}],[\"网关的灵魂所在\",{\"1\":{\"67\":1}}],[\"网关的后台管理系统\",{\"1\":{\"54\":1}}],[\"网关最核心的设计思想\",{\"1\":{\"67\":1}}],[\"啥变化也没有\",{\"1\":{\"103\":1}}],[\"什么是\",{\"0\":{\"223\":1},\"1\":{\"222\":1}}],[\"什么时候加载插件\",{\"1\":{\"170\":1}}],[\"什么意思呢\",{\"1\":{\"103\":1}}],[\"什么你在打断电调试\",{\"1\":{\"32\":1}}],[\"拉取后台对应类型的数据\",{\"1\":{\"103\":1}}],[\"拉取后台数据\",{\"1\":{\"102\":1}}],[\"死循环来轮询\",{\"1\":{\"103\":1}}],[\"若作者执意退出\",{\"1\":{\"258\":1}}],[\"若接下来的少量请求没有报错且响应时间合理则服务恢复\",{\"1\":{\"218\":1}}],[\"若预期的通过时间超出最大排队时长\",{\"1\":{\"217\":1}}],[\"若权重不一致\",{\"1\":{\"183\":2}}],[\"若为\",{\"1\":{\"182\":1}}],[\"若存活数大于\",{\"1\":{\"181\":1}}],[\"若探活开关打开\",{\"1\":{\"180\":1}}],[\"若更新则调用各类型的\",{\"1\":{\"102\":1}}],[\"若一个都没有也不会报错\",{\"1\":{\"84\":1}}],[\"利用的是\",{\"1\":{\"99\":1}}],[\"消息模式\",{\"1\":{\"170\":1}}],[\"消耗肯定不是个好设计\",{\"1\":{\"99\":1}}],[\"消费线程数量\",{\"1\":{\"32\":1}}],[\"白白的\",{\"1\":{\"99\":1}}],[\"针对的值不同\",{\"1\":{\"186\":1}}],[\"针对于请求的处理入库在defaultsoulpluginchain\",{\"1\":{\"185\":1}}],[\"针对同一个后台会请求多次\",{\"1\":{\"102\":1}}],[\"针对第二种场景通常的处理方式是设置服务熔断\",{\"1\":{\"218\":1}}],[\"针对第一种场景我们通常的做法是进行流量控制\",{\"1\":{\"217\":1}}],[\"针对第\",{\"1\":{\"99\":3}}],[\"针对高并发时候的参数配置调优\",{\"1\":{\"32\":1}}],[\"疑惑\",{\"1\":{\"99\":1}}],[\"塞入响应信息并释放掉\",{\"1\":{\"99\":1}}],[\"立即调用线程池\",{\"1\":{\"99\":1}}],[\"路径描述\",{\"1\":{\"232\":1}}],[\"路径\",{\"1\":{\"232\":1}}],[\"路径指代调用到\",{\"1\":{\"186\":1}}],[\"路径供网关调用并监听数据变化\",{\"1\":{\"98\":1}}],[\"路由选择\",{\"1\":{\"191\":1}}],[\"路由选择插件\",{\"0\":{\"187\":1}}],[\"路由\",{\"1\":{\"67\":1}}],[\"暴露\",{\"1\":{\"98\":1}}],[\"除了包装注入响应信息\",{\"1\":{\"98\":1}}],[\"除非你的集群同时一下挂掉\",{\"1\":{\"31\":1}}],[\"被代理的服务使用提供的\",{\"1\":{\"236\":1}}],[\"被调用时\",{\"1\":{\"127\":1}}],[\"被调用处\",{\"1\":{\"98\":1}}],[\"被上层调用\",{\"1\":{\"82\":1}}],[\"阻塞队列\",{\"1\":{\"98\":1}}],[\"很简单对吧\",{\"1\":{\"296\":1}}],[\"很有道德负担\",{\"1\":{\"284\":1}}],[\"很有可能就是网关被\",{\"1\":{\"98\":1}}],[\"很多后台管理系统还有权限的划分\",{\"1\":{\"296\":1}}],[\"很多功能都是高度自定义\",{\"1\":{\"296\":1}}],[\"很多多的规划\",{\"1\":{\"282\":1}}],[\"很多东西只是简单的描述\",{\"1\":{\"45\":1}}],[\"很高兴来了这里季节\",{\"1\":{\"281\":1}}],[\"很明显\",{\"1\":{\"173\":1}}],[\"像是标记已完成了响应\",{\"1\":{\"98\":1}}],[\"且插件开启时\",{\"1\":{\"177\":1}}],[\"且极易扩展\",{\"1\":{\"167\":1}}],[\"且阻塞队列的对应请求对象被剔除\",{\"1\":{\"99\":1}}],[\"且调用方法\",{\"1\":{\"98\":1}}],[\"且后续资金用途仅限于\",{\"1\":{\"24\":1}}],[\"响应迟延等\",{\"1\":{\"300\":1}}],[\"响应式编程绝对是未来\",{\"1\":{\"304\":1}}],[\"响应式编程\",{\"1\":{\"241\":1}}],[\"响应式编程介绍\",{\"1\":{\"11\":1}}],[\"响应延迟增加\",{\"1\":{\"217\":1}}],[\"响应了\",{\"1\":{\"98\":1}}],[\"遍历每个参数\",{\"1\":{\"247\":1}}],[\"遍历所有的监听类对监听事件进行处理\",{\"1\":{\"163\":1}}],[\"遍历所有的监听者进行数据同步处理\",{\"1\":{\"154\":1}}],[\"遍历\",{\"1\":{\"98\":1}}],[\"意味着吞吐量下降和更多的线程数占用\",{\"1\":{\"217\":1}}],[\"意味着使用了它的\",{\"1\":{\"98\":1}}],[\"意义和目标\",{\"0\":{\"4\":1}}],[\"围绕我们的思考\",{\"1\":{\"98\":1}}],[\"得到对应标识\",{\"1\":{\"135\":1}}],[\"得到子类的执行结果\",{\"1\":{\"120\":1}}],[\"得到一个子类\",{\"1\":{\"118\":1}}],[\"得到变化的类型\",{\"1\":{\"103\":1}}],[\"得到监听请求的响应结果\",{\"1\":{\"103\":1}}],[\"得到唯一节点\",{\"1\":{\"85\":1}}],[\"得出是否有数据修改\",{\"1\":{\"97\":1,\"99\":1}}],[\"没有超时继续调用\",{\"1\":{\"149\":1}}],[\"没有正确利用到它的缓存机制\",{\"1\":{\"129\":1}}],[\"没有甄别作用\",{\"1\":{\"125\":1}}],[\"没有就阻塞一定时间\",{\"1\":{\"97\":1}}],[\"没错就是上面说的\",{\"1\":{\"46\":1}}],[\"没错\",{\"1\":{\"46\":1}}],[\"住请求最大\",{\"1\":{\"99\":1}}],[\"住的请求会被释放\",{\"1\":{\"99\":1}}],[\"住的请求会加入到阻塞队列中作为内存缓存\",{\"1\":{\"99\":1}}],[\"住的请求释放\",{\"1\":{\"98\":1}}],[\"住的请求\",{\"1\":{\"98\":1,\"99\":1}}],[\"住之后\",{\"1\":{\"97\":1,\"99\":1}}],[\"住时检查数据是否有变化\",{\"1\":{\"97\":1}}],[\"住\",{\"1\":{\"97\":1}}],[\"正在开发\",{\"1\":{\"280\":1}}],[\"正在接入apache\",{\"1\":{\"280\":1}}],[\"正向代理插件\",{\"1\":{\"177\":1}}],[\"正是如此丰富的插件支撑起了\",{\"1\":{\"173\":1}}],[\"正常思路是通过\",{\"1\":{\"217\":1}}],[\"正常使用时\",{\"1\":{\"125\":1}}],[\"正常的长轮询实现应该由网关主动请求\",{\"1\":{\"97\":1}}],[\"正则匹配\",{\"1\":{\"68\":1}}],[\"举例\",{\"1\":{\"96\":1,\"273\":2}}],[\"举个列子\",{\"1\":{\"296\":1,\"305\":1}}],[\"举个例子\",{\"1\":{\"119\":1}}],[\"举个\",{\"1\":{\"95\":1}}],[\"之所以能做到这种增强型搜索\",{\"1\":{\"132\":1}}],[\"之后将会开启新篇章一步步揭开\",{\"1\":{\"191\":1}}],[\"之后\",{\"1\":{\"96\":1}}],[\"之前有些\",{\"1\":{\"305\":1}}],[\"之前有说过\",{\"1\":{\"46\":1}}],[\"之前依旧梳理过abstractsoulplugin\",{\"1\":{\"203\":1}}],[\"之前我觉得它和工厂方法很类似但比它有优势\",{\"1\":{\"122\":1}}],[\"之前的启动里分析了这块的代码\",{\"1\":{\"103\":1}}],[\"之前介绍了\",{\"1\":{\"46\":1}}],[\"之前\",{\"1\":{\"29\":1}}],[\"钩子\",{\"1\":{\"95\":1}}],[\"通常用于框架集成\",{\"1\":{\"237\":1}}],[\"通常用于实现基于产品的应用\",{\"1\":{\"169\":1}}],[\"通常由核心系统制定连接规范\",{\"1\":{\"170\":1}}],[\"通信必须经过核心系统\",{\"1\":{\"170\":1}}],[\"通信类\",{\"1\":{\"115\":1}}],[\"通信的入口类\",{\"1\":{\"116\":1}}],[\"通信的入口\",{\"1\":{\"115\":1}}],[\"通知规则元数据变更\",{\"1\":{\"116\":1}}],[\"通知选择器元数据变更\",{\"1\":{\"116\":1}}],[\"通知插件元数据变更\",{\"1\":{\"116\":1}}],[\"通知\",{\"1\":{\"95\":1,\"174\":1}}],[\"通过数据同步方案\",{\"1\":{\"232\":1}}],[\"通过链式机制执行\",{\"1\":{\"227\":1}}],[\"通过什么角度控制流量\",{\"1\":{\"217\":1}}],[\"通过阅读上述代码已经知晓\",{\"1\":{\"205\":1}}],[\"通过官方文档的阅读我们得知了ratelimiterplugin的两个核心点速率\",{\"1\":{\"195\":1}}],[\"通过上述代码梳理完成后大体逻辑如下\",{\"1\":{\"189\":1}}],[\"通过规则对应的负载均衡策略选择一个地址\",{\"1\":{\"189\":1}}],[\"通过追溯源码得知divideplugin\",{\"1\":{\"188\":1}}],[\"通过负载均衡算法挑选最终分发的服务\",{\"1\":{\"183\":1}}],[\"通过在\",{\"1\":{\"174\":1}}],[\"通过的返回\",{\"1\":{\"147\":1}}],[\"通过检查它各个方法的调用处\",{\"1\":{\"130\":1}}],[\"通过匹配路径头做筛选\",{\"1\":{\"125\":1}}],[\"通过选择器id\",{\"1\":{\"85\":1}}],[\"通过代码分析\",{\"1\":{\"83\":1}}],[\"通过\",{\"0\":{\"238\":1,\"239\":1},\"1\":{\"66\":1,\"71\":1,\"80\":1,\"81\":2,\"99\":1,\"122\":1,\"136\":1,\"157\":1,\"182\":1,\"220\":1,\"230\":2,\"287\":1}}],[\"通过异步\",{\"1\":{\"29\":1}}],[\"事务定时恢复\",{\"1\":{\"278\":1}}],[\"事务日志支持\",{\"1\":{\"278\":1}}],[\"事务日志序列化异常\",{\"1\":{\"278\":1}}],[\"事务日志序列化模块\",{\"1\":{\"277\":1}}],[\"事务日志存储模块\",{\"1\":{\"277\":1}}],[\"事务日志存储结构的更改\",{\"1\":{\"273\":1}}],[\"事务运行状态\",{\"1\":{\"277\":1}}],[\"事务未能正确恢复\",{\"1\":{\"272\":1}}],[\"事务异常回滚\",{\"1\":{\"270\":1}}],[\"事务自动恢复\",{\"1\":{\"33\":1}}],[\"事件进行处理\",{\"1\":{\"163\":1}}],[\"事件\",{\"1\":{\"155\":1,\"157\":1,\"158\":1,\"163\":2}}],[\"事件发布后\",{\"1\":{\"154\":1}}],[\"事件类型是\",{\"1\":{\"154\":1}}],[\"事件转发器\",{\"1\":{\"154\":1}}],[\"事件变动时\",{\"1\":{\"95\":1}}],[\"集成了网关\",{\"1\":{\"296\":1}}],[\"集合里\",{\"1\":{\"112\":1}}],[\"集合\",{\"1\":{\"95\":1,\"131\":1}}],[\"集群高性能的关键之一\",{\"1\":{\"303\":1}}],[\"集群配置\",{\"1\":{\"266\":1}}],[\"集群时候负载均衡策略\",{\"0\":{\"266\":1}}],[\"集群中的\",{\"1\":{\"66\":1}}],[\"集群\",{\"1\":{\"32\":1}}],[\"集群的时候\",{\"1\":{\"39\":1}}],[\"集群的\",{\"1\":{\"32\":1}}],[\"集群>mysql>zookeeper\",{\"1\":{\"32\":1}}],[\"集群环境中定时恢复问题\",{\"1\":{\"31\":1}}],[\"持有插件列表\",{\"1\":{\"175\":1}}],[\"持有\",{\"1\":{\"95\":1}}],[\"持久化到\",{\"1\":{\"81\":2}}],[\"辛勤的处理数据同步的事件分类及分发\",{\"1\":{\"95\":1}}],[\"了\",{\"1\":{\"95\":1}}],[\"老朋友\",{\"1\":{\"95\":1}}],[\"老规矩\",{\"1\":{\"46\":1}}],[\"供用户选择\",{\"1\":{\"272\":1}}],[\"供下游调用链使用\",{\"1\":{\"189\":1}}],[\"供下游的调用链使用\",{\"1\":{\"187\":1}}],[\"供网关自由选用\",{\"1\":{\"115\":1}}],[\"供\",{\"1\":{\"95\":1}}],[\"供所有\",{\"1\":{\"83\":1}}],[\"他们大体上是如下架构\",{\"1\":{\"296\":1,\"304\":1}}],[\"他们都实现自接口\",{\"1\":{\"95\":1}}],[\"他的奖励分数\",{\"1\":{\"89\":1}}],[\"继承结构\",{\"1\":{\"173\":1}}],[\"继承自\",{\"1\":{\"95\":1,\"125\":1,\"173\":1,\"286\":1}}],[\"继续看服务列表活性检查处理\",{\"1\":{\"181\":1}}],[\"继续执行插件链处理\",{\"1\":{\"178\":2}}],[\"继续执行后续插件处理\",{\"1\":{\"173\":1}}],[\"继续照葫芦画瓢找到关键配置类上的参数设置\",{\"1\":{\"94\":1}}],[\"继续完成剩下的插件链调用\",{\"1\":{\"90\":1}}],[\"继续调用下个插件\",{\"1\":{\"85\":1}}],[\"继续跟进去\",{\"1\":{\"78\":1}}],[\"体验新架构下的插件热插拔\",{\"0\":{\"302\":1}}],[\"体验新架构\",{\"0\":{\"301\":1}}],[\"体验\",{\"0\":{\"224\":1},\"1\":{\"222\":1}}],[\"体系就好了\",{\"1\":{\"304\":1}}],[\"体系\",{\"0\":{\"95\":1},\"1\":{\"297\":1,\"304\":1}}],[\"体会到开源的快乐\",{\"1\":{\"16\":1}}],[\"直接把请求传给filterchain的下一个filter\",{\"1\":{\"248\":1}}],[\"直接返回报错\",{\"1\":{\"220\":1}}],[\"直接拒绝比较好理解\",{\"1\":{\"220\":1}}],[\"直接拒绝\",{\"1\":{\"217\":1,\"220\":2}}],[\"直接使用\",{\"1\":{\"207\":1}}],[\"直接看到最后一句的\",{\"1\":{\"98\":1}}],[\"直接找到\",{\"1\":{\"96\":1}}],[\"直接贴配置\",{\"1\":{\"94\":1}}],[\"直接上\",{\"1\":{\"32\":1}}],[\"期\",{\"1\":{\"94\":1}}],[\"期间进行两次线上分享\",{\"1\":{\"5\":1}}],[\"各个子项目在此期间\",{\"1\":{\"259\":1}}],[\"各个数据库连接包中关于\",{\"1\":{\"124\":1}}],[\"各个节点被访问的可能性是一致的\",{\"1\":{\"87\":1}}],[\"各种拼装\",{\"1\":{\"91\":1}}],[\"回调的执行地方\",{\"1\":{\"227\":1}}],[\"回调的执行\",{\"1\":{\"227\":1}}],[\"回调接收返回值\",{\"1\":{\"90\":1}}],[\"回顾\",{\"0\":{\"193\":1}}],[\"回到插入数据的另一个分支\",{\"1\":{\"79\":1}}],[\"回到了\",{\"1\":{\"46\":1}}],[\"补充上下文中请求头\",{\"1\":{\"90\":1}}],[\"仅有一个默认实现类\",{\"1\":{\"174\":1}}],[\"仅有为数不多的插件会进入这个条件判断\",{\"1\":{\"83\":1}}],[\"仅仅需要这些简单的代码即可\",{\"1\":{\"127\":1}}],[\"仅仅是将接口\",{\"1\":{\"121\":1}}],[\"仅是通过\",{\"1\":{\"125\":1}}],[\"仅保留核心代码\",{\"1\":{\"90\":1}}],[\"又有哪些值得你关注或者学习的\",{\"0\":{\"304\":1}}],[\"又称插件化架构\",{\"1\":{\"167\":1}}],[\"又做了什么事情\",{\"1\":{\"95\":1}}],[\"又要开始漫长的积蓄力量\",{\"1\":{\"89\":1}}],[\"又是怎么来的呢\",{\"1\":{\"84\":1}}],[\"又是怎么连接的\",{\"1\":{\"46\":1}}],[\"导致事务悬挂\",{\"1\":{\"272\":1}}],[\"导致请求处理时间长或者老是频繁抛出异常\",{\"1\":{\"216\":1}}],[\"导致它一朝回到解放前\",{\"1\":{\"89\":1}}],[\"导致了性能下降\",{\"1\":{\"29\":1}}],[\"然而是服务都有出现处理不稳定或者服务损坏的情况\",{\"1\":{\"216\":1}}],[\"然而那一刻它被惩罚的力度会非常大\",{\"1\":{\"89\":1}}],[\"然后再讲故事\",{\"1\":{\"300\":1}}],[\"然后再测试通过网关转发到这个接口\",{\"1\":{\"71\":1}}],[\"然后指定\",{\"1\":{\"273\":1}}],[\"然后分别介绍服务消费端与服务提供端如何拦截泛化调用流程对参数进行序列化细节\",{\"1\":{\"249\":1}}],[\"然后依次判断参数的泛化方式是\",{\"1\":{\"247\":1}}],[\"然后执行\",{\"1\":{\"247\":1}}],[\"然后进行后续的处理流程\",{\"1\":{\"232\":1}}],[\"然后进行负载均衡选择即将分发的目标服务器实例\",{\"1\":{\"178\":1}}],[\"然后进入半开状态\",{\"1\":{\"218\":1}}],[\"然后思考如果发现了抖动的服务我们应该怎么办\",{\"1\":{\"218\":1}}],[\"然后介绍如何在\",{\"1\":{\"215\":1}}],[\"然后通过算法名加载对应的负载均衡算法\",{\"1\":{\"183\":1}}],[\"然后初始化\",{\"1\":{\"174\":1}}],[\"然后传入\",{\"1\":{\"173\":1}}],[\"然后插件按照规范实现\",{\"1\":{\"170\":1}}],[\"然后在插件处理时\",{\"1\":{\"171\":1}}],[\"然后在\",{\"1\":{\"162\":1}}],[\"然后在你的\",{\"1\":{\"45\":1}}],[\"然后同步到\",{\"1\":{\"154\":1}}],[\"然后解析成\",{\"1\":{\"134\":1}}],[\"然后就是\",{\"1\":{\"79\":1}}],[\"然后就可以在接口方法上加上\",{\"1\":{\"45\":1}}],[\"然后找到对应的\",{\"1\":{\"46\":1}}],[\"然后找到对应的方法\",{\"1\":{\"46\":1}}],[\"然后看着代码编译都不通过了\",{\"1\":{\"46\":1}}],[\"然后才会进\",{\"1\":{\"46\":1}}],[\"然后启动\",{\"1\":{\"46\":1}}],[\"然后会跳转到\",{\"1\":{\"46\":1}}],[\"然后每\",{\"1\":{\"46\":1}}],[\"然后打印之前所找到的日志\",{\"1\":{\"46\":1}}],[\"然后用了\",{\"1\":{\"46\":1}}],[\"然后去查询数据库中对应的插件记录\",{\"1\":{\"46\":1}}],[\"然后\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"236\":1}}],[\"惩罚\",{\"1\":{\"89\":1}}],[\"即时生效的\",{\"1\":{\"303\":1}}],[\"即如果我们的\",{\"1\":{\"220\":1}}],[\"即头\",{\"1\":{\"220\":1}}],[\"即每秒钟请求的数量超过某限额时进行流控\",{\"1\":{\"217\":1}}],[\"即每次找寻具体实现类都要迭代一遍才行\",{\"1\":{\"129\":1}}],[\"即globalplugin\",{\"1\":{\"185\":1}}],[\"即根据选择器和规则找到对应服务\",{\"1\":{\"173\":1}}],[\"即某种意义上的插件通信机制\",{\"1\":{\"171\":1}}],[\"即访问密钥\",{\"1\":{\"140\":1}}],[\"即将入参放入静态变量作为全局缓存\",{\"1\":{\"124\":1}}],[\"即会触发上面这些代码\",{\"1\":{\"124\":1}}],[\"即可解决\",{\"1\":{\"273\":1}}],[\"即可避免多次反射\",{\"1\":{\"122\":1}}],[\"即可通过设置好的方式拿到所有定义的子类对象\",{\"1\":{\"119\":1}}],[\"即变化的数据信息\",{\"1\":{\"102\":1}}],[\"即使多次后分数太低没被选上\",{\"1\":{\"89\":1}}],[\"即\",{\"1\":{\"89\":1,\"104\":1,\"223\":2}}],[\"即在容器启动时\",{\"1\":{\"84\":1}}],[\"减少所有节点的累计分值\",{\"1\":{\"89\":1}}],[\"减少总节点权重分\",{\"1\":{\"89\":1}}],[\"措施\",{\"1\":{\"89\":1}}],[\"处处留出来更多的高度自定义扩展性\",{\"1\":{\"296\":1}}],[\"处添加规则及选择器配置\",{\"1\":{\"198\":1}}],[\"处罚\",{\"1\":{\"89\":1}}],[\"处理新的sentinel配置\",{\"1\":{\"220\":1}}],[\"处理以\",{\"1\":{\"213\":1}}],[\"处理规则为空情况\",{\"1\":{\"188\":1}}],[\"处理选择器为空情况\",{\"1\":{\"188\":1}}],[\"处理请求的大体流程\",{\"1\":{\"185\":1}}],[\"处理方法\",{\"1\":{\"173\":2}}],[\"处理事件\",{\"1\":{\"163\":1}}],[\"处理\",{\"0\":{\"77\":1,\"80\":1},\"1\":{\"81\":2,\"182\":1,\"213\":2,\"218\":1,\"303\":1}}],[\"选出节点缓存中分值最高的\",{\"1\":{\"89\":1}}],[\"选择\",{\"1\":{\"198\":1}}],[\"选择适合自己的调用方式进行拼装参数\",{\"1\":{\"185\":1}}],[\"选择具体分发的服务实例ip\",{\"1\":{\"178\":1}}],[\"选择待分发的目标上游\",{\"1\":{\"173\":1}}],[\"选择缓存分值高的节点\",{\"1\":{\"89\":1}}],[\"选择器和规则的处理matchstrategy\",{\"1\":{\"191\":1}}],[\"选择器和规则的选择\",{\"1\":{\"188\":1}}],[\"选择器的类型\",{\"1\":{\"188\":1}}],[\"选择器数据\",{\"1\":{\"188\":1}}],[\"选择器日志打印\",{\"1\":{\"188\":1}}],[\"选择器元数据变动调用\",{\"1\":{\"116\":1}}],[\"选择器下出现两个配置地址\",{\"1\":{\"72\":1}}],[\"选择器规则\",{\"0\":{\"69\":1},\"1\":{\"208\":1}}],[\"选择器相当于是对流量的第一次筛选\",{\"1\":{\"67\":1}}],[\"选择器\",{\"0\":{\"68\":1},\"1\":{\"67\":1,\"179\":2,\"191\":1,\"218\":1}}],[\"选择使用\",{\"1\":{\"54\":1}}],[\"依次从plugins\",{\"1\":{\"241\":1}}],[\"依次处理插件链上的插件\",{\"1\":{\"174\":1}}],[\"依次执行插件处理逻辑\",{\"1\":{\"174\":1}}],[\"依次类推\",{\"1\":{\"89\":1}}],[\"依赖的变更\",{\"1\":{\"273\":1}}],[\"依赖注入\",{\"1\":{\"170\":1}}],[\"依赖\",{\"0\":{\"209\":1},\"1\":{\"84\":1,\"159\":1,\"164\":1,\"208\":1}}],[\"则批准处理\",{\"1\":{\"258\":1}}],[\"则可向\",{\"1\":{\"258\":1}}],[\"则需联系\",{\"1\":{\"258\":1}}],[\"则需改为相对路径\",{\"1\":{\"253\":1}}],[\"则需要在具体的\",{\"1\":{\"57\":1}}],[\"则使用bean方式对入参进行反序列化\",{\"1\":{\"248\":1}}],[\"则使用nativejava方式对入参进行反序列化\",{\"1\":{\"248\":1}}],[\"则使用true方式对入参进行反序列化\",{\"1\":{\"248\":1}}],[\"则赋值默认值\",{\"1\":{\"227\":1}}],[\"则直接报错返回\",{\"1\":{\"220\":1}}],[\"则直接拒接这个请求\",{\"1\":{\"217\":1}}],[\"则判断服务异常\",{\"1\":{\"218\":1}}],[\"则不再访问它以免更多的请求对它造成更大的压力\",{\"1\":{\"218\":1}}],[\"则该请求会等待直到预设时间到来通过\",{\"1\":{\"217\":1}}],[\"则让当前请求通过\",{\"1\":{\"217\":1}}],[\"则按总权重随机\",{\"1\":{\"183\":2}}],[\"则测试主机是否可连接\",{\"1\":{\"182\":1}}],[\"则更新存活服务散列表\",{\"1\":{\"181\":1}}],[\"则创建定时探活任务\",{\"1\":{\"180\":1}}],[\"则是\",{\"1\":{\"133\":1}}],[\"则调用数据拉取方法\",{\"1\":{\"103\":1}}],[\"则\",{\"1\":{\"99\":1}}],[\"则很有可能就是真的给请求上下文加了响应信息\",{\"1\":{\"98\":1}}],[\"则缓存第一次为\",{\"1\":{\"89\":1}}],[\"循环操作集合\",{\"1\":{\"304\":1}}],[\"循环遍历所有的\",{\"1\":{\"112\":1}}],[\"循环多次调用拉取数据方法\",{\"1\":{\"102\":1}}],[\"循环后\",{\"1\":{\"89\":1}}],[\"循环里调用\",{\"1\":{\"78\":1,\"80\":1}}],[\"缓存内的数据外\",{\"1\":{\"201\":1}}],[\"缓存调用流程图如下\",{\"1\":{\"136\":1}}],[\"缓存小结\",{\"0\":{\"136\":1}}],[\"缓存到自身中\",{\"1\":{\"135\":1}}],[\"缓存存放的是\",{\"1\":{\"135\":1}}],[\"缓存的信息如何填充的呢\",{\"1\":{\"134\":1}}],[\"缓存的使用\",{\"0\":{\"38\":1}}],[\"缓存模式\",{\"1\":{\"131\":1}}],[\"缓存为\",{\"1\":{\"131\":1}}],[\"缓存\",{\"1\":{\"124\":1,\"134\":1,\"137\":4,\"223\":1}}],[\"缓存所有\",{\"1\":{\"115\":1,\"137\":1}}],[\"缓存中\",{\"1\":{\"137\":1}}],[\"缓存中保留它们各自\",{\"1\":{\"89\":1}}],[\"缓存中的分数\",{\"1\":{\"89\":1}}],[\"缓存中的分数增加当前节点权重分\",{\"1\":{\"89\":1}}],[\"累计总权重\",{\"1\":{\"88\":1}}],[\"总的感觉\",{\"1\":{\"305\":1}}],[\"总而言之\",{\"1\":{\"302\":1}}],[\"总览如下\",{\"1\":{\"132\":1}}],[\"总权重\",{\"1\":{\"88\":1}}],[\"总个数\",{\"1\":{\"88\":1}}],[\"总结网关端的长轮询的实现\",{\"1\":{\"101\":1}}],[\"总结下这两个类命名的意义\",{\"1\":{\"117\":1}}],[\"总结下\",{\"1\":{\"90\":1}}],[\"总结\",{\"0\":{\"81\":1,\"99\":1,\"126\":1,\"155\":1,\"161\":1,\"165\":1,\"175\":1,\"184\":1,\"228\":1,\"249\":1},\"1\":{\"230\":1}}],[\"总结与\",{\"1\":{\"11\":1,\"14\":1}}],[\"使hash更加均匀\",{\"1\":{\"87\":1}}],[\"使用此模式\",{\"1\":{\"274\":1}}],[\"使用反射获取调用的方法\",{\"1\":{\"248\":2}}],[\"使用泛化调用\",{\"0\":{\"239\":1},\"1\":{\"230\":1}}],[\"使用的是\",{\"1\":{\"219\":1,\"296\":1}}],[\"使用户通过简单的配置就可以使用\",{\"1\":{\"218\":1}}],[\"使用时不理解其机制导致没有用到它的缓存\",{\"1\":{\"130\":1}}],[\"使用时\",{\"1\":{\"129\":1}}],[\"使用方式\",{\"0\":{\"123\":1}}],[\"使用了插件化设计思想\",{\"1\":{\"167\":1}}],[\"使用了\",{\"1\":{\"112\":1,\"303\":1}}],[\"使用网关后性能有些下降\",{\"1\":{\"63\":1}}],[\"使用用户名admin\",{\"1\":{\"54\":1}}],[\"使用\",{\"0\":{\"51\":1,\"151\":1,\"157\":1},\"1\":{\"32\":1,\"79\":1,\"111\":1,\"114\":1,\"115\":1,\"120\":1,\"154\":1,\"170\":2,\"225\":1,\"264\":1,\"286\":2}}],[\"展示\",{\"1\":{\"270\":1}}],[\"展示了\",{\"1\":{\"119\":1}}],[\"展示完后台配置\",{\"1\":{\"86\":1}}],[\"展望\",{\"1\":{\"11\":1,\"14\":1}}],[\"权责与组织形式\",{\"0\":{\"259\":1}}],[\"权限订阅\",{\"1\":{\"159\":1}}],[\"权限认证框架\",{\"1\":{\"19\":1}}],[\"权重分小的节点\",{\"1\":{\"89\":1}}],[\"权重分数\",{\"1\":{\"86\":1,\"87\":1}}],[\"权重是否都一样\",{\"1\":{\"88\":1}}],[\"轮询\",{\"1\":{\"86\":1}}],[\"既然有\",{\"1\":{\"85\":1}}],[\"既然是响应式\",{\"1\":{\"46\":1}}],[\"拿回来比对后发现被骗了\",{\"1\":{\"103\":1}}],[\"拿到的是空数据\",{\"1\":{\"162\":1}}],[\"拿到实现类的\",{\"1\":{\"137\":1}}],[\"拿到接口的\",{\"1\":{\"137\":1}}],[\"拿到某个类型的数据\",{\"1\":{\"102\":1}}],[\"拿到这个配置地址后\",{\"1\":{\"46\":1}}],[\"拿取所有\",{\"1\":{\"98\":1}}],[\"拿\",{\"1\":{\"85\":1}}],[\"给前端处理带来了困扰\",{\"1\":{\"296\":1}}],[\"给冷系统一个预热的时间\",{\"1\":{\"217\":1}}],[\"给网关\",{\"1\":{\"99\":1}}],[\"给\",{\"1\":{\"85\":1}}],[\"结果返回给服务消费端\",{\"1\":{\"248\":1}}],[\"结果\",{\"1\":{\"248\":1}}],[\"结果处理插件\",{\"0\":{\"191\":1}}],[\"结果是什么都没有\",{\"1\":{\"162\":1}}],[\"结果如下图\",{\"1\":{\"58\":1,\"59\":1,\"61\":1,\"62\":1}}],[\"结构的参数转换成对应\",{\"1\":{\"240\":1}}],[\"结构如下\",{\"1\":{\"174\":2}}],[\"结构\",{\"1\":{\"137\":1,\"286\":1}}],[\"结构为\",{\"1\":{\"137\":3}}],[\"结构并组装成\",{\"1\":{\"134\":1}}],[\"结合上下文判断当前插件是否需要跳过\",{\"1\":{\"84\":1}}],[\"转换兼容问题\",{\"1\":{\"288\":1}}],[\"转换成\",{\"1\":{\"231\":1,\"240\":2}}],[\"转\",{\"1\":{\"286\":1}}],[\"转回成功后联系\",{\"1\":{\"258\":1}}],[\"转发类型的插件目前我了解的有\",{\"1\":{\"83\":1}}],[\"转发类型\",{\"1\":{\"83\":1}}],[\"转移成功后恢复\",{\"1\":{\"23\":1,\"252\":1}}],[\"实例放入了\",{\"1\":{\"201\":1}}],[\"实例化\",{\"1\":{\"154\":1}}],[\"实际传到后面服务中的量是需要乘上\",{\"1\":{\"220\":1}}],[\"实际的处理要复杂的多\",{\"1\":{\"188\":1}}],[\"实际是使用懒加载的方式\",{\"1\":{\"121\":1}}],[\"实际抽象了一套规则匹配逻辑\",{\"1\":{\"83\":1}}],[\"实现接口\",{\"1\":{\"247\":1}}],[\"实现接口的\",{\"1\":{\"82\":1}}],[\"实现于\",{\"1\":{\"188\":1}}],[\"实现容器内插件\",{\"1\":{\"174\":1}}],[\"实现插件与网关的连接\",{\"1\":{\"171\":1}}],[\"实现项目的全貌\",{\"1\":{\"130\":1}}],[\"实现类的调用\",{\"1\":{\"126\":1}}],[\"实现类的初始化也明显会是反射了\",{\"1\":{\"121\":1}}],[\"实现类通过传入的数据库\",{\"1\":{\"126\":1}}],[\"实现类自身进行的\",{\"1\":{\"126\":1}}],[\"实现类\",{\"1\":{\"124\":1}}],[\"实现类注册到\",{\"1\":{\"124\":1}}],[\"实现类全部初始化\",{\"1\":{\"124\":1}}],[\"实现\",{\"0\":{\"128\":1},\"1\":{\"116\":2,\"123\":1,\"183\":1,\"213\":1,\"287\":2}}],[\"实现了插件的热插拔\",{\"1\":{\"167\":1}}],[\"实现了\",{\"1\":{\"110\":1,\"154\":1,\"213\":1}}],[\"实现了链式调用\",{\"1\":{\"84\":1}}],[\"匹配通过则执行插件的自定义处理\",{\"1\":{\"178\":1}}],[\"匹配规则\",{\"1\":{\"178\":1,\"188\":2}}],[\"匹配选择器\",{\"1\":{\"178\":1,\"188\":2}}],[\"匹配路径\",{\"1\":{\"83\":1}}],[\"匹配方式\",{\"1\":{\"68\":1,\"218\":1,\"303\":1}}],[\"检查这个调用是否是泛化调用\",{\"1\":{\"247\":1}}],[\"检查\",{\"1\":{\"182\":1}}],[\"检查url是否为ip+端口格式\",{\"1\":{\"182\":1}}],[\"检查各服务活性并登记存活的服务\",{\"1\":{\"181\":1}}],[\"检查服务活性\",{\"1\":{\"181\":2}}],[\"检查上下文中的请求路径\",{\"1\":{\"83\":1}}],[\"检查soul\",{\"1\":{\"55\":1}}],[\"获取结果为\",{\"1\":{\"288\":1}}],[\"获取接口方法问题\",{\"1\":{\"288\":1}}],[\"获取参数名称\",{\"1\":{\"248\":2}}],[\"获取泛化引用使用的泛化类型\",{\"1\":{\"248\":1}}],[\"获取泛化参数\",{\"1\":{\"247\":2}}],[\"获取泛化调用的实例\",{\"1\":{\"243\":1}}],[\"获取\",{\"1\":{\"242\":3}}],[\"获取配置信息对象\",{\"1\":{\"227\":1}}],[\"获取所有现有熔断配置\",{\"1\":{\"220\":1}}],[\"获取所有现有流控配置\",{\"1\":{\"220\":1}}],[\"获取所有注册为\",{\"1\":{\"115\":1}}],[\"获取当前存有的令牌数\",{\"1\":{\"206\":1}}],[\"获取当前的类加载器\",{\"1\":{\"121\":1}}],[\"获取redis\",{\"1\":{\"203\":1}}],[\"获取重试次数\",{\"1\":{\"190\":1}}],[\"获取超时时间\",{\"1\":{\"190\":1}}],[\"获取真实地址\",{\"1\":{\"190\":1}}],[\"获取该选择器下的注入的地址\",{\"1\":{\"189\":1}}],[\"获取插件下的所有选择器\",{\"1\":{\"188\":1}}],[\"获取插件数据\",{\"1\":{\"173\":1,\"178\":1}}],[\"获取对应插件\",{\"1\":{\"188\":1}}],[\"获取可用服务列表\",{\"1\":{\"184\":1}}],[\"获取可用的插件\",{\"1\":{\"174\":1}}],[\"获取存活服务列表\",{\"1\":{\"179\":1}}],[\"获取选择器对应的注册地址\",{\"1\":{\"189\":1}}],[\"获取选择器对应的可用服务列表\",{\"1\":{\"178\":1}}],[\"获取选择器数据和规则\",{\"1\":{\"173\":1}}],[\"获取选择器数据\",{\"1\":{\"173\":1,\"178\":1}}],[\"获取上一次调用时间\",{\"1\":{\"206\":1}}],[\"获取上游列表\",{\"1\":{\"173\":1}}],[\"获取上下文中存放的响应信息\",{\"1\":{\"91\":1}}],[\"获取网关上下文和规则处理器\",{\"1\":{\"173\":1}}],[\"获取网关数据\",{\"1\":{\"162\":1}}],[\"获取规则处理数据\",{\"1\":{\"189\":1}}],[\"获取规则数据\",{\"1\":{\"178\":1}}],[\"获取规则\",{\"1\":{\"173\":1}}],[\"获取数据\",{\"1\":{\"159\":1}}],[\"获取认证数据\",{\"1\":{\"149\":1}}],[\"获取到连接\",{\"1\":{\"125\":1}}],[\"获取一个类名\",{\"1\":{\"121\":1}}],[\"获取其对应的\",{\"1\":{\"80\":1}}],[\"获得插件名\",{\"1\":{\"173\":1}}],[\"获得插件上的所有选择器\",{\"1\":{\"83\":1}}],[\"获得实现类对象\",{\"1\":{\"133\":1}}],[\"获得节点的真实url\",{\"1\":{\"85\":1}}],[\"获得唯一一个规则\",{\"1\":{\"83\":1}}],[\"获得选择器中的各个资源规则\",{\"1\":{\"83\":1}}],[\"定位到\",{\"1\":{\"174\":1}}],[\"定时启动\",{\"1\":{\"98\":1}}],[\"定时任务会执行\",{\"1\":{\"32\":1}}],[\"定时任务延迟时间\",{\"1\":{\"32\":1}}],[\"定时任务日志恢复的问题\",{\"0\":{\"31\":1}}],[\"定义多种\",{\"1\":{\"277\":1}}],[\"定义事务日志多种序列化方式的\",{\"1\":{\"271\":1}}],[\"定义事务日志多种存储方式的\",{\"1\":{\"271\":1}}],[\"定义一套通用的执行流程\",{\"1\":{\"82\":1}}],[\"定义插件职责的接口\",{\"1\":{\"82\":1}}],[\"新加\",{\"1\":{\"287\":1}}],[\"新加入一个子类不用去修改工厂方法\",{\"1\":{\"119\":1}}],[\"新特性\",{\"0\":{\"287\":1}}],[\"新建\",{\"1\":{\"286\":1}}],[\"新闻\",{\"0\":{\"262\":1}}],[\"新值\",{\"1\":{\"206\":1}}],[\"新增内存\",{\"1\":{\"300\":1}}],[\"新增了\",{\"1\":{\"273\":1}}],[\"新增配置中心\",{\"1\":{\"268\":1,\"271\":1}}],[\"新增对\",{\"1\":{\"264\":1}}],[\"新增\",{\"0\":{\"143\":1},\"1\":{\"264\":1,\"271\":1,\"277\":10,\"278\":3,\"300\":1}}],[\"新增或修改\",{\"1\":{\"81\":2}}],[\"新接入的\",{\"1\":{\"78\":1}}],[\"向老板申请加薪指日可待\",{\"1\":{\"304\":1}}],[\"向容器注入数据同步服务\",{\"1\":{\"159\":1}}],[\"向容器中注入\",{\"1\":{\"154\":1}}],[\"向\",{\"1\":{\"80\":1,\"81\":2,\"127\":1,\"154\":2}}],[\"|client\",{\"1\":{\"240\":1}}],[\"|genericfilter\",{\"1\":{\"240\":2}}],[\"|genericimplfilter\",{\"1\":{\"240\":2}}],[\"||\",{\"1\":{\"91\":2,\"121\":1,\"149\":2,\"186\":1,\"191\":2,\"201\":2,\"213\":1,\"220\":1,\"227\":1,\"243\":1,\"247\":1,\"248\":3}}],[\"|\",{\"1\":{\"80\":1,\"137\":1,\"240\":114}}],[\"行\",{\"1\":{\"80\":1}}],[\"行为准则\",{\"0\":{\"22\":1}}],[\"第四位固定参数值1\",{\"1\":{\"203\":1}}],[\"第三位是当前时间戳10位\",{\"1\":{\"203\":1}}],[\"第十三等级\",{\"1\":{\"185\":1}}],[\"第十二等级\",{\"1\":{\"185\":1}}],[\"第九等级到第十一等级\",{\"1\":{\"185\":1}}],[\"第二步\",{\"1\":{\"273\":2}}],[\"第二个\",{\"1\":{\"204\":1}}],[\"第二位是容量\",{\"1\":{\"203\":1}}],[\"第二等级到第八等级\",{\"1\":{\"185\":1}}],[\"第二层缓存之\",{\"0\":{\"134\":1,\"135\":1}}],[\"第二次为\",{\"1\":{\"89\":1}}],[\"第一步\",{\"1\":{\"273\":2}}],[\"第一种场景是实际流量确实出现了不可处理的峰值\",{\"1\":{\"216\":1}}],[\"第一个\",{\"1\":{\"204\":1}}],[\"第一位是速率\",{\"1\":{\"203\":1}}],[\"第一等级\",{\"1\":{\"185\":1}}],[\"第一层缓存\",{\"0\":{\"133\":1}}],[\"第一次接入\",{\"0\":{\"78\":1}}],[\"第\",{\"1\":{\"80\":1,\"119\":1}}],[\"长轮询方式\",{\"1\":{\"114\":1}}],[\"长轮询\",{\"1\":{\"110\":1,\"303\":1}}],[\"长轮询分析的最后一篇\",{\"1\":{\"101\":1}}],[\"长轮询分享\",{\"1\":{\"14\":1}}],[\"长轮询不会直接覆盖\",{\"1\":{\"98\":1}}],[\"长轮询实现\",{\"0\":{\"98\":1}}],[\"长轮询实现方式思考\",{\"0\":{\"97\":1}}],[\"长轮询现在要以何种方式去通知网关呢\",{\"1\":{\"96\":1}}],[\"长轮询也肯定要做这事\",{\"1\":{\"96\":1}}],[\"长轮询模块会怎么实现呢\",{\"1\":{\"96\":1}}],[\"长轮询的\",{\"1\":{\"95\":1}}],[\"长轮询篇\",{\"0\":{\"93\":1,\"101\":1},\"1\":{\"103\":1}}],[\"长连接\",{\"1\":{\"80\":1,\"104\":1}}],[\"长连接发送数据\",{\"1\":{\"79\":1}}],[\"简单易用金融级的分布式事务解决方案\",{\"1\":{\"271\":1}}],[\"简单易懂原则\",{\"1\":{\"271\":1}}],[\"简单的说就是当我们探测的一个服务出现了异常\",{\"1\":{\"218\":1}}],[\"简单的说就是\",{\"1\":{\"149\":1}}],[\"简单看下\",{\"1\":{\"90\":1}}],[\"简单介绍下\",{\"1\":{\"79\":1}}],[\"简单对直连和使用网关两种方式的请求进行压测\",{\"1\":{\"63\":1}}],[\"个应用\",{\"1\":{\"304\":1}}],[\"个插件都处理的情况下\",{\"1\":{\"303\":1}}],[\"个人\",{\"1\":{\"258\":1}}],[\"个线程\",{\"1\":{\"225\":1}}],[\"个接口我们配置的流控是\",{\"1\":{\"220\":1}}],[\"个节点上某个服务都触发熔断时\",{\"1\":{\"220\":1}}],[\"个节点\",{\"1\":{\"220\":1}}],[\"个请求传导到后端服务上\",{\"1\":{\"220\":1}}],[\"个请求都出现了异常那么则熔断\",{\"1\":{\"219\":1}}],[\"个选项是关于流量控制的配置\",{\"1\":{\"218\":1}}],[\"个选项是关于熔断的配置\",{\"1\":{\"218\":1}}],[\"个指标判断服务为异常并熔断服务后\",{\"1\":{\"218\":1}}],[\"个方式进行判断\",{\"1\":{\"218\":1}}],[\"个方法\",{\"1\":{\"110\":1}}],[\"个枚举\",{\"1\":{\"108\":1}}],[\"个系统\",{\"0\":{\"105\":1}}],[\"个\",{\"1\":{\"79\":1,\"219\":1,\"220\":1}}],[\"个月内有实际有效的代码提交记录\",{\"1\":{\"23\":1,\"252\":1}}],[\"区分\",{\"1\":{\"79\":1}}],[\"时候的异常问题\",{\"1\":{\"278\":1}}],[\"时候的线程切换问题\",{\"1\":{\"272\":1}}],[\"时隔一年\",{\"0\":{\"268\":1}}],[\"时并没有用分布式流控\",{\"1\":{\"220\":1}}],[\"时部分参数是默认配置\",{\"1\":{\"220\":1}}],[\"时\",{\"1\":{\"186\":4,\"286\":1}}],[\"时传入标识\",{\"1\":{\"133\":1}}],[\"时再回来补充\",{\"1\":{\"111\":1}}],[\"时略过的一块代码吗\",{\"1\":{\"98\":1}}],[\"时会进来\",{\"1\":{\"79\":1}}],[\"时间戳\",{\"1\":{\"186\":1,\"206\":1}}],[\"时间复杂度\",{\"1\":{\"131\":1}}],[\"时间\",{\"1\":{\"10\":1,\"13\":1,\"98\":1,\"217\":1}}],[\"已接入的业务系统重启\",{\"1\":{\"79\":1}}],[\"已经在进行开源了\",{\"1\":{\"299\":1}}],[\"已经提供了非常丰富的功能\",{\"1\":{\"296\":1}}],[\"已经得知修改的插件数据除了更改了\",{\"1\":{\"201\":1}}],[\"已经看到了全部的网关数据\",{\"1\":{\"162\":1}}],[\"已经接入过\",{\"1\":{\"79\":1}}],[\"已经接入\",{\"0\":{\"79\":1}}],[\"已经注册过\",{\"1\":{\"77\":1}}],[\"或线程数达到阈值后\",{\"1\":{\"220\":1}}],[\"或\",{\"1\":{\"220\":1}}],[\"或双\",{\"1\":{\"216\":1}}],[\"或是个人有学习网关的追求\",{\"1\":{\"81\":1}}],[\"或新节点启动\",{\"1\":{\"79\":1}}],[\"或新节点启动走的逻辑\",{\"1\":{\"79\":1}}],[\"或者提供代码参与开发的朋友也可以加群来进行讨论\",{\"1\":{\"299\":1}}],[\"或者提交\",{\"1\":{\"28\":1}}],[\"或者需要学习交流\",{\"1\":{\"299\":1}}],[\"或者配合其他项目的一些工作和任务\",{\"1\":{\"259\":1}}],[\"或者直接触发服务降级\",{\"1\":{\"218\":1}}],[\"或者实现\",{\"1\":{\"154\":1}}],[\"或者相同则很直接的随机集群长度即可\",{\"1\":{\"88\":1}}],[\"或者or\",{\"1\":{\"68\":1}}],[\"或者\",{\"0\":{\"36\":1}}],[\"或者是看了没怎么看懂\",{\"1\":{\"32\":1}}],[\"发起远程调用\",{\"1\":{\"247\":2}}],[\"发起\",{\"1\":{\"185\":1}}],[\"发起调用\",{\"1\":{\"185\":1}}],[\"发布\",{\"0\":{\"264\":1,\"283\":1}}],[\"发布欢迎加入文章\",{\"1\":{\"257\":1}}],[\"发布一个\",{\"1\":{\"163\":1}}],[\"发布事件\",{\"0\":{\"108\":1},\"1\":{\"154\":1}}],[\"发布事件后通过监听器完成后续操作\",{\"1\":{\"78\":1,\"79\":1}}],[\"发送数据对象\",{\"1\":{\"116\":1}}],[\"发送变动数据\",{\"1\":{\"112\":1}}],[\"发送\",{\"1\":{\"96\":1}}],[\"发送给\",{\"1\":{\"81\":1}}],[\"发现了些缺点\",{\"1\":{\"129\":1}}],[\"发现并不能达到这个效果\",{\"1\":{\"122\":1}}],[\"发现没有变化则睡眠\",{\"1\":{\"103\":1}}],[\"发现负载均衡策略确实生效了\",{\"1\":{\"72\":1}}],[\"发现\",{\"1\":{\"72\":1,\"121\":1,\"193\":1}}],[\"涉及到\",{\"1\":{\"78\":1,\"284\":1}}],[\"条入库方法\",{\"1\":{\"78\":1}}],[\"条件匹配\",{\"1\":{\"68\":1}}],[\"条件\",{\"1\":{\"68\":1,\"218\":1}}],[\"层暴露\",{\"1\":{\"99\":1}}],[\"层梦境\",{\"1\":{\"79\":1}}],[\"层插入数据\",{\"1\":{\"78\":1,\"80\":1}}],[\"层实现类\",{\"1\":{\"76\":1}}],[\"对数字转换的问题\",{\"1\":{\"288\":1}}],[\"对老系统的改造提供了更好的兼容性\",{\"1\":{\"274\":1}}],[\"对各种\",{\"1\":{\"273\":1}}],[\"对现在流行\",{\"0\":{\"265\":1}}],[\"对比\",{\"1\":{\"232\":1}}],[\"对\",{\"0\":{\"292\":1},\"1\":{\"223\":1,\"288\":1}}],[\"对其有大概认知\",{\"0\":{\"195\":1}}],[\"对调用的结果进行处理\",{\"1\":{\"185\":1}}],[\"对此特地对\",{\"1\":{\"185\":1}}],[\"对小白不是很友好\",{\"1\":{\"162\":1}}],[\"对获取的参数再次签名\",{\"1\":{\"149\":1}}],[\"对于开发者\",{\"1\":{\"296\":1}}],[\"对于用户\",{\"1\":{\"296\":1}}],[\"对于\",{\"1\":{\"273\":1}}],[\"对于后续社区发展方式\",{\"1\":{\"259\":1}}],[\"对于触发了流控或熔断的处理逻辑\",{\"1\":{\"220\":1}}],[\"对于单位统计时长\",{\"1\":{\"219\":1}}],[\"对于一定时间内\",{\"1\":{\"218\":1}}],[\"对于一个插件数据变动方法\",{\"1\":{\"95\":1}}],[\"对于服务是否不稳定这一点我们一般可以通过一下\",{\"1\":{\"218\":1}}],[\"对于超出阈值的请求也是触发拒绝\",{\"1\":{\"217\":1}}],[\"对于第三个问题\",{\"1\":{\"217\":1}}],[\"对于第二个问题阈值来说比较好理解\",{\"1\":{\"217\":1}}],[\"对于第一个问题\",{\"1\":{\"217\":1}}],[\"对于网关来说\",{\"1\":{\"217\":1}}],[\"对于管理的\",{\"1\":{\"126\":1}}],[\"对于目前的\",{\"1\":{\"111\":1}}],[\"对于经常写\",{\"1\":{\"76\":1}}],[\"对应的属性上\",{\"1\":{\"243\":1}}],[\"对应的实际代码实现如下\",{\"1\":{\"103\":1}}],[\"对应页面数据如下\",{\"1\":{\"189\":2}}],[\"对应实现方法为\",{\"1\":{\"135\":1}}],[\"对应\",{\"1\":{\"80\":1,\"201\":1,\"220\":1}}],[\"对应一个\",{\"1\":{\"79\":1}}],[\"对象如下所示\",{\"1\":{\"186\":1}}],[\"对象中又包含哪些属性呢\",{\"1\":{\"186\":1}}],[\"对象是整个插件链上的共享对象\",{\"1\":{\"186\":1}}],[\"对象封装插件\",{\"0\":{\"186\":1}}],[\"对象的\",{\"1\":{\"137\":1}}],[\"对象也会返回同样的\",{\"1\":{\"130\":1}}],[\"对象缓存起来\",{\"1\":{\"130\":1}}],[\"对象并放入缓存\",{\"1\":{\"130\":1}}],[\"对象\",{\"1\":{\"78\":1,\"80\":1,\"121\":3,\"122\":2,\"130\":1,\"133\":1,\"137\":1,\"174\":1,\"186\":2,\"187\":1,\"191\":1}}],[\"^\",{\"1\":{\"78\":2,\"240\":1}}],[\"仔细看看到底往哪些数据库表中插数据了\",{\"1\":{\"78\":1}}],[\"进到实现类里\",{\"1\":{\"107\":1}}],[\"进入\",{\"1\":{\"78\":1}}],[\"进行数据交互\",{\"1\":{\"296\":1}}],[\"进行枚举字段映射\",{\"1\":{\"287\":1}}],[\"进行更新转移文档\",{\"1\":{\"255\":1}}],[\"进行转发跳转\",{\"1\":{\"207\":1}}],[\"进行访问\",{\"1\":{\"199\":1}}],[\"进行监控\",{\"1\":{\"185\":1}}],[\"进行全局的初始化\",{\"1\":{\"185\":1}}],[\"进行\",{\"1\":{\"89\":1,\"242\":1}}],[\"进行愉快的使用了\",{\"1\":{\"45\":1}}],[\"进行保存\",{\"1\":{\"38\":1}}],[\"进行事务日志的异步读写\",{\"0\":{\"34\":1}}],[\"进行自身的回滚\",{\"1\":{\"30\":1}}],[\"业务网关作为流量的入口\",{\"1\":{\"216\":1}}],[\"业务系统重启了会到这里\",{\"1\":{\"77\":1}}],[\"业界领先的企业级开源\",{\"1\":{\"19\":1}}],[\"存放标识与类对象映射\",{\"1\":{\"137\":1}}],[\"存放类对象与其初始化对象\",{\"1\":{\"137\":1}}],[\"存放的是\",{\"1\":{\"134\":1}}],[\"存放在\",{\"1\":{\"112\":1}}],[\"存疑\",{\"1\":{\"76\":1}}],[\"存储日志\",{\"1\":{\"32\":3}}],[\"哈哈~\",{\"1\":{\"76\":1}}],[\"全景图\",{\"1\":{\"277\":2}}],[\"全量服务散列表\",{\"1\":{\"179\":1}}],[\"全局插件\",{\"1\":{\"185\":1}}],[\"全局查找\",{\"1\":{\"174\":1}}],[\"全局搜索\",{\"1\":{\"76\":1}}],[\"全称为\",{\"1\":{\"119\":1}}],[\"全部获取后\",{\"1\":{\"110\":1}}],[\"全调用\",{\"1\":{\"102\":1}}],[\"全流量则不走\",{\"1\":{\"68\":1}}],[\"今天来看\",{\"1\":{\"304\":1}}],[\"今天就来接着继续分析\",{\"1\":{\"104\":1}}],[\"今天就具体看看到底干了点儿啥\",{\"1\":{\"75\":1}}],[\"今天只是演示了\",{\"1\":{\"72\":1}}],[\"文档\",{\"1\":{\"296\":1,\"299\":1}}],[\"文章内部有报错\",{\"1\":{\"73\":1,\"86\":3}}],[\"文件\",{\"1\":{\"302\":1}}],[\"文件格式如下\",{\"1\":{\"273\":1}}],[\"文件等\",{\"1\":{\"253\":1}}],[\"文件充当插件列表\",{\"1\":{\"171\":1}}],[\"文件中加上如下配置\",{\"1\":{\"301\":1}}],[\"文件中添加插件依赖\",{\"1\":{\"209\":1}}],[\"文件中添加\",{\"0\":{\"142\":1},\"1\":{\"208\":1}}],[\"文件中\",{\"1\":{\"137\":1}}],[\"文件中的配置\",{\"1\":{\"46\":1}}],[\"文件中已经把\",{\"1\":{\"46\":1}}],[\"文件里面有对\",{\"1\":{\"46\":1}}],[\"相对路径获取父路径错误问题\",{\"1\":{\"288\":1}}],[\"相比之下\",{\"1\":{\"223\":1}}],[\"相当于把使用\",{\"1\":{\"154\":1}}],[\"相当于是我们所有\",{\"1\":{\"70\":1}}],[\"相关\",{\"1\":{\"213\":3}}],[\"相关配置\",{\"1\":{\"197\":1}}],[\"相关插件\",{\"1\":{\"185\":1}}],[\"相关类的实例化\",{\"1\":{\"154\":1}}],[\"相关类\",{\"1\":{\"124\":1}}],[\"相关的类还是会被访问到\",{\"1\":{\"46\":1}}],[\"相关的类中了\",{\"1\":{\"46\":1}}],[\"相关的方法\",{\"1\":{\"46\":1}}],[\"相关的监听器\",{\"1\":{\"46\":1}}],[\"三种不同的数据同步策略\",{\"1\":{\"296\":1}}],[\"三\",{\"0\":{\"70\":1,\"154\":1,\"160\":1,\"171\":1}}],[\"规则等配置\",{\"1\":{\"296\":1}}],[\"规则从管理节点同步过来时的处理逻辑\",{\"1\":{\"220\":1}}],[\"规则的匹配逻辑\",{\"1\":{\"198\":1}}],[\"规则的配置和选择器类似\",{\"1\":{\"69\":1}}],[\"规则匹配的神秘面纱\",{\"1\":{\"191\":1}}],[\"规则数据的获取全部来自于basedatacache\",{\"1\":{\"188\":1}}],[\"规则日志打印\",{\"1\":{\"188\":1}}],[\"规则和负载均衡策略选出待分发的服务器实例\",{\"1\":{\"178\":1}}],[\"规则元数据变动调用\",{\"1\":{\"116\":1}}],[\"规则时\",{\"1\":{\"88\":1}}],[\"规则\",{\"0\":{\"198\":1},\"1\":{\"70\":1,\"188\":1,\"303\":1}}],[\"规则就是最终的筛选\",{\"1\":{\"67\":1}}],[\"字符串\",{\"1\":{\"296\":1}}],[\"字符串模糊匹配\",{\"1\":{\"68\":1}}],[\"字段叫\",{\"1\":{\"296\":1}}],[\"字段时候\",{\"1\":{\"232\":1}}],[\"字段如果代理的接口是\",{\"1\":{\"232\":1}}],[\"字段来匹配到一条数据\",{\"1\":{\"232\":1}}],[\"字段主要是在请求网关的时候\",{\"1\":{\"232\":1}}],[\"字段获取负载均衡策略\",{\"1\":{\"189\":1}}],[\"字段中\",{\"1\":{\"79\":2}}],[\"字段存储这个接口真实节点信息\",{\"1\":{\"79\":1}}],[\"字段\",{\"1\":{\"31\":1,\"294\":1}}],[\"表结构如下\",{\"1\":{\"232\":1}}],[\"表达式\",{\"1\":{\"223\":1,\"304\":1}}],[\"表示超时熔断生效\",{\"1\":{\"226\":1}}],[\"表示\",{\"1\":{\"219\":1,\"237\":1}}],[\"表示不检测\",{\"1\":{\"180\":1}}],[\"表示前面一个值去匹配后面的正则表达式\",{\"1\":{\"68\":1}}],[\"表明来源\",{\"1\":{\"98\":1}}],[\"表数据\",{\"1\":{\"81\":2}}],[\"表中插入数据\",{\"1\":{\"80\":1}}],[\"表中插入了数据\",{\"1\":{\"78\":1}}],[\"表里捞数据\",{\"1\":{\"80\":1}}],[\"表现为\",{\"1\":{\"32\":1}}],[\"才能实现\",{\"1\":{\"231\":1}}],[\"才能匹配\",{\"1\":{\"68\":1}}],[\"才初始化插件链进入插件处理\",{\"1\":{\"175\":1}}],[\"才会去了解\",{\"1\":{\"304\":1}}],[\"才会去进行恢复\",{\"1\":{\"31\":1}}],[\"才会进行转发和重定向\",{\"1\":{\"208\":1}}],[\"才会等来自身被选中的一刻\",{\"1\":{\"89\":1}}],[\"才会有这个问题\",{\"1\":{\"31\":1}}],[\"前缀\",{\"1\":{\"257\":1}}],[\"前\",{\"1\":{\"218\":1}}],[\"前置插件处理熔断限流鉴权等操作\",{\"1\":{\"191\":1}}],[\"前面章节我们提到\",{\"1\":{\"179\":1}}],[\"前半部分都是在操作数据库\",{\"1\":{\"107\":1}}],[\"前后值相等\",{\"1\":{\"68\":1}}],[\"前提是把本地或者远程的\",{\"1\":{\"46\":1}}],[\"模式支持\",{\"1\":{\"286\":1}}],[\"模式下\",{\"1\":{\"277\":1}}],[\"模式的核心实现\",{\"1\":{\"277\":2}}],[\"模式\",{\"1\":{\"96\":2,\"274\":1,\"277\":2,\"280\":2,\"282\":1,\"286\":1}}],[\"模糊匹配\",{\"1\":{\"68\":1}}],[\"模块有\",{\"1\":{\"304\":1}}],[\"模块划分\",{\"1\":{\"277\":1}}],[\"模块的\",{\"1\":{\"171\":1}}],[\"模块相当于核心系统\",{\"1\":{\"171\":1}}],[\"模块下的\",{\"1\":{\"76\":1}}],[\"模块来演示\",{\"1\":{\"70\":1}}],[\"模块\",{\"0\":{\"54\":1,\"55\":1},\"1\":{\"70\":1,\"271\":3,\"273\":1}}],[\"名称\",{\"1\":{\"68\":1,\"218\":1}}],[\"名字前缀为\",{\"1\":{\"46\":1}}],[\"负载均衡在哪里做\",{\"1\":{\"304\":1}}],[\"负载均衡算法\",{\"1\":{\"300\":1}}],[\"负载均衡算法名\",{\"1\":{\"178\":1}}],[\"负载均衡策略\",{\"1\":{\"264\":1}}],[\"负载均衡策略类\",{\"1\":{\"85\":1}}],[\"负载均衡\",{\"0\":{\"86\":1,\"183\":1},\"1\":{\"178\":1,\"184\":1}}],[\"负载均衡等\",{\"1\":{\"67\":1}}],[\"负责处理当有\",{\"1\":{\"220\":1}}],[\"负责遍历服务列表\",{\"1\":{\"181\":1}}],[\"负责存放活动的上游服务信息\",{\"1\":{\"179\":1}}],[\"负责存放全量的上游服务信息\",{\"1\":{\"179\":1}}],[\"负责自动装配网关所需的核心\",{\"1\":{\"174\":1}}],[\"负责监听\",{\"1\":{\"164\":1}}],[\"负责监听事件\",{\"1\":{\"158\":1}}],[\"负责读取和同步\",{\"1\":{\"164\":1}}],[\"负责调用具体的监听实现类对\",{\"1\":{\"163\":1}}],[\"负责同步数据至\",{\"1\":{\"158\":1}}],[\"负责向\",{\"1\":{\"154\":1}}],[\"负责\",{\"1\":{\"114\":1,\"240\":2}}],[\"负责统筹和执行社区组织的活动\",{\"1\":{\"21\":1}}],[\"负责社区下所有孵化项目推广\",{\"1\":{\"21\":1}}],[\"负责社区新旧捐赠项目评审工作\",{\"1\":{\"21\":1}}],[\"负责新旧社区成员管理工作\",{\"1\":{\"21\":1}}],[\"负责人\",{\"0\":{\"7\":1}}],[\"它会有什么问题呢\",{\"1\":{\"304\":1}}],[\"它有四个配置项\",{\"1\":{\"219\":1}}],[\"它将根据请求参数匹配规则\",{\"1\":{\"177\":1}}],[\"它们各有不同用途\",{\"1\":{\"132\":1}}],[\"它们的主要作用刚刚也提到了\",{\"1\":{\"85\":1}}],[\"它还做了一件我最期待的改造\",{\"1\":{\"131\":1}}],[\"它同样是做了两件\",{\"1\":{\"131\":1}}],[\"它也定义了\",{\"1\":{\"130\":1}}],[\"它也重写了\",{\"1\":{\"96\":1}}],[\"它仅负责遍历并取出可用的\",{\"1\":{\"126\":1}}],[\"它与启动里最不同的点是\",{\"1\":{\"103\":1}}],[\"它可不仅仅只会在数据变动时告知我们信息\",{\"1\":{\"99\":1}}],[\"它是一个轻量级的容错库\",{\"1\":{\"223\":1}}],[\"它是我们搜索接口的具体实现类时最先接触到的\",{\"1\":{\"133\":1}}],[\"它是\",{\"1\":{\"98\":1,\"116\":1}}],[\"它自己重写了\",{\"1\":{\"96\":1}}],[\"它提供了众多不同数据类型变动的方法\",{\"1\":{\"95\":1}}],[\"它直接实现了\",{\"1\":{\"90\":1}}],[\"它的\",{\"1\":{\"133\":1}}],[\"它的懒加载具体实现在如下代码\",{\"1\":{\"121\":1}}],[\"它的作用很容易分析\",{\"1\":{\"118\":1}}],[\"它的实现类在各个可插拔插件包\",{\"1\":{\"116\":1}}],[\"它的唯一子类\",{\"1\":{\"84\":1}}],[\"它的背后一定存在多条业务线的分布式微服务集群\",{\"1\":{\"67\":1}}],[\"它用\",{\"1\":{\"46\":1}}],[\"作用\",{\"1\":{\"154\":8,\"185\":2,\"188\":1}}],[\"作用仅是根据数据类型\",{\"1\":{\"102\":1}}],[\"作为国内优秀的开源网关\",{\"1\":{\"218\":1}}],[\"作为前缀开始\",{\"1\":{\"212\":1}}],[\"作为一个中转站\",{\"1\":{\"95\":1}}],[\"作为\",{\"1\":{\"89\":2,\"114\":2,\"115\":1}}],[\"作为微服务网关\",{\"1\":{\"67\":1}}],[\"作者\",{\"1\":{\"11\":1,\"14\":1}}],[\"去调用每个微服务\",{\"1\":{\"296\":1}}],[\"去中心化设计\",{\"1\":{\"270\":1}}],[\"去除不必须的第三方\",{\"1\":{\"264\":1}}],[\"去\",{\"1\":{\"162\":1}}],[\"去看一下是否有网关的数据\",{\"1\":{\"162\":1}}],[\"去真正实现时\",{\"1\":{\"122\":1}}],[\"去包装一些子类\",{\"1\":{\"119\":1}}],[\"去处理信息\",{\"1\":{\"116\":1}}],[\"去跑一个\",{\"1\":{\"98\":1}}],[\"去修改\",{\"1\":{\"96\":1}}],[\"去猜测一下处理\",{\"1\":{\"67\":1}}],[\"去执行\",{\"1\":{\"46\":1}}],[\"唯一默认开启的插件\",{\"1\":{\"67\":1}}],[\"插件机制\",{\"1\":{\"303\":1}}],[\"插件增强\",{\"1\":{\"300\":1}}],[\"插件支持\",{\"1\":{\"300\":1}}],[\"插件热插拔\",{\"1\":{\"300\":1}}],[\"插件到整个调用流程的分析\",{\"1\":{\"249\":1}}],[\"插件数量\",{\"1\":{\"241\":1}}],[\"插件数据\",{\"1\":{\"188\":1}}],[\"插件数据订阅\",{\"1\":{\"159\":1}}],[\"插件需要配合\",{\"1\":{\"231\":1}}],[\"插件主要是将\",{\"1\":{\"231\":1}}],[\"插件目录结构\",{\"1\":{\"227\":1}}],[\"插件源码大量使用了响应式编程方式\",{\"1\":{\"227\":1}}],[\"插件源码解读\",{\"0\":{\"227\":1},\"1\":{\"222\":1}}],[\"插件名sentinel\",{\"1\":{\"220\":1}}],[\"插件名称\",{\"1\":{\"185\":1}}],[\"插件执行逻辑代码\",{\"1\":{\"220\":1}}],[\"插件列表\",{\"1\":{\"218\":1}}],[\"插件列表中自动配置了这个实例对应的选择器\",{\"1\":{\"70\":1}}],[\"插件做流控和熔断\",{\"1\":{\"215\":1}}],[\"插件配置\",{\"0\":{\"208\":1,\"233\":1},\"1\":{\"230\":1}}],[\"插件来重定向请求\",{\"1\":{\"207\":1}}],[\"插件之前做了很多前置插件的操作\",{\"1\":{\"193\":1}}],[\"插件处理\",{\"1\":{\"227\":1}}],[\"插件处理对应结果\",{\"1\":{\"191\":1}}],[\"插件处理流程\",{\"0\":{\"178\":1},\"1\":{\"184\":1}}],[\"插件发起真实的\",{\"1\":{\"191\":1}}],[\"插件发挥作用了\",{\"1\":{\"90\":1}}],[\"插件选择对应调用的真实地址\",{\"1\":{\"191\":1}}],[\"插件封装\",{\"1\":{\"191\":1}}],[\"插件中放入\",{\"1\":{\"190\":1}}],[\"插件继承于\",{\"1\":{\"188\":1}}],[\"插件在整个链式调用过程中到底起了一个什么样的作用\",{\"1\":{\"187\":1}}],[\"插件后\",{\"1\":{\"186\":1,\"187\":1}}],[\"插件有关\",{\"1\":{\"186\":2}}],[\"插件会被执行\",{\"1\":{\"185\":1}}],[\"插件所涉及的类进行了相关梳理\",{\"1\":{\"185\":1}}],[\"插件从缓存里拿到的服务器信息\",{\"1\":{\"182\":1}}],[\"插件自身只是负责根据选择器\",{\"1\":{\"178\":1}}],[\"插件定位\",{\"1\":{\"177\":1}}],[\"插件概述\",{\"0\":{\"177\":1}}],[\"插件重排\",{\"1\":{\"174\":1}}],[\"插件只是完成目标上游服务的待分发\",{\"1\":{\"173\":1}}],[\"插件链继承结构\",{\"1\":{\"174\":1}}],[\"插件链实现\",{\"0\":{\"174\":1}}],[\"插件链\",{\"1\":{\"173\":1}}],[\"插件实现\",{\"0\":{\"173\":1}}],[\"插件与核心系统如何通信\",{\"1\":{\"170\":1}}],[\"插件与插件\",{\"1\":{\"170\":1}}],[\"插件通信方面\",{\"1\":{\"171\":1}}],[\"插件通信\",{\"1\":{\"170\":1}}],[\"插件如何连接到核心系统\",{\"1\":{\"170\":1}}],[\"插件连接方面\",{\"1\":{\"171\":1}}],[\"插件连接\",{\"1\":{\"170\":1}}],[\"插件管理处\",{\"1\":{\"197\":1}}],[\"插件管理方面\",{\"1\":{\"171\":1}}],[\"插件管理\",{\"1\":{\"170\":1,\"208\":1}}],[\"插件信息更新后会发布一个\",{\"1\":{\"163\":1}}],[\"插件规则\",{\"1\":{\"160\":1}}],[\"插件更新后会发布一个\",{\"1\":{\"158\":1}}],[\"插件状态\",{\"1\":{\"158\":1}}],[\"插件存入的\",{\"1\":{\"149\":1}}],[\"插件是一个\",{\"1\":{\"177\":1}}],[\"插件是\",{\"1\":{\"167\":1}}],[\"插件是否可用\",{\"1\":{\"149\":1}}],[\"插件是网关处理\",{\"1\":{\"67\":1}}],[\"插件调用解析\",{\"0\":{\"241\":1},\"1\":{\"230\":1}}],[\"插件调用\",{\"1\":{\"149\":1}}],[\"插件用来对请求进行签名认证的插件\",{\"1\":{\"139\":1}}],[\"插件的所有数据\",{\"1\":{\"296\":1}}],[\"插件的调用\",{\"1\":{\"241\":1}}],[\"插件的调用后\",{\"1\":{\"90\":1}}],[\"插件的处理逻辑\",{\"1\":{\"220\":1}}],[\"插件的处理流程\",{\"1\":{\"193\":1}}],[\"插件的源码主要有\",{\"1\":{\"220\":1}}],[\"插件的常规配置这里也不再赘述\",{\"1\":{\"218\":1}}],[\"插件的具体作用\",{\"1\":{\"193\":1}}],[\"插件的执行顺序\",{\"1\":{\"185\":1}}],[\"插件的枚举类\",{\"1\":{\"185\":1}}],[\"插件的自定义处理流程\",{\"1\":{\"178\":1}}],[\"插件的实现分析\",{\"0\":{\"148\":1}}],[\"插件的返回\",{\"1\":{\"147\":1}}],[\"插件的负载均衡实现类的资源文件\",{\"1\":{\"133\":1}}],[\"插件的负载均衡策略时\",{\"1\":{\"118\":1}}],[\"插件等\",{\"1\":{\"117\":1}}],[\"插件元数据变动调用\",{\"1\":{\"116\":1}}],[\"插件启动\",{\"1\":{\"106\":1}}],[\"插件项目结构\",{\"0\":{\"85\":1}}],[\"插件最基础的配置\",{\"1\":{\"72\":1}}],[\"插件\",{\"1\":{\"70\":1,\"79\":1,\"116\":1,\"185\":1,\"195\":1,\"218\":1,\"296\":1,\"300\":1}}],[\"插件使用\",{\"0\":{\"70\":1,\"141\":1}}],[\"插件化设计思想是\",{\"1\":{\"67\":1}}],[\"插件就是对\",{\"1\":{\"67\":1,\"210\":1}}],[\"插件可能具备哪些功能呢\",{\"1\":{\"67\":1}}],[\"插件介绍\",{\"0\":{\"67\":1,\"231\":1},\"1\":{\"230\":1}}],[\"插件了\",{\"1\":{\"66\":1}}],[\"二种注册中心\",{\"1\":{\"300\":1}}],[\"二层缓存之一\",{\"1\":{\"132\":2}}],[\"二次调用时传入相同\",{\"1\":{\"130\":1}}],[\"二次调用不会再有反射消耗\",{\"1\":{\"121\":1}}],[\"二是轮询监听变化\",{\"1\":{\"101\":1}}],[\"二是执行插件链上的下个插件\",{\"1\":{\"83\":1}}],[\"二\",{\"0\":{\"67\":1,\"153\":1,\"159\":1,\"168\":1}}],[\"图片\",{\"1\":{\"66\":2,\"67\":1,\"68\":1,\"69\":2,\"70\":3,\"71\":3,\"72\":4,\"253\":1}}],[\"协议\",{\"1\":{\"296\":1}}],[\"协议的互相转换\",{\"1\":{\"296\":1}}],[\"协议的分析\",{\"1\":{\"14\":1}}],[\"协议到\",{\"1\":{\"296\":1}}],[\"协议请求的核心处理插件\",{\"1\":{\"67\":1}}],[\"协议进行数据同步\",{\"1\":{\"66\":1}}],[\"两部分\",{\"1\":{\"140\":1}}],[\"两次调用出现的对象却不一样\",{\"1\":{\"120\":1}}],[\"两者是通过\",{\"1\":{\"66\":1}}],[\"两个系统即可\",{\"1\":{\"104\":1}}],[\"两个节点在缓存中的分值会以自身为基数增加\",{\"1\":{\"89\":1}}],[\"两个分值分别为\",{\"1\":{\"89\":1}}],[\"两个模块\",{\"1\":{\"66\":1}}],[\"两个端口对应的服务配置到选择器中\",{\"1\":{\"62\":1}}],[\"✗\",{\"1\":{\"63\":2}}],[\"➜\",{\"1\":{\"63\":2}}],[\"压测\",{\"0\":{\"63\":1}}],[\"多参与开源\",{\"1\":{\"305\":1}}],[\"多参数\",{\"1\":{\"300\":1}}],[\"多项指标性能监控\",{\"1\":{\"270\":1}}],[\"多个参数类型\",{\"1\":{\"232\":1}}],[\"多个业务流程都依赖该服务\",{\"1\":{\"216\":1}}],[\"多余的请求将会直接报错\",{\"1\":{\"220\":1}}],[\"多余的请求首先会进入等待队列\",{\"1\":{\"220\":1}}],[\"多余的请求直接报错返回\",{\"1\":{\"220\":1}}],[\"多余的请求直接拒绝或者加入等待队列\",{\"1\":{\"217\":1}}],[\"多层缓存\",{\"0\":{\"132\":1}}],[\"多次请求时\",{\"1\":{\"226\":1}}],[\"多次调用拉取数据方法\",{\"1\":{\"102\":1}}],[\"多次调用只会访问同个节点\",{\"1\":{\"87\":1}}],[\"多次执行\",{\"1\":{\"62\":1}}],[\"多种\",{\"1\":{\"270\":1,\"300\":1}}],[\"多种不同日志序列化方式\",{\"1\":{\"33\":1}}],[\"多种事务日志的存储方式\",{\"1\":{\"33\":1}}],[\"再后来写了\",{\"1\":{\"305\":1}}],[\"再把流量放过去\",{\"1\":{\"304\":1}}],[\"再把\",{\"1\":{\"213\":1}}],[\"再之后就是我们熟悉的\",{\"1\":{\"213\":1}}],[\"再结合源码实现\",{\"1\":{\"175\":1}}],[\"再通过负载均衡策略分配上游服务实例\",{\"1\":{\"173\":1}}],[\"再通过打断点的方式来调试一下\",{\"1\":{\"46\":1}}],[\"再来看下\",{\"1\":{\"173\":1}}],[\"再来看看\",{\"1\":{\"131\":1,\"178\":1}}],[\"再来看看这个方法\",{\"0\":{\"80\":1}}],[\"再去启动\",{\"1\":{\"162\":1}}],[\"再启动下次监听\",{\"1\":{\"103\":1}}],[\"再看里面有\",{\"1\":{\"108\":1}}],[\"再看\",{\"1\":{\"96\":1}}],[\"再次启动soul\",{\"1\":{\"60\":1}}],[\"勾选\",{\"1\":{\"60\":1}}],[\"里指定的配置类自动加载到容器\",{\"1\":{\"174\":1}}],[\"里的一个\",{\"1\":{\"98\":1}}],[\"里\",{\"1\":{\"56\":1,\"79\":1,\"110\":1}}],[\"里面\",{\"1\":{\"296\":1}}],[\"里面实例化了一个\",{\"1\":{\"46\":1}}],[\"里面进行如下配置\",{\"1\":{\"45\":1}}],[\"里面没有的时候\",{\"1\":{\"39\":1}}],[\"登录\",{\"1\":{\"54\":1,\"235\":1}}],[\"密码\",{\"1\":{\"54\":1,\"301\":1}}],[\"↓\",{\"1\":{\"54\":1}}],[\"源仓库影响\",{\"0\":{\"253\":1}}],[\"源代码\",{\"0\":{\"51\":1,\"52\":1}}],[\"源代码至本地\",{\"0\":{\"50\":1}}],[\"源代码至自己的仓库\",{\"0\":{\"49\":1}}],[\"源代码准备\",{\"0\":{\"48\":1}}],[\"源码如下\",{\"1\":{\"220\":1}}],[\"源码解析\",{\"0\":{\"213\":1}}],[\"源码先分析到这\",{\"1\":{\"46\":1}}],[\"源码分析\",{\"1\":{\"46\":3}}],[\"源码阅读\",{\"0\":{\"10\":1,\"13\":1,\"200\":1},\"1\":{\"104\":1}}],[\"源码01期阅读分享会02\",{\"0\":{\"9\":1}}],[\"环境配置\",{\"0\":{\"47\":1}}],[\"同\",{\"1\":{\"174\":1}}],[\"同一个\",{\"1\":{\"87\":1}}],[\"同一个ip得到的节点就可以保持不变\",{\"1\":{\"87\":1}}],[\"同步至nacos\",{\"1\":{\"163\":1}}],[\"同步至\",{\"1\":{\"163\":2}}],[\"同步至内存\",{\"1\":{\"159\":1,\"163\":2}}],[\"同步一下元数据\",{\"1\":{\"162\":1}}],[\"同步网关数据到内存\",{\"1\":{\"164\":2}}],[\"同步网关数据\",{\"1\":{\"162\":1}}],[\"同步初始化数据\",{\"1\":{\"154\":2}}],[\"同步数据方式\",{\"1\":{\"300\":1}}],[\"同步数据的过程\",{\"1\":{\"162\":1}}],[\"同步数据不是很友好\",{\"1\":{\"162\":1}}],[\"同步数据原理\",{\"1\":{\"162\":1}}],[\"同步数据\",{\"1\":{\"154\":1,\"162\":1}}],[\"同步数据策略就分析清楚了\",{\"1\":{\"112\":1}}],[\"同步数据给\",{\"0\":{\"112\":1}}],[\"同步数据到网关原理\",{\"1\":{\"157\":1}}],[\"同步数据到网关\",{\"0\":{\"151\":1,\"157\":1}}],[\"同步数据到\",{\"1\":{\"46\":3}}],[\"同步完成结束阻塞\",{\"1\":{\"98\":1}}],[\"同步的文章\",{\"1\":{\"94\":1}}],[\"同步到\",{\"1\":{\"66\":1}}],[\"同时使用\",{\"1\":{\"236\":1}}],[\"同时设置了\",{\"1\":{\"232\":1}}],[\"同时也开启了线程做后台监听请求\",{\"1\":{\"103\":1}}],[\"同时也支持\",{\"1\":{\"32\":1}}],[\"同时请求的还有选择器\",{\"1\":{\"46\":1}}],[\"用来标识这是一个\",{\"1\":{\"273\":1}}],[\"用来监控运行时候的各种信息\",{\"1\":{\"271\":1}}],[\"用作插件排序\",{\"1\":{\"173\":1}}],[\"用于甄别\",{\"1\":{\"137\":1}}],[\"用于定义各个插件的各个类型元数据更新\",{\"1\":{\"117\":1}}],[\"用于通知插件元数据变更\",{\"1\":{\"117\":1}}],[\"用缓存的话\",{\"1\":{\"97\":1,\"99\":1}}],[\"用\",{\"1\":{\"46\":3,\"119\":1}}],[\"用户之前的接口完全是零侵入\",{\"1\":{\"296\":1}}],[\"用户完全不用关心\",{\"1\":{\"296\":1}}],[\"用户可以定制化的来定义返回结果\",{\"1\":{\"296\":1}}],[\"用户可以把快速的把自己的项目接入到\",{\"1\":{\"296\":1}}],[\"用户可以根据自己的喜好选择\",{\"1\":{\"215\":1}}],[\"用户可以根据自行的情况进行配置\",{\"1\":{\"34\":1}}],[\"用户再也不用担心像\",{\"1\":{\"281\":1}}],[\"用户进行支持\",{\"1\":{\"274\":2}}],[\"用户使用的更改\",{\"0\":{\"292\":1}}],[\"用户使用或者升级不用关心\",{\"1\":{\"273\":1}}],[\"用户使用与升级指南\",{\"0\":{\"273\":1}}],[\"用户首先需要在项目resouce文件下新建一个名称为hmily\",{\"1\":{\"273\":1}}],[\"用户依赖的方式没有更改\",{\"1\":{\"273\":1}}],[\"用户来说\",{\"1\":{\"273\":1}}],[\"用户业务系统接入\",{\"1\":{\"104\":1}}],[\"用户接入\",{\"1\":{\"75\":1,\"81\":1,\"104\":1}}],[\"用户\",{\"0\":{\"42\":1,\"43\":1,\"44\":1},\"1\":{\"45\":3,\"296\":1}}],[\"7z\",{\"1\":{\"288\":1}}],[\"798\",{\"1\":{\"162\":2}}],[\"7\",{\"1\":{\"153\":1,\"154\":1,\"225\":5,\"234\":1,\"265\":1,\"273\":1,\"284\":1}}],[\"764\",{\"1\":{\"162\":1}}],[\"761\",{\"1\":{\"153\":4}}],[\"762\",{\"1\":{\"55\":1}}],[\"70\",{\"1\":{\"225\":1}}],[\"70mb\",{\"1\":{\"63\":1}}],[\"70bad5ebb1cf6e3fc55278eef2df42f3\",{\"1\":{\"46\":2}}],[\"70b269257d47f0f6404ae7b7e976d8f1\",{\"1\":{\"46\":2}}],[\"74\",{\"1\":{\"63\":2}}],[\"758\",{\"1\":{\"162\":1}}],[\"75f487d20c6c\",{\"1\":{\"162\":4}}],[\"752\",{\"1\":{\"153\":1}}],[\"756\",{\"1\":{\"62\":2}}],[\"755\",{\"1\":{\"62\":1}}],[\"73\",{\"1\":{\"32\":1,\"45\":1}}],[\"打造一款高可用\",{\"1\":{\"271\":1}}],[\"打印规则日志\",{\"1\":{\"188\":1}}],[\"打印选择器日志\",{\"1\":{\"188\":1}}],[\"打印日志\",{\"1\":{\"68\":1}}],[\"打印的日志\",{\"1\":{\"46\":1}}],[\"打开的时候\",{\"1\":{\"68\":1}}],[\"打开才会生效\",{\"1\":{\"68\":1}}],[\"打开\",{\"0\":{\"51\":1},\"1\":{\"46\":1}}],[\"执行同步所有插件\",{\"1\":{\"294\":1}}],[\"执行lua脚本\",{\"1\":{\"203\":1}}],[\"执行子类具体实现\",{\"1\":{\"188\":1}}],[\"执行子类的方法\",{\"1\":{\"83\":1}}],[\"执行具体均衡策略\",{\"1\":{\"184\":1}}],[\"执行具体处理\",{\"1\":{\"173\":1}}],[\"执行负载均衡计算最终分发到的服务\",{\"1\":{\"183\":1}}],[\"执行自定义处理\",{\"1\":{\"178\":1}}],[\"执行时加订阅实现\",{\"1\":{\"174\":1}}],[\"执行插件处理逻辑\",{\"1\":{\"174\":1}}],[\"执行插件链上的下个插件\",{\"1\":{\"83\":1}}],[\"执行监听事件\",{\"1\":{\"163\":1}}],[\"执行后续的插件链调用\",{\"1\":{\"90\":1}}],[\"执行顺序小的优先执行\",{\"1\":{\"68\":1}}],[\"执行顺序\",{\"1\":{\"68\":1,\"218\":1}}],[\"执行\",{\"1\":{\"58\":1,\"59\":1,\"61\":1,\"205\":1,\"225\":1}}],[\"执行以下\",{\"1\":{\"52\":1}}],[\"执行相关的刷新方法\",{\"1\":{\"46\":1}}],[\"执行完成后\",{\"1\":{\"32\":1}}],[\"五分钟后\",{\"1\":{\"46\":1}}],[\"每一个\",{\"1\":{\"232\":1}}],[\"每个微服务项目的开发人员都在这上面进行开发\",{\"1\":{\"304\":1}}],[\"每个微服务注册到网关\",{\"1\":{\"296\":1}}],[\"每个配置都在\",{\"1\":{\"303\":1}}],[\"每个公司使用情况又不一样\",{\"1\":{\"296\":1}}],[\"每个项目的管理团队必须无条件服从组织\",{\"1\":{\"259\":1}}],[\"每个项目内部管理自治\",{\"1\":{\"259\":1}}],[\"每个\",{\"1\":{\"220\":1}}],[\"每个请求最多等待\",{\"1\":{\"220\":1}}],[\"每个节点\",{\"1\":{\"87\":1}}],[\"每种\",{\"1\":{\"186\":1}}],[\"每次\",{\"1\":{\"284\":1}}],[\"每次刷新令牌的数量为2\",{\"1\":{\"225\":1}}],[\"每次刷新令牌的数量为\",{\"1\":{\"225\":1}}],[\"每次刷新令牌的数量\",{\"1\":{\"224\":1}}],[\"每次处理时\",{\"1\":{\"173\":1}}],[\"每次迭代都去反射初始化所有实现类\",{\"1\":{\"130\":1}}],[\"每次得到的对象都不一样可能会引发程序问题\",{\"1\":{\"129\":1}}],[\"每次调用都有一定消耗\",{\"1\":{\"120\":1}}],[\"每次调用execute\",{\"1\":{\"84\":1}}],[\"每次拉取某一种数据类型的信息\",{\"1\":{\"102\":1}}],[\"每次手动点下后台同步这里立马就来调用了\",{\"1\":{\"99\":1}}],[\"每次被选上的惩罚力度很小\",{\"1\":{\"89\":1}}],[\"每\",{\"1\":{\"46\":1}}],[\"每人根据每天阅读的内容\",{\"1\":{\"5\":1}}],[\"间隔\",{\"1\":{\"46\":1}}],[\"看风向标\",{\"1\":{\"304\":1}}],[\"看一下excute方法的具体作用\",{\"1\":{\"188\":1}}],[\"看到下面的断点\",{\"1\":{\"162\":1}}],[\"看到代码中\",{\"1\":{\"111\":1}}],[\"看到\",{\"1\":{\"110\":1}}],[\"看到这可以猜测\",{\"1\":{\"121\":1}}],[\"看到这几种类型\",{\"1\":{\"108\":1}}],[\"看到这也基本明了\",{\"1\":{\"98\":1}}],[\"看到这会很好奇\",{\"1\":{\"84\":1}}],[\"看到这么多\",{\"1\":{\"78\":1}}],[\"看到这里我想你依然明白\",{\"1\":{\"127\":1}}],[\"看到这里我想你已经了解\",{\"1\":{\"126\":1}}],[\"看到这里我们明白了\",{\"1\":{\"121\":1}}],[\"看到这里有\",{\"1\":{\"78\":1}}],[\"看到这里\",{\"1\":{\"76\":1}}],[\"看下负载均衡的实现\",{\"1\":{\"183\":1}}],[\"看下获取的实现\",{\"1\":{\"179\":1}}],[\"看下\",{\"1\":{\"121\":1,\"174\":1}}],[\"看下前台会调用\",{\"1\":{\"106\":1}}],[\"看下数据库数据\",{\"1\":{\"80\":1}}],[\"看有什么结论\",{\"1\":{\"99\":1}}],[\"看看我新写的方式\",{\"1\":{\"127\":1}}],[\"看看最重要的\",{\"1\":{\"125\":1}}],[\"看看到底怎么实现\",{\"1\":{\"120\":1}}],[\"看看具体的实现效果\",{\"1\":{\"120\":1}}],[\"看看这个方法的代码\",{\"1\":{\"118\":1}}],[\"看看这个流程是怎么实现的\",{\"1\":{\"104\":1}}],[\"看看这里关于\",{\"1\":{\"95\":1}}],[\"看看\",{\"1\":{\"98\":1,\"174\":2}}],[\"看具体是落在那个节点的权重片段上\",{\"1\":{\"88\":1}}],[\"看日志发现确实经过了网关转发到了\",{\"1\":{\"71\":1}}],[\"看日志会打出来这么一段\",{\"1\":{\"46\":1}}],[\"看名字可以知道\",{\"1\":{\"46\":1}}],[\"大家思考一下\",{\"1\":{\"304\":1}}],[\"大家一起讨论\",{\"1\":{\"279\":1}}],[\"大并发场景验证过的\",{\"1\":{\"299\":1}}],[\"大小\",{\"1\":{\"287\":1}}],[\"大小为\",{\"1\":{\"46\":1}}],[\"大大减少了使用成本以及学习成本\",{\"1\":{\"281\":1}}],[\"大约在冬季\",{\"0\":{\"281\":1}}],[\"大部分请求还是可以正常处理\",{\"1\":{\"217\":1}}],[\"大体梳理了\",{\"1\":{\"193\":1}}],[\"大体逻辑就是判断请求是否成功\",{\"1\":{\"190\":1}}],[\"大体可以理解为\",{\"1\":{\"190\":1}}],[\"大数据量下随机和轮询并无太大结果上的差异\",{\"1\":{\"183\":1}}],[\"大数据处理\",{\"1\":{\"23\":1,\"252\":1}}],[\"大量请求下几乎平均\",{\"1\":{\"183\":1}}],[\"数量>=1\",{\"1\":{\"206\":1}}],[\"数组阻塞队列\",{\"1\":{\"46\":1}}],[\"数据的\",{\"0\":{\"159\":1},\"1\":{\"157\":1}}],[\"数据初始化\",{\"1\":{\"154\":1}}],[\"数据变化会发布\",{\"1\":{\"155\":1,\"157\":1}}],[\"数据变化监听器\",{\"1\":{\"154\":1}}],[\"数据变动处理类\",{\"1\":{\"115\":1}}],[\"数据变动时对应的处理方法\",{\"1\":{\"110\":1}}],[\"数据变动后使用线程池调到了这个方法\",{\"1\":{\"98\":1}}],[\"数据有错误就不通过\",{\"1\":{\"149\":1}}],[\"数据有无变化\",{\"1\":{\"99\":1}}],[\"数据进行判断\",{\"1\":{\"149\":1}}],[\"数据处理类\",{\"1\":{\"115\":1}}],[\"数据是怎么同步到\",{\"1\":{\"104\":1}}],[\"数据交换\",{\"1\":{\"103\":1}}],[\"数据为空的情况下肯定会更新缓存\",{\"1\":{\"102\":1}}],[\"数据未发生变动则睡眠\",{\"1\":{\"102\":1}}],[\"数据来源\",{\"1\":{\"98\":1}}],[\"数据怎样知道是有变化的\",{\"1\":{\"97\":1,\"99\":1}}],[\"数据\",{\"1\":{\"80\":1,\"242\":1}}],[\"数据格式\",{\"1\":{\"79\":1}}],[\"数据库存储网关数据\",{\"1\":{\"54\":1}}],[\"数据库中对应的表为下图所示\",{\"1\":{\"46\":1}}],[\"数据库的配置在上面已经有了\",{\"1\":{\"32\":1}}],[\"数据同步方式\",{\"1\":{\"300\":1}}],[\"数据同步时\",{\"1\":{\"179\":1}}],[\"数据同步配置类\",{\"1\":{\"154\":1}}],[\"数据同步原理解析\",{\"0\":{\"154\":1}}],[\"数据同步策略官网链接\",{\"1\":{\"104\":1}}],[\"数据同步\",{\"1\":{\"46\":3,\"184\":1,\"296\":1}}],[\"数据同步整体架构分享与介绍\",{\"1\":{\"14\":1}}],[\"数据同步之\",{\"1\":{\"14\":1}}],[\"改变了以前运维掌控一切的观念\",{\"1\":{\"304\":1}}],[\"改进\",{\"1\":{\"287\":1}}],[\"改名为\",{\"1\":{\"286\":1}}],[\"改为了\",{\"1\":{\"291\":1}}],[\"改为\",{\"1\":{\"286\":3}}],[\"改\",{\"1\":{\"46\":1}}],[\"改完重启发现不会再跳到\",{\"1\":{\"46\":1}}],[\"改成不启用\",{\"1\":{\"46\":1}}],[\"还要傻乎乎的新增一个\",{\"1\":{\"297\":1,\"304\":1}}],[\"还对对应的插件进行下发操作\",{\"1\":{\"201\":1}}],[\"还需要自行设计一套比较复杂的筛选机制\",{\"1\":{\"129\":1}}],[\"还需要后续补充\",{\"1\":{\"112\":1}}],[\"还需要确认下\",{\"1\":{\"84\":1}}],[\"还记得我们在\",{\"1\":{\"98\":1}}],[\"还会将\",{\"1\":{\"98\":1}}],[\"还没有注册过\",{\"1\":{\"77\":1,\"79\":1}}],[\"还有其他的配置方式以及配置内容的详解\",{\"1\":{\"273\":1}}],[\"还有其他各种规则配置后面都可以试一试~\",{\"1\":{\"72\":1}}],[\"还有一个关键动作就是结束\",{\"1\":{\"98\":1}}],[\"还有一个办法是把\",{\"1\":{\"46\":1}}],[\"还有很多好玩的东西\",{\"1\":{\"46\":1}}],[\"还是放在不同的项目\",{\"1\":{\"305\":1}}],[\"还是启动不起来\",{\"1\":{\"162\":1}}],[\"还是or的方式来组合\",{\"1\":{\"68\":1}}],[\"还是\",{\"1\":{\"32\":1,\"247\":1}}],[\"突然想到在\",{\"1\":{\"46\":1}}],[\"节点的方法\",{\"1\":{\"46\":1}}],[\"节点数据\",{\"1\":{\"46\":1}}],[\"奇怪的一点是跳到了\",{\"1\":{\"46\":1}}],[\"服务呢\",{\"1\":{\"302\":1}}],[\"服务后\",{\"1\":{\"297\":1,\"304\":1}}],[\"服务调用方\",{\"1\":{\"273\":1}}],[\"服务调用之间的柔性事务\",{\"1\":{\"273\":1}}],[\"服务提供方\",{\"1\":{\"273\":1}}],[\"服务提供者依赖\",{\"1\":{\"273\":1}}],[\"服务提供端如何拦截泛化请求\",{\"1\":{\"248\":1}}],[\"服务提供端如何使用\",{\"1\":{\"246\":1}}],[\"服务提供端通过\",{\"0\":{\"248\":1}}],[\"服务消费端\",{\"0\":{\"247\":1}}],[\"服务名称\",{\"1\":{\"232\":1}}],[\"服务自动注册与发现\",{\"1\":{\"231\":1}}],[\"服务框架\",{\"1\":{\"231\":1}}],[\"服务降级粗略的可以理解为请求此业务的简版\",{\"1\":{\"218\":1}}],[\"服务内部会使用\",{\"1\":{\"212\":1}}],[\"服务跳转\",{\"1\":{\"211\":1}}],[\"服务列表最初来自\",{\"1\":{\"184\":1}}],[\"服务活性检查实现\",{\"1\":{\"182\":1}}],[\"服务启动后会自动注入\",{\"1\":{\"164\":1}}],[\"服务启动后可以看到发起的\",{\"1\":{\"153\":2}}],[\"服务有数据\",{\"1\":{\"162\":1}}],[\"服务配置\",{\"1\":{\"152\":1}}],[\"服务接口\",{\"1\":{\"112\":1}}],[\"服务\",{\"0\":{\"58\":1,\"61\":1,\"236\":1},\"1\":{\"162\":2,\"230\":1,\"294\":1}}],[\"服务打开\",{\"1\":{\"46\":1}}],[\"服务之类的\",{\"1\":{\"32\":1}}],[\"把流量先打到其中一个\",{\"1\":{\"304\":1}}],[\"把运维的工资给你\",{\"1\":{\"296\":1}}],[\"把相关信息持久化\",{\"1\":{\"107\":1}}],[\"把真实服务器节点信息缓存在一个\",{\"1\":{\"79\":1}}],[\"把新节点加入到\",{\"1\":{\"79\":1}}],[\"把前面的代码再贴过来\",{\"1\":{\"79\":1}}],[\"把需要网关代理的接口信息全部注册到\",{\"1\":{\"104\":1}}],[\"把需要\",{\"1\":{\"75\":1}}],[\"把soul\",{\"1\":{\"56\":1}}],[\"把\",{\"1\":{\"46\":1,\"110\":1}}],[\"把此属性设置为\",{\"1\":{\"32\":1}}],[\"话不多说\",{\"1\":{\"46\":1}}],[\"怎么统一登陆\",{\"1\":{\"296\":1}}],[\"怎么修改的\",{\"1\":{\"79\":1}}],[\"怎么同步数据到\",{\"1\":{\"46\":1}}],[\"怎么样才能提高\",{\"1\":{\"29\":1}}],[\"到底有多方便\",{\"0\":{\"296\":1}}],[\"到配置文件中找到如下配置\",{\"1\":{\"110\":1}}],[\"到这个节骨眼\",{\"1\":{\"96\":1}}],[\"到这里我产生一个疑问\",{\"1\":{\"120\":1}}],[\"到这里就真相大白了\",{\"1\":{\"110\":1}}],[\"到这里\",{\"1\":{\"81\":2,\"99\":1,\"112\":1}}],[\"到这里终于把\",{\"1\":{\"79\":1}}],[\"到\",{\"1\":{\"80\":1,\"154\":1,\"162\":1,\"171\":1}}],[\"到数据库里肯定查不到\",{\"1\":{\"78\":1}}],[\"到数据库里查询\",{\"1\":{\"77\":1,\"79\":1}}],[\"到用到的时候再去具体分析里面的源码\",{\"1\":{\"46\":1}}],[\"到此为止我们明白了\",{\"1\":{\"213\":1}}],[\"到此为止\",{\"1\":{\"191\":1}}],[\"到此\",{\"1\":{\"46\":1}}],[\"到自己的私服\",{\"1\":{\"41\":1}}],[\"调整\",{\"0\":{\"277\":1}}],[\"调整底层存储结构\",{\"1\":{\"268\":1}}],[\"调取\",{\"1\":{\"96\":1}}],[\"调试一把\",{\"1\":{\"46\":1}}],[\"调用无差别\",{\"1\":{\"296\":1}}],[\"调用时\",{\"1\":{\"240\":1}}],[\"调用时指代网关调用的前置地址\",{\"1\":{\"186\":1}}],[\"调用所有服务实现\",{\"1\":{\"237\":1}}],[\"调用接口处添加休眠时间\",{\"1\":{\"226\":1}}],[\"调用流程梳理\",{\"1\":{\"203\":1}}],[\"调用链\",{\"0\":{\"203\":1}}],[\"调用http\",{\"1\":{\"199\":1}}],[\"调用类型有\",{\"1\":{\"186\":1}}],[\"调用依次追踪上述四个插件的作用\",{\"1\":{\"185\":1}}],[\"调用构造器初始化对象\",{\"1\":{\"121\":1}}],[\"调用自定义的\",{\"1\":{\"118\":1}}],[\"调用一个看似工具类的方法\",{\"1\":{\"118\":1}}],[\"调用订阅器的\",{\"1\":{\"116\":1}}],[\"调用对应事件抽象方法\",{\"1\":{\"116\":1}}],[\"调用相应的\",{\"1\":{\"115\":1}}],[\"调用插件数据订阅器\",{\"1\":{\"102\":1}}],[\"调用拉取数据的方法\",{\"1\":{\"102\":1}}],[\"调用负载均衡方法并传入策略类型\",{\"1\":{\"85\":1}}],[\"调用了一个handlerequestbody方法\",{\"1\":{\"190\":1}}],[\"调用了\",{\"1\":{\"46\":1}}],[\"调用的流程\",{\"1\":{\"191\":1}}],[\"调用的大体流程\",{\"1\":{\"191\":1}}],[\"调用的真实地址\",{\"1\":{\"190\":1}}],[\"调用的方式目前只支持\",{\"1\":{\"186\":1}}],[\"调用的接口地址为http\",{\"1\":{\"185\":1}}],[\"调用的订阅方法不同\",{\"1\":{\"116\":1}}],[\"调用的超时时间设置\",{\"1\":{\"32\":1}}],[\"调用的时候\",{\"1\":{\"29\":1}}],[\"调用者认为你是失败的\",{\"1\":{\"30\":1}}],[\"调用超时\",{\"0\":{\"30\":1}}],[\"调用\",{\"1\":{\"19\":1,\"81\":1,\"90\":1,\"95\":1,\"102\":2,\"104\":1,\"116\":1,\"121\":1,\"124\":1,\"133\":1,\"186\":1,\"191\":1,\"231\":2}}],[\"监听到变更事件后\",{\"1\":{\"163\":1}}],[\"监听\",{\"1\":{\"114\":1,\"115\":1,\"159\":1,\"160\":1,\"164\":1}}],[\"监听事件将数据同步至\",{\"1\":{\"155\":1,\"157\":1}}],[\"监听事件处理逻辑\",{\"0\":{\"111\":1}}],[\"监听事件\",{\"0\":{\"109\":1}}],[\"监听请求做了\",{\"1\":{\"103\":1}}],[\"监听器初始化\",{\"1\":{\"114\":1}}],[\"监听器注入\",{\"0\":{\"110\":1}}],[\"监听器\",{\"1\":{\"46\":1}}],[\"监控插件\",{\"1\":{\"185\":1}}],[\"监控\",{\"1\":{\"14\":1,\"277\":1,\"296\":1,\"297\":1,\"304\":1}}],[\"秒后达到指定阈值\",{\"1\":{\"220\":1}}],[\"秒后进入如半开状态\",{\"1\":{\"219\":1}}],[\"秒的阈值是低于设置阈值的\",{\"1\":{\"220\":1}}],[\"秒的时间\",{\"1\":{\"99\":1}}],[\"秒钟内阈值逐步增长到指定阈值\",{\"1\":{\"220\":1}}],[\"秒钟内有\",{\"1\":{\"219\":1}}],[\"秒钟内如果请求的次数少于\",{\"1\":{\"219\":1}}],[\"秒钟为统计范围\",{\"1\":{\"219\":1}}],[\"秒钟和\",{\"1\":{\"219\":1}}],[\"秒钟如果有数据变化\",{\"1\":{\"99\":1}}],[\"秒主动探活更新\",{\"1\":{\"184\":1}}],[\"秒执行一次\",{\"1\":{\"180\":1}}],[\"秒过后依然没有数据变化\",{\"1\":{\"99\":1}}],[\"秒去执行一次检查\",{\"1\":{\"46\":1}}],[\"秒\",{\"1\":{\"46\":1,\"180\":1,\"219\":1}}],[\"端参数的转换\",{\"1\":{\"240\":2}}],[\"端将数据同步到\",{\"1\":{\"236\":1}}],[\"端口格式\",{\"1\":{\"182\":2}}],[\"端口时\",{\"1\":{\"64\":1}}],[\"端口的\",{\"1\":{\"62\":1}}],[\"端\",{\"1\":{\"46\":1,\"236\":2,\"240\":2}}],[\"根据泛化方式\",{\"1\":{\"248\":2}}],[\"根据body\",{\"1\":{\"243\":1}}],[\"根据ferference\",{\"1\":{\"243\":1}}],[\"根据metadata路径获取ferference\",{\"1\":{\"243\":1}}],[\"根据配置设置sentinel熔断规则\",{\"1\":{\"220\":1}}],[\"根据配置设置sentinel流控规则\",{\"1\":{\"220\":1}}],[\"根据配置的\",{\"1\":{\"162\":1}}],[\"根据具体请求再由\",{\"1\":{\"213\":1}}],[\"根据自定义的路径\",{\"1\":{\"211\":1}}],[\"根据状态码返回给前端不同的数据格式\",{\"1\":{\"191\":1}}],[\"根据规则的\",{\"1\":{\"189\":1}}],[\"根据对应的事件类型通过\",{\"1\":{\"154\":1}}],[\"根据加载类对象取出缓存中数据\",{\"1\":{\"130\":1}}],[\"根据子类的不同实现\",{\"1\":{\"118\":1}}],[\"根据数据的事件类型\",{\"1\":{\"116\":1}}],[\"根据数据变动事件类型\",{\"1\":{\"115\":1}}],[\"根据事件的类型\",{\"1\":{\"116\":1}}],[\"根据传入信息得到数据变更的事件类型\",{\"1\":{\"115\":1}}],[\"根据传入的数据类型枚举\",{\"1\":{\"102\":1}}],[\"根据发布事件的类型走不同的逻辑\",{\"1\":{\"111\":1}}],[\"根据这个算法的步骤\",{\"1\":{\"89\":1}}],[\"根据已知部分猜测\",{\"1\":{\"79\":1}}],[\"根据\",{\"1\":{\"77\":1,\"79\":1,\"80\":1,\"160\":1,\"181\":1}}],[\"根据创建的\",{\"1\":{\"46\":1}}],[\"根据后端请求\",{\"1\":{\"46\":1}}],[\"从发布\",{\"0\":{\"305\":1}}],[\"从配置信息我们知道熔断器默认是关闭\",{\"1\":{\"226\":1}}],[\"从插件配置中生成sentinel使用的资源名称\",{\"1\":{\"220\":1}}],[\"从上到下从左到右分别是\",{\"1\":{\"220\":1}}],[\"从流量控制\",{\"1\":{\"218\":1}}],[\"从并发数来考量的话就是请求上下文的线程数目超过多少进行流控\",{\"1\":{\"217\":1}}],[\"从某种意义上讲通过并发进行流控可以一定程度上保护网关服务本身\",{\"1\":{\"217\":1}}],[\"从一个\",{\"0\":{\"120\":1}}],[\"从一个类关系图说起\",{\"1\":{\"82\":1}}],[\"从缓存中获取数据\",{\"1\":{\"103\":1}}],[\"从当前ip得到一个hash值\",{\"1\":{\"87\":1}}],[\"从\",{\"1\":{\"46\":1,\"159\":1,\"241\":1}}],[\"从而达到快速灵活扩展的目的\",{\"1\":{\"169\":1}}],[\"从而达到时时生效的目地\",{\"1\":{\"46\":1}}],[\"从而到达最终一致性\",{\"1\":{\"30\":1}}],[\"自动发现服务\",{\"1\":{\"296\":1}}],[\"自动装配\",{\"1\":{\"175\":1}}],[\"自动部署\",{\"1\":{\"19\":1}}],[\"自然是为了防止大量的循环的无用拉取\",{\"1\":{\"103\":1}}],[\"自定义\",{\"1\":{\"303\":1}}],[\"自定义插件\",{\"1\":{\"296\":1}}],[\"自定义模块\",{\"1\":{\"271\":1}}],[\"自定义配置\",{\"1\":{\"224\":1}}],[\"自定义结束数据变动后要干什么\",{\"1\":{\"95\":1}}],[\"自定义流量就是请求会走你下面的匹配方式与条件\",{\"1\":{\"68\":1}}],[\"自身接口转发\",{\"1\":{\"212\":1}}],[\"自身\",{\"1\":{\"89\":1}}],[\"自己仓库中的\",{\"0\":{\"50\":1}}],[\"自带响应式编程的方法\",{\"1\":{\"46\":1}}],[\"自带的响应式编程把数据同步到\",{\"1\":{\"46\":1}}],[\"与业务系统完全融合\",{\"1\":{\"270\":1}}],[\"与代码的优化\",{\"1\":{\"264\":1}}],[\"与网关\",{\"0\":{\"157\":1}}],[\"与网关的请求时间比较\",{\"1\":{\"97\":1,\"99\":1}}],[\"与\",{\"1\":{\"46\":3,\"85\":1,\"103\":1,\"134\":1,\"185\":1,\"186\":2,\"265\":1,\"271\":1,\"272\":2,\"273\":1,\"278\":1,\"288\":1,\"300\":1}}],[\"后的长度去掉\",{\"1\":{\"287\":1}}],[\"后来发现是整个设计有问题\",{\"1\":{\"284\":1}}],[\"后来在群友的帮助下定位到是\",{\"1\":{\"64\":1}}],[\"后转回个人名下\",{\"1\":{\"258\":1}}],[\"后缀邮箱\",{\"1\":{\"254\":1}}],[\"后期会单独开一篇具体讲解\",{\"1\":{\"188\":1}}],[\"后期跟踪\",{\"1\":{\"185\":1}}],[\"后关键事情都没干\",{\"1\":{\"121\":1}}],[\"后\",{\"1\":{\"111\":1,\"218\":1}}],[\"后续插件执行\",{\"1\":{\"227\":1}}],[\"后续碰到相关的\",{\"1\":{\"111\":1}}],[\"后续单写一篇文章分析\",{\"1\":{\"78\":1}}],[\"后半部分是发布了一个事件\",{\"1\":{\"107\":1}}],[\"后面自己又陆续写了\",{\"1\":{\"305\":1}}],[\"后面对\",{\"1\":{\"149\":1}}],[\"后面的是调用具体子类的\",{\"1\":{\"118\":1}}],[\"后面的流程与启动时的一致\",{\"1\":{\"103\":1}}],[\"后面也是补充些属性\",{\"1\":{\"90\":1}}],[\"后面分析\",{\"1\":{\"79\":1}}],[\"后面补上\",{\"1\":{\"78\":1}}],[\"后面就启动线程去判断\",{\"1\":{\"46\":1}}],[\"后台禁用该插件即可\",{\"1\":{\"302\":1}}],[\"后台控制界面\",{\"1\":{\"300\":1}}],[\"后台管理\",{\"1\":{\"296\":1,\"304\":1}}],[\"后台在插件管理页面打开\",{\"1\":{\"235\":1}}],[\"后台设置选择器规则\",{\"1\":{\"208\":1}}],[\"后台对应的\",{\"0\":{\"201\":1}}],[\"后台操作更改\",{\"1\":{\"160\":1}}],[\"后台操作的数据是怎么同步到\",{\"1\":{\"46\":1}}],[\"后台如何建立\",{\"0\":{\"114\":1}}],[\"后台接口\",{\"0\":{\"107\":1}}],[\"后台接住这个请求并\",{\"1\":{\"97\":1}}],[\"后台的数据\",{\"1\":{\"103\":1}}],[\"后台通过\",{\"1\":{\"99\":1}}],[\"后台通过这个\",{\"1\":{\"98\":1}}],[\"后台怎么获知是否数据更新\",{\"1\":{\"97\":1,\"99\":1}}],[\"后台数据初始化\",{\"1\":{\"95\":1}}],[\"后台模式切换完成\",{\"1\":{\"94\":1}}],[\"后台信息模式切换\",{\"1\":{\"94\":1}}],[\"后台与网关数据同步\",{\"0\":{\"93\":1,\"101\":1,\"113\":1},\"1\":{\"103\":1}}],[\"后台配置规则\",{\"1\":{\"46\":1}}],[\"后才能转移到组织\",{\"1\":{\"23\":1,\"252\":1}}],[\"删除指定规则\",{\"1\":{\"220\":1}}],[\"删除与新配置同resourcename的配置\",{\"1\":{\"220\":2}}],[\"删除等\",{\"1\":{\"116\":1}}],[\"删除\",{\"1\":{\"46\":1,\"159\":1,\"160\":1,\"286\":1}}],[\"quickstart\",{\"1\":{\"301\":1}}],[\"queryparams\",{\"1\":{\"186\":2}}],[\"query\",{\"1\":{\"46\":1,\"68\":1}}],[\"qsli\",{\"1\":{\"250\":1}}],[\"qps\",{\"1\":{\"217\":3,\"220\":8,\"300\":1}}],[\"qq\",{\"1\":{\"45\":1,\"275\":1,\"282\":1,\"295\":1,\"299\":1}}],[\"而非默认\",{\"1\":{\"286\":1}}],[\"而设计\",{\"1\":{\"223\":1}}],[\"而直接把系统拉升到高水位可能瞬间把系统压垮\",{\"1\":{\"217\":1}}],[\"而第二种场景主要考虑的是服务本身出现了不可避免\",{\"1\":{\"216\":1}}],[\"而针对于ratelimiterplugin而言\",{\"1\":{\"201\":1}}],[\"而丢弃任何请求\",{\"1\":{\"195\":1}}],[\"而调用上游服务的工作是由其他相应的\",{\"1\":{\"173\":1}}],[\"而又不影响整体系统的稳定\",{\"1\":{\"169\":1}}],[\"而没有使用\",{\"1\":{\"154\":1}}],[\"而它的\",{\"1\":{\"133\":1}}],[\"而这些代码的作用便是将\",{\"1\":{\"124\":1}}],[\"而传参是\",{\"1\":{\"121\":1}}],[\"而子类实现它\",{\"1\":{\"120\":1}}],[\"而是在遍历时查找\",{\"1\":{\"121\":1}}],[\"而是编辑资源文件\",{\"1\":{\"119\":1}}],[\"而是通知所有数据刷新类\",{\"1\":{\"102\":1}}],[\"而是\",{\"1\":{\"99\":1}}],[\"而是直接使用其父类的\",{\"1\":{\"98\":1}}],[\"而在\",{\"1\":{\"98\":1}}],[\"而在参与者中\",{\"1\":{\"39\":1}}],[\"而后台则是做好数据的更新\",{\"1\":{\"97\":1}}],[\"而权重分大的节点\",{\"1\":{\"89\":1}}],[\"而被选中的节点\",{\"1\":{\"89\":1}}],[\"而选择器和规则这两个概念也是\",{\"1\":{\"67\":1}}],[\"而\",{\"1\":{\"67\":1,\"98\":1,\"128\":1,\"149\":1,\"188\":1,\"205\":1,\"231\":1}}],[\"而网关作为所有服务的统一入口\",{\"1\":{\"67\":1}}],[\"而且之后的\",{\"1\":{\"46\":1}}],[\"而不用添加配置后去重启网关\",{\"1\":{\"46\":1}}],[\"而不需要重启网关\",{\"1\":{\"46\":1}}],[\"见下图\",{\"1\":{\"46\":1}}],[\"请参考\",{\"1\":{\"273\":1}}],[\"请详细看\",{\"1\":{\"208\":1}}],[\"请求重启\",{\"1\":{\"223\":1}}],[\"请求会默认执行\",{\"1\":{\"213\":1}}],[\"请求初探的文章中\",{\"1\":{\"193\":1}}],[\"请求结束后对应的处理\",{\"1\":{\"190\":1}}],[\"请求处理概览概览这篇文章中\",{\"1\":{\"185\":1}}],[\"请求处理的起点\",{\"1\":{\"174\":1}}],[\"请求都由该插件进行负载均衡处理\",{\"1\":{\"177\":1}}],[\"请求调用流程\",{\"1\":{\"191\":1}}],[\"请求调用流程大体已经结束\",{\"1\":{\"191\":1}}],[\"请求调用插件\",{\"0\":{\"190\":1}}],[\"请求调用经过了哪些类\",{\"1\":{\"185\":1}}],[\"请求调用\",{\"1\":{\"153\":2}}],[\"请求信息\",{\"1\":{\"103\":1}}],[\"请求后台的\",{\"1\":{\"102\":1}}],[\"请求类型\",{\"1\":{\"90\":1}}],[\"请求自然也有转发下游和返回响应\",{\"1\":{\"85\":1}}],[\"请求进行各种规则的路由转发\",{\"1\":{\"67\":1}}],[\"请求\",{\"1\":{\"58\":1,\"59\":1,\"61\":1,\"62\":1,\"83\":2,\"85\":1,\"106\":1,\"178\":1}}],[\"请求转发\",{\"0\":{\"56\":1}}],[\"请求的网关调用\",{\"1\":{\"185\":1}}],[\"请求的结果演示\",{\"0\":{\"147\":1}}],[\"请求的\",{\"1\":{\"46\":1,\"67\":1,\"70\":1}}],[\"请考虑支持\",{\"1\":{\"24\":1}}],[\"状态是启用\",{\"1\":{\"46\":1}}],[\"传一个\",{\"1\":{\"296\":1}}],[\"传参数\",{\"1\":{\"296\":1}}],[\"传递\",{\"1\":{\"292\":1}}],[\"传递的是所需的参数\",{\"1\":{\"205\":1}}],[\"传递的是\",{\"1\":{\"205\":1}}],[\"传递了一些参数\",{\"1\":{\"29\":1}}],[\"传到到各类订阅器\",{\"1\":{\"103\":1}}],[\"传给数据刷新工厂\",{\"1\":{\"102\":1}}],[\"传入\",{\"1\":{\"137\":1,\"288\":1}}],[\"传入关键的接口\",{\"1\":{\"121\":1}}],[\"传入多个节点组成的集群\",{\"1\":{\"118\":1}}],[\"传入了\",{\"1\":{\"98\":1}}],[\"传入到分页相关的参数\",{\"1\":{\"46\":1}}],[\"类开始进入插件链调用\",{\"1\":{\"241\":1}}],[\"类实现了\",{\"1\":{\"188\":1}}],[\"类相关引用\",{\"1\":{\"185\":1}}],[\"类我们已经有了一定的理解\",{\"1\":{\"185\":1}}],[\"类结构如下\",{\"1\":{\"174\":1}}],[\"类插件完成\",{\"1\":{\"173\":1}}],[\"类关系图\",{\"1\":{\"164\":1}}],[\"类继承关系\",{\"1\":{\"163\":1}}],[\"类路径\",{\"1\":{\"137\":1}}],[\"类对象与对象实例\",{\"1\":{\"135\":1}}],[\"类对象\",{\"1\":{\"134\":1,\"137\":4}}],[\"类中会向容器注入\",{\"1\":{\"164\":1}}],[\"类中\",{\"1\":{\"103\":1}}],[\"类中去了\",{\"1\":{\"46\":1}}],[\"类似下面示例\",{\"1\":{\"84\":1}}],[\"类似于心跳的作用\",{\"1\":{\"46\":1}}],[\"类型的服务接口\",{\"1\":{\"232\":1}}],[\"类型的任务\",{\"1\":{\"98\":1}}],[\"类型的\",{\"1\":{\"84\":1,\"110\":1}}],[\"类型\",{\"1\":{\"68\":1}}],[\"类打断点调试\",{\"1\":{\"46\":1}}],[\"类里面相对应的方法\",{\"1\":{\"46\":1}}],[\"类里来了\",{\"1\":{\"46\":1}}],[\"类的问题到这还没解决\",{\"1\":{\"46\":1}}],[\"类的方法\",{\"1\":{\"46\":1}}],[\"类的\",{\"1\":{\"46\":1,\"83\":1,\"154\":1,\"241\":1}}],[\"类\",{\"1\":{\"46\":1,\"116\":1,\"160\":1,\"185\":1,\"188\":1}}],[\"页面操作查找接口\",{\"0\":{\"106\":1}}],[\"页面操作之后把数据保存数据库\",{\"1\":{\"46\":1}}],[\"页面操作源码分析\",{\"1\":{\"46\":1}}],[\"页面显示加载的插件列表会对应后端的请求\",{\"1\":{\"46\":1}}],[\"地址\",{\"1\":{\"45\":1,\"207\":1,\"267\":2,\"295\":2,\"299\":2}}],[\"地点\",{\"1\":{\"10\":1,\"13\":1}}],[\"下载\",{\"1\":{\"301\":1}}],[\"下文件名带\",{\"1\":{\"288\":1}}],[\"下文我会讲解\",{\"1\":{\"29\":1}}],[\"下一个版本\",{\"0\":{\"274\":1}}],[\"下一秒重新开始计数\",{\"1\":{\"219\":1}}],[\"下类名的\",{\"1\":{\"117\":2}}],[\"下\",{\"1\":{\"117\":2}}],[\"下的子模块相当于插件模块\",{\"1\":{\"171\":1}}],[\"下的\",{\"1\":{\"116\":1,\"185\":1}}],[\"下的接口\",{\"1\":{\"116\":1}}],[\"下游服务节点路径被确定\",{\"1\":{\"90\":1}}],[\"下面举\",{\"1\":{\"273\":1}}],[\"下面使用genericserice\",{\"1\":{\"243\":1}}],[\"下面我只是列举了一下简单的调用图\",{\"1\":{\"296\":1}}],[\"下面我们关注\",{\"1\":{\"241\":1}}],[\"下面我一个个来看一下\",{\"1\":{\"220\":1}}],[\"下面就带了\",{\"1\":{\"241\":1}}],[\"下面来重点分析下各个配置项如何使用\",{\"1\":{\"218\":1}}],[\"下面来看看里面的代码\",{\"1\":{\"46\":1}}],[\"下面将简要介绍在\",{\"1\":{\"218\":1}}],[\"下面通过初始化redirectplugin\",{\"1\":{\"213\":1}}],[\"下面通过找到打日志的代码\",{\"1\":{\"46\":1}}],[\"下面分析一下\",{\"1\":{\"162\":1}}],[\"下面记录一下解决过程\",{\"1\":{\"162\":1}}],[\"下面详细记录一下\",{\"1\":{\"162\":1}}],[\"下面需要注意的\",{\"1\":{\"145\":1}}],[\"下面的配置默认是没有的\",{\"1\":{\"162\":1}}],[\"下面的\",{\"1\":{\"112\":1}}],[\"下面展示下网关监听数据变动的整体流程\",{\"1\":{\"103\":1}}],[\"下面展示下网关启动拉取数据的处理流程\",{\"1\":{\"102\":1}}],[\"下面构造\",{\"1\":{\"80\":1}}],[\"下面紧接着就是更新数据库\",{\"1\":{\"79\":1}}],[\"下面是\",{\"1\":{\"45\":1}}],[\"上配置使用\",{\"1\":{\"215\":1}}],[\"上述代码有几个较为关键的点\",{\"1\":{\"201\":1}}],[\"上有了网关的配置信息\",{\"1\":{\"162\":1}}],[\"上面提到\",{\"1\":{\"179\":1,\"183\":1}}],[\"上面看着挺顺利\",{\"1\":{\"162\":1}}],[\"上面都是将信息放入对象实例属性中\",{\"1\":{\"121\":1}}],[\"上一篇\",{\"1\":{\"157\":1}}],[\"上的\",{\"1\":{\"153\":1}}],[\"上的节点信息\",{\"1\":{\"96\":1}}],[\"上\",{\"1\":{\"104\":1}}],[\"上下文中已经有了下游服务节点的真实路径\",{\"1\":{\"85\":1}}],[\"上下文中\",{\"1\":{\"85\":1}}],[\"上图画红框的地方是不是很眼熟\",{\"1\":{\"46\":1}}],[\"上进行\",{\"1\":{\"45\":1}}],[\"上看相关文档就好\",{\"1\":{\"32\":1}}],[\"尤其是逻辑方面的\",{\"1\":{\"45\":1}}],[\"注释类上可以看到相关注释\",{\"1\":{\"128\":1}}],[\"注入\",{\"1\":{\"213\":1}}],[\"注入nacos配置服务\",{\"1\":{\"164\":1}}],[\"注入nacos客户端配置服务\",{\"1\":{\"164\":1}}],[\"注入nacos数据同步服务\",{\"1\":{\"164\":1}}],[\"注入各类型订阅器到\",{\"1\":{\"102\":1}}],[\"注入请求类型和url\",{\"1\":{\"90\":1}}],[\"注册成默认处理\",{\"1\":{\"213\":1}}],[\"注册\",{\"1\":{\"127\":1,\"154\":1}}],[\"注册到变量中\",{\"1\":{\"124\":1}}],[\"注册自己的插件成为\",{\"1\":{\"84\":1}}],[\"注册规则\",{\"1\":{\"80\":1}}],[\"注册这个规则\",{\"1\":{\"80\":1}}],[\"注册入口\",{\"0\":{\"75\":1}}],[\"注册的客户端端口还是\",{\"1\":{\"64\":1}}],[\"注解方式的使用的变更\",{\"1\":{\"273\":1}}],[\"注解的类生效\",{\"1\":{\"154\":1}}],[\"注解\",{\"1\":{\"45\":1,\"57\":1,\"112\":1,\"137\":2,\"154\":1,\"236\":1,\"273\":2}}],[\"注意此处需要填写\",{\"1\":{\"197\":1}}],[\"注意此处的插件列表经过了一次重排\",{\"1\":{\"174\":1}}],[\"注意\",{\"1\":{\"70\":1,\"72\":1,\"178\":1}}],[\"注意在是发起方的时候\",{\"1\":{\"32\":1}}],[\"注意是\",{\"1\":{\"32\":1}}],[\"注意状态是\",{\"1\":{\"32\":1}}],[\"就这\",{\"1\":{\"302\":1}}],[\"就这么简单\",{\"1\":{\"45\":1}}],[\"就能发挥重要的作用了\",{\"1\":{\"296\":1}}],[\"就能对任何接入网关的流量进行管理\",{\"1\":{\"67\":1}}],[\"就重新初始化限流实例和连接池实例放入\",{\"1\":{\"201\":1}}],[\"就看到了\",{\"1\":{\"162\":1}}],[\"就进行注入\",{\"1\":{\"154\":1}}],[\"就等\",{\"1\":{\"103\":1}}],[\"就由这个类在\",{\"1\":{\"95\":1}}],[\"就在其中\",{\"1\":{\"85\":1}}],[\"就把他剔除出去\",{\"1\":{\"79\":1}}],[\"就跟盗梦空间似的\",{\"1\":{\"79\":1}}],[\"就会更新\",{\"1\":{\"46\":1}}],[\"就点了这个同步所有数据\",{\"1\":{\"46\":1}}],[\"就是你发版影响了其他模块的使用\",{\"1\":{\"296\":1}}],[\"就是有个运营管理平台的\",{\"1\":{\"296\":1}}],[\"就是在\",{\"1\":{\"296\":1}}],[\"就是触发流控的边界\",{\"1\":{\"217\":1}}],[\"就是基于第二种实现的\",{\"1\":{\"205\":1}}],[\"就是替换发起请求的插件和返回结果处理的插件\",{\"1\":{\"191\":1}}],[\"就是判断请求状态码\",{\"1\":{\"191\":1}}],[\"就是接口\",{\"1\":{\"121\":1}}],[\"就是如下的配置类\",{\"1\":{\"110\":1}}],[\"就是定义了一个模板\",{\"1\":{\"95\":1}}],[\"就是延迟加载所有\",{\"1\":{\"84\":1}}],[\"就是插件链的形成与链式调用\",{\"1\":{\"84\":1}}],[\"就是业务系统下的接口地址\",{\"1\":{\"80\":1}}],[\"就是\",{\"1\":{\"79\":1,\"220\":1}}],[\"就是这个事件方法\",{\"1\":{\"46\":1}}],[\"就是用这个插件来测试网关\",{\"1\":{\"46\":1}}],[\"就算在运行过程中日志保存异常\",{\"1\":{\"37\":1}}],[\"就算存在可能你说的什么断电\",{\"1\":{\"32\":1}}],[\"包装的工具类不得不进行修改\",{\"1\":{\"284\":1}}],[\"包含访问密钥\",{\"1\":{\"140\":1}}],[\"包括支持现在的\",{\"1\":{\"265\":1}}],[\"包括且不限于组织品牌\",{\"1\":{\"259\":1}}],[\"包括调用的方法\",{\"1\":{\"248\":1}}],[\"包括\",{\"1\":{\"84\":1,\"114\":1}}],[\"包\",{\"0\":{\"45\":1},\"1\":{\"174\":1,\"264\":1,\"273\":1,\"296\":1,\"301\":2}}],[\"只会支持\",{\"1\":{\"280\":1}}],[\"只会有一个监听器\",{\"1\":{\"111\":1}}],[\"只需三个步骤\",{\"1\":{\"273\":1}}],[\"只需提供调用的方法名称\",{\"1\":{\"240\":1}}],[\"只需要把你的微服务注册到\",{\"1\":{\"304\":1}}],[\"只需要将版本升级到\",{\"1\":{\"273\":1}}],[\"只需要定义好资源文件\",{\"1\":{\"119\":1}}],[\"只需要添加一个实现即可\",{\"1\":{\"119\":1}}],[\"只需要根据你的\",{\"0\":{\"45\":1}}],[\"只有匹配的请求\",{\"1\":{\"208\":1}}],[\"只有\",{\"1\":{\"185\":2,\"220\":1}}],[\"只是需要把访问域名改成网关的域名即可\",{\"1\":{\"296\":1}}],[\"只是针对加了\",{\"1\":{\"266\":1}}],[\"只是\",{\"1\":{\"130\":1}}],[\"只是分布式事务的搬运工\",{\"1\":{\"29\":1}}],[\"只要开启了\",{\"1\":{\"227\":1}}],[\"只要保证是用同一个\",{\"1\":{\"122\":1}}],[\"只要服务节点不增减\",{\"1\":{\"87\":1}}],[\"只不过是立即执行\",{\"1\":{\"46\":1}}],[\"那怎么办\",{\"1\":{\"305\":1}}],[\"那我把他们拆处理\",{\"1\":{\"304\":1}}],[\"那有些插件我不想用了怎么办\",{\"1\":{\"302\":1}}],[\"那样去写反向的\",{\"1\":{\"281\":1}}],[\"那最终我们的信息获取肯定也少不了分析这个\",{\"1\":{\"98\":1}}],[\"那些用于更新的数据放哪里\",{\"1\":{\"97\":1,\"99\":1}}],[\"那这个对应的实现到底做了哪些事呢\",{\"1\":{\"201\":1}}],[\"那这个参数在哪封装的呢\",{\"1\":{\"189\":1}}],[\"那这个插件的执行顺序是在哪定义的呢\",{\"1\":{\"185\":1}}],[\"那这个就更容易了\",{\"0\":{\"45\":1}}],[\"那这里涉及到三个点\",{\"1\":{\"97\":1}}],[\"那\",{\"1\":{\"95\":1,\"96\":1,\"185\":1,\"186\":1}}],[\"那就把监听器里的代码打上断点\",{\"1\":{\"46\":1}}],[\"那就得有\",{\"1\":{\"46\":1}}],[\"那就是基于事件的\",{\"1\":{\"46\":1}}],[\"那么你应该引入如下\",{\"1\":{\"302\":2}}],[\"那么你要怎么解决这个问题呢\",{\"1\":{\"296\":1}}],[\"那么就大大的可行了\",{\"1\":{\"296\":1}}],[\"那么就需要在实体类上使用一个\",{\"1\":{\"154\":1}}],[\"那么注定它就是跨语言的\",{\"1\":{\"296\":1}}],[\"那么信息就会存储到\",{\"1\":{\"232\":1}}],[\"那么该服务才不会再收到任何请求\",{\"1\":{\"220\":1}}],[\"那么实际后向服务需要处理的\",{\"1\":{\"220\":1}}],[\"那么在什么场景下\",{\"1\":{\"304\":1}}],[\"那么在做流控时\",{\"1\":{\"220\":1}}],[\"那么在ioc容器中是获取不到properties\",{\"1\":{\"154\":1}}],[\"那么流控效果只能是\",{\"1\":{\"220\":1}}],[\"那么即使达到阈值也不会触发熔断\",{\"1\":{\"219\":1}}],[\"那么abstractsoulplugin又做了哪些扩展呢\",{\"1\":{\"188\":1}}],[\"那么我们来看看\",{\"1\":{\"296\":1}}],[\"那么我们还有个在\",{\"1\":{\"127\":1}}],[\"那么我们的\",{\"1\":{\"96\":1}}],[\"那么初始化实现类后又有什么作用呢\",{\"1\":{\"124\":1}}],[\"那么它的使用场景在哪呢\",{\"1\":{\"122\":1}}],[\"那么之前我们在测试时的方式为什么会产生不同对象实例呢\",{\"1\":{\"121\":1}}],[\"那么网关不延迟就会与后台产生大量无用的\",{\"1\":{\"103\":1}}],[\"那么这里肯定有新旧数据比对之类的东西了\",{\"1\":{\"99\":1}}],[\"那么对应下一开始的思考\",{\"1\":{\"99\":1}}],[\"那么问题来了\",{\"1\":{\"46\":1,\"110\":1}}],[\"那么引入\",{\"1\":{\"45\":3}}],[\"那么\",{\"0\":{\"36\":1},\"1\":{\"84\":1,\"124\":1,\"129\":1,\"220\":1}}],[\"那么很极端情况下\",{\"0\":{\"32\":1}}],[\"中大写转换问题\",{\"1\":{\"288\":1}}],[\"中获取一种插件进行调用\",{\"1\":{\"241\":1}}],[\"中不管是熔断后请求的处理还是被流控的请求\",{\"1\":{\"220\":1}}],[\"中使用了\",{\"1\":{\"219\":1}}],[\"中使用阿里的\",{\"1\":{\"215\":1}}],[\"中我们可以针对某一组请求同时设置它的流量控制和熔断策略\",{\"1\":{\"218\":1}}],[\"中我们还有很多的细节没有描述到\",{\"1\":{\"122\":1}}],[\"中如何配置使用\",{\"1\":{\"218\":1}}],[\"中如何实现筛选\",{\"1\":{\"125\":1}}],[\"中处理方案\",{\"1\":{\"217\":1}}],[\"中间那位特别长的数字是规则\",{\"1\":{\"204\":1}}],[\"中交给下游插件处理\",{\"1\":{\"190\":1}}],[\"中起到一个模板方法的作用\",{\"1\":{\"188\":1}}],[\"中插件一样继承\",{\"1\":{\"227\":1}}],[\"中插件式设计的实现\",{\"1\":{\"175\":1}}],[\"中插件链\",{\"1\":{\"174\":1}}],[\"中所有插件最终均继承自\",{\"1\":{\"173\":1}}],[\"中配置插件\",{\"1\":{\"218\":1}}],[\"中配置\",{\"1\":{\"149\":1,\"220\":1}}],[\"中配置的数据\",{\"1\":{\"66\":1}}],[\"中要使用的实现类呢\",{\"1\":{\"127\":1}}],[\"中进行统一管理\",{\"1\":{\"126\":1}}],[\"中关于\",{\"1\":{\"126\":1}}],[\"中注册了多个\",{\"1\":{\"125\":1}}],[\"中最关键的可插拔式驱动设计就是由\",{\"1\":{\"123\":1}}],[\"中定义一个\",{\"1\":{\"120\":1}}],[\"中有这样的一句定义\",{\"1\":{\"119\":1}}],[\"中被定时检测\",{\"1\":{\"98\":1}}],[\"中维护\",{\"1\":{\"95\":1}}],[\"中调用到的\",{\"1\":{\"85\":1}}],[\"中是否存在相关插件所在的\",{\"1\":{\"84\":1}}],[\"中的配置项\",{\"1\":{\"218\":1}}],[\"中的请求头放到本次调用的请求头中\",{\"1\":{\"190\":1}}],[\"中的实现改了种方式\",{\"1\":{\"130\":1}}],[\"中的实现类\",{\"1\":{\"122\":1,\"127\":1,\"131\":1}}],[\"中的问题也解开了\",{\"1\":{\"127\":1}}],[\"中的\",{\"1\":{\"84\":1,\"124\":1,\"126\":1,\"128\":1,\"247\":1}}],[\"中的一个属性\",{\"1\":{\"84\":1}}],[\"中的呢\",{\"1\":{\"46\":1}}],[\"中包含所有网关加载的插件\",{\"1\":{\"84\":1}}],[\"中引入了依赖\",{\"1\":{\"57\":1}}],[\"中还有功能现在还没有使用到\",{\"1\":{\"46\":1}}],[\"中还有其它方法同步数据\",{\"1\":{\"46\":1}}],[\"中就真相大白了\",{\"1\":{\"46\":1}}],[\"中\",{\"0\":{\"149\":1},\"1\":{\"46\":4,\"84\":2,\"85\":1,\"90\":1,\"94\":1,\"98\":1,\"102\":1,\"121\":1,\"128\":2,\"134\":1,\"149\":1,\"186\":1,\"201\":2,\"206\":1,\"220\":1,\"232\":1,\"248\":1,\"273\":4,\"286\":1,\"287\":1,\"288\":2}}],[\"中默认为空的\",{\"1\":{\"46\":1}}],[\"中心仓库\",{\"1\":{\"41\":1}}],[\"中国社区做的那篇文章\",{\"1\":{\"29\":1}}],[\"恭喜你\",{\"1\":{\"37\":1}}],[\"万一日志保存异常了\",{\"1\":{\"37\":1}}],[\"并启动\",{\"1\":{\"301\":1}}],[\"并支持配置的动态刷新\",{\"1\":{\"271\":1}}],[\"并经由投票通过后生效\",{\"1\":{\"259\":1}}],[\"并同步到技术社区\",{\"1\":{\"257\":1}}],[\"并进行持续不断的优化\",{\"1\":{\"296\":1}}],[\"并进行全员公告\",{\"1\":{\"257\":1}}],[\"并进行处理的大体流程\",{\"1\":{\"248\":1}}],[\"并发线程数\",{\"1\":{\"220\":1}}],[\"并选择真实的调用地址\",{\"1\":{\"189\":1}}],[\"并将该项目历史记录进行归档保存\",{\"1\":{\"258\":1}}],[\"并将其放在了serverwebexchange中\",{\"1\":{\"187\":1}}],[\"并将数据发送到各个插件的数据处理类中\",{\"1\":{\"102\":1}}],[\"并不直接向后端服务发起\",{\"1\":{\"178\":1}}],[\"并不会影响程序正确执行\",{\"1\":{\"37\":1}}],[\"并以此为框架分析\",{\"1\":{\"175\":1}}],[\"并监听事件同步更新数据至\",{\"1\":{\"160\":1}}],[\"并通过类对象初始化实例\",{\"1\":{\"135\":1}}],[\"并判断是否与接口符合\",{\"1\":{\"121\":1}}],[\"并返回结果result\",{\"1\":{\"248\":1}}],[\"并返回\",{\"1\":{\"121\":1,\"248\":1}}],[\"并没有在调用它的时候\",{\"1\":{\"121\":1}}],[\"并没有使用到\",{\"1\":{\"87\":1}}],[\"并成功调取它们各自的\",{\"1\":{\"120\":1}}],[\"并调用\",{\"1\":{\"149\":1}}],[\"并调用对应的\",{\"1\":{\"116\":1}}],[\"并调用子类\",{\"1\":{\"83\":1}}],[\"并更新缓存\",{\"1\":{\"102\":1}}],[\"并开启多个线程进行轮询监听\",{\"1\":{\"102\":1}}],[\"并在集合中剔除这个请求\",{\"1\":{\"98\":1}}],[\"并确定随机值落在哪个片断上\",{\"1\":{\"88\":1}}],[\"并比对treemap\",{\"1\":{\"87\":1}}],[\"并放入\",{\"1\":{\"85\":1}}],[\"并且发布到\",{\"1\":{\"256\":1}}],[\"并且采用\",{\"1\":{\"223\":1}}],[\"并且只是最终保证流程处理完\",{\"1\":{\"218\":1}}],[\"并且超过最大忍受时间的请求大于阈值\",{\"1\":{\"218\":1}}],[\"并且使用了\",{\"1\":{\"110\":1}}],[\"并且项目里还有节点信息缓存管理器\",{\"1\":{\"85\":1}}],[\"并且全部异步化\",{\"1\":{\"29\":1}}],[\"并注入到\",{\"1\":{\"84\":1}}],[\"并得到唯一一个匹配的选择器数据\",{\"1\":{\"83\":1}}],[\"并使用模板方法的设计模式\",{\"1\":{\"82\":1}}],[\"有些用户是传统的\",{\"1\":{\"305\":1}}],[\"有些用户\",{\"1\":{\"305\":1}}],[\"有些用户反馈\",{\"1\":{\"305\":1}}],[\"有人又会说\",{\"1\":{\"304\":1}}],[\"有人又会问\",{\"0\":{\"37\":1}}],[\"有了这个模式\",{\"1\":{\"281\":1}}],[\"有误的返回信息\",{\"1\":{\"242\":1}}],[\"有的请求返回如下数据\",{\"1\":{\"226\":1}}],[\"有的请求返回正常数据\",{\"1\":{\"226\":1}}],[\"有保护后继服务的职责\",{\"1\":{\"216\":1}}],[\"有必要说一些大前提\",{\"1\":{\"213\":1}}],[\"有兴趣的可以查看matchstrategy\",{\"1\":{\"188\":1}}],[\"有一个插件执行完成后传递给下一个插件\",{\"1\":{\"186\":1}}],[\"有一定的影响\",{\"1\":{\"183\":1}}],[\"有看到过一行代码\",{\"1\":{\"118\":1}}],[\"有序\",{\"1\":{\"87\":1}}],[\"有个小坑需要注意\",{\"1\":{\"84\":1}}],[\"有两个逻辑\",{\"1\":{\"83\":1}}],[\"有定时任务定期探活\",{\"1\":{\"79\":1}}],[\"有什么关系\",{\"1\":{\"46\":1}}],[\"有内置的调度线程池来进行恢复\",{\"1\":{\"36\":1}}],[\"其主要实现了handleplugin的接口\",{\"1\":{\"201\":1}}],[\"其持有通过构造方法传入的插件链\",{\"1\":{\"174\":1}}],[\"其结构如下\",{\"1\":{\"173\":1}}],[\"其核心代码如下\",{\"1\":{\"173\":1}}],[\"其完整继承关系如下所示\",{\"1\":{\"173\":1}}],[\"其继承关系\",{\"1\":{\"110\":1}}],[\"其他\",{\"1\":{\"186\":1,\"227\":1,\"264\":1}}],[\"其他多个的情况暂时不知道什么时候会出现\",{\"1\":{\"111\":1}}],[\"其他同步策略已经在忙着通知网关了\",{\"1\":{\"96\":1}}],[\"其他同步策略此时在干什么\",{\"0\":{\"96\":1}}],[\"其他类型的插件如果不重写\",{\"1\":{\"83\":1}}],[\"其中对于\",{\"1\":{\"213\":1}}],[\"其中包含两种场景\",{\"1\":{\"207\":1}}],[\"其中包含了我们本章分析的主题ratelimiterplugin\",{\"1\":{\"193\":1}}],[\"其中\",{\"1\":{\"206\":1,\"218\":1}}],[\"其中一种\",{\"1\":{\"193\":1}}],[\"其中一个在项目\",{\"1\":{\"117\":1}}],[\"其中执行了一个插件链的模式来完成了请求的处理\",{\"1\":{\"185\":1}}],[\"其中存有实现类的对象\",{\"1\":{\"133\":1}}],[\"其中最核心的类就是\",{\"1\":{\"130\":1}}],[\"其中线程池调用这还有个关键点\",{\"1\":{\"98\":1}}],[\"其中就有网关\",{\"1\":{\"96\":1}}],[\"其中两个最基本的插件类\",{\"1\":{\"82\":1}}],[\"其中表结构及字段含义还需进一步学习和研究\",{\"1\":{\"81\":1}}],[\"其次\",{\"1\":{\"37\":1,\"95\":1,\"220\":1}}],[\"其次如果出现这种情况\",{\"1\":{\"36\":1}}],[\"其实我们不难发现在defaultsoulpluginchain\",{\"1\":{\"185\":1}}],[\"其实就是\",{\"1\":{\"133\":1}}],[\"其实现类初始化时\",{\"1\":{\"126\":1}}],[\"其实也没必要非得启动业务系统\",{\"1\":{\"104\":1}}],[\"其实\",{\"1\":{\"95\":1}}],[\"其实原因有二点\",{\"1\":{\"39\":1}}],[\"其实几乎没有\",{\"1\":{\"31\":1}}],[\"其实那么测试时不合理的\",{\"1\":{\"29\":1}}],[\"首次迭代调用即会有反射调用\",{\"1\":{\"122\":1}}],[\"首次活动\",{\"0\":{\"10\":1,\"13\":1}}],[\"首先我觉得还是实用主义\",{\"1\":{\"304\":1}}],[\"首先我们提供了便于用户接入的\",{\"1\":{\"296\":1}}],[\"首先你新建一个空的\",{\"1\":{\"301\":1}}],[\"首先随便微服务的流行\",{\"1\":{\"296\":1,\"304\":1}}],[\"首先对泛化调用所需要的参数进行检查\",{\"1\":{\"242\":1}}],[\"首先进入\",{\"1\":{\"241\":1}}],[\"首先进入了\",{\"1\":{\"46\":1}}],[\"首先需要对响应式编程了解\",{\"1\":{\"227\":1}}],[\"首先在\",{\"1\":{\"224\":1}}],[\"首先登陆\",{\"1\":{\"218\":1}}],[\"首先是\",{\"1\":{\"220\":1}}],[\"首先是限流类型\",{\"1\":{\"220\":1}}],[\"首先是第一层缓存\",{\"1\":{\"133\":1}}],[\"首先是刚刚提到的\",{\"1\":{\"85\":1}}],[\"首先来看熔断相关的配置\",{\"1\":{\"219\":1}}],[\"首先来看\",{\"1\":{\"85\":1}}],[\"首先拿着规则名字\",{\"1\":{\"80\":1}}],[\"首先因为之前的包命名问题\",{\"1\":{\"41\":1}}],[\"首先\",{\"1\":{\"39\":1,\"67\":1,\"160\":1,\"162\":2}}],[\"首先要理解\",{\"1\":{\"38\":1}}],[\"首先日志配置的参数\",{\"1\":{\"37\":1}}],[\"首先这又是一个牛角尖问题\",{\"1\":{\"37\":1}}],[\"首先这种情况是非常罕见的\",{\"1\":{\"36\":1}}],[\"+plugin\",{\"1\":{\"185\":2}}],[\"+8\",{\"1\":{\"145\":2}}],[\"+=\",{\"1\":{\"88\":1,\"89\":1}}],[\"+\",{\"1\":{\"34\":1,\"63\":2,\"75\":1,\"78\":1,\"87\":3,\"90\":4,\"95\":1,\"102\":3,\"103\":1,\"109\":1,\"110\":1,\"111\":1,\"121\":7,\"137\":1,\"154\":1,\"163\":1,\"182\":3,\"203\":3,\"220\":3,\"236\":1,\"240\":40,\"248\":3}}],[\"==\",{\"1\":{\"83\":1,\"89\":2,\"91\":3,\"96\":1,\"112\":1,\"121\":6,\"125\":1,\"135\":1,\"137\":8,\"173\":1,\"178\":1,\"188\":1,\"191\":3,\"203\":1,\"206\":2,\"213\":1,\"220\":4,\"227\":3,\"247\":2,\"248\":3}}],[\"=1\",{\"1\":{\"63\":2}}],[\"=\",{\"1\":{\"34\":11,\"35\":7,\"38\":2,\"39\":4,\"42\":9,\"46\":5,\"68\":1,\"75\":3,\"76\":2,\"77\":11,\"78\":6,\"79\":11,\"80\":10,\"83\":8,\"84\":5,\"85\":6,\"87\":5,\"88\":9,\"89\":20,\"90\":5,\"91\":4,\"95\":6,\"96\":4,\"98\":10,\"102\":22,\"103\":13,\"107\":6,\"109\":3,\"110\":12,\"111\":5,\"112\":4,\"114\":3,\"115\":8,\"116\":2,\"118\":2,\"119\":1,\"120\":3,\"121\":20,\"124\":4,\"125\":7,\"127\":8,\"130\":4,\"132\":3,\"133\":3,\"134\":2,\"135\":3,\"137\":29,\"145\":4,\"149\":5,\"153\":4,\"154\":13,\"159\":7,\"160\":2,\"163\":6,\"164\":5,\"173\":13,\"174\":5,\"177\":1,\"178\":14,\"180\":1,\"181\":3,\"182\":4,\"183\":5,\"185\":3,\"186\":6,\"188\":8,\"189\":10,\"190\":8,\"191\":4,\"201\":5,\"203\":9,\"206\":19,\"213\":14,\"220\":14,\"226\":2,\"227\":17,\"232\":4,\"236\":2,\"238\":1,\"240\":1,\"241\":2,\"242\":8,\"243\":8,\"244\":3,\"247\":5,\"248\":18,\"273\":5}}],[\"lcn\",{\"1\":{\"305\":1}}],[\"luakeys\",{\"1\":{\"206\":1}}],[\"lua\",{\"0\":{\"206\":1},\"1\":{\"205\":2,\"206\":2}}],[\"ls\",{\"1\":{\"163\":3}}],[\"lettuceconnectionfactory\",{\"1\":{\"201\":4}}],[\"leisnull\",{\"1\":{\"188\":1}}],[\"left\",{\"1\":{\"103\":1}}],[\"length\",{\"1\":{\"46\":1,\"88\":3,\"247\":1,\"248\":4}}],[\"lambda\",{\"1\":{\"223\":1,\"287\":1,\"304\":2}}],[\"lazyiterator\",{\"1\":{\"121\":4}}],[\"later\",{\"1\":{\"199\":1}}],[\"latest\",{\"1\":{\"102\":1}}],[\"latency\",{\"1\":{\"63\":2,\"174\":1}}],[\"last\",{\"1\":{\"142\":1,\"173\":1,\"178\":1,\"206\":10,\"209\":1}}],[\"lastring\",{\"1\":{\"87\":4}}],[\"lastmodifytime=1611248302571\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248301607\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248299419\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248295740\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248419077\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248419075\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248419069\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248419012\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248419010\",{\"1\":{\"46\":1}}],[\"lastmodifytime=1611248118794\",{\"1\":{\"46\":1}}],[\"lang3\",{\"1\":{\"39\":1}}],[\"lang\",{\"1\":{\"35\":1,\"162\":3,\"240\":1}}],[\"l\",{\"1\":{\"46\":8,\"203\":2}}],[\"limit\",{\"1\":{\"225\":2,\"273\":1}}],[\"limitforperiod\",{\"1\":{\"224\":1}}],[\"limitrefreshperiod\",{\"1\":{\"224\":1}}],[\"limiterhandle\",{\"1\":{\"203\":3}}],[\"limiter\",{\"1\":{\"198\":1,\"220\":2}}],[\"liquan\",{\"1\":{\"153\":1}}],[\"like\",{\"1\":{\"68\":1}}],[\"list\",{\"1\":{\"286\":1,\"287\":1}}],[\"lists\",{\"1\":{\"103\":1,\"181\":1}}],[\"listen\",{\"1\":{\"98\":1,\"102\":1}}],[\"listenerbeans\",{\"1\":{\"109\":2,\"154\":2,\"163\":2}}],[\"listenerurl\",{\"1\":{\"103\":3}}],[\"listeners\",{\"1\":{\"95\":2,\"109\":3,\"110\":1,\"111\":1,\"154\":3,\"163\":2,\"164\":1}}],[\"listener\",{\"1\":{\"46\":3,\"95\":6,\"98\":2,\"103\":3,\"109\":6,\"110\":3,\"111\":7,\"154\":9,\"158\":2,\"163\":4,\"164\":8,\"247\":1,\"248\":1}}],[\"listall\",{\"1\":{\"95\":1,\"154\":3}}],[\"list<flowrule>\",{\"1\":{\"220\":1}}],[\"list<authdatasubscriber>\",{\"1\":{\"102\":1,\"115\":1,\"159\":2}}],[\"list<appauthdata>\",{\"1\":{\"95\":2,\"109\":1,\"110\":1,\"111\":2,\"154\":1}}],[\"list<metadatasubscriber>\",{\"1\":{\"102\":1,\"115\":1,\"159\":2}}],[\"list<metadata>\",{\"1\":{\"95\":2,\"109\":1,\"110\":1,\"111\":2}}],[\"list<configgroupenum>\",{\"1\":{\"98\":3}}],[\"list<t>\",{\"1\":{\"95\":1,\"116\":1}}],[\"list<plugindata>\",{\"1\":{\"95\":4,\"96\":2,\"98\":1,\"102\":1,\"109\":1,\"110\":1,\"111\":2,\"116\":1,\"154\":1}}],[\"list<degraderule>\",{\"1\":{\"220\":1}}],[\"list<datachangedlistener>\",{\"1\":{\"95\":1,\"109\":1,\"154\":1}}],[\"list<divideupstream>\",{\"1\":{\"77\":1,\"79\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":1,\"118\":1,\"173\":1,\"178\":1,\"179\":1,\"181\":4,\"183\":3,\"189\":1}}],[\"list<string>\",{\"1\":{\"145\":1,\"159\":1,\"160\":1,\"203\":2}}],[\"list<selectordata>\",{\"1\":{\"95\":2,\"109\":1,\"110\":1,\"111\":2,\"154\":1}}],[\"list<selectorconditiondto>\",{\"1\":{\"46\":1,\"78\":1}}],[\"list<soulplugin>\",{\"1\":{\"84\":4,\"174\":2,\"185\":1,\"213\":2}}],[\"list<ruledata>\",{\"1\":{\"83\":1,\"95\":2,\"109\":1,\"110\":1,\"111\":2,\"154\":1,\"163\":3,\"173\":1,\"178\":1,\"188\":1}}],[\"list<ruleconditiondto>\",{\"1\":{\"80\":1}}],[\"linkedmultivaluemap<>\",{\"1\":{\"103\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"34\":1,\"35\":1,\"75\":1,\"102\":1}}],[\"linkedblockingqueue\",{\"1\":{\"34\":1,\"35\":1}}],[\"linkplain\",{\"1\":{\"34\":2,\"38\":1,\"39\":2,\"42\":2,\"107\":2,\"154\":1,\"159\":1,\"163\":1,\"225\":2}}],[\"location\",{\"1\":{\"213\":1}}],[\"locating\",{\"1\":{\"121\":1}}],[\"localdatetime\",{\"1\":{\"145\":2}}],[\"localhost\",{\"1\":{\"54\":1,\"57\":1,\"58\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":4,\"71\":2,\"79\":1,\"94\":2,\"106\":1,\"152\":2,\"153\":10,\"162\":2,\"225\":1,\"226\":1,\"301\":2}}],[\"local\",{\"1\":{\"42\":1,\"152\":1,\"162\":1,\"206\":15,\"273\":4}}],[\"lookupiterator\",{\"1\":{\"121\":1}}],[\"longs\",{\"1\":{\"203\":3}}],[\"longpollinglistener\",{\"1\":{\"98\":1}}],[\"longpollingclient\",{\"1\":{\"98\":14,\"103\":1}}],[\"long\",{\"1\":{\"46\":8,\"87\":2,\"89\":4,\"90\":1,\"102\":2,\"103\":2,\"110\":1,\"190\":3,\"203\":1}}],[\"lombok\",{\"1\":{\"42\":1}}],[\"loadrules\",{\"1\":{\"220\":4}}],[\"loadresources\",{\"1\":{\"134\":2,\"137\":2}}],[\"loaddirectory\",{\"1\":{\"137\":2}}],[\"loadclass\",{\"1\":{\"134\":1,\"137\":2}}],[\"loadextensionclass\",{\"1\":{\"137\":2}}],[\"loadeddrivers\",{\"1\":{\"124\":2}}],[\"loaders\",{\"1\":{\"119\":2,\"130\":4}}],[\"loader\",{\"1\":{\"84\":1,\"121\":7}}],[\"loadinitialdrivers\",{\"1\":{\"124\":2}}],[\"loading\",{\"1\":{\"39\":5}}],[\"loadingcache<string\",{\"1\":{\"39\":1}}],[\"loadingcache\",{\"1\":{\"39\":1}}],[\"loadbalance=\",{\"1\":{\"266\":2}}],[\"loadbalanceutils\",{\"1\":{\"85\":1,\"118\":2,\"173\":1,\"178\":1,\"183\":1,\"189\":2}}],[\"loadbalance\",{\"1\":{\"80\":1,\"85\":1,\"118\":5,\"125\":3,\"183\":4}}],[\"load\",{\"1\":{\"39\":1,\"119\":1,\"120\":7,\"121\":11,\"124\":1,\"130\":1,\"134\":1,\"137\":2,\"162\":2,\"174\":1,\"213\":1}}],[\"loadfactor\",{\"1\":{\"32\":1,\"42\":1}}],[\"loged\",{\"1\":{\"78\":1,\"80\":2}}],[\"logging\",{\"1\":{\"55\":1}}],[\"loggerfactory\",{\"1\":{\"55\":1}}],[\"logger\",{\"1\":{\"38\":1,\"55\":2}}],[\"log4j\",{\"1\":{\"55\":5}}],[\"logutil\",{\"1\":{\"38\":1}}],[\"log\",{\"1\":{\"34\":1,\"42\":1,\"83\":2,\"84\":1,\"90\":1,\"95\":1,\"98\":1,\"102\":7,\"103\":4,\"112\":4,\"115\":1,\"149\":2,\"159\":1,\"164\":1,\"174\":1,\"189\":2,\"190\":2,\"203\":2,\"213\":2,\"226\":1,\"242\":1}}],[\"lmax\",{\"1\":{\"34\":5}}],[\"elasticseach\",{\"1\":{\"305\":1}}],[\"else\",{\"1\":{\"46\":1,\"77\":2,\"78\":6,\"79\":2,\"80\":1,\"83\":1,\"84\":2,\"91\":1,\"102\":2,\"107\":1,\"121\":3,\"124\":1,\"125\":1,\"173\":1,\"178\":1,\"181\":2,\"182\":2,\"186\":1,\"188\":1,\"190\":1,\"213\":1,\"220\":3,\"243\":1,\"247\":1,\"248\":4}}],[\"eureka\",{\"1\":{\"300\":1}}],[\"etcd\",{\"1\":{\"277\":1,\"278\":1}}],[\"eclipse\",{\"1\":{\"170\":1}}],[\"establishment\",{\"1\":{\"153\":2}}],[\"established\",{\"1\":{\"153\":1}}],[\"error\",{\"1\":{\"90\":2,\"91\":9,\"103\":1,\"107\":1,\"112\":9,\"121\":2,\"137\":2,\"149\":3,\"153\":1,\"162\":3,\"189\":9,\"190\":5,\"191\":9,\"203\":5,\"213\":1,\"220\":15,\"226\":1,\"227\":1,\"242\":12,\"244\":5,\"247\":2}}],[\"emptylist\",{\"1\":{\"84\":1,\"115\":2,\"159\":2,\"164\":2,\"174\":1,\"213\":1}}],[\"empty\",{\"1\":{\"84\":1,\"107\":1,\"163\":1,\"174\":1,\"185\":1,\"241\":1,\"243\":1}}],[\"embedded\",{\"1\":{\"55\":1,\"162\":1}}],[\"eq\",{\"1\":{\"80\":1,\"273\":3}}],[\"equals\",{\"1\":{\"77\":1,\"78\":4,\"79\":1,\"83\":2,\"112\":1,\"163\":1,\"186\":1,\"201\":1,\"220\":4,\"225\":1,\"247\":2,\"248\":2}}],[\"e\",{\"1\":{\"39\":1,\"55\":1,\"80\":2,\"90\":4,\"102\":5,\"103\":6,\"112\":4,\"124\":1,\"127\":6,\"137\":3,\"160\":2,\"162\":1,\"182\":1,\"190\":4,\"225\":9,\"248\":8}}],[\"extname\",{\"1\":{\"287\":1}}],[\"ext\",{\"1\":{\"232\":2}}],[\"ext`\",{\"1\":{\"232\":1}}],[\"extension\",{\"1\":{\"128\":1,\"137\":1}}],[\"extensionloader<>\",{\"1\":{\"130\":1}}],[\"extensionloader<\",{\"1\":{\"130\":1}}],[\"extensionloader<t>\",{\"1\":{\"130\":6}}],[\"extensionloader\",{\"0\":{\"130\":1},\"1\":{\"118\":2,\"129\":1,\"130\":7,\"131\":1,\"132\":1,\"136\":1,\"137\":1,\"183\":2,\"248\":1}}],[\"extend\",{\"1\":{\"128\":1}}],[\"extends\",{\"1\":{\"80\":3,\"98\":1,\"115\":1,\"116\":1,\"124\":1,\"220\":2}}],[\"export\",{\"1\":{\"240\":1}}],[\"exponential\",{\"1\":{\"190\":1}}],[\"exposing\",{\"1\":{\"55\":1,\"162\":1}}],[\"expose\",{\"1\":{\"42\":1}}],[\"exeute\",{\"1\":{\"188\":1}}],[\"exec\",{\"1\":{\"46\":1}}],[\"execution\",{\"1\":{\"42\":1}}],[\"executionexception\",{\"1\":{\"39\":2}}],[\"executequery\",{\"1\":{\"127\":2}}],[\"execute\",{\"0\":{\"205\":1},\"1\":{\"35\":6,\"82\":1,\"83\":6,\"84\":5,\"85\":1,\"90\":3,\"91\":2,\"98\":3,\"102\":1,\"173\":4,\"174\":5,\"178\":4,\"185\":3,\"186\":2,\"188\":2,\"189\":1,\"190\":2,\"191\":2,\"203\":2,\"213\":1,\"220\":1,\"227\":3,\"241\":4,\"242\":1,\"244\":2}}],[\"executor=\",{\"1\":{\"102\":1}}],[\"executorservice\",{\"1\":{\"75\":1}}],[\"executor\",{\"1\":{\"34\":5,\"35\":6,\"102\":6,\"115\":2,\"116\":1,\"227\":1}}],[\"ex\",{\"1\":{\"125\":1}}],[\"excelwriter\",{\"1\":{\"287\":1}}],[\"excelbase\",{\"1\":{\"287\":2}}],[\"excelreader\",{\"1\":{\"287\":2}}],[\"excelutil\",{\"1\":{\"286\":1}}],[\"exception\",{\"1\":{\"35\":1,\"80\":1,\"103\":1,\"107\":1,\"112\":2,\"127\":2,\"162\":5,\"163\":1,\"164\":1,\"190\":1,\"220\":2,\"226\":2,\"243\":4,\"248\":1}}],[\"excute的方法和作用了\",{\"1\":{\"203\":1}}],[\"excute方法进行埋点\",{\"1\":{\"185\":1}}],[\"excute\",{\"1\":{\"173\":1,\"185\":1,\"186\":2,\"188\":1,\"191\":1}}],[\"exchangefunction\",{\"1\":{\"90\":1}}],[\"exchange\",{\"1\":{\"83\":11,\"84\":6,\"85\":6,\"90\":15,\"91\":6,\"149\":2,\"173\":12,\"174\":6,\"178\":12,\"185\":4,\"186\":7,\"188\":9,\"189\":10,\"190\":22,\"191\":6,\"203\":4,\"213\":9,\"220\":11,\"227\":18,\"241\":6,\"242\":12,\"243\":4,\"244\":5}}],[\"exists\",{\"1\":{\"154\":3,\"159\":1,\"232\":1}}],[\"exist\",{\"1\":{\"76\":2,\"77\":4,\"79\":4}}],[\"examples\",{\"1\":{\"57\":2,\"60\":1,\"70\":2,\"185\":1,\"224\":1,\"226\":1}}],[\"examples模块添加到\",{\"1\":{\"56\":1}}],[\"eventthread\",{\"1\":{\"153\":2}}],[\"eventtype\",{\"1\":{\"95\":8,\"96\":5,\"98\":1,\"107\":3,\"108\":1,\"110\":10,\"111\":15,\"115\":4,\"116\":3,\"163\":3}}],[\"eventtypeenum\",{\"1\":{\"34\":2,\"38\":1,\"116\":2}}],[\"eventpublisher\",{\"1\":{\"77\":1,\"79\":2,\"107\":1,\"154\":4,\"163\":2}}],[\"event\",{\"1\":{\"34\":3,\"46\":1,\"77\":1,\"79\":1,\"95\":13,\"107\":1,\"108\":6,\"109\":13,\"110\":8,\"111\":13,\"153\":2,\"154\":6,\"163\":6}}],[\"env\",{\"1\":{\"273\":1}}],[\"environment\",{\"1\":{\"153\":6}}],[\"engine\",{\"1\":{\"232\":1}}],[\"endwith\",{\"1\":{\"287\":1}}],[\"end\",{\"1\":{\"142\":1,\"206\":3,\"302\":4}}],[\"endpoint\",{\"1\":{\"55\":1,\"162\":3}}],[\"endpointlinksresolver\",{\"1\":{\"55\":1,\"162\":1}}],[\"enumutil\",{\"1\":{\"287\":1}}],[\"enumeration<url>\",{\"1\":{\"137\":1}}],[\"enummap<>\",{\"1\":{\"102\":1,\"115\":1}}],[\"enummap<configgroupenum\",{\"1\":{\"102\":1,\"115\":1}}],[\"enum\",{\"1\":{\"102\":7,\"108\":5,\"115\":7}}],[\"enums\",{\"1\":{\"34\":1,\"35\":1,\"42\":2}}],[\"entry\",{\"1\":{\"288\":1}}],[\"entryset\",{\"1\":{\"89\":1}}],[\"entity\",{\"1\":{\"34\":2,\"35\":1,\"39\":1}}],[\"enable\",{\"1\":{\"220\":2,\"225\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"95\":1,\"110\":2,\"114\":1,\"154\":3}}],[\"enabled\",{\"1\":{\"78\":1,\"80\":2,\"94\":2,\"95\":1,\"110\":4,\"114\":2,\"153\":1,\"162\":3,\"266\":1,\"301\":1}}],[\"enable=false\",{\"1\":{\"46\":1}}],[\"enlistparticipant\",{\"1\":{\"38\":1}}],[\"采用只读模式\",{\"1\":{\"287\":1}}],[\"采用线程池异步去执行\",{\"1\":{\"35\":1}}],[\"采用\",{\"0\":{\"34\":1},\"1\":{\"128\":1,\"287\":1}}],[\"配置动态刷新功能\",{\"1\":{\"280\":1}}],[\"配置中心支持\",{\"1\":{\"278\":1}}],[\"配置中心上\",{\"1\":{\"273\":2}}],[\"配置模块\",{\"1\":{\"277\":1,\"278\":1,\"280\":1}}],[\"配置的变更\",{\"1\":{\"273\":1}}],[\"配置的热部署\",{\"1\":{\"201\":1}}],[\"配置负载方式为\",{\"1\":{\"266\":1}}],[\"配置线程池策略的问题\",{\"1\":{\"264\":1}}],[\"配置选项的开关\",{\"1\":{\"235\":1}}],[\"配置选择器和规则器\",{\"0\":{\"144\":1}}],[\"配置阈值\",{\"1\":{\"220\":1}}],[\"配置自定义路径时\",{\"1\":{\"211\":1}}],[\"配置以\",{\"1\":{\"207\":1}}],[\"配置为第三方\",{\"1\":{\"207\":1}}],[\"配置后立即生效的\",{\"0\":{\"201\":1}}],[\"配置过程遇到了很多坑\",{\"1\":{\"162\":1}}],[\"配置下来感觉使用\",{\"1\":{\"162\":1}}],[\"配置向容器中注入\",{\"1\":{\"159\":1}}],[\"配置信息序列化方式支持自定义扩展\",{\"1\":{\"291\":1}}],[\"配置信息\",{\"1\":{\"154\":1}}],[\"配置文件中新增\",{\"1\":{\"266\":1}}],[\"配置文件转化的bean\",{\"1\":{\"154\":1}}],[\"配置文件可以使用默认的\",{\"1\":{\"70\":1}}],[\"配置文件可以看到\",{\"1\":{\"66\":1}}],[\"配置环境\",{\"0\":{\"152\":1}}],[\"配置要建立连接的后台路径\",{\"1\":{\"115\":1}}],[\"配置关键\",{\"1\":{\"95\":1}}],[\"配置\",{\"0\":{\"94\":1,\"234\":1,\"235\":1,\"236\":1},\"1\":{\"230\":3,\"273\":1}}],[\"配置类\",{\"1\":{\"84\":1}}],[\"配置启动\",{\"1\":{\"42\":1}}],[\"配置简单灵活\",{\"1\":{\"33\":1}}],[\"配置如下\",{\"1\":{\"32\":3}}],[\"等分布式事务中间件\",{\"1\":{\"305\":1}}],[\"等方式接入\",{\"1\":{\"300\":1}}],[\"等方式\",{\"1\":{\"270\":1,\"303\":1}}],[\"等知名\",{\"1\":{\"270\":1}}],[\"等调用成功之后\",{\"1\":{\"243\":1}}],[\"等级\",{\"1\":{\"185\":1}}],[\"等到\",{\"1\":{\"155\":1,\"157\":1}}],[\"等待获取令牌的超时时间\",{\"1\":{\"224\":1}}],[\"等待连接\",{\"1\":{\"112\":1}}],[\"等待响应后再在另一个线程中\",{\"1\":{\"90\":1}}],[\"等待编译完成\",{\"1\":{\"52\":1}}],[\"等等多种方式实现\",{\"1\":{\"305\":1}}],[\"等等\",{\"1\":{\"85\":1,\"282\":1,\"296\":1}}],[\"等等的所有插件\",{\"1\":{\"84\":1}}],[\"等这个类里面的\",{\"1\":{\"46\":1}}],[\"等\",{\"1\":{\"33\":2,\"102\":1,\"115\":1,\"116\":1,\"186\":1,\"271\":1,\"276\":1}}],[\"z\",{\"1\":{\"153\":1}}],[\"zoo\",{\"1\":{\"153\":1}}],[\"zookeeperconfig\",{\"1\":{\"159\":6}}],[\"zookeeperconfiguration\",{\"1\":{\"110\":1,\"154\":4}}],[\"zookeepersyncdataservice\",{\"1\":{\"159\":4,\"160\":2}}],[\"zookeepersyncdataconfiguration\",{\"1\":{\"153\":1,\"159\":2}}],[\"zookeeperprop\",{\"1\":{\"154\":5}}],[\"zookeeperproperties\",{\"1\":{\"154\":2}}],[\"zookeeper<\",{\"1\":{\"152\":1,\"159\":1}}],[\"zookeeperlistener\",{\"1\":{\"110\":1,\"154\":1}}],[\"zookeeperdatachangedlistener\",{\"1\":{\"46\":2,\"96\":1,\"110\":3,\"154\":5,\"158\":1}}],[\"zookeeperdatainit\",{\"1\":{\"46\":1,\"110\":4,\"154\":8}}],[\"zookeeper\",{\"0\":{\"151\":1,\"154\":1,\"157\":1,\"159\":1},\"1\":{\"32\":2,\"42\":1,\"45\":1,\"46\":4,\"94\":1,\"96\":3,\"110\":4,\"114\":1,\"152\":3,\"153\":30,\"154\":16,\"155\":2,\"157\":4,\"158\":2,\"159\":8,\"160\":5,\"270\":1,\"271\":1,\"277\":2,\"278\":1,\"296\":1,\"300\":1,\"303\":1,\"305\":2}}],[\"zoneoffset\",{\"1\":{\"145\":2}}],[\"zh\",{\"1\":{\"47\":1,\"104\":1,\"267\":1,\"273\":1,\"295\":1,\"299\":1,\"302\":3}}],[\"zkeventthread\",{\"1\":{\"153\":2}}],[\"zkserver\",{\"1\":{\"153\":1}}],[\"zkclientgetchildren\",{\"1\":{\"159\":1}}],[\"zkclient\",{\"1\":{\"110\":6,\"153\":10,\"154\":31,\"159\":23,\"160\":4}}],[\"zkpathconstants\",{\"1\":{\"96\":3,\"154\":3,\"159\":2}}],[\"zk\",{\"1\":{\"46\":1,\"154\":3,\"159\":2,\"305\":1}}],[\"zknode\",{\"1\":{\"46\":1}}],[\"ztzzz\",{\"1\":{\"11\":1}}],[\"90\",{\"1\":{\"225\":1}}],[\"9095\",{\"1\":{\"46\":1,\"54\":1,\"57\":1,\"66\":1,\"94\":2,\"106\":1,\"301\":2}}],[\"95\",{\"1\":{\"162\":1,\"225\":1}}],[\"9\",{\"1\":{\"162\":1,\"225\":1}}],[\"99\",{\"1\":{\"225\":2}}],[\"990\",{\"1\":{\"162\":1}}],[\"996\",{\"1\":{\"153\":1}}],[\"977\",{\"1\":{\"62\":1}}],[\"976\",{\"1\":{\"62\":2}}],[\"93\",{\"1\":{\"32\":2,\"45\":1,\"63\":1}}],[\"924\",{\"1\":{\"55\":1}}],[\"92\",{\"1\":{\"32\":2,\"45\":2}}],[\"9195\",{\"1\":{\"55\":1,\"59\":1,\"62\":1,\"63\":2,\"66\":1,\"71\":1,\"162\":1,\"185\":1,\"199\":1,\"225\":1,\"226\":1}}],[\"91\",{\"1\":{\"32\":2,\"45\":1}}],[\"98kb\",{\"1\":{\"63\":1}}],[\"98\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"63\":1,\"225\":1}}],[\"哨兵模式集群\",{\"1\":{\"32\":1}}],[\"推荐用户使用\",{\"1\":{\"296\":1}}],[\"推荐的容错方案\",{\"1\":{\"223\":1}}],[\"推荐先了解一下\",{\"1\":{\"206\":1}}],[\"推荐使用\",{\"1\":{\"32\":1}}],[\"推荐项目或已获得\",{\"1\":{\"23\":1,\"252\":1}}],[\"线程\",{\"1\":{\"220\":1,\"277\":1}}],[\"线程数为\",{\"1\":{\"46\":1}}],[\"线程名称前缀为\",{\"1\":{\"46\":1}}],[\"线程池调用\",{\"1\":{\"98\":1}}],[\"线程池大小为\",{\"1\":{\"46\":1}}],[\"线程池线程的大小\",{\"1\":{\"32\":1}}],[\"线上腾讯会议室\",{\"1\":{\"10\":1,\"13\":1}}],[\"线上活动\",{\"1\":{\"9\":1,\"12\":1}}],[\"机制实现\",{\"1\":{\"277\":1}}],[\"机制自动扫描并注册插件\",{\"1\":{\"171\":1}}],[\"机制\",{\"1\":{\"118\":1,\"160\":1,\"174\":1,\"183\":1}}],[\"机了\",{\"1\":{\"37\":1}}],[\"机\",{\"1\":{\"32\":1}}],[\"最开始我和王亮一起讨论设计了\",{\"1\":{\"305\":1}}],[\"最轻量\",{\"1\":{\"296\":1}}],[\"最近\",{\"0\":{\"280\":1}}],[\"最小请求数指的是\",{\"1\":{\"219\":1}}],[\"最简单最快\",{\"1\":{\"183\":1}}],[\"最最重要的作用了\",{\"1\":{\"127\":1}}],[\"最外层会继续尝试下个\",{\"1\":{\"125\":1}}],[\"最关键的点在这行\",{\"1\":{\"125\":1}}],[\"最终一致性\",{\"1\":{\"218\":1}}],[\"最终结果的处理\",{\"1\":{\"190\":1}}],[\"最终整理的流程图如下所示\",{\"1\":{\"188\":1}}],[\"最终封装成了一个soulcontext\",{\"1\":{\"187\":1}}],[\"最终封装完成的\",{\"1\":{\"186\":1}}],[\"最终输出的未跳过的插件如下\",{\"1\":{\"185\":1}}],[\"最终可以追溯到soulconfiguration类下\",{\"1\":{\"185\":1}}],[\"最终交由下游插件进行响应式代理调用\",{\"1\":{\"177\":1}}],[\"最终形成我们看到的插件链\",{\"1\":{\"174\":1}}],[\"最终实现了\",{\"1\":{\"173\":1}}],[\"最终返回的类型是父接口\",{\"1\":{\"119\":1}}],[\"最终会表现出各种形式\",{\"1\":{\"118\":1}}],[\"最终确认一个唯一规则\",{\"1\":{\"83\":1}}],[\"最重要的一点是使用\",{\"1\":{\"118\":1}}],[\"最好的解决办法就是不去解决它\",{\"1\":{\"37\":1}}],[\"最好的解决办法是不解决它\",{\"1\":{\"32\":1}}],[\"最后最后\",{\"0\":{\"299\":1}}],[\"最后从源码的层面简略分析\",{\"1\":{\"215\":1}}],[\"最后交由子类的doexcute方法\",{\"1\":{\"188\":1}}],[\"最后设置最终的\",{\"1\":{\"178\":1}}],[\"最后是看到了群里其他同学遇到了同样的问题\",{\"1\":{\"162\":1}}],[\"最后再看看\",{\"1\":{\"98\":1}}],[\"最后再次感谢大家\",{\"1\":{\"45\":1}}],[\"最后插件链走到\",{\"1\":{\"91\":1}}],[\"最后简单说下各个插件项目的功能\",{\"1\":{\"85\":1}}],[\"最后调用\",{\"1\":{\"78\":1}}],[\"最后\",{\"1\":{\"37\":1,\"174\":1,\"258\":1,\"299\":1}}],[\"最大重复次数\",{\"1\":{\"32\":1}}],[\"默认提供了限流\",{\"1\":{\"303\":1}}],[\"默认情况下\",{\"1\":{\"296\":1}}],[\"默认全部有序\",{\"1\":{\"286\":1}}],[\"默认路径为项目的\",{\"1\":{\"273\":1}}],[\"默认方法$invokeasync进行异步调用\",{\"1\":{\"243\":1}}],[\"默认值50\",{\"1\":{\"224\":1}}],[\"默认值\",{\"1\":{\"224\":11}}],[\"默认请求都通过了\",{\"1\":{\"213\":1}}],[\"默认为\",{\"1\":{\"180\":1,\"183\":1}}],[\"默认的用户名\",{\"1\":{\"301\":1}}],[\"默认的序列化方式由\",{\"1\":{\"291\":1}}],[\"默认的\",{\"1\":{\"112\":1}}],[\"默认策略\",{\"1\":{\"110\":1}}],[\"默认5\",{\"1\":{\"87\":1}}],[\"默认内置\",{\"1\":{\"80\":1}}],[\"默认\",{\"1\":{\"32\":2,\"180\":1}}],[\"单独的进行发布\",{\"1\":{\"296\":1}}],[\"单位ms\",{\"1\":{\"224\":4}}],[\"单位时长指定的是异常判断以是\",{\"1\":{\"219\":1}}],[\"单位是秒\",{\"1\":{\"32\":1}}],[\"单节点\",{\"1\":{\"32\":1}}],[\"单测小结\",{\"1\":{\"11\":1}}],[\"当业务请求发起时候\",{\"1\":{\"241\":1}}],[\"当我们通过以上\",{\"1\":{\"218\":1}}],[\"当单位时长内出现异常的请求的数量的达到阈值则判定服务异常\",{\"1\":{\"218\":1}}],[\"当单位统计时长内异常请求的比例大于阈值则我们判定服务异常\",{\"1\":{\"218\":1}}],[\"当单位统计时长内请求数目大于设置的最小请求数目\",{\"1\":{\"218\":1}}],[\"当满足匹配规则时\",{\"1\":{\"212\":1}}],[\"当匹配到请求后\",{\"1\":{\"211\":1}}],[\"当匹配上的时候\",{\"1\":{\"68\":1}}],[\"当请求到来的时候\",{\"1\":{\"217\":1}}],[\"当请求进来时\",{\"1\":{\"205\":1}}],[\"当请求头的\",{\"1\":{\"177\":1}}],[\"当前规则上次调用时间\",{\"1\":{\"206\":1}}],[\"当前规则令牌剩余数量存储key\",{\"1\":{\"206\":1}}],[\"当前有哪些插件可用\",{\"1\":{\"170\":1}}],[\"当前节点和子节点的内容修改\",{\"1\":{\"159\":1,\"160\":1}}],[\"当时很简单的略过了它的实现\",{\"1\":{\"118\":1}}],[\"当使用\",{\"1\":{\"88\":1}}],[\"当多个选择器的时候\",{\"1\":{\"68\":1}}],[\"当考虑到\",{\"1\":{\"39\":1}}],[\"当\",{\"1\":{\"35\":1,\"39\":1,\"46\":1,\"110\":1,\"112\":1}}],[\"当高并发的时候\",{\"1\":{\"32\":1}}],[\"当你的服务\",{\"1\":{\"32\":1}}],[\"当你集群同时挂掉\",{\"1\":{\"31\":1}}],[\"当然因为篇幅问题\",{\"1\":{\"45\":1}}],[\"当然配置属性很多\",{\"1\":{\"42\":1}}],[\"当然\",{\"1\":{\"32\":1,\"87\":1,\"296\":1}}],[\"ui\",{\"1\":{\"270\":1}}],[\"utf8mb4\",{\"1\":{\"232\":20}}],[\"util\",{\"1\":{\"34\":5,\"35\":4,\"39\":2,\"121\":1,\"125\":1}}],[\"u\",{\"1\":{\"225\":1,\"250\":1}}],[\"using\",{\"1\":{\"153\":2,\"232\":1}}],[\"usr\",{\"1\":{\"153\":1}}],[\"usessl=false\",{\"1\":{\"301\":1}}],[\"used\",{\"1\":{\"110\":2}}],[\"useragentutil\",{\"1\":{\"287\":1}}],[\"userdto\",{\"1\":{\"226\":7}}],[\"users\",{\"1\":{\"153\":1,\"225\":1}}],[\"user\",{\"1\":{\"104\":1,\"125\":2,\"127\":2,\"153\":1,\"203\":1,\"273\":2,\"302\":1}}],[\"userid\",{\"1\":{\"63\":2,\"226\":3}}],[\"userid=10\",{\"1\":{\"185\":1,\"199\":1}}],[\"userid=1\",{\"1\":{\"58\":1,\"59\":2,\"61\":1,\"62\":7,\"63\":2,\"225\":1,\"226\":1}}],[\"username=\",{\"1\":{\"301\":1}}],[\"username\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"273\":1,\"301\":1}}],[\"use\",{\"1\":{\"39\":1,\"55\":1,\"80\":1,\"115\":1,\"152\":1,\"153\":1,\"159\":1,\"162\":1,\"164\":1,\"301\":1}}],[\"useunicode=true\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"273\":1,\"301\":1}}],[\"unsafebytearrayinputstream\",{\"1\":{\"248\":2}}],[\"uniquekeyset\",{\"1\":{\"287\":1}}],[\"unicode\",{\"1\":{\"232\":10}}],[\"unit\",{\"1\":{\"42\":2}}],[\"uncacheruledata\",{\"1\":{\"160\":1}}],[\"unchecked\",{\"1\":{\"109\":1,\"111\":1,\"154\":1,\"163\":1}}],[\"unknown\",{\"1\":{\"153\":1}}],[\"unmodifiablelist\",{\"1\":{\"109\":1,\"154\":1,\"163\":1,\"213\":1}}],[\"unexpected\",{\"1\":{\"95\":1,\"109\":1,\"111\":1,\"154\":1,\"163\":1}}],[\"up\",{\"1\":{\"220\":3}}],[\"upgrade\",{\"1\":{\"186\":4}}],[\"upstreamlist\",{\"1\":{\"85\":2,\"87\":2,\"88\":6,\"89\":5,\"118\":3,\"173\":2,\"178\":2,\"181\":3,\"183\":10,\"189\":3}}],[\"upstreamcachemanager\",{\"1\":{\"85\":2,\"173\":1,\"178\":1,\"179\":2,\"180\":3,\"181\":2,\"189\":1}}],[\"upstreamcheckutils\",{\"1\":{\"181\":1,\"182\":3}}],[\"upstreamcheckservice\",{\"1\":{\"77\":1,\"78\":1,\"79\":2}}],[\"upstreamcheck\",{\"1\":{\"77\":1,\"79\":1}}],[\"upstreamhost\",{\"1\":{\"79\":1}}],[\"upstreamurl\",{\"1\":{\"79\":2}}],[\"upstream\",{\"1\":{\"77\":3,\"79\":4,\"89\":4,\"179\":7,\"180\":5,\"181\":4,\"189\":2}}],[\"updaterulemap\",{\"1\":{\"163\":4,\"164\":1}}],[\"updaterulecache\",{\"1\":{\"46\":1}}],[\"updatemetadatamap\",{\"1\":{\"162\":1}}],[\"updatemetadatacache\",{\"1\":{\"46\":1}}],[\"updatecacheifneed\",{\"1\":{\"102\":1}}],[\"updatecachewithjson\",{\"1\":{\"102\":3}}],[\"updatecache\",{\"1\":{\"95\":2}}],[\"updatelock\",{\"1\":{\"89\":3}}],[\"updated`\",{\"1\":{\"232\":1}}],[\"updated\",{\"1\":{\"46\":5,\"80\":1,\"95\":1,\"102\":6}}],[\"update\",{\"1\":{\"46\":5,\"77\":3,\"79\":3,\"95\":1,\"96\":1,\"107\":4,\"108\":4,\"112\":1,\"115\":1,\"116\":1,\"163\":1,\"232\":1}}],[\"updatepluginmap\",{\"1\":{\"164\":2}}],[\"updateplugin\",{\"1\":{\"107\":1}}],[\"updateplugincache\",{\"1\":{\"46\":1,\"95\":2}}],[\"updateparticipant\",{\"1\":{\"38\":1}}],[\"updateappauthcache\",{\"1\":{\"46\":1}}],[\"updateselectorcache\",{\"1\":{\"46\":1}}],[\"updateselective\",{\"1\":{\"46\":1,\"77\":1,\"79\":2,\"107\":1}}],[\"updatestatus\",{\"1\":{\"35\":1}}],[\"uriutils\",{\"1\":{\"213\":1,\"220\":1,\"227\":1}}],[\"uri\",{\"1\":{\"68\":1,\"77\":3,\"78\":3,\"79\":3,\"80\":1,\"90\":2,\"190\":1,\"210\":1,\"213\":2,\"227\":4}}],[\"url=\",{\"1\":{\"301\":1}}],[\"urlencoderutil\",{\"1\":{\"286\":1}}],[\"urlencoder\",{\"1\":{\"286\":1}}],[\"urlencoded\",{\"1\":{\"103\":1}}],[\"urlpath\",{\"1\":{\"59\":1,\"62\":6,\"90\":2,\"190\":5}}],[\"urls\",{\"1\":{\"46\":1,\"94\":1,\"115\":1,\"137\":4,\"301\":1}}],[\"url\",{\"1\":{\"32\":3,\"42\":1,\"45\":1,\"75\":1,\"85\":1,\"90\":1,\"94\":1,\"102\":4,\"110\":2,\"125\":23,\"126\":1,\"127\":2,\"134\":2,\"137\":6,\"152\":2,\"154\":1,\"162\":2,\"164\":1,\"173\":2,\"178\":3,\"181\":1,\"182\":8,\"184\":1,\"189\":6,\"190\":3,\"207\":1,\"273\":1}}],[\"feignclient\",{\"1\":{\"273\":2}}],[\"feign\",{\"1\":{\"272\":1,\"278\":1}}],[\"fetch\",{\"1\":{\"102\":4,\"103\":1}}],[\"fetchgroupconfig\",{\"1\":{\"102\":3}}],[\"funcfilter\",{\"1\":{\"287\":1}}],[\"function<throwable\",{\"1\":{\"227\":2}}],[\"function\",{\"1\":{\"225\":1}}],[\"future\",{\"1\":{\"243\":2}}],[\"fullname\",{\"1\":{\"121\":3}}],[\"full=false\",{\"1\":{\"57\":1}}],[\"full\",{\"1\":{\"57\":1,\"68\":1,\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"f523f655f0014d288b7a4502cc6a08d1~tplv\",{\"1\":{\"188\":1}}],[\"framework\",{\"1\":{\"297\":1,\"304\":1}}],[\"framework<\",{\"1\":{\"234\":1}}],[\"frames\",{\"1\":{\"162\":2}}],[\"fromfuture\",{\"1\":{\"243\":1}}],[\"fromiterable\",{\"1\":{\"213\":1}}],[\"fromdatabuffers\",{\"1\":{\"90\":1,\"190\":1}}],[\"fromjson\",{\"1\":{\"85\":1,\"102\":2,\"103\":2,\"115\":1,\"163\":1,\"173\":1,\"178\":1,\"189\":1,\"201\":1,\"203\":1,\"213\":1,\"220\":2,\"227\":1}}],[\"from\",{\"1\":{\"80\":1,\"102\":1,\"127\":2,\"203\":1}}],[\"fromlist\",{\"1\":{\"77\":1,\"79\":1}}],[\"f7\",{\"1\":{\"110\":1}}],[\"f12\",{\"1\":{\"106\":1}}],[\"floor\",{\"1\":{\"206\":1}}],[\"flowexception的父类\",{\"1\":{\"220\":1}}],[\"flowexception\",{\"1\":{\"220\":1}}],[\"flowrule\",{\"1\":{\"220\":2}}],[\"flowrulemanager\",{\"1\":{\"220\":4}}],[\"flowrules\",{\"1\":{\"220\":3}}],[\"flow\",{\"1\":{\"68\":2,\"78\":1,\"83\":1,\"173\":1,\"178\":1,\"188\":1,\"220\":1}}],[\"flux\",{\"1\":{\"203\":1,\"213\":1}}],[\"flux<list<long>>\",{\"1\":{\"203\":1}}],[\"flatmap\",{\"1\":{\"90\":1,\"190\":1,\"203\":1,\"213\":2}}],[\"foo\",{\"1\":{\"239\":1}}],[\"foobaredbbexone123\",{\"1\":{\"45\":1}}],[\"found\",{\"1\":{\"55\":1,\"121\":1,\"226\":1}}],[\"forname\",{\"1\":{\"121\":1,\"124\":1,\"125\":1,\"127\":2,\"137\":1}}],[\"form\",{\"1\":{\"103\":1,\"287\":1}}],[\"format\",{\"1\":{\"80\":1,\"102\":1,\"103\":1,\"149\":1,\"232\":1}}],[\"foreach\",{\"1\":{\"46\":2,\"78\":1,\"80\":1,\"84\":1,\"102\":3,\"116\":1,\"134\":1,\"137\":1,\"160\":1,\"163\":1,\"174\":1,\"181\":1,\"213\":1}}],[\"for\",{\"1\":{\"34\":2,\"55\":3,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"87\":2,\"88\":2,\"89\":2,\"95\":1,\"96\":1,\"98\":2,\"102\":4,\"103\":3,\"109\":1,\"111\":1,\"112\":2,\"119\":1,\"120\":3,\"121\":2,\"125\":1,\"154\":1,\"159\":2,\"162\":1,\"163\":1,\"181\":1,\"183\":1,\"225\":1,\"247\":2,\"248\":2,\"304\":1}}],[\"fork\",{\"0\":{\"49\":1},\"1\":{\"23\":1,\"45\":1,\"252\":1,\"267\":1}}],[\"fieldnameeditor\",{\"1\":{\"288\":1}}],[\"firstentry\",{\"1\":{\"87\":1}}],[\"firstkey\",{\"1\":{\"87\":1}}],[\"filterchain\",{\"1\":{\"248\":1}}],[\"filterrule\",{\"1\":{\"188\":1}}],[\"filterselector\",{\"1\":{\"188\":1}}],[\"filter\",{\"0\":{\"247\":1},\"1\":{\"163\":1,\"220\":4,\"247\":4,\"248\":3}}],[\"filled\",{\"1\":{\"42\":1,\"206\":5}}],[\"fill\",{\"1\":{\"42\":1,\"206\":2}}],[\"filecopier\",{\"1\":{\"288\":1}}],[\"fileappender\",{\"1\":{\"287\":2}}],[\"fileutil\",{\"1\":{\"287\":1,\"288\":2}}],[\"fileextension\",{\"1\":{\"273\":2}}],[\"filed\",{\"1\":{\"225\":1}}],[\"filename\",{\"1\":{\"137\":3}}],[\"files\",{\"1\":{\"121\":1}}],[\"file\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"277\":1,\"278\":1}}],[\"finchley\",{\"1\":{\"265\":1}}],[\"finished\",{\"1\":{\"225\":2}}],[\"findmethodbymethodsignature\",{\"1\":{\"248\":1}}],[\"findperson\",{\"1\":{\"240\":2}}],[\"find\",{\"1\":{\"189\":4,\"190\":2}}],[\"findall\",{\"0\":{\"141\":1},\"1\":{\"145\":1}}],[\"findupstreamlistbyselectorid\",{\"1\":{\"85\":1,\"173\":1,\"178\":1,\"179\":2,\"189\":1}}],[\"findbyname\",{\"1\":{\"77\":1,\"79\":1,\"80\":1}}],[\"findbypath\",{\"1\":{\"76\":1}}],[\"findbyid\",{\"1\":{\"71\":2,\"80\":2}}],[\"findbyuserid\",{\"1\":{\"58\":1,\"59\":2,\"61\":1,\"62\":7,\"63\":4,\"185\":1,\"199\":1,\"225\":1,\"226\":3}}],[\"findbytransid\",{\"1\":{\"39\":2}}],[\"finally\",{\"1\":{\"35\":1,\"89\":1,\"112\":1}}],[\"final\",{\"1\":{\"34\":8,\"35\":8,\"38\":3,\"39\":10,\"46\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":5,\"79\":1,\"80\":12,\"83\":6,\"84\":6,\"85\":7,\"87\":3,\"88\":2,\"89\":2,\"90\":9,\"91\":2,\"95\":9,\"96\":4,\"98\":10,\"102\":13,\"103\":1,\"107\":5,\"109\":2,\"110\":5,\"111\":11,\"112\":10,\"115\":14,\"116\":8,\"118\":3,\"120\":2,\"121\":4,\"124\":1,\"125\":4,\"127\":6,\"130\":5,\"132\":3,\"133\":2,\"134\":3,\"135\":2,\"137\":8,\"145\":1,\"149\":1,\"154\":13,\"159\":15,\"160\":5,\"163\":7,\"164\":10,\"173\":8,\"174\":4,\"178\":13,\"179\":1,\"181\":2,\"182\":5,\"183\":7,\"185\":3,\"186\":6,\"188\":6,\"189\":8,\"190\":11,\"191\":2,\"201\":1,\"203\":9,\"213\":7,\"220\":13,\"225\":1,\"226\":1,\"227\":17,\"236\":1,\"241\":2,\"242\":5,\"243\":3,\"244\":3,\"273\":1,\"296\":1}}],[\"fallbackuri\",{\"1\":{\"224\":1}}],[\"fallbackhandler\",{\"1\":{\"220\":1}}],[\"fallback\",{\"1\":{\"220\":1,\"227\":10}}],[\"false\",{\"1\":{\"32\":2,\"34\":1,\"35\":1,\"57\":1,\"83\":1,\"88\":1,\"89\":2,\"94\":1,\"98\":1,\"102\":3,\"121\":2,\"149\":2,\"162\":2,\"180\":3,\"181\":1,\"182\":2,\"213\":3,\"224\":2,\"266\":1,\"301\":1}}],[\"factories\",{\"1\":{\"174\":1}}],[\"factory\",{\"1\":{\"34\":3,\"35\":1,\"102\":3,\"103\":1,\"119\":1,\"162\":7}}],[\"failure\",{\"1\":{\"225\":1}}],[\"failureratethreshold\",{\"1\":{\"224\":1}}],[\"fail\",{\"1\":{\"102\":2,\"103\":1,\"121\":4}}],[\"failed\",{\"1\":{\"80\":1,\"103\":2,\"162\":4,\"248\":1}}],[\"faq\",{\"1\":{\"55\":1}}],[\"k3u1fbpfcp\",{\"1\":{\"188\":2}}],[\"kv\",{\"1\":{\"137\":1}}],[\"k\",{\"1\":{\"131\":1,\"134\":1,\"137\":7,\"181\":3}}],[\"keys\",{\"0\":{\"205\":1},\"1\":{\"203\":2,\"205\":1,\"206\":3}}],[\"keyset\",{\"1\":{\"145\":1,\"163\":2}}],[\"key\",{\"1\":{\"39\":16,\"89\":5,\"107\":1,\"112\":3,\"121\":1,\"131\":1,\"133\":1,\"140\":2,\"145\":3,\"149\":2,\"179\":2,\"201\":1,\"203\":1,\"204\":2,\"206\":6,\"232\":1,\"243\":1,\"247\":3,\"248\":2}}],[\"kroy>hessian>protostuff>jdk\",{\"1\":{\"32\":1}}],[\"kroy\",{\"1\":{\"32\":1,\"291\":1}}],[\"kryo\",{\"1\":{\"32\":1,\"33\":1,\"42\":2,\"45\":1,\"273\":1,\"277\":1}}],[\"kill\",{\"1\":{\"32\":1}}],[\"kimming\",{\"1\":{\"7\":1,\"11\":1,\"14\":1}}],[\"vs\",{\"1\":{\"305\":1}}],[\"varchar\",{\"1\":{\"232\":9}}],[\"values\",{\"1\":{\"102\":2,\"103\":1,\"109\":1,\"154\":1,\"163\":1,\"213\":3}}],[\"value\",{\"1\":{\"89\":1,\"95\":1,\"98\":1,\"103\":2,\"109\":1,\"111\":1,\"131\":1,\"133\":3,\"137\":12,\"149\":2,\"154\":1,\"163\":1,\"179\":2,\"201\":1,\"225\":1,\"247\":1,\"273\":1}}],[\"valueof\",{\"1\":{\"77\":1,\"79\":1,\"87\":1,\"90\":1,\"103\":1,\"145\":2,\"190\":1}}],[\"value=\",{\"1\":{\"32\":37,\"42\":10}}],[\"validate\",{\"1\":{\"75\":1}}],[\"validateutils\",{\"1\":{\"75\":1}}],[\"via\",{\"1\":{\"162\":1}}],[\"virtual\",{\"1\":{\"87\":2}}],[\"vendor=oracle\",{\"1\":{\"153\":1}}],[\"verify\",{\"1\":{\"149\":3}}],[\"version=1\",{\"1\":{\"153\":1}}],[\"version=3\",{\"1\":{\"153\":1}}],[\"version>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"version\",{\"1\":{\"31\":1,\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"145\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":4,\"236\":1}}],[\"v\",{\"1\":{\"131\":1,\"134\":1,\"137\":7,\"181\":2,\"220\":1,\"225\":1,\"227\":1}}],[\"void\",{\"1\":{\"34\":3,\"38\":1,\"39\":2,\"46\":1,\"80\":2,\"95\":10,\"96\":2,\"98\":7,\"102\":4,\"103\":2,\"109\":2,\"110\":5,\"111\":6,\"112\":5,\"115\":2,\"116\":5,\"120\":6,\"121\":3,\"124\":4,\"127\":2,\"134\":1,\"137\":3,\"154\":3,\"159\":2,\"160\":4,\"163\":5,\"164\":3,\"181\":1,\"201\":1,\"213\":1,\"220\":2,\"273\":10,\"296\":1}}],[\"nio\",{\"1\":{\"225\":9}}],[\"nil\",{\"1\":{\"206\":2}}],[\"nginx\",{\"1\":{\"220\":1,\"296\":1}}],[\"n\",{\"1\":{\"162\":1,\"225\":1}}],[\"namingcase\",{\"1\":{\"288\":1}}],[\"name`\",{\"1\":{\"232\":3}}],[\"named\",{\"1\":{\"83\":1,\"84\":1,\"173\":1,\"174\":1,\"178\":1,\"188\":1,\"213\":1,\"220\":1}}],[\"namespace\",{\"1\":{\"70\":1,\"162\":5,\"270\":1,\"273\":1,\"276\":1}}],[\"name\",{\"1\":{\"59\":2,\"62\":12,\"78\":1,\"80\":3,\"83\":2,\"90\":1,\"95\":2,\"96\":2,\"102\":1,\"103\":1,\"110\":5,\"111\":10,\"112\":1,\"114\":1,\"115\":1,\"133\":2,\"134\":2,\"135\":2,\"137\":15,\"154\":1,\"162\":1,\"164\":1,\"185\":1,\"220\":1,\"248\":2,\"296\":2}}],[\"name=10\",{\"1\":{\"153\":1}}],[\"name=\",{\"1\":{\"32\":43,\"42\":11}}],[\"native\",{\"1\":{\"248\":1}}],[\"nativejava\",{\"1\":{\"247\":1,\"248\":2}}],[\"naturalorder\",{\"1\":{\"145\":1}}],[\"na\",{\"1\":{\"162\":9}}],[\"nacosfactory\",{\"1\":{\"164\":1}}],[\"nacosconfig\",{\"1\":{\"164\":5}}],[\"nacosconfigservice\",{\"1\":{\"164\":1}}],[\"nacosconfiguration\",{\"1\":{\"110\":1}}],[\"nacoscachehandler\",{\"1\":{\"162\":4}}],[\"nacossyncdataconfiguration$$enhancerbyspringcglib$$cce084b7$$fastclassbyspringcglib$$3830e886\",{\"1\":{\"162\":1}}],[\"nacossyncdataconfiguration$$enhancerbyspringcglib$$cce084b7\",{\"1\":{\"162\":2}}],[\"nacossyncdataconfiguration\",{\"1\":{\"162\":4,\"164\":5}}],[\"nacossyncdataservice\",{\"1\":{\"162\":9,\"164\":8}}],[\"nacos<\",{\"1\":{\"162\":2}}],[\"nacosdatachangedlistener\",{\"1\":{\"110\":3,\"163\":7}}],[\"nacoslistener\",{\"1\":{\"110\":1}}],[\"nacos\",{\"1\":{\"110\":3,\"114\":1,\"162\":27,\"163\":3,\"164\":10,\"271\":1,\"273\":3,\"277\":1,\"278\":1,\"300\":2}}],[\"numberconverter\",{\"1\":{\"288\":1}}],[\"number\",{\"1\":{\"225\":2}}],[\"num\",{\"1\":{\"87\":2,\"206\":3}}],[\"nullpointerexception\",{\"1\":{\"124\":1,\"162\":4}}],[\"null\",{\"1\":{\"34\":1,\"38\":1,\"80\":1,\"83\":5,\"89\":5,\"90\":1,\"91\":2,\"98\":1,\"102\":2,\"103\":2,\"112\":1,\"121\":12,\"124\":3,\"125\":4,\"126\":2,\"130\":1,\"135\":1,\"137\":11,\"149\":2,\"162\":1,\"178\":1,\"188\":1,\"189\":3,\"190\":2,\"191\":2,\"199\":1,\"203\":1,\"213\":1,\"220\":7,\"227\":7,\"232\":16,\"242\":4,\"244\":1,\"247\":1,\"248\":3,\"288\":2}}],[\"nosuchmethodexception\",{\"1\":{\"248\":1}}],[\"nosuchelementexception\",{\"1\":{\"121\":1}}],[\"nonregisteringdriver\",{\"1\":{\"124\":1,\"125\":2}}],[\"nonnull\",{\"1\":{\"84\":1,\"174\":1,\"201\":1,\"241\":1}}],[\"now\",{\"1\":{\"89\":3,\"145\":2,\"203\":1,\"206\":3}}],[\"node\",{\"1\":{\"87\":2,\"160\":2}}],[\"noconfig\",{\"1\":{\"55\":1}}],[\"no\",{\"1\":{\"55\":1,\"90\":1,\"189\":1}}],[\"nothing\",{\"1\":{\"124\":1}}],[\"notifications\",{\"1\":{\"110\":1}}],[\"notification\",{\"1\":{\"110\":1}}],[\"note\",{\"1\":{\"42\":1}}],[\"not\",{\"1\":{\"42\":1,\"98\":1,\"102\":1,\"121\":3,\"153\":1,\"203\":1,\"213\":1,\"226\":1,\"232\":9}}],[\"nested\",{\"1\":{\"162\":3}}],[\"negotiated\",{\"1\":{\"153\":2}}],[\"nextservice\",{\"1\":{\"121\":2}}],[\"nextelement\",{\"1\":{\"121\":1,\"137\":1}}],[\"nextname\",{\"1\":{\"121\":5}}],[\"next\",{\"1\":{\"98\":1,\"121\":3,\"124\":1,\"127\":2,\"213\":1}}],[\"nextint\",{\"1\":{\"88\":2,\"183\":1,\"226\":1}}],[\"newly\",{\"1\":{\"160\":1}}],[\"newhashmapwithexpectedsize\",{\"1\":{\"145\":1}}],[\"newarraylistwithcapacity\",{\"1\":{\"181\":1}}],[\"newarraylist\",{\"1\":{\"103\":1}}],[\"newval\",{\"1\":{\"95\":4}}],[\"newmap\",{\"1\":{\"89\":3}}],[\"newinstance\",{\"1\":{\"80\":1,\"121\":1,\"135\":1,\"137\":1}}],[\"newbuilder\",{\"1\":{\"39\":1}}],[\"new\",{\"1\":{\"34\":14,\"35\":3,\"38\":1,\"39\":5,\"46\":1,\"75\":3,\"77\":1,\"78\":1,\"79\":1,\"80\":2,\"84\":3,\"87\":1,\"89\":3,\"95\":4,\"96\":1,\"98\":3,\"102\":12,\"103\":4,\"107\":1,\"109\":2,\"110\":7,\"111\":6,\"112\":1,\"114\":1,\"115\":9,\"121\":4,\"124\":6,\"130\":2,\"132\":3,\"133\":1,\"134\":2,\"135\":1,\"137\":5,\"145\":1,\"154\":9,\"159\":3,\"160\":1,\"163\":6,\"164\":5,\"174\":2,\"180\":1,\"182\":2,\"185\":1,\"201\":2,\"203\":3,\"206\":4,\"213\":4,\"220\":4,\"226\":2,\"227\":1,\"238\":1,\"241\":1,\"243\":5,\"248\":8}}],[\"netflix\",{\"1\":{\"223\":2}}],[\"nettywebserver\",{\"1\":{\"55\":1,\"162\":1}}],[\"netty\",{\"1\":{\"55\":2,\"162\":2}}],[\"net\",{\"1\":{\"28\":1,\"250\":1,\"296\":1}}],[\"<2\",{\"1\":{\"273\":1}}],[\"<dubbo\",{\"1\":{\"239\":1,\"266\":1}}],[\"<dependency>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"<string\",{\"1\":{\"201\":1}}],[\"<s>\",{\"1\":{\"121\":2}}],[\"<generated>\",{\"1\":{\"162\":3}}],[\"<groupid>io\",{\"1\":{\"223\":1}}],[\"<groupid>org\",{\"1\":{\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":1,\"209\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"<groupid>com\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"162\":1}}],[\"<init>\",{\"1\":{\"162\":1}}],[\"<=\",{\"1\":{\"103\":1}}],[\"<二>\",{\"1\":{\"103\":1}}],[\"<t>\",{\"1\":{\"95\":1,\"130\":1,\"227\":2}}],[\"<context\",{\"1\":{\"42\":1}}],[\"<artifactid>spring\",{\"1\":{\"301\":2}}],[\"<artifactid>soul\",{\"1\":{\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":1,\"209\":1,\"224\":1,\"234\":1,\"236\":1,\"301\":2,\"302\":4}}],[\"<artifactid>curator\",{\"1\":{\"234\":3}}],[\"<artifactid>dubbo<\",{\"1\":{\"234\":1}}],[\"<artifactid>resilience4j\",{\"1\":{\"223\":1}}],[\"<artifactid>nacos\",{\"1\":{\"162\":1}}],[\"<artifactid>hmily\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"273\":3}}],[\"<aop\",{\"1\":{\"42\":1}}],[\"<version>2\",{\"1\":{\"234\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"<version>$\",{\"1\":{\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":4,\"236\":1}}],[\"<version>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1}}],[\"<<高可用可伸缩微服务架构>>\",{\"1\":{\"119\":1}}],[\"<<\",{\"1\":{\"35\":1,\"42\":2}}],[\"<\",{\"1\":{\"32\":13,\"34\":2,\"42\":10,\"43\":2,\"44\":2,\"45\":6,\"57\":2,\"84\":3,\"87\":1,\"88\":2,\"102\":1,\"103\":1,\"120\":1,\"121\":1,\"142\":4,\"152\":3,\"159\":2,\"162\":4,\"174\":1,\"183\":1,\"185\":1,\"209\":2,\"223\":2,\"224\":2,\"234\":9,\"236\":2,\"240\":2,\"241\":2,\"248\":2,\"273\":3,\"301\":6,\"302\":12}}],[\"<property\",{\"1\":{\"32\":43,\"42\":11}}],[\"<bean\",{\"1\":{\"32\":7,\"42\":2}}],[\">击进入周边商店购买\",{\"1\":{\"284\":1}}],[\">resource\",{\"1\":{\"273\":1}}],[\">选取规则\",{\"1\":{\"188\":1}}],[\">选取选择器\",{\"1\":{\"188\":1}}],[\">>>\",{\"1\":{\"132\":1,\"134\":1}}],[\">>\",{\"1\":{\"130\":1,\"134\":1,\"137\":7}}],[\">=\",{\"1\":{\"102\":1,\"206\":1}}],[\">\",{\"1\":{\"32\":50,\"34\":1,\"35\":2,\"38\":2,\"39\":1,\"42\":18,\"46\":2,\"78\":1,\"80\":2,\"84\":4,\"88\":2,\"89\":3,\"90\":4,\"91\":1,\"98\":2,\"102\":2,\"103\":1,\"116\":3,\"121\":1,\"125\":1,\"130\":1,\"131\":1,\"132\":1,\"134\":1,\"135\":2,\"137\":4,\"142\":2,\"145\":1,\"149\":1,\"152\":1,\"158\":1,\"159\":4,\"160\":4,\"163\":4,\"164\":3,\"174\":4,\"181\":3,\"183\":1,\"185\":1,\"190\":4,\"191\":1,\"203\":5,\"208\":2,\"213\":4,\"218\":1,\"220\":6,\"227\":3,\"239\":1,\"240\":3,\"241\":1,\"243\":3,\"244\":1,\"247\":1,\"248\":2,\"266\":1,\"273\":1,\"301\":4,\"302\":8}}],[\"yaml\",{\"1\":{\"301\":1}}],[\"yanb07>sb\",{\"1\":{\"225\":1}}],[\"yourself\",{\"1\":{\"98\":1}}],[\"your\",{\"1\":{\"45\":3,\"162\":1}}],[\"you\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"55\":1,\"98\":1,\"115\":1,\"153\":1,\"159\":1,\"162\":1,\"164\":1,\"199\":1,\"271\":1,\"279\":1,\"301\":2}}],[\"yml的文件\",{\"1\":{\"273\":1}}],[\"yml中配置\",{\"1\":{\"57\":1}}],[\"yml\",{\"1\":{\"32\":1,\"45\":1,\"46\":2,\"152\":2,\"162\":2,\"266\":1,\"273\":2}}],[\"yu199195\",{\"0\":{\"41\":1},\"1\":{\"28\":1,\"45\":1,\"267\":1,\"301\":1}}],[\"方式使用\",{\"1\":{\"278\":1}}],[\"方式使用泛化调用\",{\"0\":{\"238\":1},\"1\":{\"230\":1}}],[\"方式声明注册使用泛化调用\",{\"1\":{\"238\":1}}],[\"方式实现\",{\"1\":{\"124\":1}}],[\"方式\",{\"1\":{\"114\":2,\"247\":1,\"287\":1,\"296\":1,\"305\":2}}],[\"方式的存储我就不介绍了\",{\"1\":{\"32\":1}}],[\"方式的配置\",{\"1\":{\"32\":2}}],[\"方法了\",{\"1\":{\"281\":1}}],[\"方法需要参与分布式事务\",{\"1\":{\"273\":2}}],[\"方法主要做如下事情\",{\"1\":{\"247\":1}}],[\"方法抛出的异常\",{\"1\":{\"240\":1}}],[\"方法没有什么核心逻辑\",{\"1\":{\"191\":1}}],[\"方法作用\",{\"1\":{\"188\":1}}],[\"方法名称\",{\"1\":{\"232\":1}}],[\"方法名\",{\"1\":{\"188\":1,\"240\":1}}],[\"方法如下所示\",{\"1\":{\"186\":1}}],[\"方法同时更新了\",{\"1\":{\"179\":1}}],[\"方法处理请求时\",{\"1\":{\"175\":1}}],[\"方法负责插件链执行指标度量的采集\",{\"1\":{\"174\":1}}],[\"方法为抽象方法\",{\"1\":{\"173\":1}}],[\"方法进行具体处理\",{\"1\":{\"173\":1}}],[\"方法进行回滚\",{\"1\":{\"30\":1}}],[\"方法监听事件到事件\",{\"1\":{\"163\":1}}],[\"方法上打上断点\",{\"1\":{\"160\":1}}],[\"方法会监听事件变化\",{\"1\":{\"154\":1}}],[\"方法会调用事件发布器进行事件发布\",{\"1\":{\"154\":1}}],[\"方法会调用\",{\"1\":{\"154\":1}}],[\"方法会在容器中查找类型是\",{\"1\":{\"154\":1}}],[\"方法会通知到所有注入为\",{\"1\":{\"116\":1}}],[\"方法匹配信息类型\",{\"1\":{\"116\":1}}],[\"方法通知\",{\"1\":{\"114\":1}}],[\"方法发送出去了\",{\"1\":{\"111\":1}}],[\"方法后\",{\"1\":{\"85\":1}}],[\"方法供调用者使用\",{\"1\":{\"84\":1}}],[\"方法可以使某些插件在某些请求中被跳过\",{\"1\":{\"82\":1}}],[\"方法一样\",{\"1\":{\"79\":1}}],[\"方法都会先走\",{\"1\":{\"46\":1}}],[\"方法执行完了之后\",{\"1\":{\"46\":1}}],[\"方法把更新的数据发到\",{\"1\":{\"46\":1}}],[\"方法中主要目的就是封装一个soulcontext\",{\"1\":{\"186\":1}}],[\"方法中\",{\"1\":{\"46\":1,\"110\":1,\"112\":1,\"125\":1,\"149\":1,\"189\":1}}],[\"方法异常怎么办呢\",{\"0\":{\"36\":1}}],[\"方法异常\",{\"0\":{\"36\":1}}],[\"方法的开发\",{\"1\":{\"274\":1}}],[\"方法的执行会查找\",{\"1\":{\"154\":1}}],[\"方法的\",{\"1\":{\"35\":1}}],[\"方法\",{\"0\":{\"35\":1,\"204\":1},\"1\":{\"30\":1,\"35\":1,\"46\":4,\"78\":2,\"80\":1,\"84\":1,\"90\":1,\"98\":1,\"102\":2,\"110\":1,\"112\":1,\"114\":1,\"116\":1,\"118\":1,\"120\":2,\"125\":1,\"130\":1,\"131\":1,\"149\":3,\"154\":4,\"173\":6,\"174\":3,\"190\":1,\"213\":1,\"241\":1,\"247\":1,\"287\":3}}],[\"方法绑定\",{\"1\":{\"29\":1}}],[\"x版本\",{\"0\":{\"296\":1}}],[\"xiaomi\",{\"1\":{\"287\":1}}],[\"xiaoyu\",{\"1\":{\"20\":1,\"25\":1,\"32\":1,\"34\":1,\"35\":1,\"39\":1,\"42\":1,\"45\":1,\"108\":1,\"110\":1,\"154\":2,\"296\":1}}],[\"xa\",{\"1\":{\"282\":1}}],[\"x\",{\"1\":{\"121\":5,\"190\":2,\"286\":1,\"288\":1,\"296\":1}}],[\"xxtea\",{\"1\":{\"287\":1}}],[\"xxxvalueprovider\",{\"1\":{\"286\":1}}],[\"xxxcopier\",{\"1\":{\"286\":1}}],[\"xxxx\",{\"1\":{\"273\":1}}],[\"xxxxx\",{\"1\":{\"273\":2}}],[\"xxx\",{\"1\":{\"257\":1}}],[\"xxxdatahandler\",{\"1\":{\"116\":1}}],[\"xxpluginconfiguration\",{\"1\":{\"84\":1}}],[\"xx\",{\"1\":{\"84\":2}}],[\"xml\",{\"0\":{\"142\":1},\"1\":{\"32\":1,\"84\":1,\"152\":1,\"162\":2,\"208\":1,\"209\":1,\"302\":1}}],[\"bigexcelwriter\",{\"1\":{\"286\":1}}],[\"bin\",{\"1\":{\"153\":3}}],[\"brpc\",{\"1\":{\"274\":1,\"282\":1}}],[\"break\",{\"1\":{\"95\":5,\"102\":1,\"109\":5,\"111\":5,\"116\":4,\"154\":1,\"163\":2}}],[\"btree\",{\"1\":{\"232\":1}}],[\"bloomfilter\",{\"1\":{\"287\":1}}],[\"blog\",{\"1\":{\"250\":1}}],[\"blob\",{\"1\":{\"128\":1}}],[\"blockexception\",{\"1\":{\"220\":1}}],[\"block\",{\"1\":{\"98\":1,\"220\":2}}],[\"blockingqueue\",{\"1\":{\"98\":1}}],[\"blockingwaitstrategy\",{\"1\":{\"34\":2}}],[\"barservice\",{\"1\":{\"239\":2}}],[\"backoff\",{\"1\":{\"190\":2}}],[\"bad\",{\"1\":{\"91\":1,\"191\":1}}],[\"base62\",{\"1\":{\"286\":1}}],[\"base58\",{\"1\":{\"286\":1}}],[\"base32\",{\"1\":{\"286\":1,\"287\":1}}],[\"basedatacache\",{\"1\":{\"83\":3,\"116\":3,\"173\":3,\"178\":3,\"188\":3}}],[\"base\",{\"1\":{\"42\":1,\"55\":1,\"59\":2,\"62\":12,\"85\":1,\"116\":1,\"117\":2,\"162\":1}}],[\"bom\",{\"1\":{\"277\":1}}],[\"bodyparamplugin\",{\"1\":{\"185\":2}}],[\"bodyextractors\",{\"1\":{\"91\":1,\"191\":1}}],[\"bodyinserters\",{\"1\":{\"90\":1,\"190\":1}}],[\"body\",{\"1\":{\"90\":2,\"91\":1,\"190\":1,\"191\":1,\"220\":3,\"242\":7,\"243\":3,\"292\":1,\"296\":1}}],[\"boolean\",{\"1\":{\"78\":3,\"80\":2,\"84\":1,\"88\":1,\"102\":6,\"121\":2,\"149\":2,\"154\":1,\"174\":1,\"180\":2,\"181\":1,\"182\":3,\"183\":1,\"185\":1,\"203\":1,\"241\":1,\"247\":1}}],[\"boot<\",{\"1\":{\"301\":2}}],[\"bootstrap的控制台中输出如下信息\",{\"1\":{\"59\":1,\"62\":1}}],[\"bootstrap的配置\",{\"1\":{\"55\":1}}],[\"bootstrap启动成功\",{\"1\":{\"55\":1}}],[\"bootstrap是网关系统的核心\",{\"1\":{\"55\":1}}],[\"bootstrap\",{\"0\":{\"55\":1,\"112\":1,\"151\":1,\"159\":1,\"160\":1,\"164\":1,\"234\":1},\"1\":{\"32\":1,\"42\":1,\"46\":12,\"66\":3,\"84\":2,\"104\":3,\"112\":1,\"115\":1,\"152\":3,\"153\":1,\"157\":1,\"159\":3,\"160\":1,\"162\":13,\"164\":2,\"171\":1,\"174\":1,\"208\":1,\"209\":1,\"224\":1,\"230\":1,\"236\":1,\"301\":1}}],[\"boot\",{\"0\":{\"45\":1},\"1\":{\"32\":1,\"33\":1,\"45\":3,\"57\":1,\"84\":3,\"85\":17,\"115\":1,\"142\":1,\"152\":1,\"159\":2,\"162\":2,\"164\":1,\"209\":1,\"224\":1,\"234\":1,\"236\":2,\"270\":1,\"271\":1,\"272\":1,\"273\":1,\"276\":1,\"278\":1,\"301\":4,\"302\":4}}],[\"b\",{\"1\":{\"55\":4,\"153\":1,\"162\":3,\"303\":1}}],[\"bug\",{\"0\":{\"272\":1,\"278\":1},\"1\":{\"216\":1,\"264\":1,\"268\":1,\"272\":2,\"278\":4,\"279\":1,\"284\":1,\"291\":1,\"300\":3}}],[\"burstcapacity\",{\"1\":{\"203\":2}}],[\"built\",{\"1\":{\"153\":1}}],[\"build方法进行追踪\",{\"1\":{\"186\":1}}],[\"buildparameter\",{\"1\":{\"243\":1}}],[\"buildparamsmap\",{\"1\":{\"149\":1}}],[\"buildplugindo\",{\"1\":{\"107\":1}}],[\"buildpluginpath\",{\"1\":{\"96\":1,\"159\":1}}],[\"buildmediatype\",{\"1\":{\"90\":1,\"190\":1}}],[\"buildrealpath\",{\"1\":{\"160\":1}}],[\"buildrealurl\",{\"1\":{\"85\":1,\"173\":1,\"178\":1,\"189\":1}}],[\"buildruleparentpath\",{\"1\":{\"96\":1}}],[\"buildruleconditiondo\",{\"1\":{\"80\":1}}],[\"buildruledo\",{\"1\":{\"80\":1}}],[\"builddomain\",{\"1\":{\"85\":1,\"173\":1,\"178\":1,\"189\":1}}],[\"builddivideupstream\",{\"1\":{\"77\":1,\"78\":1,\"79\":1}}],[\"buildspringcloudselectorhandle\",{\"1\":{\"78\":1}}],[\"buildselectorparentpath\",{\"1\":{\"96\":1}}],[\"buildselectorconditiondo\",{\"1\":{\"46\":2,\"78\":1}}],[\"buildselectordo\",{\"1\":{\"46\":1,\"78\":1}}],[\"builder\",{\"1\":{\"78\":1,\"80\":2,\"186\":1}}],[\"buildbyname\",{\"1\":{\"77\":1,\"79\":1}}],[\"buildtcctransaction\",{\"1\":{\"38\":1}}],[\"build\",{\"1\":{\"38\":1,\"39\":1,\"78\":1,\"80\":2,\"90\":2,\"186\":1,\"201\":1,\"213\":2,\"227\":4,\"278\":1}}],[\"buffer\",{\"1\":{\"34\":1}}],[\"buffersize\",{\"1\":{\"32\":3,\"34\":4,\"42\":2,\"273\":1}}],[\"below\",{\"1\":{\"225\":9}}],[\"between\",{\"1\":{\"149\":1}}],[\"been\",{\"1\":{\"102\":1,\"199\":1}}],[\"be\",{\"1\":{\"55\":1,\"103\":1,\"121\":2}}],[\"beneath\",{\"1\":{\"55\":1,\"162\":1}}],[\"before\",{\"1\":{\"42\":1}}],[\"begin\",{\"1\":{\"35\":1,\"38\":2}}],[\"beancopier\",{\"1\":{\"284\":1,\"286\":1}}],[\"beancreationexception\",{\"1\":{\"162\":1}}],[\"beanname\",{\"1\":{\"213\":1}}],[\"beanfactoryutils\",{\"1\":{\"213\":3}}],[\"beaninstantiationexception\",{\"1\":{\"162\":2}}],[\"beansoftypeincludingancestors\",{\"1\":{\"213\":3}}],[\"beans\",{\"1\":{\"34\":2,\"35\":1,\"162\":9,\"213\":2}}],[\"bean>\",{\"1\":{\"32\":7,\"42\":2}}],[\"bean\",{\"1\":{\"32\":1,\"34\":2,\"35\":2,\"39\":1,\"42\":1,\"75\":1,\"84\":5,\"85\":3,\"95\":3,\"110\":8,\"114\":2,\"115\":5,\"116\":2,\"154\":4,\"159\":3,\"162\":2,\"163\":1,\"164\":3,\"171\":2,\"174\":3,\"213\":1,\"247\":1,\"248\":2,\"284\":1,\"286\":1,\"296\":1,\"301\":1}}],[\"byin\",{\"1\":{\"273\":1}}],[\"byte\",{\"1\":{\"247\":2,\"248\":2}}],[\"byteimg\",{\"1\":{\"188\":1}}],[\"by\",{\"1\":{\"11\":10,\"14\":10,\"39\":1,\"42\":1,\"153\":1,\"162\":2}}],[\"你定好了\",{\"1\":{\"305\":1}}],[\"你又怎么说\",{\"1\":{\"305\":2}}],[\"你又怎么拆分呢\",{\"1\":{\"304\":1}}],[\"你好意思么\",{\"1\":{\"304\":1}}],[\"你不会\",{\"1\":{\"304\":1}}],[\"你只需要在网关新增一个适合自己业务的鉴权插件就\",{\"1\":{\"304\":1}}],[\"你想怎么玩都可以\",{\"1\":{\"304\":1}}],[\"你想要使用什么插件\",{\"1\":{\"302\":1}}],[\"你要发布新的版本\",{\"1\":{\"304\":1}}],[\"你要发布商品模块的接口\",{\"1\":{\"304\":1}}],[\"你要发版会造成所有其他的模块也操作不了\",{\"1\":{\"296\":1}}],[\"你需要用到呢\",{\"1\":{\"304\":1}}],[\"你就新增该插件的依赖\",{\"1\":{\"302\":1}}],[\"你可以引入以下依赖\",{\"1\":{\"302\":1}}],[\"你可以在网关里面\",{\"1\":{\"304\":1}}],[\"你可以在\",{\"1\":{\"302\":1}}],[\"你可以去买彩票了\",{\"1\":{\"37\":1}}],[\"你怎么处理呢\",{\"1\":{\"297\":2,\"304\":2}}],[\"你的url\",{\"1\":{\"301\":1}}],[\"你的业务系统可能定义的结果并不是上述结构\",{\"1\":{\"296\":1}}],[\"你的\",{\"1\":{\"296\":2}}],[\"你无需引用全部依赖\",{\"1\":{\"223\":1}}],[\"你值得拥有\",{\"1\":{\"81\":1}}],[\"你信不信\",{\"1\":{\"32\":1}}],[\"你是失败的\",{\"1\":{\"30\":1}}],[\"我是\",{\"1\":{\"305\":1}}],[\"我在\",{\"1\":{\"304\":1}}],[\"我觉得最大的特色是在流量筛选和管控方面\",{\"1\":{\"303\":1}}],[\"我觉得这样会更加友好\",{\"1\":{\"293\":1}}],[\"我怎么接入\",{\"1\":{\"302\":1}}],[\"我想使用熔断功能\",{\"1\":{\"302\":1}}],[\"我说的是假如\",{\"1\":{\"296\":1}}],[\"我相信你们每个公司都有一个后台管理系统吧\",{\"1\":{\"296\":1,\"304\":1}}],[\"我将\",{\"1\":{\"137\":1}}],[\"我将它理解为\",{\"1\":{\"131\":1}}],[\"我无法去筛选出某一个我需要的缓存在\",{\"1\":{\"122\":1}}],[\"我建了一个\",{\"1\":{\"120\":1}}],[\"我这里再把处理逻辑代码贴出来\",{\"1\":{\"111\":1}}],[\"我这里为了方便\",{\"1\":{\"46\":1}}],[\"我来猜测下它干了什么\",{\"1\":{\"98\":1}}],[\"我解释下核心计算权重的方面\",{\"1\":{\"89\":1}}],[\"我只能说\",{\"1\":{\"32\":1}}],[\"我都可以让他事务失效\",{\"1\":{\"32\":1}}],[\"我们没有\",{\"1\":{\"305\":1}}],[\"我们还是先来看看新增功能\",{\"1\":{\"300\":1}}],[\"我们来看一下整体的架构图\",{\"1\":{\"297\":1,\"304\":1}}],[\"我们来分析下\",{\"1\":{\"84\":1}}],[\"我们把这样一个大的\",{\"1\":{\"296\":1}}],[\"我们注意到了这个事情\",{\"1\":{\"296\":1}}],[\"我们秉承和谐快乐\",{\"1\":{\"275\":1,\"289\":1}}],[\"我们团队重构了整个项目\",{\"1\":{\"268\":1}}],[\"我们有一张表单独存储\",{\"1\":{\"232\":1}}],[\"我们重点需要关注的是\",{\"1\":{\"218\":1}}],[\"我们首先需要判断出这个服务是否出现了不稳定\",{\"1\":{\"218\":1}}],[\"我们一般有以下\",{\"1\":{\"217\":1}}],[\"我们应该主要思考以下几个问题\",{\"1\":{\"217\":1}}],[\"我们明白\",{\"1\":{\"213\":1}}],[\"我们发现一次针对于\",{\"1\":{\"185\":1}}],[\"我们大体梳理了注入到plugins的插件\",{\"1\":{\"185\":1}}],[\"我们已经知晓该方法的作用是为了选取插件\",{\"1\":{\"188\":1}}],[\"我们已经知晓了\",{\"1\":{\"185\":1}}],[\"我们已经理清它最最基本的长轮询逻辑\",{\"1\":{\"99\":1}}],[\"我们以常用的\",{\"1\":{\"173\":1}}],[\"我们先来看看插件实现\",{\"1\":{\"172\":1}}],[\"我们先不妨研究下\",{\"1\":{\"118\":1}}],[\"我们需要开打\",{\"1\":{\"226\":1}}],[\"我们需要在配置路径使用\",{\"1\":{\"212\":1}}],[\"我们需要先了解下微内核架构\",{\"1\":{\"167\":1}}],[\"我们需要注意\",{\"1\":{\"70\":1}}],[\"我们知道\",{\"1\":{\"162\":1,\"296\":1}}],[\"我们知道后台配置肯定修改完是要落盘到数据库的\",{\"1\":{\"99\":1}}],[\"我们找到入口方法\",{\"1\":{\"130\":1}}],[\"我们在开启\",{\"1\":{\"303\":1}}],[\"我们在\",{\"1\":{\"125\":1,\"211\":1}}],[\"我们会直接用\",{\"1\":{\"125\":1}}],[\"我们看看\",{\"1\":{\"124\":1}}],[\"我们看看下面的实验\",{\"1\":{\"120\":1}}],[\"我们之前的两个疑问点\",{\"1\":{\"122\":1}}],[\"我们将测试方法改进下\",{\"1\":{\"121\":1}}],[\"我们自己的通常是弟中弟\",{\"1\":{\"121\":1}}],[\"我们继续\",{\"1\":{\"108\":1}}],[\"我们分析了\",{\"1\":{\"104\":1}}],[\"我们现在知道了模式是阻塞等待\",{\"1\":{\"99\":1}}],[\"我们现在追踪下\",{\"1\":{\"98\":1}}],[\"我们是如何得知数据有变化的呢\",{\"1\":{\"99\":1}}],[\"我们具体看看各个策略的代码实现\",{\"1\":{\"86\":1}}],[\"我们的后台都划分成很多的微服务\",{\"1\":{\"296\":1,\"304\":1}}],[\"我们的\",{\"1\":{\"85\":1}}],[\"我们的愿景\",{\"0\":{\"16\":1}}],[\"我们总结下\",{\"1\":{\"81\":1}}],[\"我们这里的是\",{\"1\":{\"80\":1}}],[\"我们回退\",{\"1\":{\"79\":1}}],[\"我们再来说一下\",{\"1\":{\"213\":1}}],[\"我们再来看看在\",{\"1\":{\"46\":1}}],[\"我们再进入管理控制台\",{\"1\":{\"72\":1}}],[\"我们修改端口为\",{\"1\":{\"72\":1}}],[\"我们启动端口为\",{\"1\":{\"70\":1}}],[\"我们启动两个项目之后就可以通过后台管理系统测试\",{\"1\":{\"66\":1}}],[\"我们可以选择\",{\"1\":{\"220\":1}}],[\"我们可以大体猜测出基于别\",{\"1\":{\"191\":1}}],[\"我们可以配置一个业务对应一个\",{\"1\":{\"70\":1}}],[\"我们可以想象一下网关到底是做什么的\",{\"1\":{\"67\":1}}],[\"我们最终运行的是\",{\"1\":{\"70\":1}}],[\"我们直接运行\",{\"1\":{\"70\":1}}],[\"我们直接在页面把选择器中的条件\",{\"1\":{\"46\":1}}],[\"我们掌握好它\",{\"1\":{\"67\":1}}],[\"我们打开管理界面上的插件列表\",{\"1\":{\"67\":1}}],[\"我们通过\",{\"1\":{\"66\":1,\"94\":1}}],[\"我们为什么不使用呢\",{\"1\":{\"39\":1}}],[\"我们使用了\",{\"1\":{\"39\":1}}],[\"我们支持在分布式环境中调用一个\",{\"1\":{\"30\":1}}],[\"m1\",{\"0\":{\"283\":1,\"285\":1},\"1\":{\"284\":1}}],[\"mutated\",{\"1\":{\"213\":2,\"227\":2}}],[\"mutate\",{\"1\":{\"213\":2,\"227\":2}}],[\"multivaluemap<string\",{\"1\":{\"103\":1,\"186\":1}}],[\"multi\",{\"1\":{\"34\":1}}],[\"mxj\",{\"1\":{\"125\":3}}],[\"msg\",{\"1\":{\"107\":3,\"296\":1}}],[\"memory\",{\"1\":{\"153\":1}}],[\"mediatype\",{\"1\":{\"103\":1}}],[\"message\",{\"1\":{\"102\":3,\"103\":2,\"112\":11,\"199\":1,\"226\":1,\"296\":1}}],[\"methodname\",{\"1\":{\"232\":1}}],[\"methodproxy\",{\"1\":{\"162\":2}}],[\"method\",{\"1\":{\"90\":3,\"110\":4,\"162\":3,\"186\":2,\"190\":3,\"240\":4,\"248\":5}}],[\"methodweightmap\",{\"1\":{\"89\":4}}],[\"metasubscribers\",{\"1\":{\"115\":2,\"159\":4,\"164\":2}}],[\"metadata的parametertypes\",{\"1\":{\"242\":1}}],[\"metadataservice\",{\"1\":{\"154\":1}}],[\"metadatasubscriber\",{\"1\":{\"115\":1,\"185\":1}}],[\"metadatasubscribers\",{\"1\":{\"102\":3,\"115\":2,\"159\":5}}],[\"metadatapath\",{\"1\":{\"154\":2}}],[\"metadatahandler\",{\"1\":{\"115\":1}}],[\"metadatalist\",{\"1\":{\"111\":2}}],[\"metadata\",{\"1\":{\"110\":1,\"155\":1,\"157\":1,\"238\":1,\"242\":10,\"243\":7}}],[\"metadatarefresh\",{\"1\":{\"102\":1}}],[\"metadatamapper\",{\"1\":{\"76\":1}}],[\"metadatado\",{\"1\":{\"76\":1}}],[\"meta\",{\"1\":{\"46\":3,\"95\":1,\"102\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"115\":1,\"121\":1,\"130\":1,\"154\":1,\"159\":2,\"162\":1,\"242\":4,\"273\":1,\"287\":1}}],[\"metricslabelenum\",{\"1\":{\"174\":2}}],[\"metricstrackerfacade\",{\"1\":{\"84\":1,\"174\":3}}],[\"metrics\",{\"1\":{\"14\":1,\"270\":1,\"271\":1,\"277\":1,\"300\":1}}],[\"md5digestashex\",{\"1\":{\"145\":1}}],[\"md5\",{\"1\":{\"95\":1}}],[\"md5utils\",{\"1\":{\"95\":1}}],[\"md5=\",{\"1\":{\"46\":10}}],[\"miui\",{\"1\":{\"287\":1}}],[\"minidle\",{\"1\":{\"273\":1}}],[\"minimum\",{\"1\":{\"225\":1}}],[\"minimumnumberofcalls\",{\"1\":{\"224\":1}}],[\"minrequestamount\",{\"1\":{\"219\":1}}],[\"minutes\",{\"1\":{\"103\":2}}],[\"min\",{\"1\":{\"89\":1,\"206\":1,\"225\":1}}],[\"milliseconds\",{\"1\":{\"34\":1,\"35\":1,\"75\":1,\"98\":2,\"227\":1}}],[\"mvc\",{\"1\":{\"75\":1,\"76\":2,\"213\":3}}],[\"mvn\",{\"1\":{\"52\":1}}],[\"matlab\",{\"1\":{\"305\":1}}],[\"math\",{\"1\":{\"206\":3,\"225\":11}}],[\"matchertable\",{\"1\":{\"287\":1}}],[\"matchifmissing\",{\"1\":{\"110\":2,\"114\":1}}],[\"matchrule\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":2}}],[\"matchselector\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":2}}],[\"matchmodeenum\",{\"1\":{\"78\":1,\"80\":1}}],[\"matchmode\",{\"1\":{\"78\":1,\"80\":1}}],[\"match的方式支持模糊匹配\",{\"1\":{\"68\":1}}],[\"match\",{\"1\":{\"59\":2,\"62\":12,\"68\":1,\"78\":1,\"80\":2,\"83\":2}}],[\"mapconverter\",{\"1\":{\"288\":1}}],[\"maputil\",{\"1\":{\"287\":1}}],[\"mapwrapper\",{\"1\":{\"286\":1}}],[\"maps\",{\"1\":{\"145\":1}}],[\"map<class<\",{\"1\":{\"130\":1,\"132\":1,\"135\":1}}],[\"map<string\",{\"1\":{\"116\":1,\"132\":1,\"133\":1,\"134\":1,\"137\":7,\"145\":1,\"213\":3}}],[\"map<rpctypeenum\",{\"1\":{\"80\":1}}],[\"maptodata\",{\"1\":{\"107\":1,\"163\":1}}],[\"map\",{\"1\":{\"79\":2,\"80\":1,\"89\":7,\"102\":8,\"115\":7,\"119\":1,\"131\":1,\"145\":7,\"149\":1,\"160\":1,\"163\":6,\"179\":7,\"181\":4,\"201\":2,\"203\":1,\"237\":1,\"288\":3}}],[\"mappings\",{\"1\":{\"213\":3}}],[\"mappingbeans\",{\"1\":{\"213\":2}}],[\"mapping\",{\"1\":{\"46\":1,\"213\":2}}],[\"main\",{\"1\":{\"55\":5,\"120\":1,\"121\":1,\"127\":2,\"128\":1,\"152\":2,\"153\":8,\"162\":10,\"301\":1}}],[\"machine\",{\"1\":{\"42\":1}}],[\"management\",{\"1\":{\"301\":1}}],[\"manager\",{\"1\":{\"39\":2,\"159\":1}}],[\"many\",{\"1\":{\"42\":1,\"203\":3,\"220\":4}}],[\"maven\",{\"0\":{\"209\":1},\"1\":{\"41\":1,\"52\":1,\"208\":1,\"256\":1}}],[\"master\",{\"0\":{\"41\":1},\"1\":{\"63\":2,\"128\":1}}],[\"mastername\",{\"1\":{\"32\":1,\"45\":1}}],[\"maxlifetime\",{\"1\":{\"273\":1}}],[\"maxactive\",{\"1\":{\"273\":1}}],[\"maxcurrent\",{\"1\":{\"89\":3}}],[\"maximumweight\",{\"1\":{\"39\":1}}],[\"max\",{\"1\":{\"35\":3,\"39\":2,\"42\":1,\"63\":2,\"98\":2,\"206\":1,\"225\":12}}],[\"myself\",{\"1\":{\"108\":3,\"112\":5,\"116\":1}}],[\"mysql>\",{\"1\":{\"80\":2}}],[\"mysql\",{\"0\":{\"124\":1,\"126\":1},\"1\":{\"32\":3,\"33\":1,\"42\":2,\"45\":2,\"54\":1,\"81\":2,\"124\":2,\"125\":5,\"126\":2,\"127\":2,\"129\":1,\"270\":1,\"273\":3,\"277\":1,\"301\":1,\"305\":1}}],[\"my\",{\"1\":{\"71\":1,\"72\":1,\"250\":1}}],[\"mymaster\",{\"1\":{\"45\":1}}],[\"myth\",{\"1\":{\"34\":1,\"154\":2,\"305\":1}}],[\"module\",{\"1\":{\"186\":2}}],[\"mode\",{\"1\":{\"80\":1}}],[\"montan\",{\"1\":{\"270\":1}}],[\"monitorplugin\",{\"1\":{\"162\":1,\"185\":2}}],[\"monitor\",{\"1\":{\"85\":2,\"162\":2,\"185\":1,\"300\":1}}],[\"mono<object>\",{\"1\":{\"242\":1,\"243\":1}}],[\"mono<t>>\",{\"1\":{\"227\":2}}],[\"mono<t>\",{\"1\":{\"227\":6}}],[\"mono<ratelimiterresponse>\",{\"1\":{\"203\":1}}],[\"mono<clientresponse>\",{\"1\":{\"90\":1}}],[\"mono<void>\",{\"1\":{\"83\":1,\"84\":2,\"85\":1,\"90\":3,\"91\":1,\"174\":2,\"178\":2,\"185\":1,\"186\":1,\"188\":1,\"189\":1,\"190\":3,\"191\":1,\"203\":1,\"213\":2,\"220\":2,\"227\":4,\"241\":2,\"242\":1,\"244\":1}}],[\"mono\",{\"1\":{\"84\":2,\"90\":1,\"91\":1,\"174\":3,\"185\":2,\"191\":1,\"220\":1,\"241\":2,\"243\":1,\"244\":1}}],[\"mongdb\",{\"1\":{\"32\":1,\"33\":1}}],[\"mongoclient\",{\"1\":{\"286\":1}}],[\"mongouserpwd\",{\"1\":{\"32\":1,\"45\":1}}],[\"mongousername\",{\"1\":{\"32\":1,\"45\":1}}],[\"mongodb4\",{\"1\":{\"286\":1}}],[\"mongodbname\",{\"1\":{\"32\":1,\"45\":1}}],[\"mongodburl\",{\"1\":{\"32\":1,\"45\":1}}],[\"mongodb\",{\"1\":{\"32\":2,\"45\":1,\"270\":1,\"277\":1,\"284\":1,\"305\":1}}],[\"mongodb>redis\",{\"1\":{\"32\":1}}],[\"mongo\",{\"1\":{\"32\":1,\"42\":1,\"278\":1}}],[\"more\",{\"1\":{\"55\":1}}],[\"motan框架不支持注解方式的使用\",{\"1\":{\"272\":1,\"278\":1}}],[\"motan<\",{\"1\":{\"44\":1,\"45\":1}}],[\"motan\",{\"0\":{\"44\":1},\"1\":{\"33\":1,\"45\":1,\"265\":1,\"276\":1,\"278\":1}}],[\"这也是\",{\"1\":{\"303\":1}}],[\"这也是网关最基础的能力\",{\"1\":{\"67\":1}}],[\"这比捐赠实惠的多\",{\"1\":{\"284\":1}}],[\"这三种缓存我将它分为二层\",{\"1\":{\"132\":1}}],[\"这行才是关键调用\",{\"1\":{\"121\":1}}],[\"这行\",{\"1\":{\"118\":1}}],[\"这是中国人在\",{\"1\":{\"305\":1}}],[\"这是未来的重点\",{\"1\":{\"304\":1}}],[\"这是令牌桶的填充速率\",{\"1\":{\"195\":1}}],[\"这是令牌桶可以保存的令牌数\",{\"1\":{\"195\":1}}],[\"这是一个负载均衡器\",{\"1\":{\"118\":1}}],[\"这是用来长轮询的\",{\"1\":{\"46\":1}}],[\"这时候\",{\"1\":{\"162\":2}}],[\"这时候框架会取缓存中的\",{\"1\":{\"37\":1}}],[\"这时触发\",{\"1\":{\"112\":1}}],[\"这几个处理步骤被分散到下面这些类的方法协作中\",{\"1\":{\"102\":1}}],[\"这种策略非常好理解就是当\",{\"1\":{\"217\":1}}],[\"这种控制场景也是非常有意义的\",{\"1\":{\"217\":1}}],[\"这种宕机往往不是因为业务逻辑的漏洞而是因为请求过多资源不够导致的\",{\"1\":{\"216\":1}}],[\"这种激增的请求很容易导致整个服务完全不可用\",{\"1\":{\"216\":1}}],[\"这种方式相比与普通的工厂模式\",{\"1\":{\"119\":1}}],[\"这种方式\",{\"1\":{\"99\":1}}],[\"这种想法的\",{\"1\":{\"32\":1}}],[\"这可不成\",{\"1\":{\"99\":1}}],[\"这\",{\"1\":{\"99\":1}}],[\"这两个策略的通知方式也不同\",{\"1\":{\"96\":1}}],[\"这两个的作用了解了\",{\"1\":{\"95\":1}}],[\"这样网关的环境就已经搭建完成\",{\"1\":{\"301\":1}}],[\"这样网关端会监听到他们的节点变动\",{\"1\":{\"96\":1}}],[\"这样多方便\",{\"1\":{\"296\":1}}],[\"这样就会造成结构不一样\",{\"1\":{\"296\":1}}],[\"这样就保证了对集群环境的支持\",{\"1\":{\"39\":1}}],[\"这样可以使系统有个预热过程\",{\"1\":{\"220\":1}}],[\"这样\",{\"1\":{\"130\":1}}],[\"这次有了经验\",{\"1\":{\"94\":1}}],[\"这一路走来\",{\"1\":{\"305\":1}}],[\"这一层缓存会借助第二层缓存\",{\"1\":{\"135\":1}}],[\"这一环\",{\"1\":{\"91\":1}}],[\"这一点没弄明白\",{\"1\":{\"46\":1}}],[\"这块其实用的就是\",{\"1\":{\"124\":1}}],[\"这块在后台总结中有具体分析\",{\"1\":{\"103\":1}}],[\"这块在下个模块分析\",{\"1\":{\"102\":1}}],[\"这块我也没有了解过\",{\"1\":{\"99\":1}}],[\"这块分析完了再回到\",{\"1\":{\"98\":1}}],[\"这块的实现\",{\"1\":{\"98\":1}}],[\"这块\",{\"1\":{\"84\":1}}],[\"这些都是要考虑的\",{\"1\":{\"305\":1}}],[\"这些问题的解决必须修改原有代码结构\",{\"1\":{\"284\":1}}],[\"这些配置项主要可以分为\",{\"1\":{\"218\":1}}],[\"这些大型促销时\",{\"1\":{\"216\":1}}],[\"这些监听器是什么时候注入到容器中的呢\",{\"1\":{\"110\":1}}],[\"这些疑问我会在下一章继续分析~\",{\"1\":{\"99\":1}}],[\"这些被调用的方法由子类实现\",{\"1\":{\"116\":1}}],[\"这些被\",{\"1\":{\"99\":1}}],[\"这些节点信息已\",{\"1\":{\"79\":1}}],[\"这些后面有精力再分析\",{\"1\":{\"46\":1}}],[\"这篇会持续更新\",{\"1\":{\"46\":1}}],[\"这里空起来\",{\"1\":{\"282\":1}}],[\"这里需要提醒一下限流算法是令牌桶算法\",{\"1\":{\"205\":1}}],[\"这里需要配置成\",{\"1\":{\"55\":1}}],[\"这里默认配置是有的\",{\"1\":{\"162\":1}}],[\"这里主要是依赖\",{\"1\":{\"160\":1}}],[\"这里指的是\",{\"1\":{\"116\":1}}],[\"这里分的类型跟\",{\"1\":{\"111\":1}}],[\"这里存疑\",{\"1\":{\"111\":1}}],[\"这里遍历所有的监听器\",{\"1\":{\"111\":1}}],[\"这里发布的事件用\",{\"1\":{\"108\":1}}],[\"这里可以看出来\",{\"1\":{\"107\":1}}],[\"这里把\",{\"1\":{\"106\":1}}],[\"这里为了验证数据同步流程\",{\"1\":{\"104\":1}}],[\"这里为什么要创建守护线程\",{\"1\":{\"46\":1}}],[\"这里没有去区别信息类型\",{\"1\":{\"102\":1}}],[\"这里将在下个模块分析\",{\"1\":{\"102\":1}}],[\"这里给\",{\"1\":{\"98\":1}}],[\"这里就是采用\",{\"1\":{\"125\":1}}],[\"这里就是\",{\"1\":{\"98\":1,\"124\":1}}],[\"这里就先到此为止\",{\"1\":{\"46\":1}}],[\"这里的具体实现类是\",{\"1\":{\"163\":1}}],[\"这里的监听者实现类是\",{\"1\":{\"154\":1}}],[\"这里的监听器对应的就是\",{\"1\":{\"110\":1}}],[\"这里的数据类型指的是\",{\"1\":{\"102\":1}}],[\"这里的最后一句会调用并添加\",{\"1\":{\"98\":1}}],[\"这里的\",{\"1\":{\"98\":1,\"111\":1}}],[\"这里的负载均衡策略也是关键点\",{\"1\":{\"85\":1}}],[\"这里用了一个定时类型的线程池\",{\"1\":{\"98\":1}}],[\"这里也直接贴网关配置\",{\"1\":{\"94\":1}}],[\"这里入口参数使用\",{\"1\":{\"84\":1}}],[\"这里来解释下\",{\"1\":{\"84\":1}}],[\"这里还有个点\",{\"1\":{\"84\":1}}],[\"这里\",{\"1\":{\"80\":1}}],[\"这里先按下不表\",{\"1\":{\"78\":1}}],[\"这里在\",{\"1\":{\"78\":1,\"80\":1}}],[\"这里一个构造方法\",{\"1\":{\"46\":1}}],[\"这里如果是用\",{\"1\":{\"46\":1}}],[\"这里如果日志保存异常了怎么办\",{\"0\":{\"37\":1}}],[\"这里面同步数据会进两个\",{\"1\":{\"46\":1}}],[\"这里通过\",{\"1\":{\"46\":1}}],[\"这里重点看一下在调试方法中\",{\"1\":{\"46\":1}}],[\"这里进的是\",{\"1\":{\"46\":1}}],[\"这里是\",{\"1\":{\"163\":1}}],[\"这里是本次流程的重点\",{\"1\":{\"102\":1}}],[\"这里是关键\",{\"1\":{\"98\":1}}],[\"这里是关键调用\",{\"1\":{\"90\":1}}],[\"这里是异步的回调方法\",{\"1\":{\"90\":1}}],[\"这里是第二个关键\",{\"1\":{\"89\":1}}],[\"这里是第一个关键\",{\"1\":{\"89\":1}}],[\"这里是通过与\",{\"1\":{\"79\":1}}],[\"这里是打日志出来的地方\",{\"1\":{\"46\":1}}],[\"这里是采用多个消费者去处理队列里面的任务\",{\"1\":{\"34\":1}}],[\"这里我着重说一下自定义返回结果\",{\"1\":{\"296\":1}}],[\"这里我们已经搞懂了后台这块对长轮询流程的实现\",{\"1\":{\"98\":1}}],[\"这里我们先不具体追究表结构及业务意义\",{\"1\":{\"78\":1}}],[\"这里我只保留了核心点\",{\"1\":{\"85\":1}}],[\"这里我只给出了\",{\"1\":{\"42\":1}}],[\"这里我推荐使用是\",{\"1\":{\"32\":1}}],[\"这里有个小疑惑\",{\"1\":{\"185\":1}}],[\"这里有\",{\"1\":{\"108\":1}}],[\"这里有很多种类型\",{\"1\":{\"108\":1}}],[\"这里有行关键代码阻塞住了请求\",{\"1\":{\"98\":1}}],[\"这里有关键的\",{\"1\":{\"90\":1}}],[\"这里有一个细节就是\",{\"1\":{\"39\":1}}],[\"这里有人可能会问\",{\"0\":{\"36\":1}}],[\"这个过程完全是可视化\",{\"1\":{\"303\":1}}],[\"这个过程遇到了坑\",{\"1\":{\"162\":1}}],[\"这个时候\",{\"1\":{\"296\":1}}],[\"这个时候需要回滚\",{\"1\":{\"30\":1}}],[\"这个版本将完全支持tac\",{\"1\":{\"281\":1}}],[\"这个函数式编程\",{\"1\":{\"223\":1}}],[\"这个参数规定了我们从哪个角度来设置限流的阈值\",{\"1\":{\"220\":1}}],[\"这个参数只是要大于你的\",{\"1\":{\"32\":1}}],[\"这个策略所针对的场景是系统长期处于低水位的情况下\",{\"1\":{\"217\":1}}],[\"这个问题绊了我好久\",{\"1\":{\"162\":1}}],[\"这个数据在\",{\"1\":{\"149\":1}}],[\"这个迭代器的实现类\",{\"1\":{\"121\":1}}],[\"这个期间如果后台发生数据变化肯定是没法通知到网关的\",{\"1\":{\"103\":1}}],[\"这个\",{\"1\":{\"103\":1,\"112\":2}}],[\"这个接口和\",{\"1\":{\"240\":1}}],[\"这个接口我们应该非常熟悉了\",{\"1\":{\"95\":1}}],[\"这个接口虽然之前注册过\",{\"1\":{\"79\":1}}],[\"这个算法有点复杂\",{\"1\":{\"89\":1}}],[\"这个概念\",{\"1\":{\"86\":1,\"87\":1}}],[\"这个插件列表是哪里来的\",{\"1\":{\"84\":1}}],[\"这个插件以\",{\"1\":{\"79\":1}}],[\"这个方法的作用其实就像是\",{\"1\":{\"130\":1}}],[\"这个方法的实现\",{\"1\":{\"90\":1}}],[\"这个方法会将阻塞的请求释放\",{\"1\":{\"98\":1}}],[\"这个方法分析完了\",{\"1\":{\"79\":1}}],[\"这个方法执行完之后\",{\"1\":{\"46\":1}}],[\"这个具体改的什么数据\",{\"1\":{\"79\":1}}],[\"这个属性非常重要\",{\"1\":{\"70\":1}}],[\"这个单词顾名思义就是分配\",{\"1\":{\"67\":1}}],[\"这个刷新本地缓存的方法\",{\"1\":{\"46\":1}}],[\"这个类更是一个\",{\"1\":{\"95\":1}}],[\"这个类中\",{\"1\":{\"46\":1}}],[\"这个类\",{\"1\":{\"46\":1,\"121\":1}}],[\"这个是响应式\",{\"1\":{\"213\":1}}],[\"这个是否注册元数据信息的判断\",{\"1\":{\"76\":1}}],[\"这个是\",{\"1\":{\"46\":1}}],[\"这个配置类做的切换\",{\"1\":{\"94\":1}}],[\"这个配置注释掉了\",{\"1\":{\"46\":1}}],[\"这个配置文件当然是在下图的这个地方配的\",{\"1\":{\"46\":1}}],[\"这个配置里面拿到配的请求地址\",{\"1\":{\"46\":1}}],[\"这个很重要\",{\"1\":{\"38\":1}}],[\"退出\",{\"0\":{\"32\":1}}],[\"just\",{\"1\":{\"203\":1}}],[\"juejin\",{\"1\":{\"188\":1}}],[\"jo\",{\"1\":{\"163\":1}}],[\"joining\",{\"1\":{\"145\":1}}],[\"joininstances\",{\"0\":{\"135\":1},\"1\":{\"132\":1,\"135\":4,\"137\":4}}],[\"join\",{\"1\":{\"77\":1,\"79\":1,\"103\":1,\"137\":3,\"145\":1}}],[\"jmx\",{\"1\":{\"153\":1}}],[\"jsonconfig\",{\"1\":{\"286\":1}}],[\"jsonutils\",{\"1\":{\"244\":1}}],[\"json格式\",{\"1\":{\"232\":1}}],[\"jsonarray\",{\"1\":{\"103\":1}}],[\"jsonobject\",{\"1\":{\"102\":11,\"103\":1,\"163\":2,\"286\":1}}],[\"json\",{\"1\":{\"79\":1,\"95\":3,\"102\":6,\"103\":2,\"115\":4,\"116\":2,\"286\":5,\"288\":4,\"296\":1}}],[\"jar\",{\"0\":{\"45\":1},\"1\":{\"124\":1,\"162\":5,\"264\":1,\"273\":1,\"301\":6}}],[\"javabeanserializeutil\",{\"1\":{\"248\":1}}],[\"javabeandescriptor\",{\"1\":{\"247\":2,\"248\":2}}],[\"javadoc\",{\"1\":{\"52\":1}}],[\"java\",{\"0\":{\"119\":1,\"122\":1,\"129\":1,\"149\":1},\"1\":{\"11\":1,\"19\":2,\"34\":5,\"35\":4,\"39\":2,\"47\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":2,\"79\":1,\"80\":4,\"107\":2,\"109\":1,\"110\":1,\"111\":2,\"112\":1,\"118\":1,\"121\":1,\"122\":2,\"124\":5,\"125\":4,\"126\":1,\"127\":2,\"128\":2,\"129\":1,\"153\":3,\"162\":14,\"227\":8,\"231\":1,\"240\":2,\"248\":1,\"283\":1,\"291\":1,\"296\":2,\"301\":1,\"304\":3}}],[\"jdk8\",{\"1\":{\"223\":1}}],[\"jdk\",{\"1\":{\"32\":1,\"119\":1,\"124\":1,\"277\":1}}],[\"jdbc\",{\"0\":{\"123\":1,\"126\":1,\"127\":1},\"1\":{\"32\":2,\"42\":2,\"45\":2,\"123\":1,\"124\":4,\"125\":4,\"126\":3,\"127\":1,\"129\":1,\"273\":2,\"301\":1}}],[\"jvm\",{\"0\":{\"32\":1},\"1\":{\"55\":1,\"66\":1,\"162\":1,\"201\":1,\"232\":1,\"277\":1,\"303\":1}}],[\"4409382\",{\"1\":{\"250\":1}}],[\"442\",{\"1\":{\"63\":1}}],[\"471\",{\"1\":{\"243\":1}}],[\"472ms\",{\"1\":{\"225\":1}}],[\"46\",{\"1\":{\"225\":2}}],[\"460\",{\"1\":{\"62\":3}}],[\"4564034\",{\"1\":{\"250\":1}}],[\"45\",{\"1\":{\"220\":1}}],[\"459\",{\"1\":{\"63\":1}}],[\"43b9\",{\"1\":{\"162\":4}}],[\"49\",{\"1\":{\"162\":2}}],[\"49mb\",{\"1\":{\"63\":1}}],[\"493\",{\"1\":{\"63\":1}}],[\"41\",{\"1\":{\"63\":1}}],[\"486269\",{\"1\":{\"63\":1}}],[\"48\",{\"1\":{\"62\":18,\"153\":9}}],[\"429951241\",{\"1\":{\"295\":1,\"299\":1}}],[\"429错误编码\",{\"1\":{\"203\":1}}],[\"429\",{\"1\":{\"199\":1}}],[\"42\",{\"1\":{\"59\":3}}],[\"4\",{\"0\":{\"32\":1,\"39\":1,\"40\":1,\"52\":1,\"64\":1,\"108\":1,\"290\":1,\"291\":1,\"293\":1,\"294\":1},\"1\":{\"32\":1,\"34\":1,\"42\":1,\"89\":1,\"104\":3,\"108\":1,\"110\":1,\"112\":1,\"153\":1,\"154\":1,\"158\":1,\"159\":1,\"162\":1,\"163\":2,\"164\":2,\"174\":1,\"185\":1,\"206\":1,\"218\":2,\"225\":6,\"232\":1,\"292\":1,\"293\":1,\"294\":2}}],[\"404\",{\"1\":{\"226\":1}}],[\"401\",{\"1\":{\"162\":1}}],[\"4094\",{\"1\":{\"34\":1}}],[\"4096\",{\"1\":{\"32\":1,\"42\":1}}],[\"40\",{\"1\":{\"11\":2,\"14\":2,\"62\":6,\"63\":2}}],[\"更是一种开源的态度\",{\"1\":{\"305\":1}}],[\"更加方便或者有信心融入进来\",{\"1\":{\"296\":1}}],[\"更多的使用请你参考\",{\"1\":{\"302\":1}}],[\"更多的还请看\",{\"1\":{\"302\":1}}],[\"更多\",{\"1\":{\"282\":1}}],[\"更合理的模块划分\",{\"0\":{\"277\":1}}],[\"更优的\",{\"1\":{\"131\":1}}],[\"更新完了以后\",{\"1\":{\"304\":1}}],[\"更新了相关的文档信息\",{\"1\":{\"292\":1}}],[\"更新时间\",{\"1\":{\"232\":1}}],[\"更新全部熔断配置\",{\"1\":{\"220\":1}}],[\"更新全部流控配置\",{\"1\":{\"220\":1}}],[\"更新服务状态\",{\"1\":{\"181\":2}}],[\"更新网关数据\",{\"1\":{\"163\":1}}],[\"更新插件规则\",{\"1\":{\"160\":1}}],[\"更新缓存前会检测是否变动\",{\"1\":{\"102\":1}}],[\"更新数据库\",{\"1\":{\"79\":1}}],[\"更新\",{\"1\":{\"46\":1,\"116\":1}}],[\"更新为\",{\"1\":{\"32\":1}}],[\"更新成功的\",{\"1\":{\"31\":1}}],[\"更完美\",{\"1\":{\"28\":1}}],[\"天天写\",{\"1\":{\"304\":1}}],[\"天然支持集群部署\",{\"1\":{\"270\":1}}],[\"天然支持集群\",{\"1\":{\"31\":1}}],[\"天的源码阅读\",{\"1\":{\"5\":1}}],[\"以为只是简单的一个\",{\"1\":{\"284\":1}}],[\"以后的以后\",{\"0\":{\"282\":1}}],[\"以便减少数据加载\",{\"1\":{\"286\":1}}],[\"以便我们能够改进\",{\"1\":{\"258\":1}}],[\"以便与服务端调用\",{\"1\":{\"247\":1}}],[\"以下是配置成本地模式\",{\"1\":{\"273\":1}}],[\"以下是核心代码\",{\"1\":{\"173\":1}}],[\"以下所有版本\",{\"1\":{\"265\":1}}],[\"以下两个对服务有严重危害的场景在生产中经常会遇到\",{\"1\":{\"216\":1}}],[\"以下讲解来源于官方文档\",{\"1\":{\"195\":1}}],[\"以下演示代码截图来自于\",{\"1\":{\"185\":1}}],[\"以硬编码的方式引入各插件\",{\"1\":{\"171\":1}}],[\"以此为入口进行跟踪调试\",{\"1\":{\"154\":1}}],[\"以\",{\"0\":{\"141\":1}}],[\"以及混合模式\",{\"1\":{\"300\":1}}],[\"以及社区合作进行新的开发\",{\"1\":{\"278\":1}}],[\"以及\",{\"1\":{\"270\":1,\"274\":1,\"300\":1}}],[\"以及其他新功能的支持\",{\"1\":{\"268\":1}}],[\"以及项目子品牌的著作权和实际拥有权\",{\"1\":{\"259\":1}}],[\"以及不伤害组织\",{\"1\":{\"259\":1}}],[\"以及没有注名字的是服务异常判断方式\",{\"1\":{\"219\":1}}],[\"以及加载器\",{\"1\":{\"121\":1}}],[\"以及各种\",{\"1\":{\"115\":1}}],[\"以及数据流动方式\",{\"1\":{\"101\":1}}],[\"以及注册\",{\"1\":{\"85\":1}}],[\"以及集群环境中\",{\"0\":{\"31\":1}}],[\"以达到动态刷新网关规则及插件\",{\"1\":{\"46\":1}}],[\"以上所有\",{\"1\":{\"265\":1}}],[\"以上版本\",{\"1\":{\"265\":1}}],[\"以上规定\",{\"0\":{\"260\":1}}],[\"以上从如何配置\",{\"1\":{\"249\":1}}],[\"以上就是\",{\"1\":{\"248\":1}}],[\"以上就是今天分享的内容\",{\"1\":{\"32\":1}}],[\"以上\",{\"0\":{\"40\":1}}],[\"以文字形式写到各自的作业提交区\",{\"1\":{\"5\":1}}],[\"36\",{\"1\":{\"225\":2}}],[\"363\",{\"1\":{\"162\":1}}],[\"3639\",{\"1\":{\"63\":1}}],[\"379336\",{\"1\":{\"225\":9}}],[\"37\",{\"1\":{\"162\":1,\"225\":2}}],[\"37ms\",{\"1\":{\"63\":1}}],[\"31\",{\"1\":{\"80\":2,\"153\":1}}],[\"317\",{\"1\":{\"62\":3}}],[\"38\",{\"1\":{\"62\":3,\"225\":2}}],[\"35\",{\"1\":{\"62\":3,\"153\":7,\"225\":1}}],[\"34\",{\"1\":{\"62\":3,\"153\":9}}],[\"390\",{\"1\":{\"63\":1}}],[\"39\",{\"1\":{\"46\":1,\"62\":3,\"80\":2,\"225\":2}}],[\"33\",{\"1\":{\"46\":1}}],[\"3306\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"273\":1,\"301\":1}}],[\"32\",{\"1\":{\"32\":2}}],[\"3\",{\"0\":{\"31\":1,\"38\":1,\"51\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":2,\"64\":1,\"74\":1,\"81\":1,\"107\":1,\"180\":1,\"181\":1,\"182\":2},\"1\":{\"32\":2,\"42\":2,\"45\":1,\"80\":1,\"99\":1,\"112\":1,\"119\":1,\"153\":1,\"154\":1,\"158\":1,\"159\":1,\"160\":1,\"162\":2,\"163\":2,\"164\":2,\"173\":1,\"174\":2,\"182\":1,\"185\":1,\"188\":1,\"189\":1,\"190\":1,\"206\":1,\"217\":1,\"218\":2,\"219\":1,\"220\":6,\"226\":1,\"247\":1,\"248\":1,\"259\":2,\"265\":1,\"273\":4,\"291\":1,\"292\":1,\"299\":2}}],[\"308\",{\"1\":{\"207\":1,\"211\":1,\"213\":1}}],[\"30000\",{\"1\":{\"224\":1,\"273\":1}}],[\"3000l\",{\"1\":{\"190\":1}}],[\"3000\",{\"1\":{\"80\":1}}],[\"30s\",{\"1\":{\"63\":2,\"102\":2,\"103\":3}}],[\"30\",{\"1\":{\"11\":1,\"14\":1,\"46\":1,\"63\":2,\"102\":1,\"180\":3,\"184\":1,\"273\":1}}],[\"会越来越笨重\",{\"1\":{\"304\":1}}],[\"会同步到每个\",{\"1\":{\"303\":1}}],[\"会不会吐槽你\",{\"1\":{\"296\":1}}],[\"会不在一个线程里\",{\"1\":{\"39\":1}}],[\"会发布hmily\",{\"1\":{\"281\":1}}],[\"会发布最新架构的\",{\"1\":{\"280\":1}}],[\"会发布事件\",{\"1\":{\"160\":1}}],[\"会被分配\",{\"1\":{\"254\":1}}],[\"会被邀请加入\",{\"1\":{\"254\":1}}],[\"会把这张表的数据同步到网关的\",{\"1\":{\"232\":1}}],[\"会控制每\",{\"1\":{\"220\":1}}],[\"会非常消耗性能\",{\"1\":{\"205\":1}}],[\"会有一个\",{\"1\":{\"188\":1}}],[\"会有一个定时任务来进行回滚\",{\"1\":{\"30\":1}}],[\"会执行\",{\"1\":{\"154\":1,\"163\":2}}],[\"会实读取\",{\"1\":{\"154\":1}}],[\"会返回一个\",{\"1\":{\"130\":1}}],[\"会导致每次获取具体实现类都要反射出类对象以及初始化实例对象\",{\"1\":{\"129\":1}}],[\"会导致下次的监听延后\",{\"1\":{\"103\":1}}],[\"会自动加载\",{\"1\":{\"127\":1}}],[\"会自主创建自身对象并注入到\",{\"1\":{\"126\":1}}],[\"会继续下个\",{\"1\":{\"126\":1}}],[\"会加载\",{\"1\":{\"126\":1}}],[\"会匹配\",{\"1\":{\"125\":1}}],[\"会根据你的\",{\"1\":{\"232\":1}}],[\"会根据传入的\",{\"1\":{\"125\":1}}],[\"会根据后台集群开启线程轮询监听\",{\"1\":{\"102\":1}}],[\"会话\",{\"1\":{\"114\":1}}],[\"会话把信息亲自送过去\",{\"1\":{\"96\":1}}],[\"会先判断\",{\"1\":{\"112\":1}}],[\"会先进行日志的异步保存\",{\"1\":{\"32\":1}}],[\"会连接这个\",{\"1\":{\"112\":1}}],[\"会进到类中对应的方法\",{\"1\":{\"111\":1}}],[\"会进到这里\",{\"1\":{\"79\":1}}],[\"会在容器加载完成后调用这个覆写方法\",{\"1\":{\"110\":1}}],[\"会通过\",{\"1\":{\"104\":1}}],[\"会出个番外讨论一二\",{\"1\":{\"99\":1}}],[\"会怎么实现\",{\"1\":{\"97\":1}}],[\"会走到\",{\"1\":{\"90\":1}}],[\"会减少其他节点的权重分之和\",{\"1\":{\"89\":1}}],[\"会持续以自身为基数自增\",{\"1\":{\"89\":1}}],[\"会直接使用默认值\",{\"1\":{\"228\":1}}],[\"会直接赋值默认值\",{\"1\":{\"225\":1}}],[\"会直接走入下个插件\",{\"1\":{\"83\":1}}],[\"会直接跳到下个插件\",{\"1\":{\"83\":1}}],[\"会到这里\",{\"1\":{\"79\":1}}],[\"会打印匹配日志\",{\"1\":{\"68\":1}}],[\"会另外再写一遍文章\",{\"1\":{\"46\":1}}],[\"会去执行下面这些相关的方法\",{\"1\":{\"46\":1}}],[\"会去查询日志返回\",{\"1\":{\"39\":1}}],[\"会造成所有其他的模块使用不了\",{\"1\":{\"304\":1}}],[\"会造成\",{\"1\":{\"39\":1}}],[\"会形成调用链\",{\"1\":{\"38\":1}}],[\"会要求你配置的\",{\"1\":{\"37\":1}}],[\"会调用后台提供的接口拉取数据\",{\"1\":{\"102\":1}}],[\"会调用到下一个插件\",{\"1\":{\"84\":1}}],[\"会调用\",{\"1\":{\"30\":1,\"46\":1,\"75\":1,\"104\":1,\"116\":3}}],[\"阶段异常时候\",{\"1\":{\"272\":1}}],[\"阶段超时异常\",{\"1\":{\"272\":1}}],[\"阶段会保存好日志\",{\"1\":{\"36\":1}}],[\"阶段\",{\"1\":{\"30\":1}}],[\"tps\",{\"1\":{\"300\":1}}],[\"ttl参数的计算\",{\"1\":{\"206\":1}}],[\"ttl\",{\"1\":{\"206\":3}}],[\"temp\",{\"1\":{\"179\":5,\"181\":2}}],[\"test\",{\"1\":{\"52\":1,\"58\":1,\"59\":3,\"61\":1,\"62\":13,\"63\":6,\"68\":1,\"120\":3,\"121\":2,\"127\":2,\"185\":1,\"199\":1,\"225\":2,\"226\":1,\"303\":1}}],[\"tinyint\",{\"1\":{\"232\":1}}],[\"tips\",{\"0\":{\"117\":1}}],[\"timelimiter\",{\"1\":{\"223\":1}}],[\"timetamp\",{\"1\":{\"145\":3}}],[\"times\",{\"1\":{\"103\":2}}],[\"timestamp为毫秒数的字符串形式\",{\"1\":{\"145\":1}}],[\"timestamp\",{\"1\":{\"79\":1,\"145\":1,\"186\":1,\"204\":1,\"206\":3,\"232\":1}}],[\"time++\",{\"1\":{\"103\":1}}],[\"timeoutms\",{\"1\":{\"273\":1}}],[\"timeout=\",{\"1\":{\"266\":1}}],[\"timeoutexception\",{\"1\":{\"227\":1}}],[\"timeoutduration\",{\"1\":{\"224\":1}}],[\"timeoutdurationrate\",{\"1\":{\"224\":1}}],[\"timeouttime\",{\"1\":{\"98\":3}}],[\"timeout\",{\"1\":{\"80\":1,\"90\":4,\"91\":3,\"98\":4,\"149\":1,\"153\":2,\"173\":1,\"190\":5,\"191\":3,\"217\":1,\"225\":2,\"227\":1}}],[\"time\",{\"1\":{\"42\":2,\"84\":2,\"103\":5,\"149\":1,\"173\":1,\"174\":2,\"178\":1,\"189\":1,\"190\":1,\"206\":2}}],[\"timeunit\",{\"1\":{\"34\":2,\"35\":2,\"75\":1,\"98\":2,\"102\":2,\"103\":2,\"180\":1,\"227\":1}}],[\"ture\",{\"1\":{\"180\":1}}],[\"tureen\",{\"1\":{\"102\":1}}],[\"turren\",{\"1\":{\"102\":2}}],[\"t\",{\"1\":{\"84\":1,\"124\":2,\"133\":2,\"135\":2,\"137\":4,\"174\":1,\"227\":4}}],[\"tar\",{\"1\":{\"287\":1}}],[\"tars\",{\"1\":{\"78\":2,\"85\":2,\"274\":1}}],[\"tac\",{\"1\":{\"274\":1,\"277\":5,\"280\":1,\"281\":1}}],[\"talk\",{\"1\":{\"271\":1,\"279\":1}}],[\"tag\",{\"1\":{\"243\":3}}],[\"task\",{\"1\":{\"180\":1}}],[\"tailmap\",{\"1\":{\"87\":1}}],[\"tablemap\",{\"1\":{\"287\":1}}],[\"table\",{\"1\":{\"42\":2,\"232\":1,\"287\":1}}],[\"tomillis\",{\"1\":{\"227\":1}}],[\"torun\",{\"1\":{\"227\":2}}],[\"tonumber\",{\"1\":{\"206\":6}}],[\"tokens参数的计算\",{\"1\":{\"206\":1}}],[\"tokens+\",{\"1\":{\"206\":3}}],[\"tokens\",{\"1\":{\"204\":1,\"206\":14}}],[\"tokensleft\",{\"1\":{\"203\":2}}],[\"took\",{\"1\":{\"225\":1}}],[\"too\",{\"1\":{\"203\":3,\"220\":4}}],[\"tos\",{\"1\":{\"188\":1}}],[\"tostring\",{\"1\":{\"102\":1,\"103\":1,\"119\":1,\"189\":1,\"203\":1,\"242\":1}}],[\"total\",{\"1\":{\"174\":1}}],[\"total=310mb\",{\"1\":{\"153\":1}}],[\"totalweight\",{\"1\":{\"88\":4,\"89\":3,\"183\":5}}],[\"touppercase\",{\"1\":{\"145\":1}}],[\"toarray\",{\"1\":{\"145\":1}}],[\"toepochmilli\",{\"1\":{\"145\":2}}],[\"toinstant\",{\"1\":{\"145\":2}}],[\"todatabuffers\",{\"1\":{\"91\":1,\"191\":1}}],[\"todo\",{\"1\":{\"76\":1,\"111\":1,\"112\":1}}],[\"tolist\",{\"1\":{\"84\":1,\"145\":1,\"163\":1,\"174\":1,\"185\":1,\"213\":1,\"220\":4}}],[\"to\",{\"1\":{\"80\":6,\"90\":1,\"98\":1,\"102\":1,\"110\":2,\"153\":2,\"160\":1,\"162\":3,\"225\":1,\"227\":8}}],[\"tojson\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"80\":1,\"95\":1,\"96\":1,\"111\":5,\"115\":1,\"163\":1}}],[\"top\",{\"1\":{\"28\":1}}],[\"t8\",{\"1\":{\"63\":2}}],[\"typename\",{\"1\":{\"287\":1}}],[\"types\",{\"1\":{\"248\":2}}],[\"types`\",{\"1\":{\"232\":1}}],[\"type`\",{\"1\":{\"232\":1}}],[\"type\",{\"1\":{\"34\":3,\"78\":1,\"80\":8,\"108\":3,\"110\":7,\"112\":6,\"115\":2,\"154\":6,\"190\":2,\"225\":1,\"243\":1}}],[\"that\",{\"1\":{\"42\":1,\"160\":1}}],[\"thenapply\",{\"1\":{\"243\":1}}],[\"then\",{\"1\":{\"46\":1,\"91\":1,\"191\":1,\"206\":3,\"242\":1,\"244\":1}}],[\"their\",{\"1\":{\"42\":1}}],[\"the\",{\"1\":{\"42\":6,\"55\":1,\"59\":1,\"62\":6,\"75\":1,\"76\":2,\"80\":2,\"98\":1,\"102\":2,\"108\":1,\"110\":13,\"112\":8,\"128\":2,\"154\":10,\"159\":10,\"160\":1,\"162\":1,\"189\":1,\"190\":1,\"225\":1}}],[\"threshold\",{\"1\":{\"225\":1}}],[\"threw\",{\"1\":{\"162\":2}}],[\"threadutils\",{\"1\":{\"102\":1,\"103\":2}}],[\"threads\",{\"1\":{\"59\":3,\"62\":18,\"63\":2}}],[\"threadsize\",{\"1\":{\"34\":8,\"102\":3}}],[\"threadlocalutil\",{\"1\":{\"112\":5}}],[\"threadlocal\",{\"0\":{\"38\":1},\"1\":{\"38\":2,\"39\":2,\"186\":1,\"273\":1}}],[\"thread\",{\"1\":{\"34\":3,\"35\":3,\"42\":1,\"63\":2,\"98\":1,\"121\":1,\"153\":2,\"226\":1}}],[\"threadpoolexecutor\",{\"1\":{\"34\":3,\"35\":3,\"75\":1,\"102\":1}}],[\"threadpool\",{\"1\":{\"34\":1,\"35\":1}}],[\"throw\",{\"1\":{\"35\":1,\"80\":1,\"95\":1,\"102\":2,\"103\":1,\"109\":1,\"111\":1,\"121\":2,\"124\":2,\"137\":2,\"154\":1,\"163\":1,\"203\":1,\"220\":1,\"226\":1,\"227\":1,\"248\":5}}],[\"throwable\",{\"1\":{\"35\":4,\"112\":1,\"121\":1,\"124\":1,\"203\":3,\"220\":8,\"227\":3}}],[\"throws\",{\"1\":{\"35\":1,\"102\":1,\"124\":2,\"125\":4,\"127\":1,\"134\":1,\"137\":2,\"164\":1,\"226\":1,\"240\":3,\"243\":1,\"247\":1,\"248\":1}}],[\"this\",{\"0\":{\"205\":1},\"1\":{\"34\":3,\"35\":2,\"38\":1,\"39\":1,\"42\":5,\"46\":5,\"75\":1,\"84\":5,\"90\":4,\"95\":3,\"98\":6,\"102\":10,\"103\":2,\"109\":2,\"110\":4,\"121\":1,\"154\":4,\"159\":4,\"160\":1,\"163\":1,\"164\":1,\"174\":4,\"180\":1,\"185\":4,\"203\":2,\"213\":11,\"220\":1,\"241\":4,\"273\":1}}],[\"travis\",{\"1\":{\"278\":1}}],[\"transient\",{\"1\":{\"288\":1}}],[\"transformdeferred\",{\"1\":{\"227\":3}}],[\"transform\",{\"1\":{\"220\":1}}],[\"transformmap\",{\"1\":{\"186\":1}}],[\"transfer\",{\"1\":{\"38\":1,\"63\":2}}],[\"transactional\",{\"1\":{\"76\":1,\"107\":1,\"163\":1}}],[\"transactioncontextlocal\",{\"1\":{\"38\":1}}],[\"transaction\",{\"1\":{\"35\":1,\"38\":2,\"39\":2,\"42\":2,\"281\":1}}],[\"translator\",{\"1\":{\"34\":1}}],[\"trim\",{\"1\":{\"145\":1,\"248\":1}}],[\"tried\",{\"1\":{\"103\":1}}],[\"treemap\",{\"1\":{\"87\":4}}],[\"tree\",{\"0\":{\"41\":1}}],[\"true\",{\"1\":{\"32\":3,\"42\":1,\"45\":1,\"78\":3,\"79\":1,\"80\":2,\"88\":1,\"89\":1,\"94\":1,\"95\":1,\"102\":3,\"110\":6,\"114\":2,\"121\":3,\"154\":1,\"159\":1,\"181\":1,\"182\":1,\"188\":1,\"190\":1,\"213\":3,\"224\":1,\"238\":1,\"239\":1,\"248\":2,\"266\":1,\"273\":5,\"288\":1,\"301\":1}}],[\"trying\",{\"1\":{\"35\":1,\"38\":1}}],[\"try\",{\"1\":{\"30\":1,\"32\":3,\"35\":4,\"36\":2,\"38\":1,\"39\":2,\"80\":1,\"89\":1,\"102\":3,\"103\":3,\"112\":3,\"121\":3,\"124\":2,\"125\":1,\"127\":3,\"137\":4,\"182\":2,\"199\":1,\"248\":2,\"272\":1,\"274\":1}}],[\"tcc模式\",{\"1\":{\"281\":1}}],[\"tccfileconfig\",{\"1\":{\"42\":2}}],[\"tccconfig\",{\"1\":{\"42\":1}}],[\"tcc<\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3}}],[\"tccroleenum\",{\"1\":{\"38\":2}}],[\"tccredisconfig\",{\"1\":{\"32\":6,\"42\":2,\"45\":1}}],[\"tccactionenum\",{\"1\":{\"35\":2,\"38\":1}}],[\"tcctransaction>\",{\"1\":{\"39\":3}}],[\"tcctransactioncachemanager\",{\"1\":{\"39\":7}}],[\"tcctransactioncontext\",{\"1\":{\"35\":2,\"38\":3}}],[\"tcctransaction\",{\"1\":{\"34\":6,\"35\":7,\"38\":10,\"39\":18}}],[\"tcczookeeperconfig\",{\"1\":{\"32\":2,\"42\":2}}],[\"tccmongoconfig\",{\"1\":{\"32\":2,\"42\":2}}],[\"tccdbconfig\",{\"1\":{\"32\":2,\"42\":4,\"45\":1}}],[\"tcc\",{\"0\":{\"40\":1,\"41\":1},\"1\":{\"32\":9,\"34\":10,\"35\":7,\"39\":6,\"42\":9,\"43\":1,\"44\":1,\"45\":7,\"277\":3,\"280\":1,\"281\":2}}],[\"接受到了来自社区很多朋友的建议\",{\"1\":{\"296\":1}}],[\"接收到\",{\"1\":{\"126\":1}}],[\"接收到的接口信息同步给\",{\"1\":{\"104\":1}}],[\"接着看看\",{\"1\":{\"124\":1}}],[\"接着看\",{\"1\":{\"96\":1}}],[\"接着就是\",{\"1\":{\"90\":1}}],[\"接着分析下\",{\"1\":{\"85\":1}}],[\"接口的实现\",{\"1\":{\"277\":1}}],[\"接口的请求量是平时是数倍\",{\"1\":{\"216\":1}}],[\"接口与实现都只需要添加\",{\"1\":{\"273\":1}}],[\"接口服务依赖\",{\"1\":{\"273\":1}}],[\"接口及模型类元的情况\",{\"1\":{\"237\":1}}],[\"接口调用\",{\"1\":{\"226\":1}}],[\"接口对应访问\",{\"0\":{\"199\":1}}],[\"接口中定义的方法一一对应\",{\"1\":{\"111\":1}}],[\"接口定义\",{\"1\":{\"110\":1}}],[\"接口并实现了\",{\"1\":{\"90\":1}}],[\"接口同样定义了\",{\"1\":{\"84\":1}}],[\"接口\",{\"1\":{\"78\":1,\"85\":1,\"102\":1,\"110\":1,\"124\":1,\"154\":1,\"173\":1,\"188\":2,\"213\":1,\"240\":1,\"296\":2,\"305\":1}}],[\"接口逻辑分析\",{\"1\":{\"104\":1}}],[\"接口逻辑分析完了\",{\"1\":{\"81\":1}}],[\"接口逻辑\",{\"0\":{\"76\":1}}],[\"接口地址\",{\"1\":{\"71\":1}}],[\"接口上配置\",{\"1\":{\"57\":1}}],[\"接口项目引入\",{\"1\":{\"42\":1}}],[\"接口方法上是添加\",{\"1\":{\"273\":1}}],[\"接口方法上添加\",{\"1\":{\"273\":1}}],[\"接口方法会应对一条元数据\",{\"1\":{\"232\":1}}],[\"接口方\",{\"1\":{\"30\":1}}],[\"接下来让我们看看\",{\"1\":{\"190\":1}}],[\"接下来让我们看一下divideplugin\",{\"1\":{\"187\":1,\"188\":1}}],[\"接下来看看探活任务实现\",{\"1\":{\"181\":1}}],[\"接下来会通知所有扩展插件的相关事件变动\",{\"1\":{\"102\":1}}],[\"接下来的逻辑会调用到我们这块实现的\",{\"1\":{\"98\":1}}],[\"接下来就是网关\",{\"1\":{\"94\":1}}],[\"接下来只要请求它就搞定\",{\"1\":{\"85\":1}}],[\"接下来是最重要的事务日志的存储\",{\"1\":{\"32\":1}}],[\"接下来回答一下\",{\"1\":{\"28\":1}}],[\"所执行的插件的大体流程与我们猜想的处理流程一致\",{\"1\":{\"185\":1}}],[\"所在的配置类通过配置\",{\"1\":{\"174\":1}}],[\"所有版本\",{\"1\":{\"265\":1,\"300\":1}}],[\"所有的\",{\"1\":{\"177\":1}}],[\"所有的插件都在这条链上依次处理\",{\"1\":{\"172\":1}}],[\"所有插件是怎么形成\",{\"1\":{\"174\":1}}],[\"所有数据类型的\",{\"1\":{\"102\":1}}],[\"所有节点权重分累加并随机得到数字\",{\"1\":{\"88\":1}}],[\"所有捐赠给\",{\"1\":{\"22\":1}}],[\"所谓的数据同步是指将\",{\"1\":{\"66\":1}}],[\"所以不能一股脑的\",{\"1\":{\"305\":1}}],[\"所以插件化设计\",{\"1\":{\"305\":1}}],[\"所以进行的\",{\"1\":{\"206\":1}}],[\"所以有了第二种令牌桶算法\",{\"1\":{\"205\":1}}],[\"所以依旧实现了abstractsoulplugin\",{\"1\":{\"203\":1}}],[\"所以还得去启动一下\",{\"1\":{\"162\":1}}],[\"所以我们重点放到\",{\"1\":{\"241\":1}}],[\"所以我们先分析下它的代码\",{\"1\":{\"120\":1}}],[\"所以我们可以猜测\",{\"1\":{\"67\":1}}],[\"所以会直接结束\",{\"1\":{\"102\":1}}],[\"所以这块缓存与数据库的交互也是个值得分析的点\",{\"1\":{\"99\":1}}],[\"所以这里不重复解释\",{\"1\":{\"203\":1}}],[\"所以这里不展开阐述\",{\"1\":{\"188\":1}}],[\"所以这里的对应处理为\",{\"1\":{\"188\":1}}],[\"所以这里我们会分析到三个插件\",{\"1\":{\"85\":1}}],[\"所以这里一样的不能直接注释\",{\"1\":{\"46\":1}}],[\"所以这里除了\",{\"1\":{\"46\":1}}],[\"所以在网关项目\",{\"1\":{\"84\":1}}],[\"所以如果你看到控制台有时会打印多个连接成功的日志\",{\"1\":{\"46\":1}}],[\"所以用守护线程是最好的\",{\"1\":{\"46\":1}}],[\"所以\",{\"1\":{\"30\":1}}],[\"比如你可以自定义的开发你的插件啊\",{\"1\":{\"298\":1}}],[\"比如你有一个\",{\"1\":{\"296\":1}}],[\"比如支持文件上传下载\",{\"1\":{\"298\":1}}],[\"比如支持\",{\"1\":{\"298\":1}}],[\"比如签名\",{\"1\":{\"296\":1}}],[\"比如\",{\"1\":{\"30\":1,\"84\":1,\"85\":1,\"116\":1,\"117\":1,\"133\":2,\"296\":2,\"304\":1}}],[\"性能完蛋不说\",{\"1\":{\"129\":1}}],[\"性能情况\",{\"1\":{\"122\":1}}],[\"性能\",{\"1\":{\"29\":1,\"287\":1}}],[\"性能一样\",{\"1\":{\"29\":1}}],[\"因为掌控了所有流量这个很容易做\",{\"1\":{\"303\":1}}],[\"因为序列化方式的更改\",{\"1\":{\"294\":1}}],[\"因为调整了架构\",{\"1\":{\"274\":1}}],[\"因为限流的最小粒度是规则\",{\"1\":{\"204\":1}}],[\"因为这里还缺少元数据信息\",{\"1\":{\"162\":1}}],[\"因为这只是为了保证\",{\"1\":{\"46\":1}}],[\"因为添加子类后仅需用改动资源文件不用变动工厂类\",{\"1\":{\"122\":1}}],[\"因为会直接复用缓存中的对象\",{\"1\":{\"122\":1}}],[\"因为不同类型的元数据处理类的处理方式不同\",{\"1\":{\"116\":1}}],[\"因为默认是采用的\",{\"1\":{\"110\":1}}],[\"因为还没有研究数据库表结构设计\",{\"1\":{\"79\":1}}],[\"因为\",{\"1\":{\"39\":1,\"46\":1}}],[\"因为你上一面才刚刚执行完\",{\"1\":{\"36\":1}}],[\"因为日志状态是\",{\"1\":{\"30\":1}}],[\"因为是压测的\",{\"1\":{\"29\":1}}],[\"因此方便测试效果直接修改源码的配置\",{\"1\":{\"225\":1}}],[\"因此通常由核心系统提供插件通信机制\",{\"1\":{\"170\":1}}],[\"因此超时的\",{\"1\":{\"30\":1}}],[\"因此其性能与你的\",{\"1\":{\"29\":1}}],[\"不重样的\",{\"1\":{\"304\":1}}],[\"不就行了么\",{\"1\":{\"304\":1}}],[\"不巧\",{\"1\":{\"297\":1,\"304\":1}}],[\"不需要任何更改\",{\"1\":{\"296\":1}}],[\"不需要我们再去\",{\"1\":{\"127\":1}}],[\"不向下兼容\",{\"1\":{\"286\":1}}],[\"不兼容特性\",{\"0\":{\"286\":1}}],[\"不对社区和用户造成恶劣影响的前提下\",{\"1\":{\"259\":1}}],[\"不涉及抄袭侵权\",{\"1\":{\"259\":1}}],[\"不做介绍\",{\"1\":{\"247\":1}}],[\"不能重复\",{\"1\":{\"232\":1}}],[\"不能更改即单位统计时长内全部超过阈值则触发熔断\",{\"1\":{\"219\":1}}],[\"不更新了\",{\"1\":{\"223\":1}}],[\"不超过\",{\"1\":{\"220\":1}}],[\"不开\",{\"1\":{\"219\":1}}],[\"不阻塞上游服务\",{\"1\":{\"218\":1}}],[\"不把请求传输到后面的服务中\",{\"1\":{\"217\":1}}],[\"不可预测的抖动而引发的连锁反应\",{\"1\":{\"216\":1}}],[\"不一致就认为配置是有更改的\",{\"1\":{\"201\":1}}],[\"不懂如何添加的可以先阅读选择器\",{\"1\":{\"198\":1}}],[\"不认识这个响应式编程的东西\",{\"1\":{\"190\":1}}],[\"不难看出\",{\"1\":{\"186\":1}}],[\"不难看出插件与插件之间的顺序关系\",{\"1\":{\"185\":1}}],[\"不跳过则执行\",{\"1\":{\"173\":1}}],[\"不会主动同步网关数据到\",{\"1\":{\"162\":1}}],[\"不会将加入的回滚调用链条中\",{\"1\":{\"30\":1}}],[\"不当\",{\"1\":{\"129\":1}}],[\"不匹配此\",{\"1\":{\"125\":1}}],[\"不由让我替其性能揪心一下\",{\"1\":{\"120\":1}}],[\"不同的\",{\"1\":{\"116\":1}}],[\"不方便\",{\"1\":{\"111\":1}}],[\"不清楚流程的可以出门左转看下第\",{\"1\":{\"104\":1}}],[\"不然每次调用就直接把网关的阻塞请求放跑了\",{\"1\":{\"99\":1}}],[\"不妨先想想其他同步方式在此时做了什么\",{\"1\":{\"96\":1}}],[\"不赘述\",{\"1\":{\"90\":1}}],[\"不止涉及到各种策略\",{\"1\":{\"86\":1}}],[\"不过先别着急\",{\"1\":{\"85\":1}}],[\"不仅仅是在管理后台开启这个插件\",{\"1\":{\"84\":1}}],[\"不知道什么时候用\",{\"1\":{\"76\":1}}],[\"不是把\",{\"1\":{\"46\":1}}],[\"不要整蓝绿发版啥的\",{\"1\":{\"296\":1}}],[\"不要和前面的同名类混淆\",{\"1\":{\"116\":1}}],[\"不要幻想在插件链上看到它\",{\"1\":{\"84\":1}}],[\"不要会有点懵逼\",{\"1\":{\"38\":1}}],[\"不要花大力气去解决那些偶然的事情\",{\"1\":{\"32\":1}}],[\"不用担心额外的开发任务\",{\"1\":{\"274\":1}}],[\"不用担心\",{\"1\":{\"36\":1}}],[\"不熟悉的也没关系\",{\"1\":{\"32\":1}}],[\"不生产事务\",{\"1\":{\"29\":1}}],[\"不得从事违法或损人利己的事情\",{\"1\":{\"22\":2}}],[\"现在你要考虑的是把它组合在一起项目里面\",{\"1\":{\"305\":1}}],[\"现在一步一步将它开源出来\",{\"1\":{\"299\":1}}],[\"现在比如你修改了\",{\"1\":{\"296\":1}}],[\"现在已经优化\",{\"1\":{\"296\":1}}],[\"现在已经全部修复\",{\"1\":{\"29\":1}}],[\"现在做一个归纳总结\",{\"1\":{\"296\":1}}],[\"现在需要进行变更\",{\"1\":{\"273\":1}}],[\"现在是\",{\"1\":{\"108\":1}}],[\"现在\",{\"1\":{\"29\":1}}],[\"dhmily\",{\"1\":{\"273\":2}}],[\"dynamic\",{\"1\":{\"232\":1}}],[\"d19cf79f647a465ab9c5c66f430cad28\",{\"1\":{\"145\":1}}],[\"duration\",{\"1\":{\"90\":1,\"190\":3,\"225\":2}}],[\"dubbo框架不支持注解方式的使用\",{\"1\":{\"272\":1,\"278\":1}}],[\"dubbobodyisempty\",{\"1\":{\"243\":1}}],[\"dubbotagroutefromhttpheaders\",{\"1\":{\"243\":3}}],[\"dubbotest\",{\"1\":{\"236\":6,\"296\":3}}],[\"dubboparamresolveservice\",{\"1\":{\"243\":1}}],[\"dubboparams\",{\"1\":{\"186\":1}}],[\"dubboproxyservice\",{\"1\":{\"242\":1}}],[\"dubbo协议\",{\"1\":{\"231\":1}}],[\"dubboresponseplugin\",{\"0\":{\"244\":1},\"1\":{\"230\":1}}],[\"dubborulehandle\",{\"1\":{\"80\":1}}],[\"dubbo插件原理解析\",{\"0\":{\"229\":1}}],[\"dubbo<\",{\"1\":{\"42\":1,\"45\":1,\"234\":2,\"236\":1,\"273\":2,\"302\":2}}],[\"dubbo\",{\"0\":{\"42\":1,\"141\":1,\"231\":1,\"233\":1,\"236\":1,\"237\":1,\"241\":1,\"246\":1,\"247\":1,\"292\":1},\"1\":{\"30\":1,\"33\":1,\"45\":1,\"55\":1,\"78\":2,\"80\":1,\"83\":1,\"85\":4,\"117\":1,\"119\":1,\"128\":4,\"145\":1,\"162\":2,\"185\":2,\"186\":2,\"230\":6,\"231\":5,\"232\":3,\"235\":1,\"236\":2,\"238\":1,\"241\":2,\"242\":5,\"243\":4,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"265\":1,\"266\":2,\"270\":1,\"272\":1,\"273\":7,\"276\":1,\"278\":1,\"291\":1,\"292\":1,\"293\":1,\"296\":5,\"297\":2,\"300\":4,\"302\":8,\"304\":2,\"305\":3}}],[\"dalston\",{\"1\":{\"265\":1}}],[\"da\",{\"1\":{\"124\":2}}],[\"datetime\",{\"1\":{\"232\":2}}],[\"date\",{\"1\":{\"80\":2,\"102\":1}}],[\"data`\",{\"1\":{\"232\":1}}],[\"dataid\",{\"1\":{\"163\":2,\"164\":5,\"273\":1}}],[\"datapath\",{\"1\":{\"160\":3}}],[\"datalist\",{\"1\":{\"116\":7}}],[\"datahandler>\",{\"1\":{\"115\":1}}],[\"datahandler\",{\"1\":{\"115\":2,\"116\":3}}],[\"datasource\",{\"1\":{\"301\":3}}],[\"datasubscriber\",{\"1\":{\"115\":1}}],[\"datasync\",{\"1\":{\"104\":1}}],[\"datasyncconfiguration\",{\"1\":{\"94\":1,\"95\":2,\"110\":2,\"114\":3,\"154\":1}}],[\"datarefresh\",{\"1\":{\"102\":3}}],[\"datarefresh>\",{\"1\":{\"102\":1}}],[\"datarefreshfactory\",{\"1\":{\"102\":6}}],[\"datachangetask\",{\"1\":{\"98\":3}}],[\"datachangedlistener\",{\"0\":{\"95\":1},\"1\":{\"95\":7,\"96\":2,\"109\":2,\"110\":7,\"111\":3,\"154\":5,\"163\":3}}],[\"datachangedevent\",{\"1\":{\"77\":1,\"79\":1,\"95\":1,\"107\":1,\"108\":1,\"109\":1,\"111\":1,\"154\":4,\"155\":1,\"157\":1,\"158\":1,\"163\":6}}],[\"datachangedeventdispatcher\",{\"1\":{\"46\":1,\"95\":2,\"96\":1,\"99\":2,\"109\":3,\"110\":1,\"111\":1,\"154\":6,\"158\":1,\"163\":6}}],[\"database\",{\"1\":{\"80\":1,\"273\":1}}],[\"dataeventtypeenum\",{\"1\":{\"77\":1,\"79\":1,\"95\":7,\"96\":3,\"98\":1,\"107\":3,\"108\":1,\"110\":5,\"111\":5,\"112\":5,\"116\":2,\"154\":3,\"163\":1}}],[\"data\",{\"1\":{\"42\":2,\"46\":3,\"55\":1,\"95\":3,\"96\":5,\"102\":13,\"103\":1,\"108\":4,\"109\":1,\"110\":1,\"111\":2,\"115\":3,\"117\":2,\"152\":2,\"153\":1,\"154\":10,\"159\":10,\"160\":7,\"162\":13,\"163\":7,\"164\":5,\"199\":1,\"226\":1,\"236\":1,\"242\":4,\"296\":1,\"301\":2}}],[\"dao\",{\"1\":{\"78\":1,\"80\":1}}],[\"dto\",{\"1\":{\"76\":8,\"77\":6,\"79\":6,\"80\":5}}],[\"d30s\",{\"1\":{\"63\":2}}],[\"dcheckstyle\",{\"1\":{\"52\":1}}],[\"dmaven\",{\"1\":{\"52\":2}}],[\"double\",{\"1\":{\"203\":2}}],[\"doupdate\",{\"1\":{\"116\":2}}],[\"documents\",{\"1\":{\"153\":1}}],[\"docs\",{\"1\":{\"47\":1,\"104\":1,\"267\":1,\"273\":1,\"295\":1,\"299\":1,\"302\":3}}],[\"do\",{\"1\":{\"124\":1}}],[\"doprivileged\",{\"1\":{\"124\":1}}],[\"dog\",{\"1\":{\"120\":1}}],[\"dodelete\",{\"1\":{\"116\":1}}],[\"dorefresh\",{\"1\":{\"116\":1}}],[\"dofetchgroupconfig\",{\"1\":{\"102\":3,\"103\":3}}],[\"doexcute方法具体做了哪些事\",{\"1\":{\"188\":1}}],[\"doexcute\",{\"1\":{\"188\":1}}],[\"doexecute\",{\"1\":{\"83\":4,\"85\":3,\"173\":4,\"178\":3,\"188\":1,\"189\":1,\"203\":1,\"213\":1,\"220\":1,\"227\":3,\"242\":1}}],[\"does\",{\"1\":{\"98\":1}}],[\"dolongpolling\",{\"1\":{\"98\":5,\"103\":3}}],[\"donext\",{\"1\":{\"90\":2,\"190\":2}}],[\"doonerror\",{\"1\":{\"90\":1,\"190\":1,\"203\":1,\"227\":1}}],[\"doonsuccess\",{\"1\":{\"84\":1,\"174\":1,\"220\":1,\"227\":1}}],[\"doselect\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"183\":2}}],[\"domain\",{\"1\":{\"85\":2,\"173\":2,\"178\":2,\"189\":2}}],[\"down\",{\"1\":{\"32\":1,\"37\":1,\"42\":1}}],[\"d751713988987e9331980363e24189ce\",{\"1\":{\"46\":2}}],[\"d\",{\"1\":{\"46\":6,\"55\":4,\"59\":3,\"62\":18,\"153\":1,\"162\":5,\"225\":9}}],[\"dict\",{\"1\":{\"287\":1}}],[\"dir\",{\"1\":{\"273\":2}}],[\"directly\",{\"1\":{\"220\":1}}],[\"directory\",{\"1\":{\"130\":1,\"137\":1}}],[\"digestutils\",{\"1\":{\"145\":1}}],[\"divide<\",{\"1\":{\"84\":1}}],[\"divideplugindatahandler\",{\"1\":{\"85\":2,\"116\":1}}],[\"dividepluginconfiguration\",{\"1\":{\"84\":1,\"174\":1}}],[\"divideplugin\",{\"0\":{\"187\":1,\"189\":1},\"1\":{\"83\":2,\"84\":3,\"85\":5,\"90\":1,\"173\":5,\"178\":2,\"185\":2,\"193\":2}}],[\"dividerulehandle\",{\"1\":{\"80\":2,\"85\":2,\"173\":2,\"178\":2,\"189\":2}}],[\"divideupstream>\",{\"1\":{\"87\":2}}],[\"divideupstream\",{\"1\":{\"77\":3,\"78\":4,\"79\":3,\"85\":3,\"87\":2,\"88\":5,\"89\":3,\"118\":3,\"173\":3,\"178\":3,\"181\":8,\"183\":7,\"189\":4}}],[\"divide\",{\"0\":{\"67\":1,\"70\":1},\"1\":{\"46\":1,\"59\":2,\"62\":12,\"66\":1,\"67\":4,\"70\":2,\"72\":1,\"78\":2,\"79\":1,\"85\":3,\"106\":2,\"116\":1,\"117\":1,\"118\":1,\"133\":1,\"158\":1,\"160\":1,\"173\":1,\"177\":1,\"178\":2,\"179\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"189\":2,\"190\":1,\"191\":1}}],[\"dispatcherhandler\",{\"1\":{\"212\":1,\"213\":7,\"227\":4}}],[\"display\",{\"1\":{\"162\":1}}],[\"disposablebean\",{\"1\":{\"34\":2}}],[\"distuptor\",{\"1\":{\"32\":1}}],[\"disruptor<>\",{\"1\":{\"34\":1}}],[\"disruptor<hmilytransactionevent>\",{\"1\":{\"34\":1}}],[\"disruptor\",{\"0\":{\"34\":2},\"1\":{\"29\":1,\"32\":1,\"34\":25,\"42\":2}}],[\"dev\",{\"1\":{\"273\":1}}],[\"deserialize\",{\"1\":{\"248\":3}}],[\"desc\",{\"1\":{\"236\":1}}],[\"desc`\",{\"1\":{\"232\":1}}],[\"destroy\",{\"1\":{\"34\":1}}],[\"degradeexception\",{\"1\":{\"220\":1}}],[\"degrade\",{\"1\":{\"220\":1}}],[\"degraderule\",{\"1\":{\"220\":2}}],[\"degraderulemanager\",{\"1\":{\"220\":4}}],[\"degraderules\",{\"1\":{\"220\":3}}],[\"determining\",{\"1\":{\"203\":1}}],[\"delta\",{\"1\":{\"206\":5}}],[\"delay\",{\"1\":{\"149\":2}}],[\"deletezkpathrecursive\",{\"1\":{\"96\":3}}],[\"deletebyquery\",{\"1\":{\"46\":1}}],[\"delete\",{\"1\":{\"46\":1,\"96\":2,\"108\":3,\"115\":1,\"116\":1}}],[\"definition\",{\"1\":{\"301\":1}}],[\"defined\",{\"1\":{\"162\":1}}],[\"defer\",{\"1\":{\"84\":1,\"90\":1,\"91\":1,\"174\":2,\"185\":1,\"191\":1,\"241\":1,\"244\":1}}],[\"defaultsignservice\",{\"1\":{\"149\":1}}],[\"defaults\",{\"1\":{\"125\":1,\"301\":1}}],[\"defaultsoulpluginchain\",{\"1\":{\"84\":4,\"174\":7,\"241\":2}}],[\"defaultwebclient\",{\"1\":{\"90\":2}}],[\"default\",{\"1\":{\"42\":1,\"80\":3,\"95\":6,\"109\":1,\"110\":6,\"111\":1,\"116\":1,\"153\":1,\"154\":1,\"163\":2,\"220\":1,\"225\":1,\"227\":1,\"232\":5,\"240\":1,\"273\":1}}],[\"dependency>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"deploy\",{\"1\":{\"41\":1}}],[\"debug\",{\"0\":{\"203\":1},\"1\":{\"38\":1,\"103\":1,\"121\":1,\"158\":1,\"159\":1,\"162\":1,\"163\":1,\"185\":1,\"189\":1,\"241\":1}}],[\"demo\",{\"0\":{\"41\":1,\"120\":1,\"127\":1},\"1\":{\"29\":1,\"42\":1,\"120\":1,\"127\":1,\"185\":1,\"266\":1,\"278\":2}}],[\"dsl\",{\"1\":{\"34\":2}}],[\"druiddatasource\",{\"1\":{\"287\":1}}],[\"drat\",{\"1\":{\"52\":1}}],[\"driverinfo\",{\"1\":{\"124\":1,\"125\":1}}],[\"driveraction\",{\"1\":{\"124\":1}}],[\"driversiterator\",{\"1\":{\"124\":3}}],[\"drivermanager\",{\"1\":{\"124\":7,\"125\":3,\"126\":4,\"127\":5}}],[\"driver\",{\"0\":{\"125\":1},\"1\":{\"32\":1,\"42\":1,\"45\":1,\"124\":18,\"125\":10,\"126\":6,\"127\":3,\"273\":1}}],[\"driverclassname\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"273\":1}}],[\"dromara团队发布全新架构hmily分布式事务的2\",{\"0\":{\"268\":1}}],[\"dromara<\",{\"1\":{\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":1,\"209\":1,\"224\":1,\"234\":1,\"236\":1,\"273\":3,\"301\":2,\"302\":4}}],[\"dromara\",{\"0\":{\"1\":1,\"2\":2,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"49\":1,\"260\":1},\"1\":{\"1\":1,\"3\":1,\"4\":1,\"8\":1,\"9\":1,\"12\":1,\"18\":2,\"19\":1,\"20\":2,\"22\":3,\"23\":2,\"24\":4,\"25\":1,\"28\":1,\"47\":2,\"54\":1,\"104\":1,\"128\":1,\"154\":5,\"158\":2,\"159\":2,\"160\":2,\"162\":14,\"163\":2,\"164\":2,\"174\":2,\"185\":2,\"243\":1,\"252\":2,\"253\":3,\"254\":3,\"255\":2,\"256\":1,\"257\":4,\"258\":8,\"259\":2,\"266\":1,\"267\":2,\"273\":1,\"275\":2,\"282\":1,\"289\":2,\"295\":3,\"296\":1,\"299\":3,\"302\":3}}],[\"db\",{\"1\":{\"32\":1,\"42\":3,\"45\":1,\"77\":1,\"79\":1,\"286\":1,\"287\":4}}],[\"保护后端服务不会再接到请求\",{\"1\":{\"219\":1}}],[\"保证服务不会宕掉\",{\"1\":{\"217\":1}}],[\"保存的是一对\",{\"1\":{\"149\":1}}],[\"保存的发起者一方法的事务信息\",{\"1\":{\"38\":1}}],[\"保存了日志\",{\"1\":{\"29\":1}}],[\"保持甜美的工具类库\",{\"1\":{\"19\":1}}],[\"保持社区中立\",{\"1\":{\"17\":1}}],[\"无论多复杂的请求\",{\"1\":{\"303\":1}}],[\"无效问题\",{\"1\":{\"288\":1}}],[\"无元数据\",{\"1\":{\"162\":1}}],[\"无需每次都迭代所有\",{\"1\":{\"132\":1}}],[\"无需显式的写出接口对应的实现类\",{\"1\":{\"127\":1}}],[\"无需去写入一个\",{\"1\":{\"119\":1}}],[\"无需修改任何配置文件\",{\"1\":{\"105\":1}}],[\"无操作\",{\"1\":{\"80\":1}}],[\"无非是封装\",{\"1\":{\"78\":1}}],[\"无非就是在你\",{\"1\":{\"29\":1}}],[\"无异常的时候去执行\",{\"1\":{\"35\":1}}],[\"无\",{\"0\":{\"34\":1}}],[\"无缝集成\",{\"1\":{\"33\":2}}],[\"无侵入分布式监控\",{\"1\":{\"19\":1}}],[\"af86\",{\"1\":{\"162\":4}}],[\"afterpropertiesset\",{\"1\":{\"109\":1,\"110\":2,\"154\":5,\"163\":2,\"201\":1}}],[\"afterpluginchanged\",{\"1\":{\"95\":2,\"98\":2}}],[\"after\",{\"1\":{\"42\":1,\"103\":1}}],[\"ain\",{\"1\":{\"153\":2}}],[\"ak\",{\"0\":{\"140\":1},\"1\":{\"140\":2}}],[\"archaius\",{\"1\":{\"223\":1}}],[\"argument\",{\"1\":{\"248\":1}}],[\"arg\",{\"1\":{\"247\":6}}],[\"argv\",{\"1\":{\"206\":5}}],[\"args的作用redis\",{\"1\":{\"206\":1}}],[\"args\",{\"1\":{\"120\":1,\"121\":1,\"127\":2,\"154\":1,\"240\":4,\"247\":3,\"248\":14}}],[\"are\",{\"1\":{\"149\":2}}],[\"arrayutil\",{\"1\":{\"287\":1}}],[\"arrayutils\",{\"1\":{\"103\":1}}],[\"arraylist\",{\"1\":{\"213\":3}}],[\"arraylist<handlermapping>\",{\"1\":{\"213\":1}}],[\"arraylist<long>\",{\"1\":{\"203\":1}}],[\"arraylist<>\",{\"1\":{\"109\":1,\"154\":1,\"163\":2,\"164\":1}}],[\"arrays\",{\"1\":{\"103\":1,\"145\":1,\"203\":2}}],[\"artifactid>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"again\",{\"1\":{\"102\":1,\"103\":1,\"199\":1}}],[\"at\",{\"1\":{\"162\":14,\"225\":2}}],[\"attempt\",{\"1\":{\"153\":1}}],[\"attr\",{\"1\":{\"91\":1,\"190\":1,\"191\":1}}],[\"atomicinteger\",{\"1\":{\"34\":3}}],[\"atomic\",{\"1\":{\"34\":1}}],[\"average\",{\"1\":{\"220\":1}}],[\"avg\",{\"1\":{\"63\":2,\"225\":1}}],[\"availableprocessors\",{\"1\":{\"35\":1,\"42\":2}}],[\"animal\",{\"1\":{\"120\":15,\"121\":5}}],[\"another\",{\"1\":{\"102\":1}}],[\"and\",{\"1\":{\"63\":2,\"68\":1,\"78\":1,\"80\":2,\"110\":1,\"160\":1}}],[\"annotationutil\",{\"1\":{\"287\":1}}],[\"annotationawareordercomparator\",{\"1\":{\"213\":3}}],[\"annotation<\",{\"1\":{\"42\":1,\"273\":1}}],[\"annotation\",{\"1\":{\"34\":1,\"35\":1,\"137\":4,\"162\":1}}],[\"alias\",{\"1\":{\"287\":2}}],[\"aliyun\",{\"1\":{\"162\":2}}],[\"alibabadubboplugin\",{\"1\":{\"83\":1,\"84\":1}}],[\"alibabadubboplugin等\",{\"1\":{\"83\":1}}],[\"alibaba\",{\"1\":{\"55\":1,\"85\":2,\"162\":1,\"185\":2,\"300\":1,\"302\":4,\"305\":1}}],[\"algorithm\",{\"1\":{\"118\":3,\"183\":2}}],[\"alt\",{\"1\":{\"110\":1}}],[\"all\",{\"1\":{\"102\":1,\"128\":1}}],[\"allowunsaferenegotiation\",{\"1\":{\"287\":1}}],[\"allowunsafeservercertchange\",{\"1\":{\"287\":1}}],[\"allowed\",{\"1\":{\"203\":4,\"206\":5}}],[\"allow\",{\"1\":{\"60\":1,\"301\":1}}],[\"absvalueparser\",{\"1\":{\"286\":1}}],[\"abstractmatchstrategy\",{\"1\":{\"188\":1}}],[\"abstractdatahandler<plugindata>\",{\"1\":{\"116\":1}}],[\"abstractdatahandler<t>\",{\"1\":{\"116\":1}}],[\"abstractdatahandler\",{\"1\":{\"115\":1,\"116\":2}}],[\"abstractdatarefresh\",{\"1\":{\"102\":1}}],[\"abstractdatachangedlistener\",{\"1\":{\"46\":5,\"95\":4,\"98\":1}}],[\"abstract\",{\"1\":{\"95\":1,\"116\":1,\"286\":1}}],[\"abstractplugin\",{\"1\":{\"82\":1}}],[\"abstractsoulplugin\",{\"0\":{\"83\":1,\"188\":1},\"1\":{\"59\":2,\"62\":12,\"83\":1,\"85\":1,\"173\":2,\"178\":2,\"188\":3,\"220\":1,\"227\":1}}],[\"about\",{\"1\":{\"42\":1}}],[\"abortpolicy\",{\"1\":{\"34\":1,\"35\":1}}],[\"adapterbeans\",{\"1\":{\"213\":2}}],[\"adriver\",{\"1\":{\"125\":3}}],[\"admin地址\",{\"1\":{\"301\":1}}],[\"adminurl\",{\"1\":{\"57\":1}}],[\"admin的\",{\"1\":{\"55\":1}}],[\"admin是\",{\"1\":{\"54\":1}}],[\"admin\",{\"0\":{\"54\":1,\"151\":1,\"157\":2,\"158\":1,\"163\":1,\"235\":1},\"1\":{\"46\":10,\"54\":1,\"66\":2,\"75\":1,\"76\":1,\"104\":4,\"106\":1,\"114\":1,\"152\":2,\"153\":1,\"154\":8,\"155\":1,\"157\":3,\"158\":2,\"160\":2,\"162\":13,\"163\":3,\"184\":1,\"208\":2,\"224\":3,\"230\":1,\"235\":1,\"236\":2,\"270\":1,\"296\":1,\"300\":1,\"301\":5,\"302\":1,\"303\":1}}],[\"addimg\",{\"1\":{\"287\":1}}],[\"addifabsent\",{\"1\":{\"124\":1}}],[\"addpath\",{\"1\":{\"160\":2}}],[\"added\",{\"1\":{\"160\":1}}],[\"addsubscribepath\",{\"1\":{\"160\":3}}],[\"addall\",{\"1\":{\"90\":1,\"190\":1,\"203\":1}}],[\"addresshash\",{\"1\":{\"87\":2}}],[\"address\",{\"1\":{\"87\":3}}],[\"adddivideupstream\",{\"1\":{\"77\":5,\"79\":6}}],[\"add\",{\"1\":{\"38\":1,\"46\":1,\"77\":1,\"79\":1,\"98\":3,\"112\":1,\"163\":1,\"164\":1,\"181\":1,\"213\":1,\"220\":2,\"243\":1}}],[\"a\",{\"1\":{\"42\":2,\"46\":8,\"47\":1,\"55\":1,\"75\":1,\"80\":1,\"103\":1,\"121\":1,\"154\":1,\"159\":1,\"162\":1,\"236\":1,\"303\":1}}],[\"acm\",{\"1\":{\"162\":4}}],[\"aclass\",{\"1\":{\"135\":4,\"137\":6}}],[\"accesskey\",{\"1\":{\"162\":2}}],[\"access\",{\"1\":{\"140\":2}}],[\"accesscontroller\",{\"1\":{\"121\":1,\"124\":1}}],[\"acc\",{\"1\":{\"121\":3}}],[\"accountcontroller\",{\"1\":{\"273\":1}}],[\"accountservice\",{\"1\":{\"266\":2}}],[\"account\",{\"1\":{\"45\":2,\"266\":1,\"273\":2}}],[\"actives=\",{\"1\":{\"266\":1}}],[\"activate\",{\"1\":{\"247\":1,\"248\":1}}],[\"action\",{\"1\":{\"38\":1}}],[\"actuator<\",{\"1\":{\"301\":1}}],[\"actuator\",{\"1\":{\"55\":1,\"162\":1}}],[\"acquirebyname\",{\"1\":{\"80\":1,\"115\":1,\"116\":1}}],[\"acquire\",{\"1\":{\"39\":1}}],[\"apollo\",{\"1\":{\"271\":1,\"273\":3,\"277\":1,\"278\":1}}],[\"apachdubboplugin\",{\"0\":{\"242\":1},\"1\":{\"230\":1}}],[\"apachedubboproxyservice\",{\"0\":{\"243\":1}}],[\"apachedubboproxyserivce\",{\"1\":{\"230\":1}}],[\"apachedubboplugin\",{\"1\":{\"241\":1}}],[\"apache\",{\"0\":{\"231\":1,\"233\":1,\"237\":1,\"247\":1},\"1\":{\"39\":1,\"55\":1,\"85\":2,\"119\":1,\"128\":3,\"153\":11,\"230\":3,\"231\":1,\"234\":5,\"236\":3,\"241\":1,\"280\":1,\"300\":1,\"302\":4,\"305\":4}}],[\"appid\",{\"1\":{\"273\":1}}],[\"appkey\",{\"0\":{\"143\":1},\"1\":{\"147\":1,\"186\":1}}],[\"appclassloader\",{\"1\":{\"121\":1}}],[\"appauthservice\",{\"1\":{\"154\":1}}],[\"appauthdata\",{\"1\":{\"149\":4}}],[\"appauthdatalist\",{\"1\":{\"111\":2}}],[\"appauthdatarefresh\",{\"1\":{\"102\":1}}],[\"appauth\",{\"1\":{\"110\":2}}],[\"append\",{\"1\":{\"102\":4}}],[\"appenders\",{\"1\":{\"55\":1}}],[\"appname\",{\"1\":{\"57\":1,\"70\":1,\"78\":4,\"273\":4}}],[\"app\",{\"1\":{\"46\":3,\"95\":1,\"102\":1,\"108\":1,\"109\":1,\"111\":2,\"115\":1,\"154\":2}}],[\"applicationconfigcache\",{\"1\":{\"243\":3}}],[\"applicationconfig\",{\"1\":{\"238\":1}}],[\"applicationcontext\",{\"1\":{\"109\":7,\"154\":7,\"162\":1,\"163\":1,\"213\":1}}],[\"applicationlistener<datachangedevent>\",{\"1\":{\"95\":1,\"109\":1,\"154\":1}}],[\"applicationeventpublisher\",{\"1\":{\"78\":1,\"154\":1}}],[\"application\",{\"1\":{\"42\":1,\"46\":1,\"57\":1,\"103\":1,\"152\":2,\"162\":4,\"301\":1}}],[\"applicationname\",{\"1\":{\"42\":1}}],[\"api\",{\"0\":{\"238\":1},\"1\":{\"19\":2,\"42\":1,\"47\":1,\"85\":1,\"99\":1,\"162\":2,\"230\":1,\"237\":1,\"238\":1,\"266\":1}}],[\"aslist\",{\"1\":{\"203\":2}}],[\"assert\",{\"1\":{\"149\":1,\"189\":1,\"190\":1,\"220\":1,\"227\":1,\"242\":2}}],[\"asyncrepository\",{\"1\":{\"273\":1}}],[\"async\",{\"1\":{\"247\":1,\"248\":1}}],[\"asynccontext\",{\"1\":{\"98\":12,\"99\":1}}],[\"asynctimeoutfuture\",{\"1\":{\"98\":4}}],[\"asyncthreads\",{\"1\":{\"32\":2}}],[\"ashttpheaders\",{\"1\":{\"91\":1,\"191\":1}}],[\"as\",{\"1\":{\"42\":2}}],[\"aspect\",{\"1\":{\"42\":1}}],[\"aspectj\",{\"1\":{\"35\":1,\"42\":1}}],[\"authpath\",{\"1\":{\"154\":2}}],[\"authenticate\",{\"1\":{\"153\":1}}],[\"authurl\",{\"1\":{\"145\":2}}],[\"authdatahandler\",{\"1\":{\"115\":1}}],[\"authdatasubscriber\",{\"1\":{\"115\":1}}],[\"authdatasubscribers\",{\"1\":{\"102\":3,\"115\":2,\"159\":5}}],[\"authsubscribers\",{\"1\":{\"115\":2,\"159\":4,\"164\":2}}],[\"auth\",{\"1\":{\"46\":3,\"95\":1,\"102\":1,\"108\":1,\"109\":1,\"111\":2,\"115\":1,\"154\":2,\"159\":2,\"162\":1}}],[\"author\",{\"1\":{\"34\":1,\"35\":1,\"39\":1,\"42\":1,\"108\":2,\"110\":2,\"154\":2}}],[\"auto\",{\"1\":{\"274\":1,\"281\":1}}],[\"autosql\",{\"1\":{\"273\":1}}],[\"automatictransitionfromopentohalfopenenabled\",{\"1\":{\"224\":1}}],[\"autocloseable\",{\"1\":{\"102\":1,\"159\":1}}],[\"autoproxy\",{\"1\":{\"42\":1}}],[\"autowired\",{\"1\":{\"34\":2,\"35\":2,\"273\":1}}],[\"aaa\",{\"1\":{\"32\":1}}],[\"amp\",{\"1\":{\"32\":1,\"42\":1,\"45\":1}}],[\"aop\",{\"1\":{\"29\":2,\"31\":1,\"32\":1,\"35\":1}}],[\"答案自然数据同步脱不了干系\",{\"1\":{\"201\":1}}],[\"答案在buildrealurl\",{\"1\":{\"189\":1}}],[\"答\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"36\":1,\"37\":1,\"302\":4}}],[\"和普通的\",{\"1\":{\"296\":1}}],[\"和谐基本原则\",{\"1\":{\"271\":1,\"279\":1}}],[\"和谐快乐做开源\",{\"1\":{\"17\":1}}],[\"和使用的泛化方式\",{\"1\":{\"248\":1}}],[\"和填写注册中心的连接地址\",{\"1\":{\"235\":1}}],[\"和不存储\",{\"1\":{\"232\":1}}],[\"和熔断最小请求数\",{\"1\":{\"219\":1}}],[\"和现实中的熔断一样服务熔断是会自动恢复的\",{\"1\":{\"218\":1}}],[\"和秘密访问密钥\",{\"1\":{\"140\":1}}],[\"和加载器传给\",{\"1\":{\"121\":1}}],[\"和选择器一一对齐\",{\"1\":{\"70\":1}}],[\"和选择器规则\",{\"1\":{\"67\":1}}],[\"和端口\",{\"1\":{\"55\":1,\"182\":1}}],[\"和谁连接了\",{\"1\":{\"46\":1}}],[\"和修改方法中\",{\"1\":{\"46\":1}}],[\"和\",{\"1\":{\"32\":1,\"39\":1,\"45\":1,\"46\":2,\"62\":1,\"70\":1,\"78\":1,\"80\":1,\"83\":1,\"104\":1,\"108\":1,\"154\":1,\"173\":1,\"179\":1,\"206\":1,\"242\":1,\"243\":1}}],[\"和大家一些疑惑的地方\",{\"1\":{\"28\":1}}],[\"csvreadconfig\",{\"1\":{\"287\":1}}],[\"cpu\",{\"1\":{\"284\":1,\"300\":1}}],[\"ci\",{\"1\":{\"232\":10,\"278\":1}}],[\"circuit\",{\"1\":{\"225\":1}}],[\"circuitenable配置\",{\"1\":{\"227\":1}}],[\"circuitenable\",{\"1\":{\"224\":1}}],[\"circuitbreakeroperator\",{\"1\":{\"227\":1}}],[\"circuitbreakerstatuscodeexception\",{\"1\":{\"227\":1}}],[\"circuitbreaker<\",{\"1\":{\"223\":1}}],[\"circuitbreaker\",{\"1\":{\"223\":1,\"227\":5}}],[\"ctor\",{\"1\":{\"225\":9}}],[\"cglib\",{\"1\":{\"162\":1}}],[\"cglib$nacossyncdataservice$0\",{\"1\":{\"162\":1}}],[\"c11b7e26bc554b8523dc929761dd28808913f091\",{\"1\":{\"153\":1}}],[\"cfg\",{\"1\":{\"153\":1}}],[\"cherryrum\",{\"1\":{\"284\":1}}],[\"cheap\",{\"1\":{\"271\":1,\"279\":1}}],[\"checkstyle\",{\"1\":{\"279\":1,\"305\":1}}],[\"checkselector\",{\"1\":{\"83\":2}}],[\"check=\",{\"1\":{\"266\":1}}],[\"checkmetadata\",{\"1\":{\"242\":1}}],[\"checkip\",{\"1\":{\"182\":1}}],[\"checkurl\",{\"1\":{\"181\":1,\"182\":2}}],[\"checkutils\",{\"1\":{\"83\":4}}],[\"check\",{\"1\":{\"180\":4,\"181\":3,\"225\":1,\"271\":1}}],[\"checkdata\",{\"1\":{\"107\":1,\"220\":2,\"225\":1,\"226\":1,\"227\":1}}],[\"checkpoint\",{\"1\":{\"90\":1}}],[\"checkrule\",{\"1\":{\"83\":2}}],[\"childrenlist\",{\"1\":{\"160\":1}}],[\"charsequence\",{\"1\":{\"286\":1}}],[\"characterencoding=utf\",{\"1\":{\"301\":1}}],[\"characterencoding=utf8\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"273\":1}}],[\"character\",{\"1\":{\"232\":10}}],[\"chain\",{\"1\":{\"83\":9,\"85\":2,\"90\":6,\"91\":2,\"173\":3,\"178\":5,\"186\":2,\"188\":7,\"189\":2,\"190\":6,\"191\":2,\"203\":2,\"213\":2,\"220\":2,\"227\":8,\"242\":2,\"244\":2}}],[\"changes\",{\"1\":{\"102\":1,\"110\":1}}],[\"changetime\",{\"1\":{\"98\":1}}],[\"changetime=\",{\"1\":{\"98\":1}}],[\"changedgroups\",{\"1\":{\"98\":6,\"103\":4}}],[\"changed\",{\"1\":{\"80\":1,\"95\":9,\"96\":2,\"98\":3,\"103\":1,\"110\":16,\"153\":2,\"154\":2,\"163\":2}}],[\"change\",{\"1\":{\"77\":1,\"79\":1,\"107\":1,\"163\":1,\"164\":2,\"287\":1}}],[\"c40\",{\"1\":{\"63\":2}}],[\"cchenxi\",{\"0\":{\"49\":1},\"1\":{\"50\":1}}],[\"crypto\",{\"1\":{\"287\":1}}],[\"cronpatternparser\",{\"1\":{\"287\":1}}],[\"cron\",{\"1\":{\"286\":1,\"287\":1}}],[\"creating\",{\"1\":{\"162\":1}}],[\"createuri\",{\"1\":{\"213\":1,\"220\":1,\"227\":1}}],[\"createnotfounderror\",{\"1\":{\"213\":2}}],[\"createlettuceconnectionfactory\",{\"1\":{\"201\":1}}],[\"createconfigservice\",{\"1\":{\"164\":1}}],[\"createpersistent\",{\"1\":{\"159\":1}}],[\"createextension\",{\"1\":{\"135\":2,\"137\":3}}],[\"createstatement\",{\"1\":{\"127\":2}}],[\"createorupdate\",{\"1\":{\"46\":1,\"107\":2,\"163\":1}}],[\"created`\",{\"1\":{\"232\":1}}],[\"createdefault\",{\"1\":{\"80\":1}}],[\"created\",{\"1\":{\"42\":1,\"80\":1}}],[\"create\",{\"1\":{\"34\":1,\"35\":1,\"96\":1,\"102\":1,\"107\":2,\"108\":2,\"116\":1,\"163\":1,\"180\":1,\"232\":1}}],[\"crud\",{\"1\":{\"46\":1,\"76\":1}}],[\"c\",{\"1\":{\"38\":3,\"121\":4,\"225\":3}}],[\"curator\",{\"1\":{\"234\":3,\"271\":1}}],[\"curator<\",{\"1\":{\"234\":3}}],[\"cur\",{\"1\":{\"89\":3}}],[\"currentchildren\",{\"1\":{\"159\":3,\"160\":3}}],[\"currentthread\",{\"1\":{\"121\":1,\"226\":1}}],[\"currenttimemillis\",{\"1\":{\"89\":1,\"95\":1,\"181\":1}}],[\"currenttransaction\",{\"1\":{\"35\":4}}],[\"current\",{\"1\":{\"38\":1,\"232\":1}}],[\"custom\",{\"1\":{\"68\":1,\"78\":1}}],[\"cut\",{\"1\":{\"38\":1}}],[\"capacity\",{\"1\":{\"206\":4}}],[\"calcite\",{\"1\":{\"280\":1}}],[\"calculatetotalweight\",{\"1\":{\"183\":1}}],[\"call\",{\"1\":{\"206\":4}}],[\"callercl\",{\"1\":{\"125\":1}}],[\"caller\",{\"1\":{\"125\":1}}],[\"calls\",{\"1\":{\"42\":1,\"225\":2}}],[\"caused\",{\"1\":{\"162\":2}}],[\"cast\",{\"1\":{\"121\":1}}],[\"case\",{\"1\":{\"95\":5,\"109\":5,\"111\":6,\"116\":5,\"154\":1,\"163\":1}}],[\"can\",{\"1\":{\"124\":1,\"213\":1}}],[\"cannot\",{\"1\":{\"121\":2,\"189\":4,\"190\":2}}],[\"cancelmethod\",{\"1\":{\"273\":2}}],[\"cancel方法名称\",{\"1\":{\"273\":1}}],[\"cancel\",{\"0\":{\"35\":1,\"36\":1},\"1\":{\"29\":1,\"30\":1,\"32\":2,\"35\":3,\"98\":2,\"272\":1,\"273\":2,\"274\":2,\"281\":1}}],[\"cacheddefaultname\",{\"1\":{\"137\":1}}],[\"cachedclasses\",{\"0\":{\"134\":1},\"1\":{\"132\":1,\"134\":5,\"137\":5}}],[\"cachedinstances\",{\"0\":{\"133\":1},\"1\":{\"132\":1,\"133\":2,\"137\":6}}],[\"cacheruledata\",{\"1\":{\"116\":1,\"160\":4}}],[\"cacheselectdata\",{\"1\":{\"116\":1}}],[\"cacheplugindata\",{\"1\":{\"116\":1,\"159\":2}}],[\"cacheconfigdata\",{\"1\":{\"103\":1}}],[\"cacheconfig\",{\"1\":{\"103\":3}}],[\"cachetcctransaction\",{\"1\":{\"39\":4}}],[\"cacheloader<string\",{\"1\":{\"39\":1}}],[\"cacheloader\",{\"1\":{\"39\":1}}],[\"cachebuilder\",{\"1\":{\"39\":2}}],[\"cache\",{\"1\":{\"39\":16,\"46\":5,\"95\":4,\"98\":1,\"102\":1,\"159\":1}}],[\"catch\",{\"1\":{\"35\":1,\"39\":1,\"80\":1,\"102\":2,\"103\":2,\"112\":2,\"121\":3,\"124\":2,\"125\":1,\"127\":3,\"137\":2,\"182\":2,\"248\":3}}],[\"cl\",{\"1\":{\"121\":5}}],[\"clear\",{\"1\":{\"102\":1,\"112\":3,\"121\":1}}],[\"cleandelaytime\",{\"1\":{\"273\":1}}],[\"clean\",{\"1\":{\"52\":1}}],[\"clazz\",{\"1\":{\"80\":3,\"130\":5,\"137\":2}}],[\"classpath\",{\"1\":{\"134\":2,\"137\":5}}],[\"classes\",{\"1\":{\"134\":3,\"137\":25,\"162\":9}}],[\"classnotfoundexception\",{\"1\":{\"121\":1,\"127\":2,\"137\":2,\"248\":1}}],[\"classloader\",{\"1\":{\"121\":5,\"137\":5}}],[\"class<t>\",{\"1\":{\"130\":1}}],[\"class<s>\",{\"1\":{\"121\":3}}],[\"class<\",{\"1\":{\"80\":3,\"121\":1,\"125\":1,\"132\":1,\"134\":2,\"135\":1,\"137\":10,\"248\":1}}],[\"class\",{\"1\":{\"34\":1,\"35\":1,\"39\":2,\"42\":1,\"77\":1,\"79\":1,\"80\":12,\"84\":4,\"85\":1,\"90\":1,\"95\":6,\"96\":2,\"98\":7,\"102\":5,\"103\":3,\"107\":2,\"109\":2,\"110\":16,\"111\":1,\"112\":2,\"114\":4,\"115\":6,\"116\":3,\"118\":3,\"119\":1,\"120\":5,\"121\":10,\"122\":1,\"124\":5,\"125\":2,\"127\":2,\"130\":3,\"137\":4,\"154\":13,\"159\":2,\"162\":2,\"163\":4,\"164\":2,\"173\":1,\"178\":1,\"183\":1,\"189\":1,\"201\":6,\"203\":2,\"213\":4,\"220\":6,\"227\":3,\"247\":4,\"248\":4,\"273\":3,\"296\":1}}],[\"class=\",{\"1\":{\"32\":7,\"42\":2}}],[\"close\",{\"1\":{\"112\":1}}],[\"clone\",{\"0\":{\"50\":1},\"1\":{\"50\":1}}],[\"cloud用户如果使用\",{\"1\":{\"272\":1,\"278\":1}}],[\"cloud\",{\"1\":{\"29\":1,\"78\":2,\"223\":1,\"273\":2,\"276\":1}}],[\"client<\",{\"1\":{\"162\":1,\"234\":1}}],[\"clientcnxn\",{\"1\":{\"153\":4}}],[\"clientip\",{\"1\":{\"98\":2}}],[\"clientrequest\",{\"1\":{\"90\":1}}],[\"clientresponse\",{\"1\":{\"90\":1,\"91\":7,\"190\":1,\"191\":7}}],[\"clients\",{\"1\":{\"46\":1,\"98\":9}}],[\"client\",{\"1\":{\"46\":2,\"57\":1,\"75\":2,\"81\":1,\"90\":1,\"91\":1,\"98\":6,\"104\":1,\"153\":8,\"154\":3,\"159\":2,\"162\":1,\"173\":1,\"190\":3,\"191\":1,\"236\":2,\"243\":1,\"296\":1,\"300\":1}}],[\"clusterurl\",{\"1\":{\"32\":1}}],[\"cluster\",{\"1\":{\"32\":1}}],[\"copyoptions\",{\"1\":{\"288\":1}}],[\"copyonwritearraylist<>\",{\"1\":{\"124\":1}}],[\"copyonwritearraylist<driverinfo>\",{\"1\":{\"124\":1}}],[\"copyonwritearrayset<>\",{\"1\":{\"112\":1}}],[\"code\",{\"1\":{\"185\":1,\"199\":1,\"226\":1,\"271\":1,\"279\":1,\"296\":1}}],[\"column\",{\"1\":{\"287\":1}}],[\"collate\",{\"1\":{\"232\":10}}],[\"collectors\",{\"1\":{\"84\":1,\"145\":2,\"163\":1,\"174\":1,\"185\":1,\"213\":1,\"220\":4}}],[\"collect\",{\"1\":{\"84\":1,\"145\":2,\"163\":1,\"174\":1,\"185\":1,\"213\":1,\"220\":4}}],[\"collection\",{\"1\":{\"112\":1,\"286\":1}}],[\"collection<datachangedlistener>\",{\"1\":{\"109\":1,\"154\":1,\"163\":1}}],[\"collection<selectordata>\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"collectionutils\",{\"1\":{\"83\":2,\"95\":1,\"102\":1,\"116\":1,\"159\":1,\"160\":1,\"188\":2,\"189\":1}}],[\"collections\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"80\":1,\"84\":1,\"98\":1,\"107\":1,\"109\":1,\"115\":2,\"154\":1,\"159\":2,\"163\":2,\"164\":2,\"174\":1,\"213\":2}}],[\"colons\",{\"1\":{\"182\":2}}],[\"corporation\",{\"1\":{\"153\":1}}],[\"core\",{\"1\":{\"32\":1,\"34\":7,\"35\":4,\"39\":3,\"42\":1,\"162\":1,\"286\":7,\"287\":14,\"288\":12}}],[\"cookies\",{\"1\":{\"91\":1,\"191\":1}}],[\"coordinatorservice\",{\"1\":{\"34\":9,\"39\":6}}],[\"coordinator\",{\"1\":{\"34\":1,\"39\":1}}],[\"could\",{\"1\":{\"55\":1,\"121\":1}}],[\"counterinc\",{\"1\":{\"174\":1}}],[\"count\",{\"1\":{\"39\":2,\"127\":8,\"220\":1}}],[\"concatmap\",{\"1\":{\"213\":1}}],[\"concat\",{\"1\":{\"145\":1}}],[\"concurrentmap<string\",{\"1\":{\"89\":2,\"95\":1}}],[\"concurrentskiplistmap<>\",{\"1\":{\"87\":1}}],[\"concurrentskiplistmap<long\",{\"1\":{\"87\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"80\":1,\"89\":2,\"95\":1,\"130\":1,\"132\":2,\"133\":1,\"135\":1}}],[\"concurrent\",{\"1\":{\"34\":6,\"35\":5,\"39\":1}}],[\"conn\",{\"1\":{\"127\":4}}],[\"connecttimeoutexception\",{\"1\":{\"190\":1}}],[\"connectstring=localhost\",{\"1\":{\"153\":1}}],[\"connector\",{\"1\":{\"124\":1}}],[\"connectiontimeout\",{\"1\":{\"152\":2,\"273\":1}}],[\"connections\",{\"1\":{\"63\":2}}],[\"connection\",{\"1\":{\"55\":1,\"125\":4,\"127\":2,\"153\":3,\"182\":1}}],[\"connect\",{\"1\":{\"46\":1,\"125\":3,\"182\":1}}],[\"con\",{\"1\":{\"125\":3}}],[\"convert\",{\"1\":{\"102\":1,\"116\":1}}],[\"constructorresolver\",{\"1\":{\"162\":2}}],[\"constants\",{\"1\":{\"85\":2,\"90\":1,\"91\":1,\"149\":2,\"173\":4,\"178\":3,\"182\":2,\"186\":1,\"189\":4,\"190\":7,\"191\":1,\"220\":3,\"225\":11,\"227\":1,\"242\":3,\"243\":4,\"244\":1}}],[\"consumers\",{\"1\":{\"34\":6}}],[\"consumer\",{\"1\":{\"34\":1,\"240\":2,\"247\":1}}],[\"consumerthreads\",{\"1\":{\"32\":2,\"42\":2,\"273\":1}}],[\"conditions\",{\"1\":{\"162\":1}}],[\"conditionalonclass\",{\"1\":{\"115\":1,\"164\":1}}],[\"conditionalonbean与之相反\",{\"1\":{\"154\":1}}],[\"conditionalonbean\",{\"1\":{\"98\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"95\":1,\"110\":7,\"114\":1,\"154\":4}}],[\"conditionalonproperty\",{\"1\":{\"95\":1,\"110\":5,\"114\":1,\"115\":1,\"154\":1,\"164\":1}}],[\"condition\",{\"1\":{\"46\":1,\"78\":1,\"80\":1,\"81\":2}}],[\"control\",{\"1\":{\"98\":1}}],[\"controller越来越多\",{\"1\":{\"296\":1}}],[\"controller\",{\"1\":{\"46\":2,\"98\":1,\"99\":1,\"225\":9}}],[\"continue\",{\"1\":{\"96\":1,\"103\":1}}],[\"continued\",{\"1\":{\"78\":1}}],[\"contenttype\",{\"1\":{\"90\":1,\"190\":2}}],[\"contexttransmittalmode\",{\"1\":{\"273\":1}}],[\"context的属性值\",{\"1\":{\"242\":1}}],[\"contextpath\",{\"1\":{\"57\":1,\"70\":4,\"77\":6,\"78\":3,\"79\":9,\"186\":1,\"232\":1}}],[\"context\",{\"1\":{\"35\":2,\"38\":6,\"85\":3,\"149\":1,\"162\":2,\"173\":1,\"186\":1,\"189\":1,\"190\":1,\"213\":4,\"220\":1,\"227\":1,\"242\":1}}],[\"conf\",{\"1\":{\"153\":1,\"227\":6,\"273\":2}}],[\"confirmmethod\",{\"1\":{\"273\":2}}],[\"confirm\",{\"1\":{\"32\":1,\"35\":2,\"272\":1,\"273\":3,\"274\":1}}],[\"configmode\",{\"1\":{\"273\":6}}],[\"configinfo\",{\"1\":{\"163\":2,\"164\":2}}],[\"configeventlistener\",{\"1\":{\"154\":1}}],[\"configdata\",{\"1\":{\"111\":6}}],[\"configdata<\",{\"1\":{\"103\":1}}],[\"configdata<t>\",{\"1\":{\"102\":1}}],[\"configdatacache\",{\"1\":{\"95\":3}}],[\"configdatacache>\",{\"1\":{\"95\":1}}],[\"configservice\",{\"1\":{\"110\":3,\"163\":1,\"164\":4,\"273\":1}}],[\"configs\",{\"1\":{\"98\":1,\"102\":4,\"103\":3,\"121\":5}}],[\"configcontroller\",{\"1\":{\"98\":2}}],[\"configurationclassenhancer\",{\"1\":{\"162\":1}}],[\"configurationclassenhancer$beanmethodinterceptor\",{\"1\":{\"162\":1}}],[\"configurationproperties注解\",{\"1\":{\"154\":1}}],[\"configurationproperties\",{\"1\":{\"115\":1,\"154\":2,\"164\":1}}],[\"configuration\",{\"1\":{\"84\":2,\"95\":2,\"98\":1,\"108\":1,\"110\":5,\"114\":2,\"115\":1,\"121\":1,\"154\":2,\"159\":1,\"162\":2,\"164\":1,\"189\":1,\"213\":1}}],[\"configgroupenum\",{\"1\":{\"77\":1,\"79\":1,\"95\":2,\"96\":1,\"98\":1,\"102\":10,\"103\":4,\"107\":1,\"108\":1,\"111\":5,\"115\":9,\"154\":3,\"163\":1}}],[\"config\",{\"1\":{\"32\":6,\"42\":8,\"46\":7,\"75\":1,\"95\":1,\"102\":3,\"103\":1,\"153\":1,\"154\":2,\"273\":3,\"277\":1}}],[\"confrim\",{\"0\":{\"35\":1,\"36\":1},\"1\":{\"29\":1,\"32\":1,\"35\":1,\"39\":1}}],[\"combined\",{\"1\":{\"227\":3}}],[\"combinedexecutor\",{\"1\":{\"227\":4}}],[\"committers\",{\"1\":{\"254\":2}}],[\"comment\",{\"1\":{\"232\":12}}],[\"commandlinerunner\",{\"1\":{\"154\":4}}],[\"commonconstants\",{\"1\":{\"243\":1,\"247\":1,\"248\":1}}],[\"commonplugindatasubscriber\",{\"1\":{\"116\":2}}],[\"commons\",{\"1\":{\"39\":1}}],[\"common\",{\"1\":{\"32\":6,\"34\":3,\"35\":3,\"39\":5,\"42\":4,\"55\":1,\"128\":2,\"162\":2}}],[\"completablefuture\",{\"1\":{\"240\":2}}],[\"completablefuture<object>\",{\"1\":{\"240\":2,\"243\":1}}],[\"completedfuture\",{\"1\":{\"240\":1}}],[\"complete\",{\"1\":{\"98\":1,\"153\":2}}],[\"comparingindexed\",{\"1\":{\"287\":1}}],[\"comparingint\",{\"1\":{\"84\":1,\"174\":1,\"185\":1,\"213\":1}}],[\"compareutil\",{\"1\":{\"287\":1}}],[\"comparechangedgroup\",{\"1\":{\"98\":2}}],[\"compareandset\",{\"1\":{\"89\":1,\"102\":1}}],[\"comparator\",{\"1\":{\"84\":1,\"145\":1,\"163\":1,\"174\":1,\"185\":1,\"213\":1}}],[\"componentscan\",{\"1\":{\"174\":1}}],[\"component\",{\"1\":{\"34\":2,\"35\":2,\"42\":1,\"109\":1,\"110\":1,\"154\":2}}],[\"com\",{\"0\":{\"41\":1},\"1\":{\"28\":2,\"32\":7,\"34\":15,\"35\":7,\"39\":8,\"42\":7,\"45\":2,\"47\":1,\"50\":1,\"55\":1,\"124\":1,\"127\":1,\"128\":1,\"162\":2,\"188\":1,\"239\":1,\"243\":1,\"253\":2,\"267\":2,\"273\":1,\"275\":2,\"282\":2,\"289\":2,\"295\":2,\"296\":1,\"299\":2,\"305\":1}}],[\"cn\",{\"1\":{\"28\":1,\"47\":1,\"104\":1,\"121\":6,\"188\":1,\"267\":1,\"273\":1,\"295\":1,\"299\":1,\"302\":3}}],[\"让人看起来舒服\",{\"1\":{\"305\":1}}],[\"让高性能网关变得如此简单\",{\"0\":{\"300\":1}}],[\"让开发者\",{\"1\":{\"296\":1}}],[\"让用户自由选择\",{\"1\":{\"296\":1}}],[\"让大家久等了\",{\"1\":{\"268\":1}}],[\"让请求方来自行决定如何处理\",{\"1\":{\"218\":1}}],[\"让我们梳理一下该类的方法\",{\"1\":{\"188\":1}}],[\"让实现类自己判定即可\",{\"1\":{\"127\":1}}],[\"让迭代器可以进行\",{\"1\":{\"121\":1}}],[\"让父接口与它的子类在文件中写明\",{\"1\":{\"119\":1}}],[\"让网关接收到响应信息\",{\"1\":{\"98\":1}}],[\"让子类可以按照指定步骤进行工作\",{\"1\":{\"95\":1}}],[\"让\",{\"1\":{\"28\":1}}],[\"让每一位开源爱好者\",{\"1\":{\"16\":1}}],[\"也希望大家拥有开源的心态\",{\"1\":{\"305\":1}}],[\"也希望各位小伙伴提交\",{\"1\":{\"305\":1}}],[\"也更容易让人理解整个代码\",{\"1\":{\"305\":1}}],[\"也遭受很多小白用户的摧残\",{\"1\":{\"305\":1}}],[\"也有\",{\"1\":{\"305\":1}}],[\"也有很多灵活自由的空间\",{\"1\":{\"279\":1}}],[\"也有转发到\",{\"1\":{\"62\":1}}],[\"也吸收了更多开源社区的优秀人才的加入\",{\"1\":{\"268\":1}}],[\"也发布了一个插件数据变更的事件通知\",{\"1\":{\"201\":1}}],[\"也得知了\",{\"1\":{\"193\":1}}],[\"也看不到数据\",{\"1\":{\"162\":1}}],[\"也特别高\",{\"1\":{\"89\":1}}],[\"也涉及到\",{\"1\":{\"86\":1}}],[\"也是解决\",{\"1\":{\"284\":1}}],[\"也是网关实现\",{\"1\":{\"231\":1}}],[\"也是业务网关必须要关注处理的问题\",{\"1\":{\"216\":1}}],[\"也是持有通过构造方法传入的插件链\",{\"1\":{\"174\":1}}],[\"也是枚举\",{\"1\":{\"108\":1}}],[\"也是\",{\"1\":{\"67\":1}}],[\"也是通过定时线程池来执行\",{\"1\":{\"46\":1}}],[\"也是通过上面的步骤重新来一遍\",{\"1\":{\"46\":1}}],[\"也可以玩的更好\",{\"1\":{\"304\":1}}],[\"也可以在\",{\"1\":{\"301\":1}}],[\"也可以把配置放在\",{\"1\":{\"273\":1}}],[\"也可以使用\",{\"1\":{\"273\":1}}],[\"也可以自定义\",{\"1\":{\"70\":1}}],[\"也可以加微信和\",{\"1\":{\"45\":1}}],[\"也可以发送电子邮件至\",{\"1\":{\"20\":1}}],[\"也支持\",{\"1\":{\"32\":1}}],[\"也就是把某个事件告诉的所有与这个事件相关的监听器\",{\"1\":{\"154\":1}}],[\"也就是说在我们代码中的实现里\",{\"1\":{\"119\":1}}],[\"也就是说针对每个未知的\",{\"1\":{\"87\":1}}],[\"也就是\",{\"1\":{\"29\":1,\"159\":1}}],[\"也都为异步的调用\",{\"1\":{\"29\":1}}],[\"也欢迎大家关注\",{\"1\":{\"28\":1}}],[\"横排第二个\",{\"1\":{\"28\":1}}],[\"在设计之初就是来干这种事情的\",{\"1\":{\"297\":1,\"304\":1}}],[\"在运用\",{\"1\":{\"296\":1}}],[\"在集群环境下\",{\"1\":{\"296\":1}}],[\"在集群部署情况下单机的令牌桶算法无法满足集群状态下的限流功能\",{\"1\":{\"197\":1}}],[\"在插件表新增\",{\"1\":{\"294\":1}}],[\"在插件数据过来时\",{\"1\":{\"201\":1}}],[\"在以前的版本中\",{\"1\":{\"292\":1}}],[\"在社区中\",{\"1\":{\"278\":1}}],[\"在易用性上提供零侵入性式的\",{\"1\":{\"276\":1}}],[\"在下一个版本\",{\"1\":{\"274\":1}}],[\"在其他模式的支持上将会变得更加容易\",{\"1\":{\"274\":1}}],[\"在新版\",{\"1\":{\"273\":1}}],[\"在事务日志存储上\",{\"1\":{\"272\":1}}],[\"在目标上\",{\"1\":{\"271\":1}}],[\"在开放性上\",{\"1\":{\"271\":1}}],[\"在代码质量上\",{\"1\":{\"271\":1}}],[\"在依赖包版本上\",{\"1\":{\"271\":1}}],[\"在模块划分上\",{\"1\":{\"271\":1}}],[\"在调用方的\",{\"1\":{\"266\":1}}],[\"在调用后我们得到之前在资源文件中写入的实现类\",{\"1\":{\"120\":1}}],[\"在试运行期内\",{\"1\":{\"259\":1}}],[\"在不违反法律\",{\"1\":{\"259\":1}}],[\"在组织层面做出决策以后\",{\"1\":{\"259\":1}}],[\"在数据库中\",{\"1\":{\"232\":1}}],[\"在该模式下阈值指的是单位统计时间内异常请求个数的上限\",{\"1\":{\"219\":1}}],[\"在半开状态如果请求正常则会进入正常状态如果请求依然不正常则继续熔断\",{\"1\":{\"219\":1}}],[\"在一定时间内逐渐增加阈值直至达到设置\",{\"1\":{\"217\":1}}],[\"在考虑流量控制的策略时\",{\"1\":{\"217\":1}}],[\"在实现这部分功能时使用了不同的成熟组件\",{\"1\":{\"215\":1}}],[\"在业务网关中熔断和流量控制都是非常必要的功能\",{\"1\":{\"215\":1}}],[\"在解析\",{\"1\":{\"213\":1}}],[\"在获取令牌时实时计算令牌数量\",{\"1\":{\"205\":1}}],[\"在修改插件的配置时\",{\"1\":{\"201\":1}}],[\"在之前梳理soul\",{\"1\":{\"201\":1}}],[\"在之前的版本中\",{\"1\":{\"273\":1}}],[\"在之前的\",{\"1\":{\"193\":1}}],[\"在之前分析\",{\"1\":{\"118\":1}}],[\"在流程中需要还需要看一个donext\",{\"1\":{\"190\":1}}],[\"在这一个版本中\",{\"1\":{\"268\":1}}],[\"在这个时间点\",{\"1\":{\"281\":1}}],[\"在这个配置页面中\",{\"1\":{\"218\":1}}],[\"在这个方法里\",{\"1\":{\"190\":1}}],[\"在这里细讲也讲不出个啥来\",{\"1\":{\"206\":1}}],[\"在这里插入图片描述\",{\"1\":{\"154\":4,\"158\":4,\"159\":1,\"160\":2,\"161\":1,\"162\":8,\"163\":4,\"164\":2,\"165\":1}}],[\"在这里就是\",{\"1\":{\"79\":1}}],[\"在这里\",{\"1\":{\"34\":1}}],[\"在全局代理模式下只会注册一个选择器\",{\"1\":{\"188\":1}}],[\"在使用上\",{\"1\":{\"273\":1}}],[\"在使用\",{\"1\":{\"188\":1,\"220\":1}}],[\"在defaultsoulpluginchain\",{\"1\":{\"185\":1}}],[\"在刚才的回顾中我们已经明白\",{\"1\":{\"185\":1}}],[\"在梳理流程中\",{\"1\":{\"193\":1}}],[\"在梳理请求的相关文章中我们目前只需要重点关注\",{\"1\":{\"185\":1}}],[\"在梳理文章中可以看到核心类是soulplugin\",{\"1\":{\"185\":1}}],[\"在此模式下阈值指的是单位统计时长内异常请求的比例上限\",{\"1\":{\"219\":1}}],[\"在此模式下阈值指的是判定为慢调用的毫秒数\",{\"1\":{\"219\":1}}],[\"在此处添加的容量及速率都为\",{\"1\":{\"198\":1}}],[\"在此处完成初始化\",{\"1\":{\"174\":1}}],[\"在此创建并开始插件链的处理\",{\"1\":{\"174\":1}}],[\"在探究插件链之前\",{\"1\":{\"172\":1}}],[\"在探究插件化设计之前\",{\"1\":{\"167\":1}}],[\"在容器启动阶段\",{\"1\":{\"171\":1}}],[\"在容器中获取所有类型是\",{\"1\":{\"163\":1}}],[\"在通过\",{\"1\":{\"163\":1}}],[\"在网关后台尝试更改\",{\"1\":{\"158\":1}}],[\"在网关中增加鉴权头信息\",{\"0\":{\"146\":1}}],[\"在项目启动后会遍历所有实现\",{\"1\":{\"154\":1}}],[\"在项目中搜索这个接口\",{\"1\":{\"107\":1}}],[\"在自己服务中增加一个对外访问的方法\",{\"1\":{\"145\":1}}],[\"在初始化后会将对象放入缓存中\",{\"1\":{\"121\":1}}],[\"在研究它之前\",{\"1\":{\"118\":1}}],[\"在接口的方法实现上则需要添加\",{\"1\":{\"273\":1}}],[\"在接到后台通信后\",{\"1\":{\"116\":1}}],[\"在接收到后台传来的信息后会通知各个订阅器\",{\"1\":{\"115\":1}}],[\"在配置文件中写上对应的配置即可\",{\"1\":{\"110\":1}}],[\"在最后\",{\"1\":{\"104\":1}}],[\"在最后会经由\",{\"1\":{\"103\":1}}],[\"在后台端会劫持住请求\",{\"1\":{\"103\":1}}],[\"在后台保存或者更新数据之后\",{\"1\":{\"46\":1}}],[\"在阻塞队列中遍历所有被\",{\"1\":{\"99\":1}}],[\"在另一个线程中工作\",{\"1\":{\"90\":1}}],[\"在执行完成\",{\"1\":{\"187\":1}}],[\"在执行完\",{\"1\":{\"85\":1,\"186\":1}}],[\"在缓存中得到服务节点集群\",{\"1\":{\"85\":1}}],[\"在启动时候将接口的名称\",{\"1\":{\"236\":1}}],[\"在启动\",{\"1\":{\"64\":1}}],[\"在soul\",{\"1\":{\"59\":1,\"62\":1}}],[\"在左下角这个地方\",{\"1\":{\"46\":1}}],[\"在保存到数据库之后都有一个\",{\"1\":{\"46\":1}}],[\"在上述代码中可以看出是通过redisratelimiter\",{\"1\":{\"203\":1}}],[\"在上述代码中将限流插件的配置和对应的\",{\"1\":{\"201\":1}}],[\"在上述的主题逻辑中我们没有看到参数在哪里\",{\"1\":{\"189\":1}}],[\"在上述的流程图中并没有细化到具体的方法级别的处理\",{\"1\":{\"188\":1}}],[\"在上文中我们还提到了路由规则的选择loadbalanceutils\",{\"1\":{\"191\":1}}],[\"在上两个模块中分析\",{\"1\":{\"129\":1}}],[\"在上篇分析\",{\"1\":{\"94\":1}}],[\"在上篇的演示中\",{\"1\":{\"46\":1}}],[\"在上一篇中\",{\"1\":{\"46\":1}}],[\"在上图可以看到这里是访问\",{\"1\":{\"46\":1}}],[\"在分析源码之前\",{\"1\":{\"46\":1}}],[\"在你的服务提供者项目引入\",{\"1\":{\"42\":1}}],[\"在你的\",{\"1\":{\"42\":1,\"301\":1}}],[\"在参与者中\",{\"1\":{\"39\":1}}],[\"在参加开源中国年度受欢迎投票\",{\"1\":{\"28\":1}}],[\"在框架启动的时候\",{\"1\":{\"37\":1}}],[\"在我们的压测中\",{\"1\":{\"32\":1}}],[\"在我们测试中表现为\",{\"1\":{\"32\":1}}],[\"在恢复的时候\",{\"1\":{\"31\":1}}],[\"在\",{\"0\":{\"142\":1,\"266\":1},\"1\":{\"29\":1,\"32\":2,\"36\":1,\"57\":1,\"96\":1,\"98\":1,\"112\":1,\"121\":1,\"123\":1,\"128\":1,\"154\":2,\"185\":1,\"186\":5,\"188\":1,\"190\":1,\"193\":1,\"197\":1,\"198\":1,\"208\":3,\"209\":1,\"218\":1,\"220\":1,\"224\":2,\"255\":1,\"273\":2,\"292\":1,\"302\":1,\"303\":1}}],[\"在第\",{\"1\":{\"28\":1,\"104\":1}}],[\"帮忙投下票\",{\"1\":{\"28\":1}}],[\"帮助开发人员快速定位问题\",{\"1\":{\"19\":1}}],[\"搜索标识对应的类对象\",{\"1\":{\"137\":1}}],[\"搜索到这个类实例化的地方\",{\"1\":{\"110\":1}}],[\"搜索\",{\"1\":{\"28\":1}}],[\"php\",{\"1\":{\"296\":1}}],[\"phydeleted\",{\"1\":{\"273\":1}}],[\"pmc\",{\"1\":{\"254\":2,\"258\":1}}],[\"ps\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"195\":1,\"201\":1,\"205\":1}}],[\"p9\",{\"1\":{\"188\":1}}],[\"png\",{\"1\":{\"146\":1,\"232\":1,\"235\":1,\"240\":2,\"245\":1}}],[\"period\",{\"1\":{\"225\":2}}],[\"permitted\",{\"1\":{\"225\":1}}],[\"permittednumberofcallsinhalfopenstate\",{\"1\":{\"224\":1}}],[\"permanent\",{\"1\":{\"213\":1}}],[\"performance\",{\"1\":{\"47\":1}}],[\"perform\",{\"1\":{\"42\":1}}],[\"pending\",{\"1\":{\"121\":4}}],[\"p\",{\"1\":{\"55\":1,\"121\":3}}],[\"pluginzks\",{\"1\":{\"159\":2}}],[\"pluginparent\",{\"1\":{\"159\":3}}],[\"pluginpath\",{\"1\":{\"96\":3,\"154\":2,\"159\":5}}],[\"plugintransfer\",{\"1\":{\"107\":1,\"163\":1}}],[\"pluginmapper\",{\"1\":{\"107\":2}}],[\"plugindo\",{\"1\":{\"107\":6,\"163\":1}}],[\"plugindto\",{\"1\":{\"107\":13,\"163\":4}}],[\"plugindatarefresh\",{\"1\":{\"102\":2}}],[\"plugindatasubscriber\",{\"1\":{\"102\":9,\"115\":6,\"116\":4,\"159\":7,\"160\":1}}],[\"plugindatalist\",{\"1\":{\"96\":2,\"111\":2,\"154\":2}}],[\"plugindatahandler>\",{\"1\":{\"116\":1}}],[\"plugindatahandler\",{\"1\":{\"85\":1,\"115\":1,\"116\":4,\"117\":1,\"185\":1,\"220\":1}}],[\"plugindata\",{\"1\":{\"83\":5,\"96\":1,\"116\":6,\"173\":3,\"178\":4,\"188\":4,\"201\":5}}],[\"plugincontroller\",{\"1\":{\"107\":2}}],[\"pluginlist\",{\"1\":{\"84\":2,\"174\":2,\"185\":1,\"213\":2}}],[\"plugins的插件都是有固定的执行顺序的\",{\"1\":{\"185\":1}}],[\"pluginsubscriber\",{\"1\":{\"115\":2,\"159\":4,\"164\":2}}],[\"pluginserviceimpl\",{\"1\":{\"107\":1}}],[\"pluginservice\",{\"1\":{\"95\":1,\"107\":1,\"154\":1}}],[\"plugins就是\",{\"1\":{\"84\":1}}],[\"plugins\",{\"1\":{\"84\":13,\"171\":1,\"174\":6,\"185\":3,\"213\":2,\"241\":4}}],[\"plugin02\",{\"1\":{\"84\":1}}],[\"pluginnamed\",{\"1\":{\"220\":1}}],[\"pluginname\",{\"1\":{\"83\":11,\"159\":7,\"173\":2,\"178\":3,\"188\":9}}],[\"plugin关系图\",{\"1\":{\"82\":1}}],[\"pluginenum\",{\"1\":{\"78\":5,\"83\":2,\"174\":1,\"185\":5,\"220\":3}}],[\"plugin\",{\"1\":{\"46\":4,\"59\":3,\"62\":18,\"84\":7,\"85\":37,\"95\":2,\"96\":1,\"98\":1,\"102\":4,\"106\":2,\"107\":5,\"108\":2,\"109\":1,\"110\":2,\"111\":2,\"115\":1,\"116\":1,\"117\":4,\"142\":3,\"154\":2,\"155\":1,\"157\":1,\"159\":3,\"162\":5,\"163\":2,\"171\":1,\"174\":4,\"185\":5,\"209\":1,\"213\":1,\"224\":1,\"234\":1,\"241\":3,\"302\":13}}],[\"please\",{\"1\":{\"42\":1,\"55\":1,\"199\":1}}],[\"punycode\",{\"1\":{\"286\":1}}],[\"putmapping\",{\"1\":{\"107\":1}}],[\"putall\",{\"1\":{\"91\":2,\"191\":2}}],[\"putifabsent\",{\"1\":{\"89\":2,\"130\":1,\"135\":1,\"137\":2}}],[\"put\",{\"1\":{\"39\":1,\"80\":3,\"85\":1,\"87\":1,\"89\":1,\"95\":1,\"102\":5,\"103\":1,\"106\":1,\"112\":1,\"115\":5,\"121\":1,\"137\":1,\"145\":3,\"163\":1,\"173\":3,\"178\":3,\"181\":1,\"186\":1,\"189\":3,\"190\":3,\"243\":2}}],[\"publishconfig\",{\"1\":{\"163\":5}}],[\"publishevent\",{\"1\":{\"34\":2,\"38\":2,\"46\":5,\"77\":1,\"78\":2,\"79\":3,\"80\":2,\"107\":1,\"154\":3,\"163\":2}}],[\"publisher\",{\"1\":{\"34\":2}}],[\"publish\",{\"1\":{\"34\":1,\"77\":1,\"79\":1,\"107\":1,\"163\":1}}],[\"public\",{\"1\":{\"34\":5,\"35\":3,\"38\":2,\"39\":6,\"42\":1,\"46\":1,\"75\":1,\"76\":2,\"78\":1,\"80\":3,\"83\":1,\"84\":8,\"87\":1,\"88\":1,\"89\":1,\"90\":2,\"91\":1,\"95\":7,\"96\":4,\"98\":7,\"102\":6,\"103\":1,\"107\":3,\"108\":2,\"109\":4,\"110\":9,\"111\":7,\"112\":6,\"114\":2,\"115\":7,\"116\":7,\"118\":2,\"120\":6,\"121\":8,\"124\":6,\"125\":5,\"127\":2,\"130\":3,\"133\":1,\"137\":2,\"145\":1,\"154\":13,\"159\":5,\"160\":2,\"163\":4,\"164\":6,\"174\":3,\"178\":1,\"179\":1,\"182\":1,\"183\":2,\"185\":2,\"186\":1,\"188\":1,\"190\":1,\"191\":1,\"201\":1,\"203\":1,\"213\":2,\"220\":13,\"225\":1,\"226\":1,\"227\":2,\"236\":1,\"240\":1,\"241\":2,\"243\":1,\"244\":1,\"247\":2,\"248\":2,\"273\":14,\"296\":2}}],[\"poi\",{\"1\":{\"286\":1,\"287\":5,\"288\":2}}],[\"point\",{\"1\":{\"35\":3,\"38\":4}}],[\"pojoutils\",{\"1\":{\"248\":1}}],[\"pojo\",{\"1\":{\"237\":1,\"240\":3}}],[\"pos\",{\"1\":{\"226\":1}}],[\"postgresql\",{\"1\":{\"277\":1,\"278\":1}}],[\"postforentity\",{\"1\":{\"103\":1}}],[\"postmapping\",{\"1\":{\"76\":1,\"98\":1}}],[\"postman\",{\"1\":{\"71\":1}}],[\"post\",{\"1\":{\"68\":1,\"75\":1,\"186\":1}}],[\"polling\",{\"1\":{\"46\":8,\"102\":2,\"103\":2,\"110\":1}}],[\"pom\",{\"0\":{\"142\":1,\"234\":1,\"236\":1},\"1\":{\"46\":1,\"56\":1,\"57\":1,\"84\":1,\"152\":1,\"162\":2,\"171\":1,\"208\":1,\"209\":1,\"230\":2,\"302\":1}}],[\"port没有改\",{\"1\":{\"64\":1}}],[\"port\",{\"1\":{\"32\":1,\"55\":1,\"57\":1,\"162\":1,\"182\":3}}],[\"pad\",{\"1\":{\"287\":1}}],[\"payment\",{\"1\":{\"273\":1}}],[\"passive\",{\"1\":{\"273\":2}}],[\"pass\",{\"1\":{\"181\":2}}],[\"passwd\",{\"1\":{\"125\":1,\"127\":2}}],[\"password=\",{\"1\":{\"301\":1}}],[\"password\",{\"1\":{\"32\":4,\"42\":1,\"45\":2,\"125\":1,\"273\":1,\"301\":1}}],[\"pair<string\",{\"1\":{\"243\":1}}],[\"pair\",{\"0\":{\"149\":1},\"1\":{\"149\":3,\"243\":5}}],[\"pathvariable\",{\"1\":{\"107\":1}}],[\"path\",{\"1\":{\"42\":1,\"45\":1,\"55\":1,\"80\":9,\"85\":2,\"145\":1,\"160\":2,\"162\":2,\"186\":1,\"213\":1,\"232\":3,\"236\":1,\"242\":1}}],[\"parentpath\",{\"1\":{\"159\":1,\"160\":2}}],[\"parent\",{\"1\":{\"154\":2,\"159\":1}}],[\"parser\",{\"1\":{\"280\":1}}],[\"parseint\",{\"1\":{\"180\":1,\"182\":1}}],[\"parseboolean\",{\"1\":{\"180\":1}}],[\"parseurl\",{\"1\":{\"125\":3}}],[\"parse\",{\"1\":{\"121\":1}}],[\"parallelstream\",{\"1\":{\"102\":1}}],[\"parallel\",{\"1\":{\"60\":1}}],[\"paramcheckutils\",{\"1\":{\"243\":1}}],[\"params\",{\"1\":{\"102\":3,\"103\":3,\"149\":1,\"242\":2,\"248\":3}}],[\"paramvalue\",{\"1\":{\"80\":1}}],[\"paramname\",{\"1\":{\"80\":1}}],[\"paramtype\",{\"1\":{\"80\":1}}],[\"paramtypeenum\",{\"1\":{\"78\":1,\"80\":1}}],[\"parametertypes\",{\"1\":{\"232\":1,\"240\":4,\"243\":1}}],[\"parameters\",{\"1\":{\"42\":1,\"149\":2}}],[\"parameter\",{\"1\":{\"42\":2}}],[\"param\",{\"1\":{\"34\":4,\"38\":2,\"39\":3,\"75\":1,\"76\":1,\"80\":2,\"107\":3,\"110\":10,\"112\":8,\"154\":6,\"159\":9,\"163\":1,\"185\":2,\"220\":1,\"225\":1,\"240\":3,\"242\":2}}],[\"participants\",{\"1\":{\"42\":1}}],[\"participant\",{\"1\":{\"38\":7}}],[\"package=\",{\"1\":{\"42\":1}}],[\"package\",{\"1\":{\"34\":1,\"35\":1,\"39\":1,\"42\":1,\"52\":1}}],[\"printstacktrace\",{\"1\":{\"127\":3}}],[\"println\",{\"1\":{\"119\":1,\"120\":5,\"121\":2,\"127\":2,\"145\":1,\"185\":2,\"273\":6}}],[\"privilegedaction<void>\",{\"1\":{\"124\":1}}],[\"private\",{\"1\":{\"34\":2,\"35\":3,\"39\":8,\"42\":15,\"46\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":4,\"84\":2,\"90\":2,\"95\":1,\"98\":1,\"102\":6,\"103\":1,\"109\":2,\"112\":2,\"115\":3,\"116\":2,\"120\":2,\"121\":6,\"124\":2,\"125\":4,\"130\":2,\"132\":3,\"133\":1,\"134\":2,\"135\":2,\"137\":5,\"154\":5,\"159\":6,\"160\":2,\"163\":2,\"164\":1,\"180\":1,\"181\":2,\"182\":2,\"183\":1,\"190\":2,\"220\":1,\"227\":2,\"247\":1,\"273\":1,\"296\":2}}],[\"primary\",{\"1\":{\"107\":1,\"232\":1}}],[\"prometheus\",{\"1\":{\"300\":1}}],[\"proxy\",{\"1\":{\"162\":1}}],[\"proxy=\",{\"1\":{\"42\":1}}],[\"props\",{\"1\":{\"125\":1}}],[\"properties\",{\"1\":{\"125\":4,\"134\":5,\"137\":5,\"164\":4,\"273\":1}}],[\"property>\",{\"1\":{\"32\":6,\"42\":1}}],[\"properly\",{\"1\":{\"55\":1,\"98\":1}}],[\"providers\",{\"1\":{\"121\":2}}],[\"provider\",{\"1\":{\"119\":1,\"121\":3,\"240\":2,\"248\":1}}],[\"protected\",{\"1\":{\"85\":1,\"95\":4,\"98\":1,\"102\":1,\"116\":1,\"164\":1,\"178\":1,\"189\":1,\"203\":1,\"213\":2,\"220\":1,\"227\":1,\"242\":1}}],[\"protobuf\",{\"1\":{\"277\":1}}],[\"protocolutils\",{\"1\":{\"247\":3,\"248\":4}}],[\"protocol\",{\"1\":{\"79\":1}}],[\"protostuff\",{\"1\":{\"32\":1,\"33\":1}}],[\"processing\",{\"1\":{\"128\":1}}],[\"processor\",{\"1\":{\"75\":1}}],[\"proceed\",{\"1\":{\"35\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"35\":2,\"38\":1}}],[\"producertype\",{\"1\":{\"34\":2}}],[\"project\",{\"1\":{\"28\":1,\"84\":1,\"152\":1,\"159\":1,\"162\":1,\"224\":1,\"234\":1}}],[\"press\",{\"1\":{\"225\":1}}],[\"prefix\",{\"1\":{\"45\":1,\"110\":2,\"115\":2,\"121\":3,\"125\":8,\"154\":1,\"164\":2,\"213\":1}}],[\"pre\",{\"1\":{\"32\":1}}],[\"pr\",{\"1\":{\"28\":1,\"45\":1,\"78\":1,\"286\":2,\"287\":14,\"288\":5,\"305\":2}}],[\"pv\",{\"1\":{\"19\":1}}],[\"ok\",{\"1\":{\"304\":1}}],[\"overriding\",{\"1\":{\"301\":1}}],[\"override\",{\"1\":{\"34\":1,\"35\":1,\"39\":1,\"76\":1,\"78\":1,\"80\":1,\"84\":1,\"85\":1,\"90\":1,\"95\":1,\"96\":2,\"98\":4,\"102\":2,\"103\":1,\"107\":1,\"109\":2,\"111\":6,\"116\":5,\"120\":2,\"154\":4,\"160\":2,\"163\":4,\"164\":1,\"213\":1,\"220\":7,\"227\":2,\"241\":2,\"242\":1,\"244\":1,\"247\":1,\"248\":1}}],[\"oc\",{\"1\":{\"164\":3}}],[\"osgi\",{\"1\":{\"170\":1}}],[\"os\",{\"1\":{\"153\":1}}],[\"oschina\",{\"1\":{\"28\":1,\"250\":1}}],[\"other\",{\"1\":{\"110\":1}}],[\"obtainauthdata\",{\"1\":{\"149\":1}}],[\"obtainruledata\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"obtainselectordata\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"obtainplugindata\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"objectutil\",{\"1\":{\"288\":1}}],[\"objectholder\",{\"1\":{\"133\":2,\"137\":6}}],[\"object>\",{\"1\":{\"132\":1,\"135\":1}}],[\"objectprovider<list>\",{\"1\":{\"171\":1}}],[\"objectprovider<list<authdatasubscriber>>\",{\"1\":{\"115\":1,\"159\":1,\"164\":1}}],[\"objectprovider<list<metadatasubscriber>>\",{\"1\":{\"115\":1,\"159\":1,\"164\":1}}],[\"objectprovider<list<soulplugin>>\",{\"1\":{\"84\":1,\"174\":2,\"185\":1,\"213\":1}}],[\"objectprovider<configservice>\",{\"1\":{\"164\":1}}],[\"objectprovider<zkclient>\",{\"1\":{\"159\":1}}],[\"objectprovider<plugindatasubscriber>\",{\"1\":{\"115\":1,\"159\":1,\"164\":1}}],[\"objectprovider<websocketconfig>\",{\"1\":{\"115\":1}}],[\"objectprovider\",{\"1\":{\"84\":1,\"174\":1}}],[\"objects\",{\"1\":{\"38\":1,\"76\":1,\"77\":1,\"79\":1,\"80\":2,\"83\":2,\"91\":1,\"107\":1,\"121\":1,\"173\":1,\"178\":1,\"188\":2,\"189\":2,\"191\":1,\"201\":3,\"213\":2,\"227\":1,\"243\":2,\"244\":1}}],[\"object\",{\"1\":{\"35\":2,\"80\":2,\"91\":2,\"133\":1,\"135\":1,\"137\":2,\"160\":1,\"163\":1,\"189\":2,\"190\":1,\"191\":2,\"203\":1,\"220\":1,\"240\":8,\"242\":2,\"243\":2,\"244\":3,\"247\":4,\"248\":3}}],[\"oldclass\",{\"1\":{\"137\":2}}],[\"oldval\",{\"1\":{\"95\":2}}],[\"old\",{\"1\":{\"46\":5,\"95\":1}}],[\"opt\",{\"1\":{\"286\":1}}],[\"optional<histogrammetricstrackerdelegate>\",{\"1\":{\"174\":1}}],[\"optional\",{\"1\":{\"38\":1,\"39\":3,\"116\":3,\"160\":2,\"190\":2}}],[\"operatorenum\",{\"1\":{\"78\":1,\"80\":2}}],[\"open状态\",{\"1\":{\"224\":1}}],[\"opening\",{\"1\":{\"153\":1}}],[\"openstream\",{\"1\":{\"137\":1}}],[\"open\",{\"1\":{\"46\":1,\"106\":1,\"112\":2,\"225\":2}}],[\"onchange\",{\"1\":{\"164\":1}}],[\"onclose\",{\"1\":{\"112\":2}}],[\"onrulesubscribe\",{\"1\":{\"116\":2,\"160\":1}}],[\"onrulechanged\",{\"1\":{\"46\":1,\"95\":2,\"109\":1,\"110\":1,\"111\":2,\"163\":4}}],[\"onmessage\",{\"1\":{\"112\":2}}],[\"onmetadatachanged\",{\"1\":{\"46\":1,\"95\":2,\"109\":1,\"110\":1,\"111\":2}}],[\"onopen\",{\"1\":{\"112\":3}}],[\"onselectorsubscribe\",{\"1\":{\"116\":2}}],[\"onselectorchanged\",{\"1\":{\"46\":1,\"95\":2,\"109\":1,\"110\":1,\"111\":2}}],[\"onsubscribe\",{\"1\":{\"102\":1,\"116\":5}}],[\"onerrormap\",{\"1\":{\"243\":1}}],[\"onerrorresume\",{\"1\":{\"203\":1,\"220\":1,\"227\":4}}],[\"onerror\",{\"1\":{\"112\":2,\"227\":1}}],[\"one\",{\"1\":{\"102\":1}}],[\"onappauthchanged\",{\"1\":{\"95\":2,\"109\":1,\"110\":1,\"111\":2,\"154\":1}}],[\"onapplicationevent\",{\"1\":{\"95\":1,\"109\":1,\"111\":1,\"154\":2,\"158\":1,\"163\":3}}],[\"onlyif\",{\"1\":{\"190\":1}}],[\"only\",{\"1\":{\"72\":1}}],[\"onpluginchanged\",{\"1\":{\"46\":1,\"95\":5,\"96\":5,\"98\":2,\"109\":1,\"110\":1,\"111\":2}}],[\"on\",{\"1\":{\"46\":1,\"55\":1,\"110\":1,\"112\":5,\"153\":3,\"162\":1,\"232\":1}}],[\"o\",{\"1\":{\"46\":6,\"55\":4,\"59\":3,\"62\":18,\"131\":1,\"135\":3,\"137\":4,\"162\":6,\"225\":9}}],[\"out\",{\"1\":{\"42\":1,\"102\":1,\"119\":1,\"120\":5,\"121\":2,\"127\":2,\"145\":1,\"173\":1,\"178\":1,\"185\":2,\"189\":1,\"190\":1,\"273\":6}}],[\"own\",{\"1\":{\"42\":1}}],[\"ofemptyable\",{\"1\":{\"286\":1}}],[\"ofseconds\",{\"1\":{\"190\":1}}],[\"ofmillis\",{\"1\":{\"90\":1,\"190\":2}}],[\"offset\",{\"1\":{\"88\":3,\"183\":3}}],[\"of\",{\"1\":{\"42\":1,\"102\":2,\"110\":1,\"128\":1,\"145\":2,\"149\":2,\"225\":2,\"227\":3,\"236\":1}}],[\"ofnullable\",{\"1\":{\"38\":1,\"39\":2,\"116\":3,\"160\":2,\"190\":2}}],[\"omitted\",{\"1\":{\"162\":2}}],[\"om\",{\"1\":{\"32\":1}}],[\"oracle\",{\"1\":{\"270\":1,\"277\":1,\"278\":1,\"287\":1}}],[\"or\",{\"1\":{\"96\":1,\"99\":1,\"102\":1,\"107\":1,\"163\":1,\"220\":1,\"248\":4,\"273\":1,\"292\":1}}],[\"order\",{\"1\":{\"71\":2,\"80\":2,\"154\":2,\"247\":1,\"248\":1,\"304\":1}}],[\"orelse\",{\"1\":{\"39\":2,\"190\":2}}],[\"origin=zhzd\",{\"1\":{\"28\":1}}],[\"org\",{\"0\":{\"247\":1},\"1\":{\"18\":1,\"20\":1,\"25\":1,\"34\":3,\"35\":3,\"39\":1,\"47\":1,\"54\":1,\"55\":1,\"104\":1,\"128\":2,\"153\":15,\"154\":6,\"158\":2,\"159\":2,\"160\":2,\"162\":22,\"163\":2,\"164\":2,\"174\":2,\"185\":2,\"254\":1,\"255\":1,\"258\":1,\"266\":1,\"267\":1,\"273\":1,\"295\":1,\"299\":1,\"302\":3}}],[\"wget\",{\"1\":{\"301\":1}}],[\"world\",{\"1\":{\"226\":1,\"236\":1,\"273\":6}}],[\"work\",{\"1\":{\"59\":3,\"62\":18}}],[\"win\",{\"1\":{\"288\":1}}],[\"window\",{\"1\":{\"225\":2}}],[\"will\",{\"1\":{\"103\":1,\"153\":1}}],[\"withoutfallback\",{\"1\":{\"227\":2}}],[\"with\",{\"1\":{\"80\":2,\"98\":1,\"162\":2}}],[\"while\",{\"1\":{\"103\":3,\"121\":1,\"124\":1,\"127\":2,\"137\":1}}],[\"where\",{\"1\":{\"80\":1}}],[\"when\",{\"1\":{\"42\":1,\"110\":4}}],[\"ws\",{\"1\":{\"94\":1,\"301\":1}}],[\"writewith\",{\"1\":{\"91\":1,\"191\":1}}],[\"wrk\",{\"1\":{\"63\":2}}],[\"w520\",{\"1\":{\"64\":1}}],[\"w593\",{\"1\":{\"54\":1}}],[\"w693\",{\"1\":{\"61\":1}}],[\"w684\",{\"1\":{\"58\":1}}],[\"w\",{\"1\":{\"55\":2,\"162\":2}}],[\"w917\",{\"1\":{\"55\":1}}],[\"w1675\",{\"1\":{\"64\":1}}],[\"w1096\",{\"1\":{\"62\":1}}],[\"w1104\",{\"1\":{\"60\":1}}],[\"w1186\",{\"1\":{\"54\":1}}],[\"w1262\",{\"1\":{\"54\":1}}],[\"w1723\",{\"1\":{\"52\":1}}],[\"watermark\",{\"1\":{\"188\":1}}],[\"watch\",{\"1\":{\"160\":1}}],[\"watchmetadata\",{\"1\":{\"159\":1}}],[\"watchappauth\",{\"1\":{\"159\":1}}],[\"watcherplugin\",{\"1\":{\"159\":2}}],[\"watcherall\",{\"1\":{\"159\":3}}],[\"watcherdata\",{\"1\":{\"159\":3,\"162\":1,\"164\":5}}],[\"watcher=org\",{\"1\":{\"153\":1}}],[\"waitintervalfunctioninopenstate\",{\"1\":{\"224\":1}}],[\"wait\",{\"1\":{\"102\":1,\"225\":1}}],[\"wafplugin\",{\"1\":{\"185\":1}}],[\"waf\",{\"1\":{\"83\":2,\"85\":2,\"185\":1,\"300\":1}}],[\"warm\",{\"1\":{\"220\":3}}],[\"warmup\",{\"1\":{\"79\":1}}],[\"warn\",{\"1\":{\"55\":3,\"102\":2,\"103\":1}}],[\"was\",{\"1\":{\"42\":1,\"102\":1,\"110\":4}}],[\"way\",{\"1\":{\"42\":1}}],[\"weightedroundrobin\",{\"1\":{\"89\":13}}],[\"weightedroundrobin>\",{\"1\":{\"89\":2}}],[\"weight\",{\"1\":{\"79\":1,\"88\":3,\"89\":5}}],[\"weigher<string\",{\"1\":{\"39\":1}}],[\"weigher\",{\"1\":{\"39\":2}}],[\"website\",{\"1\":{\"267\":1,\"295\":1}}],[\"websocket<\",{\"1\":{\"301\":1}}],[\"websocketclient\",{\"1\":{\"115\":2}}],[\"websocketcontroller\",{\"1\":{\"111\":1,\"112\":1}}],[\"websocketconfig\",{\"1\":{\"46\":1,\"115\":7}}],[\"websocketcollector\",{\"1\":{\"46\":1,\"96\":1,\"110\":4,\"111\":5,\"112\":2,\"114\":5}}],[\"websocketsyncproperties\",{\"1\":{\"110\":1,\"114\":1}}],[\"websocketsyncdataservice\",{\"1\":{\"55\":1,\"115\":4}}],[\"websocketsyncdataconfiguration\",{\"1\":{\"55\":1,\"115\":2}}],[\"websocketlistener\",{\"1\":{\"110\":2,\"114\":2}}],[\"websocketdatahandler\",{\"1\":{\"115\":6,\"116\":1}}],[\"websocketdata<metadata>\",{\"1\":{\"111\":1}}],[\"websocketdata<appauthdata>\",{\"1\":{\"111\":1}}],[\"websocketdata<ruledata>\",{\"1\":{\"111\":1}}],[\"websocketdata<selectordata>\",{\"1\":{\"111\":1}}],[\"websocketdata<>\",{\"1\":{\"96\":1,\"111\":5}}],[\"websocketdata<plugindata>\",{\"1\":{\"96\":1,\"111\":1}}],[\"websocketdata\",{\"1\":{\"96\":2,\"111\":5,\"115\":6}}],[\"websocketdatachangedlistener\",{\"1\":{\"46\":3,\"96\":1,\"110\":4,\"111\":3}}],[\"websocket\",{\"0\":{\"113\":1,\"114\":1,\"115\":1},\"1\":{\"14\":1,\"46\":14,\"55\":2,\"66\":1,\"79\":1,\"80\":1,\"81\":3,\"94\":3,\"96\":3,\"104\":1,\"110\":8,\"111\":1,\"112\":10,\"114\":6,\"115\":8,\"116\":1,\"117\":2,\"186\":1,\"296\":3,\"298\":1,\"301\":3,\"303\":1}}],[\"webcilentresponseplugin\",{\"1\":{\"193\":1}}],[\"webclientresponse\",{\"1\":{\"191\":1}}],[\"webclientresponseclient\",{\"0\":{\"91\":1},\"1\":{\"91\":1}}],[\"webclientresponseplugin\",{\"0\":{\"191\":1},\"1\":{\"85\":1,\"162\":1,\"185\":2}}],[\"webclient\",{\"1\":{\"90\":4,\"190\":4,\"191\":1}}],[\"webclientplugin\",{\"0\":{\"90\":1,\"190\":1},\"1\":{\"59\":1,\"62\":6,\"85\":1,\"90\":2,\"185\":2,\"193\":1}}],[\"webhandler\",{\"1\":{\"84\":2,\"174\":1,\"213\":3}}],[\"web\",{\"1\":{\"55\":2,\"90\":1,\"162\":2,\"171\":1,\"174\":1,\"294\":1,\"296\":4,\"297\":1,\"304\":3}}],[\"webflux<\",{\"1\":{\"301\":1}}],[\"webfluxresultutils\",{\"0\":{\"245\":1},\"1\":{\"91\":2,\"189\":2,\"190\":1,\"191\":2,\"203\":1,\"220\":1,\"230\":1,\"242\":2,\"244\":2}}],[\"webflux\",{\"1\":{\"11\":1,\"213\":2,\"214\":2}}],[\"www\",{\"1\":{\"28\":1}}],[\"轻量级的开源\",{\"1\":{\"231\":1}}],[\"轻量级的分布式日志标记追踪神器\",{\"1\":{\"19\":1}}],[\"轻松搞定高并发分布式事务\",{\"0\":{\"27\":1}}],[\"husky\",{\"1\":{\"284\":1}}],[\"hutool\",{\"0\":{\"283\":1,\"284\":1},\"1\":{\"283\":1,\"284\":6,\"289\":2}}],[\"huangxiaofeng\",{\"1\":{\"108\":1,\"110\":1}}],[\"hystrix<\",{\"1\":{\"302\":1}}],[\"hystrixplugin\",{\"1\":{\"185\":1}}],[\"hystrix\",{\"1\":{\"85\":2,\"185\":1,\"223\":4,\"264\":1,\"272\":1,\"278\":1,\"300\":1,\"302\":2}}],[\"histogramstarttimer\",{\"1\":{\"174\":1}}],[\"histogramobserveduration\",{\"1\":{\"84\":1,\"174\":1}}],[\"high\",{\"1\":{\"47\":1}}],[\"html\",{\"1\":{\"47\":1,\"55\":1,\"104\":1,\"267\":1,\"273\":1,\"295\":1,\"299\":1,\"301\":1,\"302\":3}}],[\"http长轮询\",{\"1\":{\"296\":1}}],[\"httprequest\",{\"1\":{\"287\":1}}],[\"http协议\",{\"1\":{\"231\":1}}],[\"httptestcontroller\",{\"1\":{\"225\":9}}],[\"httpentity\",{\"1\":{\"103\":4}}],[\"http同步\",{\"1\":{\"102\":1}}],[\"httpconstants\",{\"1\":{\"98\":2}}],[\"httpclient\",{\"1\":{\"59\":1,\"62\":6,\"85\":2,\"102\":1,\"103\":1,\"162\":1,\"185\":2}}],[\"httplongpollingtask\",{\"1\":{\"102\":1,\"103\":3}}],[\"httplongpollinglistener\",{\"1\":{\"95\":1,\"110\":1}}],[\"httplongpollingdatachangedlistener\",{\"0\":{\"98\":1},\"1\":{\"46\":2,\"95\":5,\"98\":5,\"99\":1,\"110\":4}}],[\"httpheaders\",{\"1\":{\"90\":4,\"103\":2,\"186\":1,\"190\":4,\"213\":1}}],[\"httpmethod\",{\"1\":{\"90\":3,\"186\":1,\"190\":2}}],[\"http客户端接入源码解析\",{\"0\":{\"74\":1}}],[\"http代理之divide插件源码解析\",{\"0\":{\"73\":1}}],[\"http代理之divide插件使用\",{\"0\":{\"65\":1}}],[\"http的\",{\"1\":{\"57\":1}}],[\"http项目\",{\"1\":{\"57\":1,\"60\":1}}],[\"httpsyncdataservice\",{\"1\":{\"102\":7,\"103\":2}}],[\"httpsyncproperties\",{\"1\":{\"95\":4,\"110\":4}}],[\"httpservletresponse\",{\"1\":{\"98\":3}}],[\"httpservletrequest\",{\"1\":{\"98\":4}}],[\"httpstatuscodeexception\",{\"1\":{\"220\":1}}],[\"httpstatus\",{\"1\":{\"91\":3,\"191\":3,\"203\":1,\"213\":1,\"220\":6,\"227\":2,\"242\":2}}],[\"https\",{\"0\":{\"41\":1},\"1\":{\"18\":1,\"28\":3,\"45\":1,\"47\":2,\"50\":1,\"104\":1,\"128\":1,\"188\":1,\"243\":1,\"250\":2,\"253\":2,\"255\":1,\"267\":3,\"273\":1,\"275\":2,\"282\":2,\"289\":2,\"295\":3,\"296\":1,\"299\":3,\"301\":2,\"302\":3,\"305\":1}}],[\"http\",{\"0\":{\"56\":1,\"58\":1,\"61\":1,\"93\":1,\"101\":1,\"190\":1,\"191\":1},\"1\":{\"14\":2,\"19\":1,\"46\":5,\"54\":1,\"55\":1,\"57\":6,\"58\":2,\"59\":6,\"61\":2,\"62\":21,\"63\":6,\"64\":1,\"67\":3,\"70\":2,\"71\":3,\"72\":1,\"75\":1,\"79\":2,\"80\":5,\"81\":1,\"83\":1,\"85\":3,\"90\":3,\"94\":3,\"95\":2,\"96\":2,\"98\":2,\"102\":2,\"103\":2,\"104\":2,\"106\":1,\"110\":4,\"114\":1,\"116\":1,\"162\":2,\"173\":5,\"177\":3,\"178\":5,\"182\":3,\"185\":4,\"186\":8,\"189\":4,\"190\":3,\"191\":4,\"193\":1,\"199\":1,\"220\":3,\"224\":1,\"225\":11,\"226\":3,\"232\":1,\"273\":2,\"287\":4,\"288\":2,\"296\":6,\"301\":1,\"303\":1}}],[\"h\",{\"1\":{\"46\":2,\"225\":9}}],[\"home=\",{\"1\":{\"153\":1}}],[\"horse\",{\"1\":{\"120\":1}}],[\"holder\",{\"1\":{\"133\":1,\"137\":2}}],[\"holder<object>\",{\"1\":{\"133\":1,\"137\":1}}],[\"holder<object>>\",{\"1\":{\"132\":1,\"133\":1}}],[\"holder<>\",{\"1\":{\"132\":1,\"134\":1,\"137\":1}}],[\"holder<map<string\",{\"1\":{\"132\":1,\"134\":1}}],[\"hold\",{\"1\":{\"97\":3,\"98\":5,\"99\":5}}],[\"how\",{\"1\":{\"42\":1}}],[\"hostport\",{\"1\":{\"182\":5}}],[\"host\",{\"1\":{\"32\":1,\"45\":1,\"68\":1,\"90\":1,\"153\":1,\"182\":4,\"190\":1}}],[\"hostname\",{\"1\":{\"32\":1}}],[\"health\",{\"1\":{\"301\":1}}],[\"headers\",{\"1\":{\"90\":1,\"91\":1,\"103\":3,\"186\":2,\"190\":1,\"191\":1}}],[\"header\",{\"1\":{\"68\":1,\"292\":1}}],[\"hex\",{\"1\":{\"286\":1}}],[\"helle\",{\"1\":{\"273\":2}}],[\"helloworld\",{\"1\":{\"296\":1}}],[\"hellocontroller\",{\"1\":{\"273\":1}}],[\"helloservice=\",{\"1\":{\"273\":1}}],[\"helloserviceimpl\",{\"1\":{\"273\":2}}],[\"helloservice\",{\"1\":{\"273\":11}}],[\"hello\",{\"1\":{\"226\":1,\"236\":1,\"273\":17}}],[\"helper\",{\"1\":{\"39\":1}}],[\"hession\",{\"1\":{\"33\":1}}],[\"hessian\",{\"1\":{\"32\":1,\"277\":1}}],[\"half\",{\"1\":{\"225\":1}}],[\"happen\",{\"1\":{\"121\":1}}],[\"happylife\",{\"1\":{\"32\":1,\"45\":1}}],[\"have\",{\"1\":{\"98\":1,\"199\":1,\"242\":3}}],[\"havingvalue\",{\"1\":{\"95\":1,\"110\":3,\"114\":1}}],[\"hasmoreelements\",{\"1\":{\"121\":1,\"137\":1}}],[\"has\",{\"1\":{\"102\":1,\"189\":1}}],[\"hashmap\",{\"1\":{\"240\":3}}],[\"hashmap<>\",{\"1\":{\"137\":1}}],[\"hashvalue\",{\"1\":{\"201\":1}}],[\"hashkey\",{\"1\":{\"201\":1}}],[\"hashset<>\",{\"1\":{\"163\":1}}],[\"hashloadbalance\",{\"1\":{\"118\":1}}],[\"hash\",{\"0\":{\"87\":1},\"1\":{\"87\":6,\"183\":1}}],[\"hasnull\",{\"1\":{\"288\":1}}],[\"hasnextservice\",{\"1\":{\"121\":3}}],[\"hasnext\",{\"1\":{\"98\":1,\"121\":4,\"124\":1}}],[\"hasn\",{\"1\":{\"86\":1}}],[\"handleselectorisnull\",{\"1\":{\"188\":3}}],[\"handledatadeleted\",{\"1\":{\"160\":1}}],[\"handledatachange\",{\"1\":{\"160\":1}}],[\"handleadd\",{\"1\":{\"77\":5,\"79\":6}}],[\"handle\",{\"1\":{\"77\":3,\"79\":7,\"80\":9,\"84\":1,\"115\":1,\"116\":1,\"174\":3,\"175\":1,\"189\":1,\"203\":2,\"213\":7,\"227\":1,\"241\":2}}],[\"handleeventswithworkerpool\",{\"1\":{\"34\":2}}],[\"handlerresulthandler\",{\"1\":{\"213\":1}}],[\"handlerresulthandler>\",{\"1\":{\"213\":1}}],[\"handlerrule\",{\"1\":{\"116\":1,\"220\":1}}],[\"handleradapters\",{\"1\":{\"213\":2}}],[\"handleradapter\",{\"1\":{\"213\":2}}],[\"handleradapter>\",{\"1\":{\"213\":1}}],[\"handleru\",{\"1\":{\"188\":1}}],[\"handleruleisnull\",{\"1\":{\"188\":2}}],[\"handlerselector\",{\"1\":{\"116\":1}}],[\"handlerspringmvcrule\",{\"0\":{\"80\":1},\"1\":{\"76\":1,\"80\":1}}],[\"handlerspringmvcselector\",{\"0\":{\"77\":1},\"1\":{\"76\":1,\"77\":1,\"79\":2}}],[\"handlerplugin\",{\"1\":{\"116\":1,\"201\":2}}],[\"handlermappings\",{\"1\":{\"213\":3}}],[\"handlermapping\",{\"1\":{\"213\":2}}],[\"handlermapping>\",{\"1\":{\"213\":1}}],[\"handlermap\",{\"1\":{\"116\":4}}],[\"handleresult\",{\"1\":{\"115\":1,\"213\":1}}],[\"handlerequestbody\",{\"1\":{\"90\":3,\"190\":2}}],[\"handler\",{\"1\":{\"34\":1,\"35\":2,\"78\":2,\"116\":8,\"162\":2,\"213\":3}}],[\"hmiy\",{\"1\":{\"29\":1}}],[\"hmily分布式事务重启月度报告\",{\"0\":{\"276\":1}}],[\"hmily发布2\",{\"0\":{\"263\":1}}],[\"hmilyconsumerdatahandler\",{\"1\":{\"34\":7}}],[\"hmilytcc\",{\"1\":{\"273\":3}}],[\"hmilytransactionexecutor\",{\"1\":{\"35\":14}}],[\"hmilytransactioneventpublisher\",{\"1\":{\"34\":2,\"38\":1}}],[\"hmilytransactioneventtranslator\",{\"1\":{\"34\":2}}],[\"hmilytransactioneventfactory\",{\"1\":{\"34\":2}}],[\"hmilytransactionevent\",{\"1\":{\"34\":1}}],[\"hmilytransactionhandler\",{\"1\":{\"35\":2}}],[\"hmilytransactionbootstrap\",{\"1\":{\"32\":2,\"42\":2}}],[\"hmilythreadfactory\",{\"1\":{\"34\":2,\"35\":2}}],[\"hmily\",{\"0\":{\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"41\":3,\"45\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"277\":1,\"278\":1},\"1\":{\"28\":5,\"29\":4,\"30\":1,\"31\":1,\"32\":11,\"34\":11,\"35\":8,\"36\":1,\"38\":1,\"39\":4,\"42\":9,\"43\":1,\"44\":1,\"45\":5,\"264\":1,\"266\":6,\"267\":3,\"272\":1,\"273\":20,\"274\":1,\"275\":2,\"276\":1,\"277\":11,\"278\":3,\"279\":1,\"280\":1,\"282\":2,\"305\":1}}],[\"博客\",{\"0\":{\"26\":1}}],[\"捐赠项目退出事宜\",{\"0\":{\"258\":1}}],[\"捐赠项目\",{\"1\":{\"25\":1}}],[\"捐赠项目准则\",{\"1\":{\"22\":1}}],[\"如下是参数配置校验\",{\"1\":{\"225\":1}}],[\"如下\",{\"1\":{\"220\":1}}],[\"如下图所示该配置表示的是\",{\"1\":{\"220\":1}}],[\"如下图的\",{\"1\":{\"163\":1}}],[\"如下图\",{\"1\":{\"162\":1,\"201\":1,\"224\":1}}],[\"如装配\",{\"1\":{\"174\":1}}],[\"如刷新\",{\"1\":{\"116\":1}}],[\"如\",{\"1\":{\"115\":2,\"116\":1,\"240\":2,\"284\":1}}],[\"如上图配置表示的意思是\",{\"1\":{\"219\":1}}],[\"如上图\",{\"1\":{\"70\":1,\"278\":1}}],[\"如果贵公司有使用到\",{\"1\":{\"299\":1}}],[\"如果贵公司是\",{\"1\":{\"297\":1,\"304\":1}}],[\"如果被大流量攻击\",{\"1\":{\"297\":1,\"304\":1}}],[\"如果一个接口被攻击\",{\"1\":{\"297\":1,\"304\":1}}],[\"如果一个公司要做开放平台或者入口网关\",{\"1\":{\"297\":1,\"304\":1}}],[\"如果一个配置类只配置\",{\"1\":{\"154\":1}}],[\"如果我想使用限流功能呢\",{\"1\":{\"302\":1}}],[\"如果我没猜错的话\",{\"1\":{\"296\":1,\"304\":1}}],[\"如果我们需要转发到网关自身的\",{\"1\":{\"213\":1}}],[\"如果您之前使用的\",{\"0\":{\"294\":1}}],[\"如果server\",{\"1\":{\"273\":3}}],[\"如果申请退出的项目是\",{\"1\":{\"258\":1}}],[\"如果捐赠项目作者加入\",{\"1\":{\"258\":1}}],[\"如果generic=true\",{\"1\":{\"248\":1}}],[\"如果泛化方式为bean\",{\"1\":{\"247\":1}}],[\"如果泛化为nativejava\",{\"1\":{\"247\":1}}],[\"如果小于默认值\",{\"1\":{\"227\":1}}],[\"如果开启了流控\",{\"1\":{\"220\":2}}],[\"如果请求预计等待时间超过\",{\"1\":{\"220\":1}}],[\"如果请求都正常则变为正常状态\",{\"1\":{\"219\":1}}],[\"如果流控类型是\",{\"1\":{\"220\":1}}],[\"如果还不正常则继续熔断\",{\"1\":{\"219\":1}}],[\"如果还是异常则继续熔断\",{\"1\":{\"218\":1}}],[\"如果还是有点看不明白监听和之前的\",{\"1\":{\"46\":1}}],[\"如果此服务在\",{\"1\":{\"219\":1}}],[\"如果该请求的预期通过时间小于规则预设的\",{\"1\":{\"217\":1}}],[\"如果当前请求距离上个通过的请求通过的时间间隔不小于预设值\",{\"1\":{\"217\":1}}],[\"如果从\",{\"1\":{\"217\":1}}],[\"如果默认什么都不配置\",{\"1\":{\"213\":1}}],[\"如果网关是集群\",{\"1\":{\"220\":1}}],[\"如果网关只代理\",{\"1\":{\"162\":1}}],[\"如果网关去\",{\"1\":{\"103\":1}}],[\"如果需要按照一定的顺序去执行\",{\"1\":{\"154\":1}}],[\"如果需要用到某个插件\",{\"1\":{\"84\":1}}],[\"如果都校验都通过就完成认证\",{\"1\":{\"149\":1}}],[\"如果可用获取在\",{\"1\":{\"149\":1}}],[\"如果命中它则直接可以得到实现类的对象\",{\"1\":{\"133\":1}}],[\"如果没有评估好容量\",{\"1\":{\"216\":1}}],[\"如果没有命中则调用\",{\"1\":{\"137\":1}}],[\"如果没有则新建\",{\"1\":{\"130\":1}}],[\"如果没捞到数据\",{\"1\":{\"80\":1}}],[\"如果使用\",{\"1\":{\"129\":1}}],[\"如果判断为否则返回\",{\"1\":{\"126\":1}}],[\"如果代码中调用到\",{\"1\":{\"124\":1}}],[\"如果是我猜测它是在启动时加载到缓存了\",{\"1\":{\"120\":1}}],[\"如果是手动点同步数据时\",{\"1\":{\"46\":1}}],[\"如果对第\",{\"1\":{\"108\":1}}],[\"如果后台出现问题不断的通知数据变动\",{\"1\":{\"103\":1}}],[\"如果后续再分析的话\",{\"1\":{\"46\":1}}],[\"如果拉取的数据与缓存比对后\",{\"1\":{\"103\":1}}],[\"如果返回值中有变化的类型\",{\"1\":{\"103\":1}}],[\"如果变动则结束\",{\"1\":{\"102\":1}}],[\"如果有运营人员在操作其他模块\",{\"1\":{\"296\":1}}],[\"如果有误则返回body错误信息\",{\"1\":{\"242\":1}}],[\"如果有误直接返回\",{\"1\":{\"242\":1}}],[\"如果有重载方法\",{\"1\":{\"240\":1}}],[\"如果有修改的需求则需要自行调整源码\",{\"1\":{\"220\":1}}],[\"如果有更新就直接返回\",{\"1\":{\"97\":1}}],[\"如果有兴趣的朋友\",{\"1\":{\"45\":1}}],[\"如果不正确就抛出\",{\"1\":{\"149\":1}}],[\"如果不想使用\",{\"1\":{\"110\":1}}],[\"如果不重写它的缓存更新\",{\"1\":{\"95\":1}}],[\"如果不是泛化调用\",{\"1\":{\"248\":1}}],[\"如果不是\",{\"1\":{\"120\":1}}],[\"如果不是同一个节点\",{\"1\":{\"79\":1}}],[\"如果不是删除的话\",{\"1\":{\"46\":1}}],[\"如果分数\",{\"1\":{\"88\":1}}],[\"如果权重相同或权重为0则均等随机\",{\"1\":{\"88\":1}}],[\"如果权重不相同且权重大于0则按总权重数随机\",{\"1\":{\"88\":1}}],[\"如果这里你给注释了或者根本不存在\",{\"1\":{\"84\":1}}],[\"如果在工作中你有使用网关的需求\",{\"1\":{\"81\":1}}],[\"如果捞到了表名已经注册过了\",{\"1\":{\"80\":1}}],[\"如果发现服务节点宕机了\",{\"1\":{\"79\":1}}],[\"如果相同直接返回\",{\"1\":{\"79\":1}}],[\"如果已经至少有1个服务器节点已接入\",{\"1\":{\"79\":1}}],[\"如果\",{\"1\":{\"57\":1,\"83\":1,\"99\":1,\"125\":1,\"248\":2}}],[\"如果插件数据有更改\",{\"1\":{\"46\":1}}],[\"如果关闭就会去重新连接\",{\"1\":{\"46\":1}}],[\"如果你使用的是\",{\"1\":{\"302\":1}}],[\"如果你使用\",{\"1\":{\"296\":1,\"302\":1}}],[\"如果你希望支持下\",{\"1\":{\"284\":1}}],[\"如果你有想法\",{\"1\":{\"275\":1,\"289\":1}}],[\"如果你想将配置文件放在apollo配置中心\",{\"1\":{\"273\":1}}],[\"如果你想将配置文件放在nacos配置中心\",{\"1\":{\"273\":1}}],[\"如果你感兴趣\",{\"1\":{\"45\":1}}],[\"如果你是\",{\"1\":{\"45\":3,\"304\":1}}],[\"如果你采用\",{\"1\":{\"32\":3}}],[\"如果超时了抛出超时异常\",{\"1\":{\"227\":1}}],[\"如果超时了\",{\"1\":{\"30\":1}}],[\"如果想成为\",{\"1\":{\"24\":1}}],[\"如何不停机发布的问题\",{\"1\":{\"304\":1}}],[\"如何判断服务是否恢复正常了\",{\"1\":{\"218\":1}}],[\"如何做呢\",{\"1\":{\"213\":1}}],[\"如何处理\",{\"1\":{\"213\":1}}],[\"如何保证在页面修改\",{\"0\":{\"201\":1}}],[\"如何发起的请求调用\",{\"1\":{\"190\":1}}],[\"如何加载这些插件\",{\"1\":{\"170\":1}}],[\"如何同步网关数据\",{\"0\":{\"163\":1,\"164\":1}}],[\"如何感知网关数据变化的\",{\"0\":{\"159\":1},\"1\":{\"157\":1}}],[\"如何获取\",{\"0\":{\"159\":1},\"1\":{\"157\":1}}],[\"如何区分出\",{\"1\":{\"127\":1}}],[\"如何实现\",{\"1\":{\"122\":1}}],[\"如何实现以及性能情况也可以得到解答\",{\"1\":{\"122\":1}}],[\"如何使用\",{\"0\":{\"41\":1}}],[\"如何打开社交面\",{\"1\":{\"11\":1}}],[\"如何增强实现\",{\"1\":{\"11\":1}}],[\"支持黑白名单\",{\"1\":{\"300\":1}}],[\"支持接入\",{\"1\":{\"300\":1}}],[\"支持用户快速的进行插件的自定义开发\",{\"1\":{\"296\":1}}],[\"支持正则表达式的匹配\",{\"1\":{\"293\":1}}],[\"支持返回\",{\"1\":{\"286\":1}}],[\"支持所有的配置中心\",{\"1\":{\"280\":1}}],[\"支持多种事务模式以及混合使用\",{\"1\":{\"277\":1}}],[\"支持本地与注册中心模式\",{\"1\":{\"273\":1}}],[\"支持的\",{\"1\":{\"273\":1}}],[\"支持的多实例自动注入能力\",{\"1\":{\"171\":1}}],[\"支持同步与异步\",{\"1\":{\"272\":1}}],[\"支持模块\",{\"1\":{\"271\":2}}],[\"支持各种主流的配置中心\",{\"1\":{\"271\":1}}],[\"支持分布式场景下\",{\"1\":{\"270\":1}}],[\"支持内嵌事务的依赖传递\",{\"1\":{\"33\":1}}],[\"支持集群部署的问题\",{\"0\":{\"31\":1}}],[\"支持\",{\"0\":{\"24\":1},\"1\":{\"32\":1,\"68\":1,\"270\":3,\"277\":3,\"282\":1,\"286\":1,\"287\":1,\"288\":1,\"300\":3,\"303\":1}}],[\"赞助\",{\"0\":{\"24\":1}}],[\"运维都省了\",{\"1\":{\"304\":1}}],[\"运维相关工具链等领域项目\",{\"1\":{\"23\":1,\"252\":1}}],[\"运行期流量调度\",{\"1\":{\"231\":1}}],[\"运行启动类\",{\"1\":{\"54\":1}}],[\"运营不做任何干涉\",{\"1\":{\"22\":1}}],[\"测试主机是否可连接\",{\"1\":{\"182\":1}}],[\"测试主机是否可连通\",{\"1\":{\"182\":1}}],[\"测试主机是否可达\",{\"1\":{\"182\":3}}],[\"测试网关路由\",{\"0\":{\"71\":1}}],[\"测试网关转发\",{\"0\":{\"59\":1}}],[\"测试负载均衡\",{\"0\":{\"62\":1,\"72\":1}}],[\"测试\",{\"0\":{\"56\":1,\"58\":1,\"61\":1},\"1\":{\"23\":1,\"182\":1,\"252\":1}}],[\"物联网\",{\"1\":{\"23\":1,\"252\":1}}],[\"i4zsgj\",{\"1\":{\"288\":1}}],[\"i4zbn0\",{\"1\":{\"288\":1}}],[\"i4z7bv\",{\"1\":{\"288\":1}}],[\"i4zkcw\",{\"1\":{\"287\":1}}],[\"i4wpf4\",{\"1\":{\"288\":1}}],[\"i4wuwr\",{\"1\":{\"287\":1,\"288\":1}}],[\"i4wh2x\",{\"1\":{\"287\":1}}],[\"i4w5fs\",{\"1\":{\"287\":1}}],[\"i4w427\",{\"1\":{\"287\":1}}],[\"ignored\",{\"1\":{\"182\":1}}],[\"ignoreexceptionhandler\",{\"1\":{\"34\":2}}],[\"izkdatalistener\",{\"1\":{\"160\":1}}],[\"i0itec\",{\"1\":{\"153\":5,\"154\":1}}],[\"immutablepair<>\",{\"1\":{\"243\":1}}],[\"img\",{\"1\":{\"169\":1}}],[\"image\",{\"1\":{\"116\":1,\"120\":4,\"121\":2,\"124\":1,\"130\":1,\"133\":1,\"146\":1,\"167\":1,\"173\":3,\"174\":3,\"188\":1,\"232\":1,\"235\":1,\"240\":2,\"245\":1}}],[\"implementation\",{\"1\":{\"128\":1}}],[\"implements\",{\"1\":{\"34\":1,\"35\":1,\"84\":2,\"90\":1,\"95\":2,\"96\":2,\"98\":4,\"102\":1,\"109\":1,\"111\":1,\"116\":2,\"120\":2,\"121\":3,\"124\":1,\"125\":1,\"154\":3,\"159\":1,\"220\":2,\"247\":1,\"248\":1,\"273\":2,\"296\":1}}],[\"import\",{\"1\":{\"34\":21,\"35\":13,\"39\":10,\"42\":2,\"110\":2,\"154\":1}}],[\"ioc\",{\"1\":{\"154\":1,\"159\":1}}],[\"ioexception\",{\"1\":{\"112\":2,\"121\":1,\"134\":1,\"137\":1,\"182\":2}}],[\"io\",{\"1\":{\"99\":1,\"103\":1,\"122\":1,\"250\":1,\"301\":2}}],[\"iot\",{\"1\":{\"23\":1,\"252\":1}}],[\"illegalargumentexception\",{\"1\":{\"137\":1}}],[\"illegalaccessexception\",{\"1\":{\"80\":1,\"137\":1}}],[\"illegalstateexception\",{\"1\":{\"95\":1,\"109\":1,\"111\":1,\"137\":1,\"154\":1,\"163\":1,\"203\":1}}],[\"iphost\",{\"1\":{\"296\":1}}],[\"ip=\",{\"1\":{\"98\":1}}],[\"ip\",{\"1\":{\"55\":1,\"68\":1,\"85\":1,\"87\":4,\"88\":1,\"89\":1,\"98\":1,\"118\":3,\"173\":2,\"178\":3,\"179\":1,\"182\":5,\"183\":5,\"189\":2}}],[\"idletimeout\",{\"1\":{\"273\":1}}],[\"id\",{\"0\":{\"204\":1},\"1\":{\"80\":2,\"107\":5,\"140\":2,\"163\":4,\"164\":1,\"179\":2,\"203\":2,\"204\":1,\"205\":1,\"232\":1,\"296\":2}}],[\"idea\",{\"0\":{\"51\":1},\"1\":{\"72\":1}}],[\"id=1\",{\"1\":{\"71\":2}}],[\"id=\",{\"1\":{\"32\":1,\"42\":1,\"239\":1,\"266\":1}}],[\"iterutil\",{\"1\":{\"288\":1}}],[\"iterable<s>\",{\"1\":{\"121\":2}}],[\"iterator<driver>\",{\"1\":{\"124\":1}}],[\"iterator<s>\",{\"1\":{\"121\":1}}],[\"iterator<longpollingclient>\",{\"1\":{\"98\":1}}],[\"iterator\",{\"1\":{\"98\":1,\"124\":1}}],[\"iter\",{\"1\":{\"98\":4}}],[\"item\",{\"1\":{\"89\":2}}],[\"it\",{\"1\":{\"42\":2,\"98\":1}}],[\"ifpresent\",{\"1\":{\"38\":1,\"84\":1,\"116\":3,\"160\":2,\"174\":1}}],[\"if\",{\"1\":{\"35\":1,\"38\":1,\"39\":1,\"42\":2,\"46\":1,\"76\":2,\"77\":3,\"78\":7,\"79\":3,\"80\":4,\"83\":10,\"84\":2,\"87\":1,\"88\":3,\"89\":6,\"91\":2,\"95\":1,\"96\":1,\"98\":1,\"102\":6,\"103\":3,\"107\":3,\"112\":4,\"116\":1,\"121\":8,\"124\":1,\"125\":4,\"130\":1,\"135\":1,\"137\":12,\"149\":3,\"154\":1,\"159\":2,\"160\":1,\"173\":2,\"174\":2,\"178\":2,\"180\":1,\"181\":4,\"182\":2,\"183\":2,\"185\":2,\"186\":1,\"188\":6,\"189\":2,\"190\":2,\"191\":2,\"201\":3,\"203\":3,\"206\":3,\"213\":2,\"220\":6,\"226\":1,\"227\":5,\"232\":1,\"240\":1,\"241\":2,\"242\":2,\"243\":4,\"244\":1,\"247\":5,\"248\":8}}],[\"i++\",{\"1\":{\"34\":2,\"87\":1,\"88\":1,\"120\":1,\"121\":1,\"248\":2}}],[\"i\",{\"1\":{\"34\":6,\"87\":3,\"88\":5,\"120\":2,\"121\":2,\"188\":1,\"226\":2,\"248\":11}}],[\"innodb\",{\"1\":{\"232\":1}}],[\"inetaddress\",{\"1\":{\"182\":1}}],[\"inetsocketaddress\",{\"1\":{\"182\":1}}],[\"incomplete\",{\"1\":{\"149\":2}}],[\"increasecurrent\",{\"1\":{\"89\":1}}],[\"inputstream\",{\"1\":{\"134\":1,\"137\":3}}],[\"influxdb\",{\"1\":{\"300\":1}}],[\"inf\",{\"1\":{\"121\":1,\"130\":1}}],[\"info\",{\"1\":{\"46\":8,\"55\":6,\"59\":3,\"62\":18,\"83\":2,\"84\":1,\"95\":1,\"98\":1,\"102\":5,\"103\":1,\"112\":1,\"115\":1,\"125\":5,\"153\":16,\"159\":1,\"162\":6,\"164\":1,\"174\":1,\"190\":1,\"203\":1,\"213\":1,\"225\":9,\"226\":1}}],[\"inverted\",{\"1\":{\"286\":1}}],[\"inv\",{\"1\":{\"248\":14}}],[\"invocation\",{\"1\":{\"240\":3,\"247\":12,\"248\":1}}],[\"invoker\",{\"1\":{\"247\":3,\"248\":6}}],[\"invoker<\",{\"1\":{\"247\":1,\"248\":1}}],[\"invokehandler\",{\"1\":{\"213\":1}}],[\"invokesuper\",{\"1\":{\"162\":1}}],[\"invoke\",{\"1\":{\"110\":4,\"162\":1,\"247\":4,\"248\":3,\"250\":1}}],[\"invalidate\",{\"1\":{\"39\":1,\"243\":1}}],[\"initref\",{\"1\":{\"243\":1}}],[\"initrequestbuilder\",{\"1\":{\"90\":2}}],[\"initstrategies\",{\"1\":{\"213\":1}}],[\"initiating\",{\"1\":{\"153\":2}}],[\"initializingbean\",{\"1\":{\"95\":2,\"109\":1,\"110\":1,\"154\":2}}],[\"initialized\",{\"1\":{\"203\":2}}],[\"initialize\",{\"1\":{\"55\":1}}],[\"init\",{\"1\":{\"80\":1,\"154\":4}}],[\"inst\",{\"1\":{\"201\":8,\"203\":1}}],[\"instant\",{\"1\":{\"203\":1}}],[\"instantiation\",{\"1\":{\"162\":1}}],[\"instantiationexception\",{\"1\":{\"80\":1,\"137\":1}}],[\"instantiate\",{\"1\":{\"162\":5}}],[\"instantiated\",{\"1\":{\"121\":1}}],[\"instantiates\",{\"1\":{\"75\":1,\"154\":1,\"159\":1}}],[\"instanceof\",{\"1\":{\"190\":1,\"220\":3,\"240\":1,\"243\":1,\"247\":1,\"248\":1}}],[\"instance\",{\"1\":{\"72\":1,\"107\":1,\"163\":1}}],[\"install\",{\"1\":{\"52\":1,\"305\":1}}],[\"insert\",{\"1\":{\"108\":1,\"236\":3,\"296\":1}}],[\"insertzknode\",{\"1\":{\"96\":1}}],[\"inserter\",{\"1\":{\"90\":2}}],[\"insertselective\",{\"1\":{\"46\":3,\"78\":2,\"80\":2,\"107\":1}}],[\"in\",{\"1\":{\"38\":1,\"42\":2,\"55\":1,\"63\":2,\"80\":1,\"154\":1,\"159\":1,\"162\":2,\"225\":2}}],[\"index++\",{\"1\":{\"84\":1,\"102\":1,\"174\":1,\"185\":1,\"241\":1}}],[\"index索引自增\",{\"1\":{\"84\":1}}],[\"indexof\",{\"1\":{\"80\":1}}],[\"index\",{\"1\":{\"34\":2,\"84\":1,\"102\":5,\"174\":1,\"185\":1,\"241\":1,\"267\":1,\"301\":1}}],[\"integer\",{\"1\":{\"180\":1,\"182\":1}}],[\"interval\",{\"1\":{\"225\":1}}],[\"intercept\",{\"1\":{\"162\":1}}],[\"interface=\",{\"1\":{\"239\":1,\"266\":1}}],[\"interface\",{\"1\":{\"95\":1,\"110\":1,\"119\":5,\"120\":1,\"121\":1,\"240\":2,\"273\":3}}],[\"internal\",{\"1\":{\"91\":1,\"191\":1,\"220\":2,\"226\":1,\"227\":1,\"242\":2}}],[\"int\",{\"1\":{\"34\":5,\"35\":1,\"39\":3,\"42\":7,\"46\":2,\"87\":1,\"88\":5,\"89\":2,\"102\":2,\"103\":1,\"120\":1,\"121\":1,\"127\":2,\"182\":1,\"183\":3,\"190\":3,\"220\":1,\"226\":1,\"248\":2}}],[\"isorder\",{\"1\":{\"286\":1}}],[\"isdefaultgenericserialization\",{\"1\":{\"248\":1}}],[\"isdriverallowed\",{\"1\":{\"125\":2}}],[\"isgenericreturnrawresult\",{\"1\":{\"248\":1}}],[\"isgeneric\",{\"1\":{\"247\":1}}],[\"isbeangenericserialization\",{\"1\":{\"247\":1,\"248\":1}}],[\"isblank\",{\"1\":{\"77\":1,\"79\":1,\"107\":1,\"149\":3,\"186\":1,\"213\":1,\"227\":1,\"242\":1,\"248\":1}}],[\"isjavagenericserialization\",{\"1\":{\"247\":1,\"248\":1}}],[\"ismakinggenericcall\",{\"1\":{\"247\":2}}],[\"issues\",{\"1\":{\"243\":1,\"296\":1}}],[\"issue\",{\"0\":{\"278\":1},\"1\":{\"243\":1,\"284\":2,\"286\":1,\"287\":9,\"288\":9}}],[\"isstatus\",{\"1\":{\"181\":1}}],[\"is2xxsuccessful\",{\"1\":{\"190\":1,\"220\":1,\"227\":1}}],[\"isfull\",{\"1\":{\"188\":1}}],[\"isallowed来判断是否获取令牌成功的\",{\"1\":{\"203\":1}}],[\"isallowed\",{\"1\":{\"203\":3}}],[\"isallupstreamsameweight\",{\"1\":{\"183\":1}}],[\"isassignablefrom\",{\"1\":{\"121\":1,\"248\":1}}],[\"isreachable\",{\"1\":{\"182\":1}}],[\"isregistermetadata\",{\"1\":{\"76\":2}}],[\"ishostreachable\",{\"1\":{\"182\":3}}],[\"ishostconnector\",{\"1\":{\"182\":3}}],[\"isempty\",{\"1\":{\"46\":1,\"78\":1,\"80\":1,\"83\":2,\"87\":1,\"95\":1,\"102\":1,\"188\":2,\"189\":1,\"190\":1,\"243\":1,\"248\":1}}],[\"isnotblank\",{\"1\":{\"112\":1,\"137\":3,\"243\":1}}],[\"isnotempty\",{\"1\":{\"39\":1,\"103\":1,\"116\":1,\"159\":1,\"160\":1}}],[\"isnoneblank\",{\"1\":{\"107\":2,\"242\":1}}],[\"isnull\",{\"1\":{\"38\":1,\"76\":1,\"77\":1,\"79\":1,\"80\":2,\"83\":2,\"91\":1,\"188\":2,\"189\":1,\"191\":1,\"201\":2,\"213\":1,\"243\":2,\"244\":1}}],[\"is\",{\"1\":{\"34\":2,\"35\":1,\"38\":1,\"42\":5,\"47\":1,\"55\":1,\"59\":2,\"62\":12,\"78\":1,\"102\":1,\"112\":2,\"137\":1,\"149\":1,\"162\":3,\"190\":2,\"203\":1,\"242\":1,\"248\":2,\"271\":1,\"279\":1}}],[\"iam\",{\"1\":{\"19\":1}}],[\"人工智能\",{\"1\":{\"23\":1,\"252\":1}}],[\"人给管理员\",{\"1\":{\"5\":1}}],[\"分离编码和解码\",{\"1\":{\"286\":3}}],[\"分析插件内部所做工作\",{\"1\":{\"173\":1}}],[\"分析了\",{\"1\":{\"46\":3,\"157\":1}}],[\"分别是只存储一条\",{\"1\":{\"232\":1}}],[\"分别是一个\",{\"1\":{\"224\":1}}],[\"分别是\",{\"1\":{\"219\":2}}],[\"分别针对当监听到\",{\"1\":{\"110\":1}}],[\"分别向\",{\"1\":{\"78\":1,\"80\":1}}],[\"分发\",{\"1\":{\"213\":1}}],[\"分发到各自方法\",{\"1\":{\"116\":1}}],[\"分发到我们的\",{\"1\":{\"99\":1}}],[\"分发的意思\",{\"1\":{\"67\":1}}],[\"分值从\",{\"1\":{\"89\":1}}],[\"分钟搞定一个高可用高性能网关\",{\"0\":{\"301\":1}}],[\"分钟执行一次\",{\"1\":{\"46\":1}}],[\"分钟之后\",{\"1\":{\"46\":1}}],[\"分布式中间件\",{\"1\":{\"23\":1,\"252\":1}}],[\"分布式事务的接口方法\",{\"1\":{\"273\":1}}],[\"分布式事务\",{\"1\":{\"23\":1,\"252\":1,\"278\":1,\"305\":1}}],[\"分享读源码的心得与感悟\",{\"1\":{\"14\":1}}],[\"分享迟到者扣\",{\"1\":{\"5\":1}}],[\"微服务\",{\"1\":{\"273\":1}}],[\"微服务列子\",{\"1\":{\"273\":1}}],[\"微服务框架和工具\",{\"1\":{\"23\":1,\"252\":1}}],[\"微内核架构的本质\",{\"1\":{\"169\":1}}],[\"微内核架构也被称为插件化架构\",{\"1\":{\"169\":1}}],[\"微内核架构\",{\"0\":{\"168\":1}}],[\"微内核架构分享\",{\"1\":{\"14\":1}}],[\"容量除以速率\",{\"1\":{\"206\":1}}],[\"容量\",{\"1\":{\"195\":2,\"206\":1}}],[\"容器中获取\",{\"1\":{\"159\":1}}],[\"容器中没有指定的类\",{\"1\":{\"154\":1}}],[\"容器\",{\"1\":{\"154\":1,\"171\":1}}],[\"容器工具\",{\"1\":{\"23\":1,\"252\":1}}],[\"容错设计\",{\"1\":{\"11\":1}}],[\"优化\",{\"1\":{\"287\":3,\"300\":1}}],[\"优化初始\",{\"1\":{\"287\":1}}],[\"优化的\",{\"0\":{\"130\":1},\"1\":{\"129\":1}}],[\"优雅\",{\"1\":{\"279\":1}}],[\"优先级别\",{\"1\":{\"273\":1}}],[\"优先考虑\",{\"1\":{\"23\":1,\"252\":1}}],[\"优选考虑\",{\"1\":{\"23\":1,\"252\":1}}],[\"官方社群\",{\"1\":{\"259\":1}}],[\"官方人员恢复即可\",{\"1\":{\"258\":1}}],[\"官方人员取消\",{\"1\":{\"23\":1,\"252\":1,\"258\":1}}],[\"官方提供的依赖包\",{\"1\":{\"223\":1}}],[\"官方文档\",{\"1\":{\"47\":1}}],[\"官网文档\",{\"1\":{\"267\":1,\"295\":1}}],[\"官网负责人\",{\"1\":{\"255\":1}}],[\"官网的配置介绍\",{\"1\":{\"224\":1}}],[\"官网这一块没有做详细说明\",{\"1\":{\"162\":1}}],[\"官网这一点没有提到\",{\"1\":{\"162\":1}}],[\"官网介绍的\",{\"1\":{\"160\":1}}],[\"官网\",{\"0\":{\"18\":1},\"1\":{\"301\":1}}],[\"的工作都省了\",{\"1\":{\"296\":1}}],[\"的解析问题\",{\"1\":{\"288\":1}}],[\"的问题\",{\"1\":{\"288\":2}}],[\"的索引相关接口\",{\"1\":{\"287\":1}}],[\"的原则\",{\"1\":{\"275\":1,\"289\":1}}],[\"的时候\",{\"1\":{\"305\":1}}],[\"的时候才会读取到这里的配置信息\",{\"1\":{\"273\":3}}],[\"的时候把\",{\"1\":{\"213\":1}}],[\"的具体使用文档\",{\"0\":{\"267\":1}}],[\"的接口\",{\"1\":{\"266\":1}}],[\"的修护\",{\"1\":{\"264\":1}}],[\"的下一个\",{\"1\":{\"248\":1}}],[\"的反射调用非常像\",{\"1\":{\"240\":1}}],[\"的替换方案\",{\"1\":{\"223\":1}}],[\"的每个网关中\",{\"1\":{\"220\":1}}],[\"的上限或者是线程数量\",{\"1\":{\"220\":1}}],[\"的数\",{\"1\":{\"219\":1}}],[\"的数据处理器并缓存\",{\"1\":{\"116\":1}}],[\"的数据处理类并缓存\",{\"1\":{\"115\":1}}],[\"的请求我们可以选择直接报错\",{\"1\":{\"218\":1}}],[\"的情况\",{\"1\":{\"216\":1}}],[\"的情况下出现如下接口返回结果\",{\"1\":{\"199\":1}}],[\"的设计及工作原理剖析\",{\"1\":{\"214\":1}}],[\"的设计思想\",{\"1\":{\"128\":1}}],[\"的处理核心\",{\"1\":{\"213\":1}}],[\"的处理会异步调用下游服务\",{\"1\":{\"90\":1}}],[\"的重新转发和重定向\",{\"1\":{\"210\":1}}],[\"的目的是为了怕不是整数\",{\"1\":{\"206\":1}}],[\"的理解\",{\"1\":{\"206\":1}}],[\"的令牌桶算法要基于\",{\"1\":{\"197\":1}}],[\"的属性取出来\",{\"1\":{\"190\":1}}],[\"的excute方法中\",{\"1\":{\"190\":1}}],[\"的选项为\",{\"1\":{\"188\":1}}],[\"的参数是通过\",{\"1\":{\"292\":1}}],[\"的参数封装可以查看defaultsoulcontextbuilder\",{\"1\":{\"186\":1}}],[\"的参数\",{\"1\":{\"186\":1}}],[\"的值一致\",{\"1\":{\"186\":1}}],[\"的连通性\",{\"1\":{\"182\":1}}],[\"的连接方式\",{\"1\":{\"125\":1}}],[\"的集合式注入\",{\"1\":{\"174\":1}}],[\"的呢\",{\"1\":{\"174\":1}}],[\"的核心配置类\",{\"1\":{\"174\":1}}],[\"的插件是有先后顺序的\",{\"1\":{\"193\":1}}],[\"的插件的\",{\"1\":{\"186\":1}}],[\"的插件生态极其丰富\",{\"1\":{\"173\":1}}],[\"的插件化实现\",{\"0\":{\"172\":1}}],[\"的插件化设计\",{\"0\":{\"171\":1},\"1\":{\"175\":1}}],[\"的插件使用的\",{\"1\":{\"83\":1}}],[\"的灵魂\",{\"1\":{\"167\":1}}],[\"的同步原理\",{\"1\":{\"160\":1}}],[\"的类进行了一次注入\",{\"1\":{\"154\":1}}],[\"的类对象\",{\"1\":{\"135\":1}}],[\"的支持情况\",{\"0\":{\"265\":1}}],[\"的支持\",{\"0\":{\"142\":1}}],[\"的映射\",{\"1\":{\"134\":1,\"135\":1}}],[\"的直接匹配实现类方式\",{\"1\":{\"131\":1}}],[\"的初始化\",{\"1\":{\"127\":1}}],[\"的路径则返回null\",{\"1\":{\"125\":1}}],[\"的思想\",{\"1\":{\"125\":1}}],[\"的静态方法\",{\"1\":{\"124\":1}}],[\"的静态内部类\",{\"1\":{\"84\":1}}],[\"的实体类并执行\",{\"1\":{\"154\":1}}],[\"的实现类全部初始化\",{\"1\":{\"126\":1}}],[\"的实现方式了\",{\"1\":{\"126\":1}}],[\"的实现方式\",{\"1\":{\"121\":1}}],[\"的实现\",{\"0\":{\"121\":1},\"1\":{\"124\":1,\"129\":2,\"174\":1}}],[\"的实例\",{\"1\":{\"111\":1}}],[\"的加载类\",{\"1\":{\"120\":1}}],[\"的规范\",{\"1\":{\"120\":1}}],[\"的各个实现类\",{\"1\":{\"116\":1}}],[\"的内部类\",{\"1\":{\"114\":1,\"174\":1}}],[\"的默认参数\",{\"1\":{\"219\":1}}],[\"的默认模式\",{\"1\":{\"219\":1}}],[\"的默认同步策略\",{\"1\":{\"110\":1}}],[\"的默认值是\",{\"1\":{\"34\":1}}],[\"的注册方法实现很简单\",{\"1\":{\"124\":1}}],[\"的注册方法\",{\"1\":{\"124\":1}}],[\"的注册接口\",{\"1\":{\"104\":1}}],[\"的注解\",{\"1\":{\"110\":1}}],[\"的订阅器\",{\"1\":{\"102\":1,\"115\":1}}],[\"的检测代码块\",{\"1\":{\"98\":1}}],[\"的产生\",{\"1\":{\"98\":1}}],[\"的例子\",{\"1\":{\"95\":1}}],[\"的不同事件类型的方法\",{\"1\":{\"95\":1}}],[\"的节点进入\",{\"1\":{\"89\":1}}],[\"的作用是匹配\",{\"1\":{\"85\":1}}],[\"的方式完成了\",{\"1\":{\"296\":1}}],[\"的方式\",{\"1\":{\"124\":1}}],[\"的方式开始写入\",{\"1\":{\"84\":1}}],[\"的方法\",{\"1\":{\"83\":1}}],[\"的我们是不是很熟悉\",{\"1\":{\"76\":1}}],[\"的限制\",{\"1\":{\"72\":1}}],[\"的这个进程后\",{\"1\":{\"70\":1}}],[\"的多个服务实例会自动映射到同一个选择器进行负载均衡\",{\"1\":{\"70\":1}}],[\"的后台守护线程\",{\"1\":{\"46\":1}}],[\"的话\",{\"1\":{\"46\":1}}],[\"的依赖\",{\"1\":{\"46\":1,\"277\":1}}],[\"的配置不是本文的重点不再介绍\",{\"1\":{\"218\":1}}],[\"的配置工厂\",{\"1\":{\"114\":1,\"115\":1}}],[\"的配置\",{\"1\":{\"46\":1,\"273\":2}}],[\"的配置先注释掉\",{\"1\":{\"46\":1}}],[\"的守护线程\",{\"1\":{\"46\":1}}],[\"的使用方式我们已经掰开来了解透彻了\",{\"1\":{\"128\":1}}],[\"的使用\",{\"0\":{\"39\":1},\"1\":{\"119\":1}}],[\"的调用栈中会调用\",{\"1\":{\"154\":1}}],[\"的调用可以获取到我们资源中的类名\",{\"1\":{\"121\":1}}],[\"的调用\",{\"1\":{\"38\":1,\"121\":1}}],[\"的并发编程框架\",{\"0\":{\"34\":1}}],[\"的\",{\"0\":{\"142\":1,\"224\":1},\"1\":{\"32\":1,\"46\":1,\"56\":1,\"62\":1,\"84\":1,\"85\":1,\"98\":1,\"104\":1,\"115\":2,\"116\":3,\"124\":1,\"125\":2,\"126\":1,\"130\":1,\"131\":1,\"137\":3,\"154\":2,\"160\":1,\"163\":1,\"171\":2,\"174\":2,\"182\":1,\"185\":3,\"186\":3,\"188\":2,\"201\":2,\"203\":1,\"208\":1,\"219\":1,\"222\":1,\"284\":2,\"305\":2}}],[\"的人来说\",{\"1\":{\"32\":1}}],[\"的做法是\",{\"1\":{\"30\":1}}],[\"的性能问题\",{\"0\":{\"29\":1}}],[\"的项目\",{\"1\":{\"23\":1,\"252\":1}}],[\"的高性能认证鉴权框架\",{\"1\":{\"19\":1}}],[\"gz\",{\"1\":{\"287\":1}}],[\"grpc\",{\"1\":{\"276\":1}}],[\"greenwich\",{\"1\":{\"265\":1}}],[\"groupversion\",{\"1\":{\"232\":1}}],[\"groupparentpath\",{\"1\":{\"160\":1}}],[\"groupenum\",{\"1\":{\"115\":2}}],[\"groupjson\",{\"1\":{\"103\":4}}],[\"groups\",{\"1\":{\"102\":4}}],[\"groupkeys\",{\"1\":{\"102\":1}}],[\"groupkey\",{\"1\":{\"98\":2,\"102\":2}}],[\"group\",{\"1\":{\"95\":3,\"98\":1,\"103\":4,\"108\":1,\"163\":1,\"164\":1,\"247\":1,\"248\":1,\"273\":2}}],[\"group=\",{\"1\":{\"46\":10,\"98\":1}}],[\"groupid>\",{\"1\":{\"42\":2,\"43\":1,\"44\":1,\"45\":3,\"57\":1,\"84\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":2,\"209\":1,\"223\":1,\"224\":1,\"234\":5,\"236\":1,\"273\":3,\"301\":4,\"302\":4}}],[\"gmt\",{\"1\":{\"153\":1}}],[\"gson\",{\"1\":{\"102\":1,\"103\":2}}],[\"gsonutils\",{\"1\":{\"77\":3,\"78\":2,\"79\":3,\"85\":1,\"95\":1,\"96\":1,\"111\":5,\"115\":2,\"163\":2,\"173\":1,\"178\":1,\"189\":1,\"201\":1,\"203\":1,\"213\":1,\"220\":2,\"227\":1}}],[\"genericinvoker\",{\"1\":{\"242\":1,\"243\":1}}],[\"genericimplfilter\",{\"0\":{\"247\":1},\"1\":{\"240\":1,\"246\":1,\"247\":2}}],[\"genericsservice的异步调用\",{\"1\":{\"242\":1}}],[\"genericservice\",{\"1\":{\"240\":2,\"243\":4,\"248\":1}}],[\"genericserivce\",{\"1\":{\"237\":1}}],[\"genericexception\",{\"1\":{\"240\":3,\"243\":2}}],[\"generic\",{\"1\":{\"240\":2,\"247\":10,\"248\":11,\"250\":1}}],[\"genericfilter\",{\"0\":{\"248\":1},\"1\":{\"240\":1,\"246\":1,\"248\":1}}],[\"generic=bean\",{\"1\":{\"248\":1}}],[\"generic=nativejava\",{\"1\":{\"248\":1}}],[\"generic=\",{\"1\":{\"239\":1}}],[\"generateerror\",{\"1\":{\"220\":1}}],[\"generatesign\",{\"1\":{\"149\":1}}],[\"generateresponse\",{\"1\":{\"98\":1}}],[\"getgenericparametertypes\",{\"1\":{\"248\":1}}],[\"getgson\",{\"1\":{\"227\":1}}],[\"getgrouptype\",{\"1\":{\"115\":1}}],[\"getgroup\",{\"1\":{\"95\":1}}],[\"getgroupkey\",{\"1\":{\"95\":2,\"109\":2,\"111\":2,\"154\":2,\"163\":2}}],[\"getwaitintervalfunctioninopenstate\",{\"1\":{\"225\":1}}],[\"getweight\",{\"1\":{\"88\":3,\"89\":2,\"183\":1}}],[\"getdegraderuletimewindow\",{\"1\":{\"220\":1}}],[\"getdegraderulegrade\",{\"1\":{\"220\":1}}],[\"getdegraderulecount\",{\"1\":{\"220\":1}}],[\"getdegraderuleenable\",{\"1\":{\"220\":1}}],[\"getdata\",{\"1\":{\"102\":1,\"115\":1}}],[\"getkeys\",{\"0\":{\"204\":1},\"1\":{\"203\":1,\"205\":1}}],[\"getqueryparams\",{\"1\":{\"186\":1}}],[\"getfailureratethreshold\",{\"1\":{\"225\":1}}],[\"getfallbackuri\",{\"1\":{\"220\":1,\"225\":2,\"227\":1}}],[\"getflowrulecontrolbehavior\",{\"1\":{\"220\":1}}],[\"getflowrulecount\",{\"1\":{\"220\":1}}],[\"getflowrulegrade\",{\"1\":{\"220\":1}}],[\"getflowruleenable\",{\"1\":{\"220\":1}}],[\"getfirst\",{\"1\":{\"186\":1,\"243\":1}}],[\"getforobject\",{\"1\":{\"102\":1}}],[\"geturl\",{\"1\":{\"154\":1,\"159\":1,\"247\":1}}],[\"getupstreamurl\",{\"1\":{\"77\":2,\"79\":2,\"87\":1,\"89\":2,\"181\":1}}],[\"getjoin\",{\"0\":{\"131\":1},\"1\":{\"118\":2,\"129\":1,\"131\":1,\"133\":2,\"137\":1,\"183\":1}}],[\"getelementtype\",{\"1\":{\"288\":1}}],[\"getexceptionmessage\",{\"1\":{\"243\":1}}],[\"getextension\",{\"1\":{\"248\":1}}],[\"getextensionclasses\",{\"1\":{\"135\":1,\"137\":2}}],[\"getextensionloader\",{\"1\":{\"118\":2,\"130\":2,\"183\":1,\"248\":1}}],[\"getepochsecond\",{\"1\":{\"203\":1}}],[\"getenable\",{\"1\":{\"173\":1}}],[\"getenabled\",{\"1\":{\"83\":2,\"149\":1,\"178\":1,\"188\":1,\"201\":1}}],[\"geteventtype\",{\"1\":{\"95\":5,\"109\":5,\"111\":5,\"115\":1,\"154\":1,\"163\":1}}],[\"getmimetype\",{\"1\":{\"288\":1}}],[\"getminimumnumberofcalls\",{\"1\":{\"225\":1}}],[\"getmapping\",{\"1\":{\"145\":1,\"226\":1}}],[\"getmd5\",{\"1\":{\"103\":1}}],[\"getmsg\",{\"1\":{\"91\":2,\"149\":1,\"189\":2,\"190\":1,\"191\":2,\"203\":1,\"220\":3,\"242\":2,\"244\":2}}],[\"getmethods\",{\"1\":{\"288\":1}}],[\"getmethodname\",{\"1\":{\"243\":1,\"247\":2,\"248\":2}}],[\"getmethodvalue\",{\"1\":{\"90\":1,\"190\":1}}],[\"getmessage\",{\"1\":{\"80\":1,\"90\":1,\"102\":1,\"103\":2,\"190\":1,\"203\":1,\"248\":2}}],[\"getbigwriter\",{\"1\":{\"286\":1}}],[\"getburstcapacity\",{\"1\":{\"203\":1}}],[\"getby\",{\"1\":{\"287\":1}}],[\"getbyname\",{\"1\":{\"182\":1}}],[\"getbytes\",{\"1\":{\"145\":1}}],[\"getbasicremote\",{\"1\":{\"112\":2}}],[\"getbody\",{\"1\":{\"90\":1,\"103\":1,\"190\":1}}],[\"getbeansoftype\",{\"1\":{\"109\":1,\"154\":1,\"163\":1}}],[\"getbean\",{\"1\":{\"39\":1,\"112\":1,\"227\":1}}],[\"get请求orpost请求等\",{\"1\":{\"90\":1}}],[\"getleft\",{\"1\":{\"243\":1}}],[\"getlimitforperiod\",{\"1\":{\"225\":1}}],[\"getlimitrefreshperiod\",{\"1\":{\"225\":1}}],[\"getlastmodifytime\",{\"1\":{\"103\":1}}],[\"getlastupdate\",{\"1\":{\"89\":1}}],[\"getloadbalance\",{\"1\":{\"85\":1,\"118\":1,\"173\":1,\"178\":1,\"189\":1}}],[\"getloged\",{\"1\":{\"83\":2}}],[\"getvalue\",{\"1\":{\"87\":1,\"89\":1,\"133\":1,\"137\":4}}],[\"getorder\",{\"1\":{\"84\":1,\"173\":1,\"174\":1,\"185\":1,\"213\":1,\"220\":1}}],[\"getordefault\",{\"1\":{\"80\":1,\"163\":1,\"164\":1}}],[\"getname\",{\"1\":{\"78\":11,\"80\":1,\"83\":4,\"84\":1,\"96\":3,\"116\":1,\"121\":1,\"137\":1,\"174\":3,\"185\":2,\"190\":2,\"213\":1,\"220\":3,\"236\":1,\"243\":1,\"247\":4,\"248\":1}}],[\"getheaders\",{\"1\":{\"90\":1,\"91\":1,\"186\":1,\"190\":1,\"191\":1,\"213\":1,\"243\":1}}],[\"gethandler\",{\"1\":{\"213\":1}}],[\"gethandle\",{\"1\":{\"77\":1,\"79\":1,\"85\":1,\"173\":1,\"178\":1,\"189\":1,\"203\":1,\"213\":1,\"220\":2,\"227\":1}}],[\"gethostaddress\",{\"1\":{\"173\":1,\"178\":1,\"189\":1}}],[\"gethost\",{\"1\":{\"77\":1,\"79\":1}}],[\"getparameter\",{\"1\":{\"247\":1}}],[\"getparametertypes\",{\"1\":{\"242\":1,\"243\":1,\"248\":1}}],[\"getpath\",{\"1\":{\"76\":1,\"80\":1,\"242\":1,\"243\":2}}],[\"getpermittednumberofcallsinhalfopenstate\",{\"1\":{\"225\":1}}],[\"getproperty\",{\"1\":{\"180\":2}}],[\"getpluginname\",{\"1\":{\"116\":2}}],[\"getpluginid\",{\"1\":{\"78\":5}}],[\"getport\",{\"1\":{\"77\":1,\"79\":1}}],[\"getattachments\",{\"1\":{\"248\":1}}],[\"getattachment\",{\"1\":{\"248\":2}}],[\"getattributes\",{\"1\":{\"85\":1,\"173\":3,\"178\":3,\"186\":1,\"189\":3,\"190\":3,\"243\":2,\"248\":1}}],[\"getattribute\",{\"1\":{\"85\":1,\"90\":1,\"91\":1,\"149\":1,\"173\":1,\"189\":1,\"190\":4,\"191\":1,\"220\":1,\"227\":1,\"242\":3,\"244\":1}}],[\"getarguments\",{\"1\":{\"247\":3,\"248\":5}}],[\"getaddress\",{\"1\":{\"173\":1,\"178\":1,\"189\":1}}],[\"getadminurl\",{\"1\":{\"75\":1}}],[\"getappsecret\",{\"1\":{\"149\":1}}],[\"getappkey\",{\"1\":{\"149\":2}}],[\"getappname\",{\"1\":{\"77\":1,\"79\":1}}],[\"getannotationalias\",{\"1\":{\"287\":1}}],[\"getannotation\",{\"1\":{\"137\":2}}],[\"getandincrement\",{\"1\":{\"34\":1}}],[\"getasjsonarray\",{\"1\":{\"103\":1}}],[\"getasjsonobject\",{\"1\":{\"102\":1}}],[\"getalias\",{\"1\":{\"78\":1,\"80\":2}}],[\"getinvoker\",{\"1\":{\"248\":1}}],[\"getinterface\",{\"1\":{\"243\":1,\"248\":3}}],[\"getint\",{\"1\":{\"127\":2}}],[\"getinstance\",{\"1\":{\"38\":1,\"39\":2,\"77\":3,\"78\":2,\"79\":3,\"83\":3,\"84\":1,\"85\":2,\"95\":1,\"96\":1,\"111\":5,\"112\":1,\"115\":2,\"116\":3,\"149\":1,\"163\":2,\"173\":5,\"174\":3,\"178\":5,\"188\":3,\"189\":2,\"201\":1,\"203\":1,\"213\":1,\"220\":2,\"227\":1,\"243\":3}}],[\"getifavailable\",{\"1\":{\"84\":1,\"115\":4,\"159\":4,\"164\":4,\"174\":1,\"213\":1}}],[\"getid\",{\"1\":{\"46\":4,\"77\":1,\"78\":3,\"79\":1,\"80\":3,\"83\":1,\"85\":1,\"107\":1,\"163\":1,\"173\":2,\"178\":2,\"188\":1,\"189\":1,\"203\":1,\"227\":3}}],[\"getslidingwindowtype\",{\"1\":{\"225\":1}}],[\"getslidingwindowsize\",{\"1\":{\"225\":1}}],[\"getsystemresources\",{\"1\":{\"121\":1,\"137\":1}}],[\"getsystemclassloader\",{\"1\":{\"121\":1}}],[\"getservicename\",{\"1\":{\"238\":1}}],[\"getselectorid\",{\"1\":{\"163\":3,\"220\":1}}],[\"getselectorconditions\",{\"1\":{\"46\":1,\"78\":1}}],[\"getsessiontimeout\",{\"1\":{\"154\":1,\"159\":1}}],[\"getsecuritymanager\",{\"1\":{\"121\":1}}],[\"getsource\",{\"1\":{\"95\":5,\"109\":5,\"111\":5,\"154\":1,\"163\":1}}],[\"getstatuscode\",{\"1\":{\"91\":3,\"191\":3,\"220\":1,\"227\":1}}],[\"getsign\",{\"1\":{\"149\":1}}],[\"getsimplename\",{\"1\":{\"80\":1}}],[\"getsize\",{\"1\":{\"39\":2}}],[\"get\",{\"1\":{\"39\":1,\"80\":1,\"83\":1,\"84\":1,\"87\":1,\"88\":3,\"89\":6,\"102\":3,\"103\":1,\"112\":1,\"115\":1,\"116\":3,\"130\":2,\"133\":1,\"135\":2,\"137\":6,\"145\":1,\"160\":1,\"173\":2,\"174\":1,\"178\":2,\"179\":1,\"183\":1,\"185\":1,\"186\":1,\"188\":1,\"201\":3,\"203\":4,\"206\":2,\"241\":1,\"243\":2,\"288\":1}}],[\"gettargetserviceuniquename\",{\"1\":{\"248\":1}}],[\"gettimelimiterconfig\",{\"1\":{\"227\":2}}],[\"gettimeoutduration\",{\"1\":{\"225\":1,\"227\":2}}],[\"gettimeoutdurationrate\",{\"1\":{\"225\":1}}],[\"gettimeout\",{\"1\":{\"173\":1,\"178\":1,\"189\":1}}],[\"gettimestamp\",{\"1\":{\"149\":1}}],[\"gettype\",{\"1\":{\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"gettcctransaction\",{\"1\":{\"39\":1}}],[\"gettransid\",{\"1\":{\"38\":1,\"39\":1}}],[\"getcircuitbreakerconfig\",{\"1\":{\"227\":1}}],[\"getcircuitenable\",{\"1\":{\"225\":1,\"227\":1}}],[\"getcallerclass\",{\"1\":{\"125\":1}}],[\"getclassloader\",{\"1\":{\"137\":1}}],[\"getclass\",{\"1\":{\"84\":1,\"174\":1,\"185\":2,\"213\":1,\"247\":3,\"248\":1}}],[\"getconfigandsignlistener\",{\"1\":{\"164\":3}}],[\"getconfig\",{\"1\":{\"163\":2,\"201\":1}}],[\"getconnectiontimeout\",{\"1\":{\"154\":1,\"159\":1}}],[\"getconnection\",{\"1\":{\"125\":5,\"127\":3}}],[\"getcontextclassloader\",{\"1\":{\"121\":1}}],[\"getcontext\",{\"1\":{\"77\":1,\"79\":1,\"121\":1,\"243\":1,\"248\":1}}],[\"getcookies\",{\"1\":{\"91\":1,\"191\":1}}],[\"getcode\",{\"1\":{\"35\":1,\"38\":4,\"78\":2,\"80\":1,\"83\":1,\"91\":2,\"173\":1,\"178\":1,\"188\":1,\"189\":2,\"190\":1,\"191\":2,\"203\":1,\"220\":4,\"242\":2,\"244\":2}}],[\"getcurrenttransaction\",{\"1\":{\"35\":2,\"38\":1}}],[\"getright\",{\"1\":{\"243\":1}}],[\"getringbuffer\",{\"1\":{\"34\":1}}],[\"getratelimiterconfig\",{\"1\":{\"227\":2}}],[\"getredirecturi\",{\"1\":{\"213\":4}}],[\"getreplenishrate\",{\"1\":{\"203\":1}}],[\"getretry\",{\"1\":{\"173\":1,\"178\":1,\"189\":1}}],[\"getremoteaddress\",{\"1\":{\"173\":1,\"178\":1,\"189\":1}}],[\"getresourcename\",{\"1\":{\"220\":8}}],[\"getresource\",{\"1\":{\"220\":4}}],[\"getresources\",{\"1\":{\"121\":1,\"137\":1}}],[\"getresponse\",{\"1\":{\"91\":1,\"98\":1,\"191\":1,\"203\":1,\"213\":1,\"220\":5,\"227\":2,\"242\":2}}],[\"getrequest\",{\"1\":{\"90\":3,\"98\":2,\"173\":1,\"178\":1,\"186\":1,\"189\":1,\"190\":3,\"213\":1,\"227\":1,\"243\":1}}],[\"getrules\",{\"1\":{\"220\":4}}],[\"getruleconditions\",{\"1\":{\"80\":1}}],[\"getrulename\",{\"1\":{\"80\":2}}],[\"getruntime\",{\"1\":{\"35\":1,\"42\":2}}],[\"getrpctype\",{\"1\":{\"77\":1,\"79\":1,\"80\":1}}],[\"globalinterceptor\",{\"1\":{\"287\":1}}],[\"globalheaders\",{\"1\":{\"287\":1}}],[\"globalplugin\",{\"0\":{\"186\":1},\"1\":{\"185\":3,\"186\":3,\"187\":1,\"193\":1}}],[\"global\",{\"1\":{\"85\":2,\"149\":1,\"185\":1,\"191\":1}}],[\"given\",{\"1\":{\"80\":1}}],[\"git\",{\"1\":{\"50\":2,\"63\":2}}],[\"github\",{\"0\":{\"41\":1},\"1\":{\"28\":2,\"32\":1,\"45\":3,\"47\":2,\"50\":1,\"128\":1,\"223\":1,\"243\":1,\"250\":1,\"253\":2,\"267\":2,\"275\":2,\"282\":3,\"286\":1,\"287\":7,\"288\":6,\"289\":2,\"295\":2,\"296\":1,\"299\":2,\"301\":1,\"305\":1}}],[\"gitee\",{\"1\":{\"23\":2,\"28\":2,\"252\":3,\"253\":2,\"258\":2,\"267\":2,\"275\":2,\"282\":1,\"286\":2,\"287\":15,\"288\":8,\"289\":2,\"295\":2,\"299\":2}}],[\"g\",{\"1\":{\"80\":1}}],[\"gateway<\",{\"1\":{\"301\":1}}],[\"gateway\",{\"1\":{\"47\":1,\"91\":2,\"191\":2,\"223\":1,\"301\":1}}],[\"guava\",{\"1\":{\"39\":4,\"271\":1}}],[\"guavacache\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"google\",{\"1\":{\"39\":5}}],[\"gc\",{\"0\":{\"34\":1}}],[\"gvp\",{\"1\":{\"23\":4,\"252\":4,\"258\":3}}],[\"但阈值是逐步增长的\",{\"1\":{\"220\":1}}],[\"但其实还有一种思路是从并发数来监控流量\",{\"1\":{\"217\":1}}],[\"但并不影响我们阅读代码\",{\"1\":{\"190\":1}}],[\"但仍有几个点需要着重解释一下\",{\"1\":{\"188\":1}}],[\"但后续服务下线如何维护\",{\"1\":{\"179\":1}}],[\"但未初始化插件链\",{\"1\":{\"175\":1}}],[\"但这种令牌生成方式在设定阈值特别大时\",{\"1\":{\"205\":1}}],[\"但这种方式还是很傻\",{\"1\":{\"129\":1}}],[\"但这里就有疑问了\",{\"1\":{\"125\":1}}],[\"但不觉得有多余的代码吗\",{\"1\":{\"127\":1}}],[\"但不影响我们继续分析后面的逻辑\",{\"1\":{\"108\":1}}],[\"但我尝试用\",{\"1\":{\"122\":1}}],[\"但多次使用时\",{\"1\":{\"122\":1}}],[\"但主流程就是这些\",{\"1\":{\"122\":1}}],[\"但实际没有任何变动\",{\"1\":{\"103\":1}}],[\"但第1个服务器节点接入\",{\"1\":{\"79\":1}}],[\"但是他们又不完全等同\",{\"1\":{\"305\":1}}],[\"但是有些用户是\",{\"1\":{\"305\":1}}],[\"但是这样又会带来一个新的问题\",{\"1\":{\"304\":1}}],[\"但是这样会引入一个问题\",{\"1\":{\"296\":1}}],[\"但是使用\",{\"1\":{\"220\":1}}],[\"但是如果不加保护就有出现多米诺效应导致整个服务不可用\",{\"1\":{\"216\":1}}],[\"但是\",{\"1\":{\"206\":1,\"296\":1}}],[\"但是即使这样依然不能纵观全局\",{\"1\":{\"185\":1}}],[\"但是细节却非常多\",{\"1\":{\"118\":1}}],[\"但是对调用方来说\",{\"1\":{\"30\":1}}],[\"但是你的方法是执行成功了的\",{\"1\":{\"30\":1}}],[\"但捐赠项目不得从事违法行为或诋毁\",{\"1\":{\"22\":1}}],[\"但一群人会走的更远\",{\"1\":{\"16\":1}}],[\"宣传思想\",{\"1\":{\"305\":1}}],[\"宣传\",{\"1\":{\"22\":1}}],[\"宣传和项目版本更新日志维护\",{\"1\":{\"21\":1}}],[\"联系我们\",{\"0\":{\"25\":1},\"1\":{\"20\":1}}],[\"链接进行申请\",{\"1\":{\"20\":1}}],[\"可插拔\",{\"1\":{\"305\":1}}],[\"可插拔设计势在必行\",{\"1\":{\"305\":1}}],[\"可插拔的设计实在太重要了\",{\"1\":{\"305\":1}}],[\"可视化\",{\"1\":{\"296\":1}}],[\"可视化的服务治理与运维\",{\"1\":{\"231\":1}}],[\"可惜用户提了一些\",{\"1\":{\"284\":1}}],[\"可靠性得到大大加强\",{\"1\":{\"281\":1}}],[\"可靠消息分布式事务解决方案\",{\"1\":{\"19\":1}}],[\"可观测性\",{\"1\":{\"270\":1}}],[\"可观看http\",{\"1\":{\"203\":1}}],[\"可通过\",{\"1\":{\"237\":1}}],[\"可用服务列表默认每\",{\"1\":{\"184\":1}}],[\"可跳过\",{\"0\":{\"137\":1}}],[\"可考虑优化\",{\"1\":{\"102\":1}}],[\"可重写\",{\"1\":{\"95\":2}}],[\"可以参考\",{\"1\":{\"301\":1}}],[\"可以去\",{\"1\":{\"284\":1}}],[\"可以根据各种条件\",{\"1\":{\"303\":1}}],[\"可以根据自己需要的功能引用相关的模块即可\",{\"1\":{\"223\":1}}],[\"可以根据配置信息\",{\"1\":{\"114\":1}}],[\"可以使用\",{\"1\":{\"207\":1}}],[\"可以理解为针对调用方的方式所针对的不同调用处理\",{\"1\":{\"185\":1}}],[\"可以理解为在请求发起前的前置处理插件\",{\"1\":{\"185\":1}}],[\"可以理解为更细粒度的自定义配置\",{\"1\":{\"69\":1}}],[\"可以保存多对\",{\"1\":{\"149\":1}}],[\"可以说是\",{\"1\":{\"130\":1}}],[\"可以追溯到\",{\"1\":{\"112\":1}}],[\"可以看一下初始化\",{\"1\":{\"213\":1}}],[\"可以看出ratelimiterplugin限流核心在于令牌桶算法的实现\",{\"1\":{\"195\":1}}],[\"可以看出当时发送事件的类型就是\",{\"1\":{\"108\":1}}],[\"可以看到接口中定义了\",{\"1\":{\"110\":1}}],[\"可以看到前台向后台发送了一个\",{\"1\":{\"106\":1}}],[\"可以看到是通过\",{\"1\":{\"84\":1}}],[\"可以看到我启动的这个\",{\"1\":{\"70\":1}}],[\"可以看到\",{\"1\":{\"69\":1,\"85\":1,\"110\":1,\"173\":1,\"174\":1}}],[\"可以看到所有插件都是由两部分组成\",{\"1\":{\"67\":1}}],[\"可以知道\",{\"1\":{\"96\":1}}],[\"可以预见\",{\"1\":{\"89\":1}}],[\"可以继续追溯下它构造器被调用的地方\",{\"1\":{\"84\":1}}],[\"可以得到一些结论\",{\"1\":{\"83\":1}}],[\"可以部署多个服务器节点\",{\"1\":{\"79\":1}}],[\"可以想见\",{\"1\":{\"79\":1}}],[\"可以发现管理控制台\",{\"1\":{\"70\":1}}],[\"可以发现\",{\"1\":{\"63\":1}}],[\"可以实现负载均衡\",{\"1\":{\"62\":1}}],[\"可以实时反应到网关中去\",{\"1\":{\"46\":1}}],[\"可以观察到请求既有转发到\",{\"1\":{\"62\":1}}],[\"可以观察到网关可以将请求正常转发\",{\"1\":{\"59\":1}}],[\"可以让用户直接在\",{\"1\":{\"46\":1}}],[\"可以提供你的优秀牛逼轰轰的\",{\"1\":{\"45\":1}}],[\"可以在页面打开或关闭插件\",{\"1\":{\"104\":1}}],[\"可以在\",{\"1\":{\"45\":1}}],[\"可以配置成\",{\"1\":{\"32\":1}}],[\"可以调大\",{\"1\":{\"32\":2}}],[\"可以点击组织界面\",{\"1\":{\"20\":1}}],[\"可能这里需要调用的微服务越来越多\",{\"1\":{\"296\":1}}],[\"可能这部门内容针对熟悉\",{\"1\":{\"32\":1}}],[\"可能你的\",{\"1\":{\"296\":1}}],[\"可能你的方法用了\",{\"1\":{\"30\":1}}],[\"可能兼容问题\",{\"1\":{\"286\":11}}],[\"可能出现流量突然增加时\",{\"1\":{\"217\":1}}],[\"可能就是突发的非常随机的阻塞\",{\"1\":{\"216\":1}}],[\"可能就是在底层用了反射\",{\"1\":{\"120\":1}}],[\"可能与\",{\"1\":{\"186\":2}}],[\"可能存在不均衡的情况\",{\"1\":{\"183\":1}}],[\"可能存在多台机器需要负载均衡的场景\",{\"1\":{\"79\":1}}],[\"可能会负载到不同的机器上\",{\"1\":{\"39\":1}}],[\"加入或者退出项目等\",{\"1\":{\"259\":1}}],[\"加入组织\",{\"0\":{\"20\":1},\"1\":{\"25\":1}}],[\"加深对该类的印象\",{\"1\":{\"203\":1}}],[\"加载限流插件配置\",{\"1\":{\"201\":1}}],[\"加载路径\",{\"1\":{\"137\":1}}],[\"加载某个接口的实现类时\",{\"1\":{\"136\":1}}],[\"加载资源文件\",{\"1\":{\"121\":1}}],[\"加载了所有插件\",{\"1\":{\"84\":1}}],[\"加载流程以及处理请求分析\",{\"1\":{\"11\":1}}],[\"点\",{\"1\":{\"99\":3}}],[\"点造就了\",{\"0\":{\"40\":1}}],[\"点击\",{\"1\":{\"218\":1}}],[\"点击同步数据\",{\"1\":{\"162\":2}}],[\"点击链接\",{\"1\":{\"28\":1}}],[\"点击查看全部赞助商\",{\"1\":{\"24\":1}}],[\"点击查看全部项目\",{\"1\":{\"19\":1}}],[\"点击查看项目捐赠\",{\"1\":{\"23\":1}}],[\"点作业未提交\",{\"1\":{\"5\":1}}],[\"企业生产级百亿日\",{\"1\":{\"19\":1}}],[\"面向接口代理的高性能\",{\"1\":{\"231\":1}}],[\"面向\",{\"1\":{\"19\":1}}],[\"史上功能最全的\",{\"1\":{\"19\":1}}],[\"一起贡献\",{\"1\":{\"275\":1,\"289\":1}}],[\"一切就交给\",{\"1\":{\"274\":1}}],[\"一切还得从\",{\"1\":{\"179\":1}}],[\"一部分\",{\"1\":{\"273\":1}}],[\"一段时间后如果探测到服务恢复了再将流量发送过去\",{\"1\":{\"218\":1}}],[\"一般是触发熔断后的一段时间内服务处于熔断状态不提供服务\",{\"1\":{\"218\":1}}],[\"一般减缓请求量就会自动修复\",{\"1\":{\"216\":1}}],[\"一般来说\",{\"1\":{\"70\":1}}],[\"一种情况是在比如双\",{\"1\":{\"216\":1}}],[\"一种把\",{\"1\":{\"207\":1}}],[\"一种是有个线程不断生成令牌\",{\"1\":{\"205\":1}}],[\"一种动态替换发现的机制\",{\"1\":{\"119\":1}}],[\"一共获取了两个类型的\",{\"1\":{\"204\":1}}],[\"一共有\",{\"1\":{\"110\":1}}],[\"一样\",{\"1\":{\"174\":1}}],[\"一层缓存\",{\"1\":{\"132\":1}}],[\"一是启动时拉取\",{\"1\":{\"101\":1}}],[\"一是请求路径与选择器和规则的匹配\",{\"1\":{\"83\":1}}],[\"一边遍历一边剔除元素\",{\"1\":{\"98\":1}}],[\"一次增加就远远超越其他节点\",{\"1\":{\"89\":1}}],[\"一直没有被选中的节点\",{\"1\":{\"89\":1}}],[\"一\",{\"0\":{\"66\":1,\"152\":1,\"158\":1,\"167\":1}}],[\"一找果不其然\",{\"1\":{\"46\":1}}],[\"一款简而轻的低侵入式在线构建\",{\"1\":{\"19\":1}}],[\"一个好的开源项目\",{\"1\":{\"305\":1}}],[\"一个基于\",{\"1\":{\"191\":1}}],[\"一个重要的原因是\",{\"1\":{\"122\":1}}],[\"一个\",{\"1\":{\"79\":1,\"224\":2}}],[\"一个接口\",{\"1\":{\"75\":1}}],[\"一个业务下面配置相同\",{\"1\":{\"70\":1}}],[\"一个选择器对应多种规则\",{\"1\":{\"67\":1}}],[\"一个插件有多个选择器\",{\"1\":{\"67\":1}}],[\"一个相关的属性配置\",{\"1\":{\"46\":1}}],[\"一个定时任务线程池\",{\"1\":{\"46\":1}}],[\"一个一个的去请求配置文件配的地址\",{\"1\":{\"46\":1}}],[\"一个注解\",{\"1\":{\"32\":1}}],[\"一个使\",{\"1\":{\"19\":1}}],[\"一个人或许能走的更快\",{\"1\":{\"16\":1}}],[\"专门用于图片合成的工具\",{\"1\":{\"19\":1}}],[\"致力于应用级监控\",{\"1\":{\"19\":1}}],[\"身份管理和身份认证产品\",{\"1\":{\"19\":1}}],[\"框架使用者的尊重\",{\"1\":{\"305\":1}}],[\"框架支持的更改\",{\"1\":{\"291\":1}}],[\"框架自定义\",{\"1\":{\"277\":1}}],[\"框架的支持\",{\"1\":{\"276\":1,\"277\":1,\"282\":1}}],[\"框架的原理与实现\",{\"1\":{\"119\":1}}],[\"框架的原因\",{\"0\":{\"40\":1}}],[\"框架会默认初始化好\",{\"1\":{\"273\":1}}],[\"框架以及\",{\"0\":{\"265\":1}}],[\"框架去引入不同的\",{\"0\":{\"45\":1}}],[\"框架包并没有上传到\",{\"1\":{\"41\":1}}],[\"框架\",{\"1\":{\"19\":2,\"33\":1,\"270\":1}}],[\"高扩展\",{\"1\":{\"305\":1}}],[\"高度可扩展的\",{\"1\":{\"296\":1}}],[\"高度可扩展能力\",{\"1\":{\"231\":1}}],[\"高效和便捷的工具方法\",{\"1\":{\"283\":1}}],[\"高可靠\",{\"1\":{\"276\":1}}],[\"高可靠性\",{\"1\":{\"270\":1}}],[\"高可用可拓展的\",{\"1\":{\"19\":1}}],[\"高于阈值时直接拒接服务\",{\"1\":{\"217\":1}}],[\"高性能\",{\"1\":{\"270\":1,\"271\":1}}],[\"高性能异步分布式事务tcc框架\",{\"0\":{\"33\":1}}],[\"高性能一站式分布式事务解决方案\",{\"1\":{\"19\":1}}],[\"高并发的时候请调大\",{\"1\":{\"32\":1}}],[\"高并发的时候\",{\"1\":{\"32\":1}}],[\"高并发事务处理\",{\"0\":{\"28\":1}}],[\"高层的\",{\"1\":{\"19\":1}}],[\"强一致性分布式事务解决方案\",{\"1\":{\"19\":1}}],[\"项目退出后\",{\"1\":{\"258\":1}}],[\"项目可直接操作\",{\"1\":{\"258\":1}}],[\"项目作者需书面或邮件编写项目退出事由并电邮至\",{\"1\":{\"258\":1}}],[\"项目独立提交与运营\",{\"1\":{\"254\":1}}],[\"项目源码中如果存在绝对路径的引用\",{\"1\":{\"253\":1}}],[\"项目转移后会有以下影响\",{\"1\":{\"253\":1}}],[\"项目的\",{\"1\":{\"208\":1}}],[\"项目的配置信息中\",{\"1\":{\"114\":1,\"115\":1}}],[\"项目进行接口注册时\",{\"1\":{\"188\":1}}],[\"项目为\",{\"1\":{\"130\":1}}],[\"项目举例\",{\"1\":{\"85\":1}}],[\"项目中的\",{\"1\":{\"84\":1}}],[\"项目地址自动注册上去了\",{\"1\":{\"70\":1}}],[\"项目\",{\"0\":{\"306\":1},\"1\":{\"46\":1,\"254\":2,\"258\":1,\"296\":1,\"297\":1,\"301\":1,\"304\":1}}],[\"项目需联系\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目至少在近\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目必须在\",{\"1\":{\"252\":1}}],[\"项目必须得到\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目必须有良好的代码注释和不断完善的使用文档\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目必须是完整的应用解决方案\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目必须是原创且不能是\",{\"1\":{\"23\":1,\"252\":1}}],[\"项目捐赠\",{\"0\":{\"23\":1,\"251\":1}}],[\"项目监控软件\",{\"1\":{\"19\":1}}],[\"项目介绍\",{\"1\":{\"19\":1}}],[\"项目名称\",{\"1\":{\"19\":1}}],[\"关闭\",{\"1\":{\"224\":1}}],[\"关键代码\",{\"1\":{\"137\":1}}],[\"关键就在接下来的两个子模块中\",{\"1\":{\"129\":1}}],[\"关键就在于\",{\"1\":{\"118\":1}}],[\"关键类就是\",{\"1\":{\"124\":1}}],[\"关键步骤\",{\"1\":{\"121\":1}}],[\"关键的第三步\",{\"1\":{\"89\":1}}],[\"关于使用\",{\"0\":{\"293\":1}}],[\"关于限流算法常见的有四种实现令牌桶算法\",{\"1\":{\"195\":1}}],[\"关于什么时候是\",{\"1\":{\"112\":1}}],[\"关于\",{\"0\":{\"30\":1},\"1\":{\"247\":1}}],[\"关于我们\",{\"0\":{\"15\":1}}],[\"关注量大于\",{\"1\":{\"252\":1}}],[\"关注量\",{\"1\":{\"19\":1}}],[\"开放平台\",{\"0\":{\"297\":1},\"1\":{\"304\":1}}],[\"开放准则\",{\"1\":{\"279\":1}}],[\"开关状态支持动态变更\",{\"1\":{\"296\":1}}],[\"开源组织从\",{\"1\":{\"259\":1}}],[\"开源组织负责人或者秘书\",{\"1\":{\"257\":1}}],[\"开源社区公众号\",{\"1\":{\"257\":1}}],[\"开源社区组织对捐赠项目有以下最基本条件要求\",{\"1\":{\"23\":1,\"252\":1}}],[\"开源社区官方网站\",{\"1\":{\"18\":1}}],[\"开\",{\"1\":{\"219\":1}}],[\"开头自身转发\",{\"1\":{\"213\":1}}],[\"开头的转发到网关自身\",{\"1\":{\"207\":1}}],[\"开启熔断组件\",{\"1\":{\"227\":1}}],[\"开启熔断的最小请求数\",{\"1\":{\"224\":1}}],[\"开启熔断配置\",{\"1\":{\"219\":1}}],[\"开启\",{\"1\":{\"224\":1}}],[\"开启或关闭\",{\"1\":{\"114\":1}}],[\"开启了一个\",{\"1\":{\"112\":1}}],[\"开启循环调用轮询方法\",{\"1\":{\"103\":1}}],[\"开启同步阻塞请求\",{\"1\":{\"98\":1}}],[\"开始写开源项目的\",{\"1\":{\"305\":1}}],[\"开始时间怀疑与监控插件和统计指标模块有联用\",{\"1\":{\"186\":1}}],[\"开始支持的\",{\"1\":{\"174\":1}}],[\"开始异步http调用下游服务\",{\"1\":{\"90\":1}}],[\"开始\",{\"0\":{\"120\":1},\"1\":{\"89\":1,\"121\":1}}],[\"开始先打个小小的广告\",{\"1\":{\"28\":1}}],[\"开发人员写了\",{\"1\":{\"297\":1,\"304\":1}}],[\"开发者不需要关心\",{\"1\":{\"274\":1}}],[\"开发\",{\"1\":{\"23\":1,\"252\":1}}],[\"开场介绍梦码分享流程\",{\"1\":{\"14\":1}}],[\"开场介绍近期梦码分享情况\",{\"1\":{\"11\":1}}],[\"是对源码学习中\",{\"1\":{\"305\":1}}],[\"是可插拔的基石\",{\"1\":{\"305\":1}}],[\"是热插拔么\",{\"1\":{\"302\":1}}],[\"是经历过\",{\"1\":{\"299\":1}}],[\"是什么\",{\"0\":{\"284\":1}}],[\"是阿里开源的面向分布式服务架构的流量控制组件\",{\"1\":{\"218\":1}}],[\"是按秒来生成的\",{\"1\":{\"206\":1}}],[\"是枚举实现的单例模式\",{\"1\":{\"201\":1}}],[\"是你允许用户每秒执行多少请求\",{\"1\":{\"195\":1}}],[\"是允许用户在一秒钟内执行的最大请求数\",{\"1\":{\"195\":1}}],[\"是从exchange上下文中获取到的\",{\"1\":{\"189\":1}}],[\"是针对于各个调用方返回结果处理的\",{\"1\":{\"185\":1}}],[\"是将变化封装在插件里面\",{\"1\":{\"169\":1}}],[\"是启动不起来的\",{\"1\":{\"162\":1}}],[\"是没有元数据的\",{\"1\":{\"162\":1}}],[\"是直接触发到检索\",{\"1\":{\"134\":1}}],[\"是依靠三种不同类型的缓存\",{\"1\":{\"132\":1}}],[\"是如何拦截泛化调用\",{\"0\":{\"247\":1}}],[\"是如何使用\",{\"1\":{\"215\":1}}],[\"是如何感知网关数据变化的\",{\"0\":{\"160\":1}}],[\"是如何解决这两个问题的\",{\"1\":{\"129\":1}}],[\"是如何实现插件化设计的呢\",{\"1\":{\"167\":1}}],[\"是如何实现这块的\",{\"1\":{\"124\":1}}],[\"是如何实现的\",{\"1\":{\"98\":1}}],[\"是自己设计的\",{\"1\":{\"128\":1}}],[\"是自定义流量\",{\"1\":{\"68\":1}}],[\"是一款高性能\",{\"1\":{\"231\":1,\"276\":1}}],[\"是一种面向功能进行拆分的可扩展性架构\",{\"1\":{\"169\":1}}],[\"是一种\",{\"1\":{\"126\":1}}],[\"是一个小而全的\",{\"1\":{\"283\":1}}],[\"是一个异步的高性能分布式事务\",{\"0\":{\"40\":1}}],[\"是一个无锁\",{\"0\":{\"34\":1}}],[\"是网关端构建\",{\"1\":{\"115\":1}}],[\"是网关高性能的关键\",{\"1\":{\"66\":1}}],[\"是怎么被调用到的\",{\"1\":{\"98\":1}}],[\"是怎么处理的\",{\"0\":{\"30\":1}}],[\"是好人做到底\",{\"1\":{\"96\":1}}],[\"是观察者模式的一个实现\",{\"1\":{\"78\":1}}],[\"是不是\",{\"1\":{\"112\":1}}],[\"是不是设置个最后更新时间\",{\"1\":{\"97\":1,\"99\":1}}],[\"是不是可以考虑挪出去一次性批量插入\",{\"1\":{\"78\":1,\"80\":1}}],[\"是不是很兴奋\",{\"1\":{\"78\":1}}],[\"是不是看到了熟悉了方法了\",{\"1\":{\"46\":1}}],[\"是指根据你请求的真实host\",{\"1\":{\"68\":1}}],[\"是指根据你请求的真实ip\",{\"1\":{\"68\":1}}],[\"是指根据uri的查询条件来进行筛选流量\",{\"1\":{\"68\":1}}],[\"是指根据请求头里面的字段来筛选流量\",{\"1\":{\"68\":1}}],[\"是指你根据uri的方式来筛选流量\",{\"1\":{\"68\":1}}],[\"是指下面多个条件是按照and\",{\"1\":{\"68\":1}}],[\"是全流量\",{\"1\":{\"68\":1}}],[\"是否\",{\"1\":{\"241\":1}}],[\"是否自动从open状态转换为half\",{\"1\":{\"224\":1}}],[\"是否存在限流配置实例\",{\"1\":{\"201\":1}}],[\"是否为空\",{\"1\":{\"242\":1}}],[\"是否为\",{\"1\":{\"182\":1}}],[\"是否符合其所在\",{\"1\":{\"125\":1}}],[\"是否每次调用\",{\"1\":{\"120\":1}}],[\"是否与选择器匹配\",{\"1\":{\"83\":1}}],[\"是否已经注册过\",{\"1\":{\"77\":1,\"79\":1}}],[\"是否开启熔断\",{\"1\":{\"219\":1,\"224\":1}}],[\"是否开启\",{\"1\":{\"68\":1,\"218\":1}}],[\"是否开启aop切面\",{\"1\":{\"42\":1}}],[\"是否关闭\",{\"1\":{\"46\":1}}],[\"是异步保存日志的\",{\"0\":{\"32\":1}}],[\"是和你的应用\",{\"1\":{\"31\":1}}],[\"是采用\",{\"1\":{\"29\":1}}],[\"是\",{\"1\":{\"18\":1,\"84\":1,\"111\":1,\"119\":1,\"174\":3,\"220\":1,\"223\":1,\"224\":1}}],[\"为泛化调用做好准备\",{\"1\":{\"232\":1}}],[\"为用户提供了好用的流量控制和熔断功能\",{\"1\":{\"220\":1}}],[\"为1\",{\"1\":{\"203\":1}}],[\"为什么\",{\"1\":{\"197\":1}}],[\"为什么这里能确定一个唯一\",{\"1\":{\"125\":1}}],[\"为啥这个\",{\"1\":{\"185\":1}}],[\"为使用相同选择器的服务列表\",{\"1\":{\"179\":2}}],[\"为例\",{\"0\":{\"141\":1},\"1\":{\"173\":1}}],[\"为第三层缓存\",{\"1\":{\"137\":1}}],[\"为\",{\"1\":{\"83\":1,\"179\":2,\"186\":4}}],[\"为标识\",{\"1\":{\"79\":1}}],[\"为你的选择器起一个容易分辨的名字\",{\"1\":{\"68\":1}}],[\"为了不打击他们的积极性\",{\"1\":{\"305\":1}}],[\"为了解决每次大版本升级的可能带来的对老用户的影响\",{\"1\":{\"284\":1}}],[\"为了防止大家再翻回去看\",{\"1\":{\"111\":1}}],[\"为了方便测试\",{\"1\":{\"56\":1}}],[\"为了提高大家的自觉性我们设立了惩罚制度\",{\"1\":{\"5\":1}}],[\"为了提高社区参与者的积极性\",{\"1\":{\"3\":1}}],[\"为往圣继绝学\",{\"1\":{\"16\":1,\"305\":1}}],[\"金泽\",{\"1\":{\"14\":1}}],[\"沈祥俊\",{\"1\":{\"14\":1}}],[\"夏文涛\",{\"1\":{\"14\":1}}],[\"杜宇航\",{\"1\":{\"14\":1}}],[\"葛天野\",{\"1\":{\"14\":1}}],[\"东东\",{\"1\":{\"14\":1}}],[\"rfc3986\",{\"1\":{\"286\":1}}],[\"ribbon\",{\"1\":{\"266\":1}}],[\"ringbuffer<hmilytransactionevent>\",{\"1\":{\"34\":1}}],[\"ringbuffer\",{\"1\":{\"34\":3}}],[\"rps\",{\"1\":{\"225\":3}}],[\"rpcinvocation\",{\"1\":{\"248\":6}}],[\"rpcexception\",{\"1\":{\"247\":1,\"248\":6}}],[\"rpccontext\",{\"1\":{\"243\":1,\"248\":1}}],[\"rpc的扩展信息\",{\"1\":{\"232\":1}}],[\"rpc类型\",{\"1\":{\"232\":1}}],[\"rpctypeenum\",{\"1\":{\"78\":4,\"80\":5}}],[\"rpctype\",{\"1\":{\"78\":5,\"80\":9,\"177\":1,\"186\":7}}],[\"rpc\",{\"0\":{\"30\":1,\"45\":1,\"247\":1,\"265\":1,\"266\":1},\"1\":{\"14\":1,\"19\":1,\"29\":3,\"30\":2,\"32\":1,\"33\":1,\"38\":1,\"39\":1,\"42\":1,\"80\":8,\"186\":1,\"191\":2,\"231\":1,\"232\":2,\"243\":2,\"244\":1,\"270\":4,\"271\":1,\"273\":6,\"274\":1,\"276\":1,\"277\":2,\"278\":1,\"282\":1,\"296\":1}}],[\"rt\",{\"1\":{\"220\":1}}],[\"rs\",{\"1\":{\"127\":6}}],[\"rkey\",{\"1\":{\"89\":3}}],[\"raincat\",{\"1\":{\"305\":1}}],[\"rar\",{\"1\":{\"288\":1}}],[\"ratio\",{\"1\":{\"220\":1}}],[\"rate\",{\"1\":{\"198\":1,\"206\":6,\"220\":2,\"225\":2}}],[\"ratelimiteroperator\",{\"1\":{\"227\":2}}],[\"ratelimiterexecutor\",{\"1\":{\"227\":5}}],[\"ratelimiter<\",{\"1\":{\"224\":1,\"302\":1}}],[\"ratelimiterresponse\",{\"1\":{\"203\":5}}],[\"ratelimiterhandle\",{\"1\":{\"203\":2}}],[\"ratelimiterconfig\",{\"1\":{\"201\":9}}],[\"ratelimiterplugin由于需要对特定规则进行限流\",{\"1\":{\"203\":1}}],[\"ratelimiterplugin\",{\"1\":{\"185\":1}}],[\"ratelimiter\",{\"1\":{\"85\":2,\"185\":1,\"195\":1,\"203\":1,\"223\":1,\"227\":11,\"302\":3}}],[\"randomutils\",{\"1\":{\"226\":1}}],[\"randomloadbalance\",{\"0\":{\"88\":1},\"1\":{\"118\":1,\"183\":2}}],[\"random\",{\"1\":{\"80\":1,\"88\":3,\"133\":1,\"134\":1,\"135\":1,\"183\":7}}],[\"route\",{\"1\":{\"243\":2}}],[\"round\",{\"1\":{\"183\":1}}],[\"roundrobinloadbalance\",{\"0\":{\"89\":1},\"1\":{\"118\":1}}],[\"rollback\",{\"1\":{\"281\":1}}],[\"rollbackfor\",{\"1\":{\"107\":1,\"163\":1}}],[\"role\",{\"1\":{\"185\":1,\"294\":1}}],[\"robin\",{\"1\":{\"183\":1}}],[\"rows\",{\"1\":{\"107\":1,\"163\":1}}],[\"row\",{\"1\":{\"80\":2,\"232\":1,\"236\":1}}],[\"rootpath\",{\"1\":{\"32\":1,\"45\":1}}],[\"root\",{\"1\":{\"32\":1,\"42\":1,\"45\":1,\"213\":1,\"273\":1}}],[\"run执行的内容\",{\"1\":{\"227\":1}}],[\"run调用\",{\"1\":{\"227\":1}}],[\"runnable\",{\"1\":{\"98\":5,\"103\":1}}],[\"running\",{\"1\":{\"55\":1,\"63\":2,\"102\":1,\"103\":1,\"162\":1}}],[\"run\",{\"1\":{\"46\":1,\"60\":1,\"98\":5,\"103\":2,\"120\":7,\"121\":1,\"124\":1,\"154\":3,\"162\":2,\"227\":6}}],[\"runtimeexception\",{\"1\":{\"124\":1}}],[\"runtime\",{\"1\":{\"35\":1,\"42\":2}}],[\"rulelog\",{\"1\":{\"188\":2}}],[\"ruleparentpath\",{\"1\":{\"96\":2}}],[\"rules\",{\"1\":{\"83\":5,\"173\":4,\"178\":4,\"188\":5}}],[\"ruleserviceimpl\",{\"1\":{\"80\":1}}],[\"ruleservice\",{\"1\":{\"80\":1,\"154\":1}}],[\"ruleconditiondo\",{\"1\":{\"80\":1}}],[\"ruleconditiondto\",{\"1\":{\"80\":9}}],[\"ruleconditionmapper\",{\"1\":{\"80\":1}}],[\"ruleconditions\",{\"1\":{\"80\":3}}],[\"ruledatahandler\",{\"1\":{\"115\":1,\"116\":1}}],[\"ruledatalist\",{\"1\":{\"111\":2,\"154\":2}}],[\"ruledatarefresh\",{\"1\":{\"102\":1}}],[\"ruledata\",{\"1\":{\"80\":1,\"83\":1,\"85\":1,\"116\":5,\"160\":4,\"173\":1,\"178\":2,\"188\":1,\"189\":1,\"203\":1,\"213\":1,\"220\":18,\"227\":3,\"242\":1}}],[\"ruledto\",{\"1\":{\"80\":11}}],[\"ruledo\",{\"1\":{\"80\":10}}],[\"rulehandle>\",{\"1\":{\"80\":2}}],[\"rulehandle>>\",{\"1\":{\"80\":1}}],[\"rulehandlefactory\",{\"1\":{\"80\":3}}],[\"rulehandle\",{\"1\":{\"80\":12,\"85\":2,\"118\":1,\"173\":4,\"178\":4,\"189\":4}}],[\"rulename\",{\"1\":{\"80\":2}}],[\"rulemapper\",{\"1\":{\"80\":2}}],[\"rule\",{\"0\":{\"80\":1},\"1\":{\"46\":4,\"80\":12,\"81\":3,\"83\":9,\"85\":2,\"95\":1,\"102\":2,\"108\":2,\"109\":1,\"110\":2,\"111\":2,\"115\":1,\"154\":1,\"155\":1,\"157\":1,\"163\":17,\"164\":1,\"173\":5,\"178\":6,\"188\":7,\"189\":3,\"203\":3,\"211\":1,\"213\":3,\"220\":15,\"227\":8,\"242\":1,\"266\":1}}],[\"r\",{\"1\":{\"34\":2,\"220\":8}}],[\"revert\",{\"1\":{\"280\":1}}],[\"review\",{\"1\":{\"279\":1}}],[\"reject\",{\"1\":{\"220\":1}}],[\"redirecthandle\",{\"1\":{\"213\":8}}],[\"redirect<\",{\"1\":{\"209\":1}}],[\"redirecturl\",{\"1\":{\"207\":2}}],[\"redirect\",{\"1\":{\"207\":1,\"208\":2,\"210\":1,\"213\":3}}],[\"redisratelimiter\",{\"1\":{\"203\":2}}],[\"redistemplate\",{\"1\":{\"201\":1}}],[\"redisserializationcontext\",{\"1\":{\"201\":1}}],[\"redisserializationcontext<string\",{\"1\":{\"201\":1}}],[\"redisserializer<string>\",{\"1\":{\"201\":1}}],[\"redis\",{\"0\":{\"201\":2},\"1\":{\"32\":7,\"33\":1,\"42\":1,\"45\":1,\"197\":3,\"201\":3,\"203\":1,\"204\":1,\"206\":4,\"270\":1,\"277\":1,\"278\":1}}],[\"reduce\",{\"1\":{\"203\":1}}],[\"release<\",{\"1\":{\"301\":2}}],[\"release版本\",{\"0\":{\"263\":1,\"290\":1}}],[\"release\",{\"0\":{\"264\":1,\"291\":1},\"1\":{\"162\":10}}],[\"reload\",{\"1\":{\"121\":2}}],[\"re\",{\"1\":{\"162\":1}}],[\"reflectutil\",{\"1\":{\"288\":1}}],[\"reflectutils\",{\"1\":{\"248\":1}}],[\"reflection\",{\"1\":{\"125\":1}}],[\"referenceconfig<>\",{\"1\":{\"238\":1}}],[\"referenceconfig<genericservice>\",{\"1\":{\"238\":1,\"243\":1}}],[\"reference\",{\"1\":{\"128\":1,\"238\":6,\"239\":1,\"243\":5,\"266\":1}}],[\"refreshed\",{\"1\":{\"206\":4}}],[\"refreshplugindataall\",{\"1\":{\"102\":2}}],[\"refresh\",{\"1\":{\"46\":2,\"102\":8,\"108\":3,\"115\":1,\"116\":1,\"154\":2,\"225\":1}}],[\"refreshlocalcache\",{\"1\":{\"46\":2}}],[\"recipes<\",{\"1\":{\"234\":1}}],[\"receiveconfiginfo\",{\"1\":{\"164\":1}}],[\"received\",{\"1\":{\"110\":4}}],[\"recycleperiod\",{\"1\":{\"89\":1}}],[\"recovery\",{\"1\":{\"42\":1}}],[\"recoverdelaytime\",{\"1\":{\"32\":2,\"42\":3,\"45\":1,\"273\":1}}],[\"reactor\",{\"1\":{\"303\":1}}],[\"reactiveredistemplate<>\",{\"1\":{\"201\":1}}],[\"reactiveredistemplate<string\",{\"1\":{\"201\":1}}],[\"reactiveredistemplate\",{\"1\":{\"201\":4,\"203\":1}}],[\"reactive\",{\"1\":{\"90\":1}}],[\"realize\",{\"1\":{\"248\":1}}],[\"realpath\",{\"1\":{\"160\":3}}],[\"realurl\",{\"1\":{\"85\":2,\"173\":2,\"178\":2,\"186\":1,\"189\":2}}],[\"readobject\",{\"1\":{\"248\":1}}],[\"readdata\",{\"1\":{\"159\":1,\"160\":1}}],[\"read\",{\"1\":{\"63\":2}}],[\"rewrite\",{\"1\":{\"85\":2}}],[\"registryconfig\",{\"1\":{\"238\":1}}],[\"registereddrivers\",{\"1\":{\"124\":2,\"125\":1}}],[\"registerdriver\",{\"1\":{\"124\":4}}],[\"registerrule\",{\"1\":{\"80\":2}}],[\"registerselector\",{\"1\":{\"77\":1,\"78\":2,\"79\":1}}],[\"registerspringmvc\",{\"1\":{\"76\":3}}],[\"register\",{\"0\":{\"76\":1},\"1\":{\"75\":1,\"76\":4,\"78\":3,\"80\":2,\"81\":1,\"104\":1,\"124\":1,\"154\":1,\"159\":1}}],[\"registerparticipant\",{\"1\":{\"38\":1}}],[\"regex\",{\"1\":{\"68\":1}}],[\"requiredargsconstructor\",{\"1\":{\"116\":1}}],[\"requirenonnull\",{\"1\":{\"107\":1,\"121\":1,\"173\":1,\"178\":1,\"189\":1,\"213\":1,\"227\":1}}],[\"requestparam\",{\"1\":{\"226\":1}}],[\"requested\",{\"1\":{\"206\":3}}],[\"requestmapping\",{\"1\":{\"98\":1,\"107\":1,\"273\":2}}],[\"requestbodyspec\",{\"1\":{\"90\":6,\"190\":6}}],[\"requestbody\",{\"1\":{\"76\":1,\"107\":1}}],[\"requests\",{\"1\":{\"63\":4,\"203\":3,\"220\":4,\"225\":1}}],[\"request\",{\"1\":{\"59\":1,\"62\":6,\"90\":3,\"98\":5,\"102\":1,\"103\":1,\"174\":2,\"186\":3,\"190\":1,\"213\":3,\"220\":3,\"227\":3}}],[\"req\",{\"1\":{\"63\":2}}],[\"replenishrate\",{\"1\":{\"203\":2}}],[\"replace\",{\"1\":{\"185\":2,\"287\":1}}],[\"replication\",{\"1\":{\"125\":3}}],[\"repository\",{\"1\":{\"273\":2,\"277\":1}}],[\"repositorysuffix\",{\"1\":{\"42\":1}}],[\"repositorysupportenum\",{\"1\":{\"42\":2}}],[\"repositorysupport\",{\"1\":{\"32\":6,\"42\":3,\"45\":5}}],[\"report\",{\"1\":{\"162\":1}}],[\"represents\",{\"1\":{\"42\":1}}],[\"resilience\",{\"1\":{\"223\":1}}],[\"resilience4jplugn\",{\"1\":{\"227\":2}}],[\"resilience4jplugin\",{\"1\":{\"185\":1,\"227\":3}}],[\"resilience4jregistryfactory\",{\"1\":{\"227\":4}}],[\"resilience4jconf\",{\"1\":{\"227\":11}}],[\"resilience4jbuilder\",{\"1\":{\"227\":3}}],[\"resilience4jhandler\",{\"1\":{\"227\":1}}],[\"resilience4jhandle\",{\"1\":{\"225\":35,\"226\":2,\"227\":7}}],[\"resilience4j处理详解\",{\"1\":{\"224\":1}}],[\"resilience4j<\",{\"1\":{\"223\":1}}],[\"resilience4j\",{\"0\":{\"223\":1,\"224\":1,\"227\":1},\"1\":{\"85\":2,\"185\":1,\"222\":3,\"223\":3,\"224\":2,\"227\":2}}],[\"resilence4j\",{\"1\":{\"223\":1}}],[\"resulthandlers\",{\"1\":{\"213\":2}}],[\"resulthandler\",{\"1\":{\"213\":1}}],[\"results\",{\"1\":{\"203\":3}}],[\"resultset\",{\"1\":{\"127\":2}}],[\"resultflux\",{\"1\":{\"203\":2}}],[\"resultenum\",{\"1\":{\"190\":2,\"243\":1}}],[\"resultlist\",{\"1\":{\"181\":3}}],[\"result\",{\"1\":{\"91\":4,\"102\":3,\"107\":3,\"112\":2,\"115\":2,\"181\":3,\"189\":2,\"190\":3,\"191\":4,\"203\":1,\"213\":2,\"220\":3,\"242\":4,\"243\":3,\"244\":8,\"247\":1,\"248\":3}}],[\"response\",{\"1\":{\"90\":1,\"91\":9,\"98\":5,\"162\":2,\"185\":2,\"190\":3,\"191\":9,\"203\":3,\"213\":4,\"243\":1}}],[\"res\",{\"1\":{\"90\":1,\"190\":3}}],[\"resource目录下\",{\"1\":{\"273\":1}}],[\"resourcename\",{\"1\":{\"220\":2}}],[\"resources\",{\"1\":{\"137\":1,\"152\":2,\"162\":2}}],[\"resource\",{\"1\":{\"42\":1,\"162\":1,\"220\":1}}],[\"restricted\",{\"1\":{\"199\":1}}],[\"restclientexception\",{\"1\":{\"102\":1,\"103\":1}}],[\"restcontroller\",{\"1\":{\"98\":1,\"107\":1,\"273\":1}}],[\"restful风格的匹配\",{\"1\":{\"68\":1}}],[\"rest\",{\"1\":{\"19\":1}}],[\"remote\",{\"1\":{\"38\":1,\"273\":2}}],[\"removeclass\",{\"1\":{\"244\":1}}],[\"removerule\",{\"1\":{\"220\":1}}],[\"removeall\",{\"1\":{\"163\":1}}],[\"removeend\",{\"1\":{\"102\":1}}],[\"removeif\",{\"1\":{\"89\":1}}],[\"removebykey\",{\"1\":{\"39\":1}}],[\"remove\",{\"1\":{\"35\":1,\"39\":1,\"90\":1,\"98\":4,\"112\":2,\"181\":1,\"190\":1}}],[\"ret\",{\"1\":{\"243\":5}}],[\"retries=\",{\"1\":{\"266\":1}}],[\"retrieved\",{\"1\":{\"42\":1}}],[\"retrywhen\",{\"1\":{\"190\":1}}],[\"retrytimes\",{\"1\":{\"59\":1,\"62\":6,\"103\":3,\"190\":6}}],[\"retry\",{\"1\":{\"42\":1,\"80\":1,\"173\":1,\"178\":1,\"189\":1,\"190\":2,\"223\":1}}],[\"retrymax\",{\"1\":{\"32\":3,\"42\":2,\"45\":1,\"190\":1,\"273\":1}}],[\"returnvalue\",{\"1\":{\"35\":3}}],[\"return\",{\"1\":{\"34\":1,\"35\":1,\"38\":3,\"39\":9,\"46\":1,\"76\":3,\"77\":2,\"78\":2,\"79\":2,\"80\":4,\"83\":8,\"84\":7,\"85\":1,\"87\":2,\"88\":2,\"89\":2,\"90\":4,\"91\":4,\"95\":2,\"102\":4,\"107\":6,\"110\":7,\"112\":1,\"114\":1,\"115\":2,\"118\":1,\"121\":8,\"124\":1,\"125\":4,\"130\":2,\"133\":1,\"135\":1,\"137\":4,\"145\":1,\"149\":3,\"154\":7,\"159\":4,\"160\":1,\"163\":2,\"164\":4,\"173\":3,\"174\":6,\"178\":3,\"179\":1,\"181\":1,\"182\":6,\"183\":5,\"185\":5,\"186\":1,\"188\":6,\"189\":3,\"190\":4,\"191\":4,\"203\":6,\"206\":1,\"213\":8,\"220\":9,\"225\":2,\"226\":1,\"227\":9,\"236\":1,\"240\":3,\"241\":5,\"242\":3,\"243\":2,\"244\":3,\"247\":2,\"248\":2,\"273\":1}}],[\"rwby\",{\"1\":{\"11\":1}}],[\"婷\",{\"1\":{\"14\":1}}],[\"伟楷\",{\"1\":{\"11\":1}}],[\"木偶\",{\"1\":{\"11\":1}}],[\"0版本\",{\"1\":{\"281\":1}}],[\"0<\",{\"1\":{\"273\":3,\"301\":2,\"302\":4}}],[\"0x1000b5e22f50002\",{\"1\":{\"153\":1}}],[\"0x1000b5e22f50001\",{\"1\":{\"153\":1}}],[\"09\",{\"1\":{\"136\":1}}],[\"09s\",{\"1\":{\"63\":1}}],[\"08\",{\"1\":{\"119\":1,\"153\":1}}],[\"0477097\",{\"1\":{\"225\":1}}],[\"04\",{\"1\":{\"103\":1}}],[\"03\",{\"1\":{\"103\":1,\"225\":11}}],[\"02\",{\"1\":{\"102\":1,\"250\":1}}],[\"0l\",{\"1\":{\"75\":1,\"98\":1}}],[\"06\",{\"1\":{\"63\":1,\"115\":1,\"162\":1}}],[\"06ms\",{\"1\":{\"63\":1}}],[\"069\",{\"1\":{\"46\":1}}],[\"07\",{\"1\":{\"116\":1}}],[\"077\",{\"1\":{\"46\":2}}],[\"075\",{\"1\":{\"46\":1}}],[\"018\",{\"1\":{\"153\":1}}],[\"01k\",{\"1\":{\"63\":1}}],[\"01mb\",{\"1\":{\"63\":1}}],[\"012\",{\"1\":{\"46\":1,\"153\":2}}],[\"010\",{\"1\":{\"46\":1}}],[\"01\",{\"1\":{\"46\":18,\"55\":10,\"59\":3,\"62\":18,\"80\":2,\"153\":16,\"162\":7}}],[\"0\",{\"0\":{\"263\":1,\"264\":1,\"266\":1,\"283\":1,\"285\":1,\"290\":1,\"291\":1,\"293\":1,\"294\":2,\"300\":1,\"305\":1},\"1\":{\"34\":3,\"35\":1,\"46\":2,\"59\":1,\"62\":6,\"79\":4,\"80\":3,\"87\":1,\"88\":6,\"89\":4,\"102\":3,\"120\":1,\"121\":1,\"145\":2,\"153\":31,\"181\":3,\"182\":1,\"183\":3,\"185\":2,\"190\":1,\"199\":2,\"203\":1,\"206\":3,\"219\":5,\"220\":2,\"224\":4,\"225\":1,\"232\":4,\"248\":3,\"265\":2,\"266\":1,\"271\":2,\"273\":4,\"280\":1,\"291\":1,\"292\":3,\"293\":1,\"294\":2,\"299\":2}}],[\"052\",{\"1\":{\"162\":1}}],[\"05s\",{\"1\":{\"63\":1}}],[\"05k\",{\"1\":{\"63\":1}}],[\"05\",{\"1\":{\"11\":2,\"14\":2,\"250\":1}}],[\"003\",{\"1\":{\"153\":1}}],[\"007\",{\"1\":{\"46\":1}}],[\"00\",{\"1\":{\"10\":2,\"11\":1,\"13\":2,\"14\":1,\"46\":8,\"80\":1,\"225\":2}}],[\"刘鹏辉\",{\"1\":{\"11\":1}}],[\"5<\",{\"1\":{\"234\":1}}],[\"54\",{\"1\":{\"162\":3}}],[\"563\",{\"1\":{\"287\":2}}],[\"568\",{\"1\":{\"286\":1}}],[\"56\",{\"1\":{\"162\":6}}],[\"5273\",{\"1\":{\"162\":1}}],[\"59\",{\"1\":{\"153\":6,\"162\":3}}],[\"584\",{\"1\":{\"288\":1}}],[\"585\",{\"1\":{\"287\":1}}],[\"583\",{\"1\":{\"287\":1}}],[\"581\",{\"1\":{\"287\":1}}],[\"5811b56257e31109621976d39fc226aa\",{\"1\":{\"46\":2}}],[\"580\",{\"1\":{\"286\":1}}],[\"58\",{\"1\":{\"153\":1,\"162\":1}}],[\"58214\",{\"1\":{\"153\":1}}],[\"5min\",{\"1\":{\"147\":1}}],[\"51\",{\"1\":{\"63\":1,\"225\":1}}],[\"572\",{\"1\":{\"288\":1}}],[\"578\",{\"1\":{\"287\":1}}],[\"570\",{\"1\":{\"287\":2}}],[\"57\",{\"1\":{\"59\":3}}],[\"5f79d821e3b601330631a2d53294fb34\",{\"1\":{\"46\":2}}],[\"5\",{\"0\":{\"109\":1,\"110\":1,\"111\":1,\"283\":1,\"285\":1},\"1\":{\"46\":3,\"55\":1,\"103\":3,\"106\":1,\"108\":1,\"110\":1,\"153\":1,\"154\":1,\"162\":11,\"163\":2,\"185\":1,\"219\":3,\"220\":1,\"271\":1,\"284\":1,\"288\":1}}],[\"555\",{\"1\":{\"288\":1}}],[\"554\",{\"1\":{\"287\":1}}],[\"55\",{\"1\":{\"11\":2,\"14\":2}}],[\"508\",{\"1\":{\"55\":1}}],[\"50\",{\"1\":{\"11\":2,\"14\":2,\"79\":1,\"224\":1,\"225\":1}}],[\"500ms\",{\"1\":{\"220\":2}}],[\"50000\",{\"1\":{\"266\":1}}],[\"5000\",{\"1\":{\"152\":2,\"153\":2,\"224\":1}}],[\"500\",{\"1\":{\"5\":1,\"224\":1,\"226\":1}}],[\"蒋文博\",{\"1\":{\"11\":1}}],[\"朱明\",{\"1\":{\"11\":1,\"14\":1,\"112\":1}}],[\"sneakythrows\",{\"1\":{\"163\":1,\"164\":1}}],[\"shuaiqiyu\",{\"1\":{\"282\":1}}],[\"shutdown\",{\"1\":{\"34\":1}}],[\"shardingsphere\",{\"1\":{\"280\":1,\"305\":2}}],[\"show\",{\"1\":{\"271\":1,\"279\":1}}],[\"sh\",{\"1\":{\"153\":1}}],[\"sk\",{\"0\":{\"140\":1},\"1\":{\"140\":2}}],[\"skip\",{\"1\":{\"82\":1,\"84\":3,\"173\":2,\"174\":3,\"185\":3,\"241\":3}}],[\"skip=true\",{\"1\":{\"52\":4}}],[\"src\",{\"1\":{\"128\":1,\"152\":2,\"162\":2}}],[\"sqlsever\",{\"1\":{\"278\":1}}],[\"sqlserver\",{\"1\":{\"277\":1}}],[\"sqlparser\",{\"1\":{\"277\":1}}],[\"sqlexception\",{\"1\":{\"124\":3,\"125\":5}}],[\"sql\",{\"1\":{\"124\":4,\"125\":3,\"126\":1,\"277\":1,\"280\":2}}],[\"svc\",{\"1\":{\"121\":2}}],[\"sliding\",{\"1\":{\"225\":2}}],[\"slidingwindowtype\",{\"1\":{\"224\":1}}],[\"slidingwindowsize\",{\"1\":{\"224\":1}}],[\"sleep\",{\"1\":{\"102\":1,\"103\":2,\"226\":1}}],[\"slf4j\",{\"1\":{\"98\":1,\"112\":1,\"115\":1,\"164\":1}}],[\"switch\",{\"1\":{\"95\":1,\"109\":1,\"111\":1,\"116\":1,\"154\":1,\"163\":2}}],[\"switchifempty\",{\"1\":{\"90\":1,\"213\":1}}],[\"simplevalueparser\",{\"1\":{\"286\":1}}],[\"simpleinstantiationstrategy\",{\"1\":{\"162\":4}}],[\"sigkey\",{\"1\":{\"149\":1}}],[\"signutils\",{\"1\":{\"149\":1}}],[\"signauthdatacache\",{\"1\":{\"149\":1}}],[\"signdata\",{\"1\":{\"149\":2}}],[\"signverify\",{\"1\":{\"149\":1}}],[\"signplugin\",{\"1\":{\"149\":1,\"185\":1,\"186\":2}}],[\"sign<\",{\"1\":{\"142\":1}}],[\"sign\",{\"0\":{\"142\":1,\"148\":1},\"1\":{\"85\":2,\"139\":1,\"142\":2,\"145\":2,\"147\":1,\"149\":5,\"185\":1,\"186\":1}}],[\"sing\",{\"1\":{\"149\":1}}],[\"singleton\",{\"1\":{\"201\":8,\"203\":1}}],[\"singletonlist\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"80\":1,\"98\":1,\"107\":1,\"163\":1}}],[\"single\",{\"1\":{\"72\":1,\"201\":2}}],[\"size\",{\"1\":{\"34\":2,\"39\":1,\"42\":1,\"83\":1,\"84\":1,\"88\":1,\"89\":2,\"102\":3,\"173\":1,\"174\":1,\"178\":1,\"181\":3,\"185\":1,\"188\":2,\"225\":1,\"241\":1}}],[\"system\",{\"1\":{\"55\":1,\"89\":1,\"95\":1,\"119\":1,\"120\":5,\"121\":3,\"127\":2,\"128\":1,\"145\":1,\"180\":2,\"181\":1,\"185\":2,\"273\":6}}],[\"syncdata\",{\"1\":{\"154\":2}}],[\"syncdataserviceimpl\",{\"1\":{\"154\":2}}],[\"syncdataservice\",{\"1\":{\"102\":1,\"110\":3,\"112\":1,\"115\":1,\"154\":15,\"159\":4,\"162\":2,\"164\":1}}],[\"syncconnected\",{\"1\":{\"153\":2}}],[\"synchronized\",{\"1\":{\"124\":2,\"137\":2}}],[\"syncall\",{\"1\":{\"112\":1,\"154\":4}}],[\"sync\",{\"1\":{\"46\":2,\"55\":1,\"94\":2,\"95\":1,\"110\":6,\"114\":2,\"115\":5,\"117\":2,\"152\":4,\"153\":1,\"154\":5,\"159\":7,\"160\":2,\"162\":15,\"164\":6,\"301\":3}}],[\"superbenchmarker\",{\"1\":{\"225\":1}}],[\"super\",{\"1\":{\"220\":1}}],[\"support\",{\"1\":{\"110\":1,\"162\":3}}],[\"suppresswarnings\",{\"1\":{\"109\":1,\"111\":1,\"154\":1,\"163\":1}}],[\"suspended\",{\"1\":{\"103\":1}}],[\"subscribe\",{\"1\":{\"160\":1}}],[\"subscribeplugindatachanges\",{\"1\":{\"159\":1}}],[\"subscribechildchanges\",{\"1\":{\"159\":1,\"160\":1}}],[\"subscribedatachanges\",{\"1\":{\"159\":1,\"160\":2}}],[\"subscriberuledatachanges\",{\"1\":{\"160\":2}}],[\"subscribers\",{\"1\":{\"159\":4}}],[\"subscriber\",{\"1\":{\"159\":2}}],[\"subscribeon\",{\"1\":{\"84\":1,\"174\":1,\"241\":1}}],[\"subclass\",{\"1\":{\"137\":3}}],[\"subtype\",{\"1\":{\"121\":1}}],[\"submit\",{\"1\":{\"77\":2,\"78\":1,\"79\":3,\"179\":1}}],[\"success\",{\"1\":{\"46\":1,\"59\":2,\"62\":12,\"76\":1,\"83\":2,\"102\":3,\"107\":2,\"190\":1,\"243\":1,\"244\":5}}],[\"successful\",{\"1\":{\"46\":1,\"55\":1,\"112\":1}}],[\"such\",{\"1\":{\"42\":2}}],[\"suffix\",{\"1\":{\"42\":2}}],[\"sax\",{\"1\":{\"288\":1}}],[\"sayhello\",{\"1\":{\"273\":2}}],[\"saycancel\",{\"1\":{\"273\":4}}],[\"sayconfrim\",{\"1\":{\"273\":4}}],[\"say\",{\"1\":{\"273\":8}}],[\"sasl\",{\"1\":{\"153\":1}}],[\"sameweight\",{\"1\":{\"88\":4,\"183\":2}}],[\"same\",{\"1\":{\"42\":1}}],[\"savespringmvcmetadata\",{\"1\":{\"76\":1}}],[\"save\",{\"1\":{\"38\":2}}],[\"s\",{\"1\":{\"42\":2,\"46\":6,\"55\":9,\"59\":1,\"62\":6,\"80\":3,\"98\":1,\"102\":2,\"103\":2,\"121\":3,\"153\":2,\"162\":12,\"163\":2,\"225\":9}}],[\"script\",{\"0\":{\"205\":1},\"1\":{\"203\":1}}],[\"scriptargs\",{\"0\":{\"205\":1},\"1\":{\"203\":2,\"205\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"180\":1}}],[\"schedule\",{\"1\":{\"98\":2}}],[\"scheduler\",{\"1\":{\"84\":1,\"98\":7,\"174\":1,\"241\":1}}],[\"scheduledinitdelay\",{\"1\":{\"273\":1}}],[\"scheduledphydeleteddelay\",{\"1\":{\"273\":1}}],[\"scheduledpool\",{\"1\":{\"42\":2}}],[\"scheduledcleandelay\",{\"1\":{\"273\":1}}],[\"scheduledrecoverydelay\",{\"1\":{\"273\":1}}],[\"scheduledtime\",{\"1\":{\"180\":2}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"180\":1}}],[\"scheduledthreadmax\",{\"1\":{\"32\":1,\"42\":2,\"45\":1,\"273\":1}}],[\"scheduled\",{\"1\":{\"180\":2,\"181\":2}}],[\"scheduledexecutorservice\",{\"1\":{\"98\":1}}],[\"scheduleddelay\",{\"1\":{\"32\":1,\"42\":3,\"45\":1}}],[\"scan\",{\"1\":{\"42\":1}}],[\"style\",{\"1\":{\"271\":1}}],[\"stop\",{\"1\":{\"225\":1}}],[\"storedays\",{\"1\":{\"273\":1}}],[\"storedkeys\",{\"1\":{\"145\":2}}],[\"stored\",{\"1\":{\"42\":1}}],[\"store\",{\"1\":{\"42\":2}}],[\"stmt\",{\"1\":{\"127\":4}}],[\"stdev\",{\"1\":{\"63\":4}}],[\"strutil\",{\"1\":{\"287\":1}}],[\"stream\",{\"1\":{\"84\":1,\"145\":2,\"160\":1,\"163\":1,\"174\":1,\"185\":1,\"213\":1,\"220\":4}}],[\"strategy\",{\"1\":{\"46\":2,\"110\":1}}],[\"stringredisserializer\",{\"1\":{\"201\":1}}],[\"string>newserializationcontext\",{\"1\":{\"201\":1}}],[\"string>\",{\"1\":{\"103\":1,\"145\":1,\"186\":1,\"201\":2}}],[\"stringbuilder\",{\"1\":{\"102\":2}}],[\"string\",{\"1\":{\"39\":6,\"42\":3,\"76\":5,\"77\":8,\"78\":7,\"79\":8,\"80\":8,\"83\":1,\"85\":2,\"87\":2,\"88\":1,\"89\":3,\"90\":1,\"95\":1,\"96\":3,\"102\":8,\"103\":9,\"107\":4,\"112\":3,\"115\":5,\"116\":2,\"118\":2,\"120\":1,\"121\":4,\"125\":10,\"127\":2,\"130\":1,\"133\":1,\"135\":1,\"137\":10,\"145\":7,\"149\":2,\"154\":4,\"159\":5,\"160\":4,\"163\":3,\"164\":4,\"173\":3,\"178\":4,\"179\":1,\"182\":5,\"183\":3,\"186\":1,\"188\":1,\"189\":3,\"190\":1,\"203\":2,\"213\":1,\"220\":6,\"226\":1,\"227\":1,\"240\":5,\"242\":1,\"243\":3,\"247\":1,\"248\":5,\"273\":10,\"286\":1,\"296\":2}}],[\"stringutils\",{\"1\":{\"39\":2,\"46\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"102\":1,\"107\":4,\"112\":1,\"125\":4,\"137\":3,\"149\":3,\"163\":1,\"182\":3,\"186\":1,\"190\":1,\"213\":1,\"227\":1,\"242\":2,\"243\":2,\"248\":2}}],[\"statintervalms\",{\"1\":{\"219\":1}}],[\"static\",{\"1\":{\"35\":1,\"39\":8,\"80\":4,\"84\":1,\"95\":2,\"102\":1,\"110\":4,\"112\":3,\"114\":1,\"115\":1,\"118\":1,\"120\":3,\"121\":5,\"124\":6,\"125\":6,\"127\":3,\"130\":3,\"154\":1,\"182\":3,\"183\":1,\"220\":2}}],[\"state\",{\"1\":{\"153\":2,\"225\":2}}],[\"statement\",{\"1\":{\"127\":2}}],[\"statuscode\",{\"1\":{\"91\":1,\"190\":1,\"191\":1,\"220\":2}}],[\"status\",{\"1\":{\"79\":1,\"220\":8,\"225\":1,\"227\":5}}],[\"stats\",{\"1\":{\"63\":2}}],[\"stars\",{\"1\":{\"252\":1}}],[\"star\",{\"1\":{\"45\":1,\"267\":1}}],[\"startwith\",{\"1\":{\"287\":1}}],[\"startdatetime\",{\"1\":{\"186\":1}}],[\"startswith\",{\"1\":{\"182\":1,\"213\":1}}],[\"startswithignorecase\",{\"1\":{\"125\":4}}],[\"starting\",{\"1\":{\"153\":3,\"162\":1,\"225\":1}}],[\"startasync\",{\"1\":{\"98\":2}}],[\"starttimer\",{\"1\":{\"84\":1,\"174\":2}}],[\"starterhmilytransactionhandler\",{\"1\":{\"35\":2}}],[\"starter\",{\"1\":{\"35\":1,\"42\":1,\"45\":3,\"57\":1,\"84\":3,\"85\":17,\"115\":1,\"142\":1,\"152\":1,\"159\":1,\"162\":6,\"164\":2,\"171\":1,\"174\":1,\"209\":1,\"224\":1,\"234\":1,\"236\":2,\"272\":1,\"273\":1,\"278\":1,\"301\":4,\"302\":4}}],[\"started\",{\"1\":{\"32\":2,\"55\":2,\"102\":1,\"153\":1,\"162\":2}}],[\"start\",{\"0\":{\"45\":1},\"1\":{\"32\":1,\"33\":1,\"34\":3,\"38\":3,\"46\":1,\"102\":3,\"103\":1,\"142\":1,\"152\":1,\"153\":1,\"162\":1,\"164\":3,\"301\":2,\"302\":4}}],[\"stereotype\",{\"1\":{\"34\":1,\"35\":1}}],[\"sessionid\",{\"1\":{\"153\":2}}],[\"sessionkey\",{\"1\":{\"112\":1}}],[\"session\",{\"1\":{\"96\":1,\"112\":39,\"114\":2,\"153\":3}}],[\"sessiontimeout=5000\",{\"1\":{\"153\":1}}],[\"sessiontimeout\",{\"1\":{\"32\":1,\"45\":1,\"152\":2}}],[\"sel\",{\"1\":{\"89\":1}}],[\"selectedwrr\",{\"1\":{\"89\":3}}],[\"selectedinvoker\",{\"1\":{\"89\":4}}],[\"select\",{\"1\":{\"80\":1,\"118\":2,\"127\":2,\"183\":1}}],[\"selectorlog\",{\"1\":{\"188\":2}}],[\"selectorparentpath\",{\"1\":{\"96\":2}}],[\"selectors\",{\"1\":{\"83\":3,\"173\":2,\"178\":2,\"188\":3}}],[\"selectorserviceimpl\",{\"1\":{\"78\":1}}],[\"selectorservice\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"154\":1}}],[\"selectortypeenum\",{\"1\":{\"78\":1,\"83\":1,\"173\":1,\"178\":1,\"188\":1}}],[\"selectorid\",{\"1\":{\"76\":2,\"77\":5,\"79\":5,\"80\":5,\"179\":2}}],[\"selector\",{\"0\":{\"77\":1},\"1\":{\"46\":3,\"59\":4,\"62\":24,\"67\":1,\"77\":1,\"78\":2,\"79\":2,\"80\":1,\"81\":3,\"83\":2,\"85\":3,\"95\":1,\"102\":2,\"108\":2,\"109\":1,\"110\":2,\"111\":2,\"115\":1,\"118\":2,\"154\":1,\"155\":1,\"157\":1,\"162\":2,\"173\":2,\"178\":3,\"183\":2,\"189\":3,\"203\":1,\"213\":1,\"220\":1,\"227\":1,\"242\":1}}],[\"selectormapper\",{\"1\":{\"46\":2,\"77\":1,\"78\":1,\"79\":1}}],[\"selectorconditionquery\",{\"1\":{\"46\":1}}],[\"selectorconditiondo\",{\"1\":{\"46\":5,\"78\":1}}],[\"selectorconditiondto\",{\"1\":{\"46\":6,\"78\":11}}],[\"selectorconditiondtos\",{\"1\":{\"46\":4,\"78\":3}}],[\"selectorconditionmapper\",{\"1\":{\"46\":3,\"78\":1}}],[\"selectorcount\",{\"1\":{\"46\":4}}],[\"selectordatahandler\",{\"1\":{\"115\":1,\"116\":1}}],[\"selectordatalist\",{\"1\":{\"111\":2,\"154\":2}}],[\"selectordatarefresh\",{\"1\":{\"102\":1}}],[\"selectordata\",{\"1\":{\"77\":4,\"79\":5,\"83\":8,\"85\":1,\"116\":5,\"173\":5,\"178\":6,\"188\":7,\"189\":1,\"203\":1,\"213\":1,\"220\":1,\"227\":1,\"242\":1}}],[\"selectordo\",{\"1\":{\"46\":9,\"77\":7,\"78\":8,\"79\":7}}],[\"selectordto\",{\"1\":{\"46\":5,\"78\":22}}],[\"second\",{\"1\":{\"225\":1}}],[\"seconds\",{\"1\":{\"42\":3,\"55\":1,\"102\":2,\"103\":1,\"162\":1,\"180\":1}}],[\"secretkey\",{\"0\":{\"143\":1},\"1\":{\"145\":1,\"162\":2}}],[\"secret\",{\"1\":{\"140\":1,\"273\":1}}],[\"sec\",{\"1\":{\"63\":6,\"80\":1}}],[\"see\",{\"1\":{\"55\":1}}],[\"sendtext\",{\"1\":{\"112\":2}}],[\"sendresponse\",{\"1\":{\"98\":7}}],[\"send\",{\"1\":{\"46\":2,\"96\":1,\"98\":1,\"110\":1,\"111\":6,\"112\":5,\"114\":1}}],[\"sentinelfallbackexception\",{\"1\":{\"220\":3}}],[\"sentinelfallbackhandler\",{\"1\":{\"220\":10}}],[\"sentinelreactortransformer<>\",{\"1\":{\"220\":1}}],[\"sentinelrulehandle\",{\"1\":{\"220\":4}}],[\"sentinelhandle\",{\"1\":{\"220\":19}}],[\"sentinelplugin\",{\"1\":{\"220\":4}}],[\"sentinelurl\",{\"1\":{\"32\":1,\"45\":1}}],[\"sentinel\",{\"1\":{\"32\":1,\"45\":1,\"85\":2,\"215\":3,\"218\":5,\"219\":3,\"220\":15}}],[\"setfields\",{\"1\":{\"287\":1}}],[\"setfailureratethreshold\",{\"1\":{\"225\":1}}],[\"setfallbackuri\",{\"1\":{\"225\":1}}],[\"setinvoker\",{\"1\":{\"248\":1}}],[\"setinterface\",{\"1\":{\"238\":1}}],[\"setid\",{\"1\":{\"107\":1}}],[\"setattachment\",{\"1\":{\"243\":1,\"247\":1}}],[\"setapplication\",{\"1\":{\"238\":1}}],[\"setaction\",{\"1\":{\"38\":1}}],[\"setgeneric\",{\"1\":{\"238\":1}}],[\"setgrade\",{\"1\":{\"220\":2}}],[\"setname\",{\"1\":{\"236\":1}}],[\"setusername\",{\"1\":{\"226\":1}}],[\"setuserid\",{\"1\":{\"226\":1}}],[\"setwaitintervalfunctioninopenstate\",{\"1\":{\"225\":1}}],[\"setweight\",{\"1\":{\"89\":2}}],[\"setminimumnumberofcalls\",{\"1\":{\"225\":1}}],[\"setcircuitenable\",{\"1\":{\"225\":1}}],[\"setcontrolbehavior\",{\"1\":{\"220\":1}}],[\"setcontenttype\",{\"1\":{\"103\":1}}],[\"setcount\",{\"1\":{\"220\":2}}],[\"setcomplete\",{\"1\":{\"213\":1}}],[\"setlimitforperiod\",{\"1\":{\"225\":2}}],[\"setlimitrefreshperiod\",{\"1\":{\"225\":2}}],[\"setlastupdate\",{\"1\":{\"89\":1}}],[\"setex\",{\"1\":{\"206\":3}}],[\"set<string>\",{\"1\":{\"163\":1}}],[\"set<session>\",{\"1\":{\"112\":1}}],[\"setvalue\",{\"1\":{\"137\":2}}],[\"settargetserviceuniquename\",{\"1\":{\"248\":1}}],[\"settimewindow\",{\"1\":{\"220\":1}}],[\"settimestamp\",{\"1\":{\"181\":1}}],[\"settimeoutduration\",{\"1\":{\"225\":2,\"226\":1}}],[\"settimeoutdurationrate\",{\"1\":{\"225\":1}}],[\"settimeout\",{\"1\":{\"98\":2}}],[\"settransid\",{\"1\":{\"38\":1}}],[\"setregistry\",{\"1\":{\"238\":1}}],[\"setruleid\",{\"1\":{\"80\":1}}],[\"setruleconditions\",{\"1\":{\"80\":1}}],[\"setrole\",{\"1\":{\"38\":1}}],[\"setoperator\",{\"1\":{\"78\":1,\"80\":2}}],[\"setprotocol\",{\"1\":{\"238\":1}}],[\"setpermittednumberofcallsinhalfopenstate\",{\"1\":{\"225\":1}}],[\"setparamvalue\",{\"1\":{\"78\":1}}],[\"setparamname\",{\"1\":{\"78\":1}}],[\"setparamtype\",{\"1\":{\"78\":1}}],[\"setpluginid\",{\"1\":{\"78\":5}}],[\"sethandle\",{\"1\":{\"77\":2,\"78\":4,\"79\":2}}],[\"setslidingwindowtype\",{\"1\":{\"225\":1}}],[\"setslidingwindowsize\",{\"1\":{\"225\":1}}],[\"setselectorconditions\",{\"1\":{\"78\":1}}],[\"setselectorid\",{\"1\":{\"46\":2,\"78\":1}}],[\"setstatuscode\",{\"1\":{\"91\":1,\"191\":1,\"203\":1,\"213\":1,\"220\":4,\"227\":1,\"242\":2}}],[\"setstatus\",{\"1\":{\"35\":1,\"181\":2}}],[\"set\",{\"1\":{\"38\":4,\"80\":1,\"89\":1,\"112\":7,\"163\":2,\"189\":1,\"232\":10}}],[\"setdefaultexceptionhandler\",{\"1\":{\"34\":1}}],[\"serializable\",{\"1\":{\"296\":1}}],[\"serialization\",{\"1\":{\"248\":2}}],[\"serializationcontext\",{\"1\":{\"201\":2}}],[\"serializeenum\",{\"1\":{\"42\":1}}],[\"serializer\",{\"1\":{\"32\":2,\"42\":3,\"45\":1,\"201\":5,\"273\":1,\"277\":1}}],[\"serverhttprequest\",{\"1\":{\"186\":1,\"213\":1,\"227\":1}}],[\"serverhttpresponse\",{\"1\":{\"91\":1,\"191\":1,\"213\":1}}],[\"serverendpoint\",{\"1\":{\"112\":2}}],[\"serverendpointexporter\",{\"1\":{\"110\":4}}],[\"serverlist\",{\"1\":{\"102\":6}}],[\"server\",{\"1\":{\"91\":1,\"98\":2,\"102\":9,\"103\":6,\"153\":4,\"191\":1,\"220\":2,\"226\":1,\"227\":1,\"242\":2,\"273\":4}}],[\"serverwebexchange\",{\"1\":{\"83\":1,\"84\":2,\"85\":2,\"90\":3,\"91\":1,\"171\":1,\"174\":2,\"178\":2,\"185\":1,\"186\":1,\"188\":1,\"189\":1,\"190\":3,\"191\":1,\"203\":1,\"213\":3,\"220\":2,\"227\":5,\"241\":2,\"242\":1,\"243\":1,\"244\":1}}],[\"services\",{\"1\":{\"121\":1}}],[\"serviceloaders\",{\"1\":{\"121\":2,\"122\":1}}],[\"serviceloader<driver>\",{\"1\":{\"124\":1}}],[\"serviceloader<>\",{\"1\":{\"121\":1}}],[\"serviceloader<s>\",{\"1\":{\"121\":4}}],[\"serviceloader<animal>\",{\"1\":{\"120\":2,\"121\":2}}],[\"serviceloader<interface>\",{\"1\":{\"119\":1}}],[\"serviceloader\",{\"1\":{\"119\":1,\"120\":3,\"121\":8,\"122\":1,\"124\":1,\"129\":1,\"130\":4,\"131\":2}}],[\"service\",{\"1\":{\"35\":3,\"76\":1,\"91\":4,\"119\":1,\"121\":15,\"154\":5,\"159\":3,\"191\":4,\"220\":2,\"240\":2,\"244\":2,\"266\":1,\"273\":2}}],[\"split\",{\"1\":{\"182\":3}}],[\"springdataredis\",{\"1\":{\"201\":1}}],[\"spring4\",{\"1\":{\"174\":1}}],[\"springapplication\",{\"1\":{\"162\":1}}],[\"springboot\",{\"1\":{\"154\":1,\"162\":5,\"164\":1,\"171\":2,\"174\":1,\"213\":1,\"300\":1,\"301\":1,\"305\":1}}],[\"springbeanutils\",{\"1\":{\"39\":2,\"112\":1,\"227\":1}}],[\"springmvcregisterdto\",{\"1\":{\"76\":5,\"77\":1,\"79\":1,\"80\":1}}],[\"springmvc\",{\"0\":{\"76\":1},\"1\":{\"75\":1,\"76\":2,\"81\":1,\"104\":1,\"188\":1}}],[\"springmvcclientbeanpostprocessor\",{\"1\":{\"75\":2}}],[\"springmvc<\",{\"1\":{\"57\":1}}],[\"springframework\",{\"1\":{\"34\":3,\"35\":2,\"162\":8,\"301\":2}}],[\"springcloudrulehandle\",{\"1\":{\"80\":1}}],[\"springcloud<\",{\"1\":{\"43\":1,\"45\":1}}],[\"springcloud\",{\"0\":{\"43\":1},\"1\":{\"33\":1,\"45\":1,\"85\":2,\"162\":1,\"232\":1,\"264\":2,\"265\":1,\"266\":1,\"270\":1,\"273\":1,\"300\":1}}],[\"spring\",{\"0\":{\"45\":1,\"239\":1,\"265\":1},\"1\":{\"29\":1,\"32\":2,\"33\":2,\"45\":3,\"46\":2,\"57\":1,\"75\":1,\"76\":2,\"78\":2,\"84\":4,\"85\":20,\"90\":1,\"110\":1,\"114\":1,\"115\":2,\"142\":1,\"152\":1,\"154\":2,\"159\":4,\"162\":6,\"164\":1,\"170\":1,\"171\":1,\"174\":2,\"209\":1,\"214\":2,\"223\":2,\"224\":1,\"230\":1,\"234\":1,\"236\":2,\"265\":1,\"270\":2,\"271\":2,\"272\":2,\"273\":3,\"276\":3,\"277\":1,\"278\":2,\"300\":1,\"301\":8,\"302\":4,\"304\":1,\"305\":1}}],[\"spi\",{\"0\":{\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"128\":1,\"129\":1},\"1\":{\"11\":2,\"118\":3,\"119\":2,\"120\":2,\"122\":2,\"123\":1,\"124\":3,\"126\":2,\"127\":4,\"128\":7,\"129\":2,\"130\":3,\"131\":1,\"133\":1,\"134\":1,\"137\":5,\"183\":1,\"271\":3,\"277\":4,\"305\":5}}],[\"socket\",{\"1\":{\"153\":2,\"182\":5}}],[\"soft\",{\"1\":{\"153\":1}}],[\"sofarulehandle\",{\"1\":{\"80\":1}}],[\"sofa\",{\"1\":{\"14\":1,\"78\":2,\"80\":1,\"85\":2,\"186\":1,\"270\":1}}],[\"so\",{\"1\":{\"98\":1}}],[\"sortedmap<long\",{\"1\":{\"87\":1}}],[\"sorted\",{\"1\":{\"84\":1,\"145\":1,\"163\":1,\"174\":1,\"185\":1,\"213\":1}}],[\"sort\",{\"1\":{\"78\":1,\"80\":2,\"213\":3}}],[\"soul网关发布2\",{\"0\":{\"300\":1}}],[\"soul网关发布的2\",{\"0\":{\"296\":1}}],[\"soul网关发布1\",{\"0\":{\"290\":1}}],[\"soul网关学习apache\",{\"0\":{\"229\":1}}],[\"soul网关学习admin源码分析\",{\"0\":{\"46\":1}}],[\"soul网关学习resilience4j插件原理解析\",{\"0\":{\"221\":1}}],[\"soul网关学习redirect插件原理解析\",{\"0\":{\"207\":1}}],[\"soul网关学习ratelimiter插件原理解析\",{\"0\":{\"192\":1}}],[\"soul网关学习http请求探险\",{\"0\":{\"185\":1}}],[\"soul网关学习http长轮询解析02\",{\"0\":{\"100\":1}}],[\"soul网关学习http长轮询解析01\",{\"0\":{\"92\":1}}],[\"soul网关学习divide插件源码解读\",{\"0\":{\"176\":1}}],[\"soul网关学习插件链实现\",{\"0\":{\"166\":1}}],[\"soul网关学习插件链与负载均衡解析\",{\"0\":{\"82\":1}}],[\"soul网关学习nacos数据同步\",{\"0\":{\"162\":1}}],[\"soul网关学习zookeeper数据同步02\",{\"0\":{\"156\":1}}],[\"soul网关学习zookeeper数据同步01\",{\"0\":{\"150\":1}}],[\"soul网关学习sentinel插件原理解析\",{\"0\":{\"215\":1}}],[\"soul网关学习sign插件\",{\"0\":{\"138\":1}}],[\"soul网关学习spi学习使用\",{\"0\":{\"118\":1}}],[\"soul网关学习websocket数据同步解析\",{\"0\":{\"104\":1}}],[\"soul网关学习\",{\"0\":{\"47\":1,\"65\":1,\"73\":1,\"74\":1}}],[\"souldubboclient\",{\"1\":{\"236\":2}}],[\"soulbootstrap\",{\"0\":{\"142\":1}}],[\"soulbootstrapapplication\",{\"1\":{\"55\":2,\"162\":4}}],[\"soulwebsocketclient\",{\"1\":{\"115\":3,\"116\":1}}],[\"soulwebhandle\",{\"1\":{\"84\":1}}],[\"soulwebhandler\",{\"1\":{\"84\":8,\"174\":14,\"175\":2,\"185\":3,\"213\":5,\"241\":1}}],[\"souladmin\",{\"1\":{\"149\":1}}],[\"souladminresult\",{\"1\":{\"107\":4}}],[\"souladminbootstrap\",{\"1\":{\"54\":1}}],[\"soulthreadfactory\",{\"1\":{\"102\":1,\"180\":1}}],[\"soulresultwrap\",{\"1\":{\"189\":2,\"190\":1,\"191\":2,\"203\":1,\"220\":3,\"242\":2,\"244\":2}}],[\"soulresultwarp\",{\"1\":{\"91\":2}}],[\"soulresultenum\",{\"1\":{\"91\":4,\"149\":1,\"189\":4,\"190\":2,\"191\":4,\"203\":2,\"220\":6,\"242\":4,\"244\":4}}],[\"soulresultmessage\",{\"1\":{\"76\":1,\"107\":1}}],[\"soulcontext\",{\"0\":{\"186\":1},\"1\":{\"85\":3,\"149\":12,\"173\":3,\"178\":1,\"186\":8,\"189\":4,\"190\":3,\"191\":1,\"220\":3,\"227\":3,\"242\":4}}],[\"soulconfiguration\",{\"1\":{\"84\":1,\"162\":2,\"174\":3,\"175\":1}}],[\"soulclientregisterserviceimpl\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":2}}],[\"soulclientregisterservice\",{\"1\":{\"76\":1}}],[\"soulclientcontroller\",{\"1\":{\"76\":2}}],[\"soulplugins\",{\"1\":{\"84\":3,\"174\":3,\"185\":2,\"213\":3}}],[\"soulpluginchain\",{\"0\":{\"84\":1},\"1\":{\"83\":1,\"84\":3,\"85\":1,\"90\":3,\"91\":1,\"173\":1,\"174\":2,\"178\":2,\"186\":1,\"188\":1,\"189\":1,\"190\":3,\"191\":1,\"203\":1,\"213\":1,\"220\":1,\"227\":3,\"242\":1,\"244\":1}}],[\"soulplugin\",{\"1\":{\"82\":1,\"84\":7,\"85\":1,\"90\":1,\"173\":4,\"174\":5,\"185\":4,\"188\":2,\"213\":4,\"241\":1}}],[\"soulexception\",{\"1\":{\"80\":1,\"102\":3,\"103\":1,\"243\":3}}],[\"soulspringmvcconfig\",{\"1\":{\"75\":7}}],[\"soulspringmvcclient\",{\"1\":{\"57\":1}}],[\"soul源码01期阅读分享会01\",{\"0\":{\"12\":1}}],[\"soul\",{\"0\":{\"9\":1,\"10\":1,\"13\":1,\"49\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"78\":1,\"79\":1,\"112\":1,\"128\":1,\"151\":2,\"154\":1,\"158\":1,\"159\":1,\"160\":1,\"163\":1,\"164\":1,\"171\":1,\"172\":1,\"224\":1,\"234\":1,\"235\":1,\"241\":1,\"291\":1,\"303\":1,\"304\":1},\"1\":{\"11\":5,\"14\":2,\"46\":15,\"47\":4,\"50\":1,\"54\":3,\"55\":4,\"56\":1,\"57\":4,\"59\":2,\"62\":12,\"63\":2,\"64\":1,\"66\":4,\"67\":3,\"70\":2,\"75\":6,\"76\":1,\"79\":4,\"80\":2,\"81\":6,\"84\":4,\"85\":37,\"86\":1,\"87\":1,\"94\":3,\"95\":1,\"102\":1,\"104\":13,\"106\":1,\"110\":6,\"112\":1,\"114\":3,\"115\":6,\"116\":1,\"117\":4,\"128\":2,\"129\":1,\"130\":5,\"133\":1,\"137\":1,\"142\":2,\"152\":8,\"153\":4,\"154\":9,\"155\":2,\"157\":4,\"158\":2,\"159\":6,\"160\":6,\"162\":47,\"163\":3,\"164\":8,\"167\":3,\"171\":4,\"172\":1,\"173\":3,\"174\":6,\"175\":2,\"180\":4,\"183\":1,\"184\":1,\"185\":7,\"186\":1,\"190\":1,\"191\":1,\"193\":2,\"197\":3,\"198\":1,\"205\":1,\"207\":1,\"208\":3,\"209\":1,\"211\":1,\"213\":2,\"215\":4,\"218\":5,\"219\":3,\"220\":13,\"222\":1,\"224\":7,\"226\":1,\"227\":2,\"228\":1,\"230\":2,\"235\":1,\"236\":4,\"243\":1,\"294\":1,\"295\":4,\"296\":14,\"297\":2,\"299\":4,\"300\":2,\"301\":9,\"302\":13,\"303\":5,\"304\":5,\"305\":4}}],[\"64\",{\"1\":{\"232\":1}}],[\"64583\",{\"1\":{\"153\":7}}],[\"64500\",{\"1\":{\"153\":9}}],[\"66\",{\"1\":{\"162\":1}}],[\"66ms\",{\"1\":{\"63\":1}}],[\"651\",{\"1\":{\"162\":1}}],[\"620\",{\"1\":{\"46\":1}}],[\"600\",{\"1\":{\"273\":1}}],[\"600000\",{\"1\":{\"273\":1}}],[\"6000\",{\"1\":{\"164\":1,\"273\":1}}],[\"60l\",{\"1\":{\"102\":1}}],[\"60s\",{\"1\":{\"98\":1}}],[\"609\",{\"1\":{\"62\":3}}],[\"60\",{\"1\":{\"42\":2,\"63\":1,\"99\":3,\"225\":1,\"273\":3}}],[\"6379\",{\"1\":{\"32\":1}}],[\"68\",{\"1\":{\"32\":2,\"45\":1,\"63\":1}}],[\"6\",{\"0\":{\"112\":1},\"1\":{\"10\":1,\"55\":1,\"63\":1,\"153\":1,\"154\":1,\"162\":1}}],[\"猫大人\",{\"1\":{\"7\":1,\"11\":2,\"14\":2}}],[\"崔\",{\"1\":{\"7\":1,\"11\":1,\"14\":1}}],[\"次方\",{\"1\":{\"32\":1}}],[\"次数去执行你的\",{\"1\":{\"32\":1}}],[\"次\",{\"1\":{\"5\":1,\"32\":1,\"219\":1}}],[\"1~2ms\",{\"1\":{\"303\":1}}],[\"1版本\",{\"0\":{\"268\":1}}],[\"1s\",{\"1\":{\"225\":2,\"226\":1}}],[\"1l\",{\"1\":{\"203\":3}}],[\"1c10d748\",{\"1\":{\"162\":4}}],[\"1349650371302551552\",{\"1\":{\"80\":1}}],[\"1349650371868782592\",{\"1\":{\"80\":1}}],[\"139\",{\"1\":{\"63\":1}}],[\"1800000\",{\"1\":{\"273\":1}}],[\"180\",{\"1\":{\"273\":1}}],[\"185\",{\"1\":{\"162\":1}}],[\"18\",{\"1\":{\"63\":1,\"153\":1}}],[\"1999ms\",{\"1\":{\"225\":2}}],[\"1997ms\",{\"1\":{\"225\":1}}],[\"1994ms\",{\"1\":{\"225\":1}}],[\"19\",{\"1\":{\"46\":7,\"162\":1}}],[\"192\",{\"1\":{\"32\":10,\"42\":1,\"45\":5,\"273\":3}}],[\"147\",{\"1\":{\"62\":3}}],[\"14\",{\"1\":{\"55\":5,\"59\":3,\"62\":18,\"63\":1,\"80\":2,\"225\":11,\"304\":1}}],[\"14276\",{\"1\":{\"46\":1}}],[\"140ms\",{\"1\":{\"30\":1}}],[\"114a5e0\",{\"1\":{\"153\":1}}],[\"11ms\",{\"1\":{\"63\":1}}],[\"113\",{\"1\":{\"55\":1}}],[\"11\",{\"1\":{\"28\":1,\"59\":3,\"63\":2,\"94\":1,\"216\":1,\"299\":1}}],[\"162614487\",{\"1\":{\"275\":1,\"282\":1}}],[\"1677ms\",{\"1\":{\"225\":1}}],[\"167\",{\"1\":{\"162\":1}}],[\"16179\",{\"1\":{\"63\":1}}],[\"168\",{\"1\":{\"32\":10,\"42\":1,\"45\":6,\"273\":3}}],[\"16\",{\"1\":{\"14\":8,\"55\":1,\"89\":1,\"137\":1,\"162\":1,\"225\":9,\"273\":2}}],[\"172\",{\"1\":{\"59\":1,\"62\":6}}],[\"17943\",{\"1\":{\"55\":5}}],[\"17\",{\"1\":{\"13\":1,\"14\":5,\"55\":2,\"80\":2,\"153\":16,\"162\":6,\"305\":1}}],[\"155\",{\"1\":{\"59\":1,\"62\":6}}],[\"154\",{\"1\":{\"55\":1,\"162\":1}}],[\"150\",{\"1\":{\"55\":1}}],[\"15\",{\"1\":{\"13\":1,\"14\":7,\"55\":7,\"225\":2}}],[\"1\",{\"0\":{\"29\":1,\"34\":1,\"42\":1,\"47\":1,\"48\":1,\"49\":2,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"57\":1,\"58\":2,\"59\":1,\"61\":1,\"65\":1,\"75\":1,\"77\":1,\"78\":2,\"79\":1,\"105\":1,\"110\":1,\"169\":1,\"173\":1,\"180\":1,\"268\":1,\"291\":1,\"293\":1,\"294\":2,\"296\":1},\"1\":{\"13\":1,\"32\":10,\"34\":1,\"35\":1,\"42\":4,\"45\":6,\"46\":1,\"55\":1,\"62\":3,\"63\":2,\"75\":2,\"78\":1,\"79\":1,\"80\":8,\"83\":1,\"88\":1,\"99\":1,\"102\":2,\"103\":1,\"108\":1,\"127\":4,\"131\":1,\"145\":1,\"152\":1,\"153\":6,\"154\":1,\"158\":1,\"159\":1,\"160\":1,\"162\":3,\"163\":2,\"164\":2,\"173\":2,\"174\":1,\"175\":1,\"178\":2,\"180\":1,\"181\":1,\"182\":3,\"185\":2,\"188\":3,\"189\":1,\"190\":1,\"198\":1,\"199\":2,\"203\":2,\"206\":5,\"219\":8,\"220\":4,\"224\":2,\"225\":2,\"226\":1,\"227\":2,\"248\":2,\"271\":1,\"273\":6,\"280\":1,\"291\":1,\"292\":3,\"293\":1,\"294\":2,\"296\":1,\"302\":1}}],[\"109\",{\"1\":{\"296\":1}}],[\"109533\",{\"1\":{\"63\":1}}],[\"10s\",{\"1\":{\"225\":1}}],[\"102\",{\"1\":{\"89\":1}}],[\"1024\",{\"1\":{\"46\":1,\"232\":1}}],[\"10\",{\"0\":{\"301\":1},\"1\":{\"11\":4,\"14\":4,\"45\":1,\"46\":1,\"79\":1,\"153\":1,\"180\":1,\"219\":2,\"220\":6,\"224\":2,\"225\":1,\"273\":2,\"296\":1,\"303\":1}}],[\"1000\",{\"1\":{\"182\":1,\"206\":1,\"225\":2,\"226\":1}}],[\"10000\",{\"1\":{\"39\":1}}],[\"100000\",{\"1\":{\"32\":1,\"45\":1}}],[\"10051\",{\"1\":{\"162\":6}}],[\"100ms\",{\"1\":{\"30\":1,\"220\":1}}],[\"100\",{\"1\":{\"5\":1,\"89\":2,\"219\":1,\"224\":2,\"252\":1}}],[\"127\",{\"1\":{\"153\":1,\"185\":1,\"199\":1,\"273\":1}}],[\"121\",{\"1\":{\"59\":1,\"62\":6,\"153\":1}}],[\"126\",{\"1\":{\"59\":1,\"153\":1}}],[\"125\",{\"1\":{\"59\":1}}],[\"123\",{\"1\":{\"59\":1,\"296\":1}}],[\"123456\",{\"1\":{\"32\":4,\"42\":1,\"45\":2,\"54\":1,\"301\":1}}],[\"128\",{\"1\":{\"45\":2,\"162\":1,\"232\":1}}],[\"120\",{\"1\":{\"32\":3,\"42\":2}}],[\"12\",{\"1\":{\"2\":1,\"5\":1,\"79\":1,\"216\":1,\"225\":9}}],[\"8080\",{\"1\":{\"273\":2}}],[\"80\",{\"1\":{\"225\":1}}],[\"806\",{\"1\":{\"153\":1}}],[\"890\",{\"1\":{\"162\":1}}],[\"8848\",{\"1\":{\"162\":2,\"273\":1}}],[\"857\",{\"1\":{\"153\":1}}],[\"8265\",{\"1\":{\"162\":4}}],[\"826\",{\"1\":{\"153\":1}}],[\"82\",{\"1\":{\"63\":1}}],[\"84k\",{\"1\":{\"63\":1}}],[\"861\",{\"1\":{\"153\":1}}],[\"86\",{\"1\":{\"63\":1}}],[\"8192\",{\"1\":{\"273\":1}}],[\"81ms\",{\"1\":{\"63\":1}}],[\"8189\",{\"1\":{\"61\":1,\"62\":4,\"63\":2,\"64\":1,\"72\":1}}],[\"8188\",{\"1\":{\"57\":1,\"58\":1,\"59\":1,\"62\":6,\"64\":1,\"70\":2,\"71\":2,\"79\":1}}],[\"832\",{\"1\":{\"55\":1}}],[\"8\",{\"0\":{\"283\":1,\"285\":1},\"1\":{\"5\":1,\"63\":2,\"103\":1,\"153\":1,\"162\":1,\"301\":1}}],[\"隔天的早上\",{\"1\":{\"5\":1}}],[\"元信息\",{\"1\":{\"232\":1}}],[\"元数据作用就是在进行协议转换时候要获取真实的请求\",{\"1\":{\"232\":1}}],[\"元数据\",{\"1\":{\"231\":1}}],[\"元数据介绍\",{\"0\":{\"232\":1},\"1\":{\"230\":1}}],[\"元数据只有\",{\"1\":{\"162\":1}}],[\"元数据订阅\",{\"1\":{\"159\":1}}],[\"元\",{\"1\":{\"5\":2}}],[\"先从对应的队列中获取令牌\",{\"1\":{\"205\":1}}],[\"先从其最开始会被调用到的\",{\"1\":{\"121\":1}}],[\"先认识handlerequestbody方法\",{\"1\":{\"190\":1}}],[\"先获取到选择器对应的可用服务列表\",{\"1\":{\"178\":1}}],[\"先匹配到对应的选择器和规则\",{\"1\":{\"178\":1}}],[\"先回顾下请求处理类插件的通用流程\",{\"1\":{\"178\":1}}],[\"先关注\",{\"1\":{\"173\":1}}],[\"先在插件链初始化阶段完成插件排序\",{\"1\":{\"171\":1}}],[\"先将网关数据同步至内存\",{\"1\":{\"163\":1}}],[\"先配置一下环境\",{\"1\":{\"162\":1}}],[\"先来看\",{\"1\":{\"130\":1}}],[\"先来分析一下这个代码\",{\"1\":{\"46\":1}}],[\"先分享个我以前写的方式\",{\"1\":{\"127\":1}}],[\"先找到\",{\"1\":{\"125\":1}}],[\"先不去分析这个\",{\"1\":{\"98\":1}}],[\"先暂放一边\",{\"1\":{\"98\":1}}],[\"先思考下我自己设计长轮询\",{\"1\":{\"97\":1}}],[\"先看看关于父类\",{\"1\":{\"98\":1}}],[\"先看看这个方法\",{\"0\":{\"77\":1}}],[\"先看下\",{\"1\":{\"110\":1}}],[\"先看下调用的接口信息如下\",{\"1\":{\"75\":1}}],[\"先看下图\",{\"1\":{\"46\":1}}],[\"先往下走\",{\"1\":{\"76\":1}}],[\"先测试不经过网关转发\",{\"1\":{\"71\":1}}],[\"先启动\",{\"1\":{\"66\":1}}],[\"先手动配置选择器的配置\",{\"1\":{\"64\":1}}],[\"先把这个依赖注释掉再看\",{\"1\":{\"46\":1}}],[\"先上图\",{\"1\":{\"46\":1}}],[\"先交出\",{\"1\":{\"5\":1}}],[\"先是挑选十二位组员进行为期\",{\"1\":{\"5\":1}}],[\"将对\",{\"1\":{\"274\":2}}],[\"将大大简化框架的使用程度\",{\"1\":{\"274\":1}}],[\"将会发布\",{\"1\":{\"274\":1}}],[\"将本次请求\",{\"1\":{\"248\":1}}],[\"将本次请求传递到filterchain的下一个filter中\",{\"1\":{\"248\":1}}],[\"将结果和类型复制到exchagne\",{\"1\":{\"243\":1}}],[\"将请求交给sentinel处理\",{\"1\":{\"220\":1}}],[\"将请求结果放入\",{\"1\":{\"190\":1}}],[\"将所有请求平均负载到了每个节点上\",{\"1\":{\"220\":1}}],[\"将令牌数量赋值为设定的容量\",{\"1\":{\"206\":1}}],[\"将状态更改为启用状态\",{\"1\":{\"197\":1}}],[\"将从\",{\"1\":{\"190\":1}}],[\"将真实调用地址\",{\"1\":{\"189\":1}}],[\"将众多插件整合到一起进行统一调度处理\",{\"1\":{\"174\":1}}],[\"将先进行\",{\"1\":{\"173\":1}}],[\"将插件\",{\"1\":{\"171\":1}}],[\"将认证数据会同步到\",{\"1\":{\"162\":1}}],[\"将元数据会同步到\",{\"1\":{\"162\":1}}],[\"将更改的事件转发到每个\",{\"1\":{\"154\":1}}],[\"将资源文件中的类路径反射成类对象\",{\"1\":{\"137\":1}}],[\"将实现类缓存\",{\"1\":{\"131\":1}}],[\"将此\",{\"1\":{\"124\":1}}],[\"将此次连接信息的\",{\"1\":{\"112\":1}}],[\"将初始化的对象放入hash缓存\",{\"1\":{\"121\":1}}],[\"将数据封装为\",{\"1\":{\"111\":1}}],[\"将数据发送给各类数据刷新类\",{\"1\":{\"102\":1}}],[\"将节点信息改变后撒手不管\",{\"1\":{\"96\":1}}],[\"将自身的\",{\"1\":{\"85\":1}}],[\"将\",{\"1\":{\"4\":1,\"62\":1,\"104\":1,\"126\":1,\"130\":1,\"174\":1,\"218\":1,\"220\":1,\"240\":3,\"273\":2,\"287\":2}}],[\"团结\",{\"1\":{\"4\":1}}],[\"锻炼语言表达能力\",{\"1\":{\"4\":1}}],[\"锻炼大家的表达能力和提升技术核心力量\",{\"1\":{\"3\":1}}],[\"提供传统\",{\"1\":{\"300\":1}}],[\"提供优雅\",{\"1\":{\"283\":1}}],[\"提供优秀的代码与建议\",{\"1\":{\"267\":1}}],[\"提供零侵入性式的\",{\"1\":{\"270\":1}}],[\"提供了\",{\"1\":{\"296\":1}}],[\"提供了系统自带的各种插件\",{\"1\":{\"296\":1}}],[\"提供了自己实现的负载均衡策略\",{\"1\":{\"266\":1}}],[\"提供了一系列增强微服务的可用性功能\",{\"1\":{\"223\":1}}],[\"提供了可扩展性\",{\"1\":{\"169\":1}}],[\"提供\",{\"1\":{\"114\":1,\"223\":1,\"287\":2}}],[\"提供自身的实现子类\",{\"1\":{\"85\":1}}],[\"提供doexecute\",{\"1\":{\"82\":1}}],[\"提供的流量控制和服务熔断功能\",{\"1\":{\"218\":1}}],[\"提供的\",{\"1\":{\"70\":1,\"118\":1}}],[\"提前请假者无需惩罚\",{\"1\":{\"5\":1}}],[\"提升技术力量\",{\"1\":{\"4\":1}}],[\"提高积极性\",{\"1\":{\"4\":1}}],[\"社区完成功能\",{\"1\":{\"278\":1}}],[\"社区共建\",{\"0\":{\"275\":1,\"279\":1,\"289\":1}}],[\"社区奉行简单\",{\"1\":{\"271\":1,\"279\":1}}],[\"社区将成立正式的委员会\",{\"1\":{\"259\":1}}],[\"社区公众号\",{\"1\":{\"259\":1}}],[\"社区内各个子项目团队\",{\"1\":{\"259\":1}}],[\"社区群\",{\"1\":{\"257\":1}}],[\"社区\",{\"0\":{\"257\":1,\"278\":1}}],[\"社区运营支出\",{\"1\":{\"24\":1}}],[\"社区承诺将收到的所有赞助支持资金完全公开化\",{\"1\":{\"24\":1}}],[\"社区赞助商或支持者\",{\"1\":{\"24\":1}}],[\"社区能够持续运营和提供更加优质的服务离不开大家的支持\",{\"1\":{\"24\":1}}],[\"社区组织始终抱有积极开放宽容的态度\",{\"1\":{\"258\":1}}],[\"社区组织评委会的认可\",{\"1\":{\"23\":1,\"252\":1}}],[\"社区组员\",{\"1\":{\"8\":1}}],[\"社区成员准则\",{\"1\":{\"22\":1}}],[\"社区名声\",{\"1\":{\"22\":1}}],[\"社区除协助推广\",{\"1\":{\"22\":1}}],[\"社区欢迎所有热爱开源的小伙伴加入\",{\"1\":{\"20\":1}}],[\"社区的一些问题\",{\"1\":{\"28\":1}}],[\"社区的项目均保留原有项目的所有权利及商业化行为\",{\"1\":{\"22\":1}}],[\"社区的项目包括\",{\"1\":{\"19\":1}}],[\"社区的建设\",{\"1\":{\"3\":1}}],[\"社区项目\",{\"0\":{\"19\":1},\"1\":{\"22\":1}}],[\"社区口号\",{\"0\":{\"17\":1}}],[\"社区发展\",{\"1\":{\"14\":1}}],[\"社区做的越来越大\",{\"1\":{\"4\":1}}],[\"社区以源码阅读形式自发行的组织本次活动\",{\"1\":{\"3\":1}}],[\"促进社区的和谐\",{\"1\":{\"4\":1}}],[\"促进\",{\"1\":{\"3\":1}}],[\"星期日\",{\"1\":{\"2\":1,\"10\":1,\"13\":1}}],[\"日常事务由组织的常任负责人处理\",{\"1\":{\"259\":1}}],[\"日常运维\",{\"1\":{\"19\":1}}],[\"日志存储\",{\"1\":{\"270\":1}}],[\"日志打印\",{\"1\":{\"218\":1}}],[\"日志也可以看到\",{\"1\":{\"66\":1}}],[\"日志还没保存那怎么处理呢\",{\"0\":{\"32\":1}}],[\"日志会有一个\",{\"1\":{\"31\":1}}],[\"日\",{\"1\":{\"2\":1,\"10\":1,\"13\":1}}],[\"日期\",{\"1\":{\"2\":1,\"10\":1,\"13\":1}}],[\"29\",{\"1\":{\"271\":1}}],[\"29812\",{\"1\":{\"59\":3,\"62\":18}}],[\"2==0\",{\"1\":{\"226\":1}}],[\"261\",{\"1\":{\"153\":1}}],[\"26379\",{\"1\":{\"32\":6,\"45\":3}}],[\"28\",{\"1\":{\"63\":1,\"225\":1}}],[\"2n\",{\"1\":{\"32\":1}}],[\"249\",{\"1\":{\"225\":1}}],[\"244\",{\"1\":{\"162\":1}}],[\"24\",{\"1\":{\"13\":1,\"62\":3,\"225\":1}}],[\"2222\",{\"1\":{\"288\":1}}],[\"2202\",{\"1\":{\"288\":1}}],[\"2204\",{\"1\":{\"287\":1}}],[\"2210\",{\"1\":{\"288\":1}}],[\"2217\",{\"1\":{\"287\":1}}],[\"2218\",{\"1\":{\"287\":1}}],[\"2213\",{\"1\":{\"287\":1}}],[\"2211\",{\"1\":{\"287\":1}}],[\"2212\",{\"1\":{\"286\":1,\"288\":1}}],[\"22\",{\"1\":{\"11\":5,\"46\":7,\"62\":3,\"63\":1,\"273\":3}}],[\"2195\",{\"1\":{\"287\":1}}],[\"2197\",{\"1\":{\"287\":1}}],[\"2188\",{\"1\":{\"288\":1}}],[\"2189\",{\"1\":{\"288\":1}}],[\"2180\",{\"1\":{\"287\":1}}],[\"2181\",{\"1\":{\"32\":1,\"45\":1,\"152\":2,\"153\":11}}],[\"2179\",{\"1\":{\"287\":1}}],[\"21\",{\"1\":{\"11\":8,\"46\":3,\"62\":3}}],[\"250\",{\"1\":{\"225\":5}}],[\"252\",{\"1\":{\"225\":3}}],[\"254\",{\"1\":{\"153\":1}}],[\"255\",{\"1\":{\"63\":1,\"232\":6}}],[\"25ms\",{\"1\":{\"63\":1}}],[\"25\",{\"1\":{\"11\":4,\"14\":4,\"62\":3,\"162\":7,\"225\":1}}],[\"23\",{\"1\":{\"10\":1,\"62\":3,\"63\":1,\"225\":2,\"284\":1}}],[\"2019ms\",{\"1\":{\"225\":1}}],[\"2019\",{\"1\":{\"153\":1}}],[\"2018\",{\"1\":{\"28\":1,\"250\":1}}],[\"2001ms\",{\"1\":{\"225\":1}}],[\"20000\",{\"1\":{\"247\":1,\"248\":1}}],[\"2000\",{\"1\":{\"152\":2,\"226\":1}}],[\"200\",{\"1\":{\"89\":1,\"190\":1,\"225\":1,\"273\":1,\"296\":1}}],[\"20800\",{\"1\":{\"46\":7}}],[\"20\",{\"1\":{\"10\":1,\"11\":9,\"14\":2,\"46\":1,\"59\":3,\"62\":18,\"153\":17,\"162\":1,\"190\":1,\"266\":1,\"273\":1}}],[\"2022\",{\"1\":{\"259\":1}}],[\"20210130230250748\",{\"1\":{\"133\":1}}],[\"20210130214402997\",{\"1\":{\"130\":1}}],[\"20210130202512831\",{\"1\":{\"124\":1}}],[\"20210122042354171\",{\"1\":{\"174\":1}}],[\"20210122040245671\",{\"1\":{\"174\":1}}],[\"20210122035525261\",{\"1\":{\"174\":1}}],[\"20210122032336069\",{\"1\":{\"173\":1}}],[\"20210122030444704\",{\"1\":{\"173\":1}}],[\"20210122025700589\",{\"1\":{\"173\":1}}],[\"20210122021834793\",{\"1\":{\"167\":1}}],[\"20210122172333111\",{\"1\":{\"116\":1}}],[\"20210129113307494\",{\"1\":{\"121\":1}}],[\"20210129111231212\",{\"1\":{\"121\":1}}],[\"20210129103451844\",{\"1\":{\"120\":1}}],[\"20210129103047851\",{\"1\":{\"120\":1}}],[\"20210129095703911\",{\"1\":{\"120\":1}}],[\"20210129095623013\",{\"1\":{\"120\":1}}],[\"2021\",{\"0\":{\"10\":1,\"13\":1},\"1\":{\"10\":1,\"13\":1,\"46\":11,\"55\":5,\"59\":3,\"62\":18,\"80\":2,\"153\":16,\"162\":7,\"225\":11,\"259\":1}}],[\"2020ms\",{\"1\":{\"225\":4}}],[\"2020\",{\"0\":{\"2\":1},\"1\":{\"2\":1}}],[\"2\",{\"0\":{\"30\":1,\"35\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":2,\"59\":1,\"60\":1,\"61\":1,\"62\":2,\"63\":1,\"64\":1,\"65\":1,\"73\":2,\"74\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":2,\"105\":2,\"106\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"112\":1,\"170\":1,\"174\":1,\"181\":1,\"263\":1,\"264\":2,\"266\":2,\"294\":1,\"300\":1,\"305\":2},\"1\":{\"10\":1,\"23\":1,\"32\":1,\"42\":4,\"46\":7,\"55\":2,\"63\":2,\"78\":1,\"79\":1,\"89\":2,\"99\":1,\"112\":2,\"120\":1,\"121\":1,\"145\":1,\"152\":1,\"153\":1,\"154\":1,\"158\":1,\"159\":1,\"160\":1,\"162\":24,\"163\":2,\"164\":2,\"173\":1,\"174\":1,\"175\":1,\"178\":1,\"181\":1,\"182\":1,\"185\":1,\"188\":1,\"189\":1,\"190\":2,\"206\":5,\"218\":1,\"220\":3,\"225\":4,\"247\":1,\"248\":1,\"252\":1,\"265\":1,\"272\":1,\"273\":2,\"280\":1,\"281\":2,\"288\":1,\"292\":1,\"296\":1,\"299\":1,\"301\":6,\"302\":5,\"304\":1}}],[\"27017\",{\"1\":{\"32\":1,\"45\":1}}],[\"27\",{\"1\":{\"2\":1,\"59\":1,\"62\":6}}],[\"月我开源以来\",{\"1\":{\"296\":1}}],[\"月进入试运行阶段\",{\"1\":{\"259\":1}}],[\"月到\",{\"1\":{\"259\":1}}],[\"月\",{\"1\":{\"2\":1,\"10\":1,\"13\":1}}],[\"年左右的时候\",{\"1\":{\"305\":1}}],[\"年的时候\",{\"1\":{\"304\":1}}],[\"年双\",{\"1\":{\"299\":1}}],[\"年\",{\"1\":{\"2\":1,\"10\":1,\"13\":1,\"259\":2}}],[\"梦码读书会\",{\"0\":{\"2\":1}}],[\"梦码读书会介绍\",{\"0\":{\"1\":1},\"1\":{\"1\":1}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":318,\"nextId\":318,\"documentIds\":{\"0\":\"v-0aa6c427\",\"1\":\"v-34fd0e9f\",\"2\":\"v-34fd0e9f#dromara-dream-code-book-club-dromara-2020-event-introduction\",\"3\":\"v-34fd0e9f#activity-background\",\"4\":\"v-34fd0e9f#activity-purpose-meaning-and-goal\",\"5\":\"v-34fd0e9f#activity-development\",\"6\":\"v-34fd0e9f#activity-leader-and-main-participants\",\"7\":\"v-34fd0e9f#principal\",\"8\":\"v-34fd0e9f#the-main-participants\",\"9\":\"v-5056f6ff\",\"10\":\"v-5056f6ff#dromara-source-code-reading-soul-2021-first-activity\",\"11\":\"v-5056f6ff#activity-details\",\"12\":\"v-3ff4fd44\",\"13\":\"v-3ff4fd44#dromara-source-code-reading-soul-2021-first-activity\",\"14\":\"v-3ff4fd44#activity-details\",\"15\":\"v-7ce29625\",\"16\":\"v-7ce29625#idea\",\"17\":\"v-7ce29625#community\",\"18\":\"v-7ce29625#website\",\"19\":\"v-7ce29625#projects\",\"20\":\"v-7ce29625#join\",\"21\":\"v-7ce29625#responsibility\",\"22\":\"v-7ce29625#code-of-conduct\",\"23\":\"v-7ce29625#project-donation\",\"24\":\"v-7ce29625#support\",\"25\":\"v-7ce29625#contact-us\",\"26\":\"v-145ac574\",\"27\":\"v-0ae4773c\",\"28\":\"v-0ae4773c#handling-highly-concurrent-transactions-with-hmily\",\"29\":\"v-0ae4773c#_1-performance-issues-with-hmily\",\"30\":\"v-0ae4773c#_2-how-does-hmily-handle-rpc-call-timeouts\",\"31\":\"v-0ae4773c#_3-hmily-s-support-for-cluster-deployment-and-log-recovery-in-cluster-environments\",\"32\":\"v-0ae4773c#_4-hmily-asynchronously-saves-logs-what-if-a-drastic-event-occurs-before-logging\",\"33\":\"v-0ae4773c#hmily-configuration-tuning-for-high-concurrency-scenarios\",\"34\":\"v-381b38dd\",\"35\":\"v-381b38dd#_1-asynchronous-read-write-of-transaction-logs-using-disruptor-disruptor-is-a-lock-free-gc-free-concurrency-framework\",\"36\":\"v-381b38dd#_2-asynchronous-execution-of-confirm-and-cancel-methods\",\"37\":\"v-381b38dd#a-question-might-arise-what-if-the-cancel-or-confirm-methods-themselves-throw-exceptions\",\"38\":\"v-381b38dd#another-question-might-arise-what-if-there-s-an-exception-during-log-storage\",\"39\":\"v-381b38dd#_3-use-of-threadlocal-cache\",\"40\":\"v-381b38dd#_4-usage-of-guava-cache\",\"41\":\"v-381b38dd#these-four-aspects-collectively-make-hmily-an-asynchronous-high-performance-distributed-tcc-framework\",\"42\":\"v-381b38dd#how-to-use-hmily-https-github-com-yu199195-hmily-tree-master-hmily-tcc-demo\",\"43\":\"v-381b38dd#_1-for-dubbo-users\",\"44\":\"v-381b38dd#springcloud-users\",\"45\":\"v-381b38dd#motan-users\",\"46\":\"v-381b38dd#hmily-spring-boot-start-this-makes-it-even-easier-you-just-need-to-import-different-jar-packages-according-to-your-rpc-framework\",\"47\":\"v-616fad8c\",\"48\":\"v-616fad8c#page-operation-source-code-analysis\",\"49\":\"v-dd8cb7ba\",\"50\":\"v-dd8cb7ba#_1-prepare-source-code\",\"51\":\"v-dd8cb7ba#_1-1-fork-dromara-soul-repository-to-my-github-cchenxi-soul\",\"52\":\"v-dd8cb7ba#_1-2-clone-the-repository\",\"53\":\"v-dd8cb7ba#_1-3-open-the-source-code-with-idea\",\"54\":\"v-dd8cb7ba#_1-4-compile-the-soul-source-code\",\"55\":\"v-dd8cb7ba#_2-startup-soul\",\"56\":\"v-dd8cb7ba#_2-1-startup-soul-admin-module\",\"57\":\"v-dd8cb7ba#_2-2-startup-soul-bootstrap-module\",\"58\":\"v-dd8cb7ba#_3-test\",\"59\":\"v-dd8cb7ba#_3-1-startup-an-http-backend-service\",\"60\":\"v-dd8cb7ba#_3-1-1-test-the-service\",\"61\":\"v-dd8cb7ba#_3-1-2-test-forward-http-request\",\"62\":\"v-dd8cb7ba#_3-2-startup-two-http-backend-services-to-simulate-load-balance\",\"63\":\"v-dd8cb7ba#_3-2-1-test-the-service\",\"64\":\"v-dd8cb7ba#_3-2-2-test-load-balance\",\"65\":\"v-dd8cb7ba#_3-2-3-press-test\",\"66\":\"v-dd8cb7ba#_3-2-4-problem-in-the-process\",\"67\":\"v-50ca3d88\",\"68\":\"v-50ca3d88#i-initiation-of-the-project\",\"69\":\"v-50ca3d88#ii-introduction-to-divide-plug-in\",\"70\":\"v-50ca3d88#selector\",\"71\":\"v-50ca3d88#selector-rule\",\"72\":\"v-50ca3d88#iii-use-of-divide-plug-in\",\"73\":\"v-50ca3d88#test-gateway-routing\",\"74\":\"v-50ca3d88#test-load-balancing\",\"75\":\"v-3e324050\",\"76\":\"v-0ef5d39e\",\"77\":\"v-0ef5d39e#_1-registration-portal\",\"78\":\"v-0ef5d39e#_2-spring-mvc-register-interface-logic\",\"79\":\"v-0ef5d39e#_2-1-take-a-look-at-the-method-handlerspringmvcselector-to-handle-the-selector\",\"80\":\"v-0ef5d39e#_2-1-1-first-access-to-soul-gateway\",\"81\":\"v-0ef5d39e#_2-1-2-soul-gateway-has-been-accessed\",\"82\":\"v-0ef5d39e#_2-let-s-take-a-look-at-the-method-handlerspringmvcrule-which-handles-the-rule\",\"83\":\"v-0ef5d39e#_3-sum-up\",\"84\":\"v-04b00741\",\"85\":\"v-04b00741#abstractsoulplugin\",\"86\":\"v-04b00741#soulpluginchain\",\"87\":\"v-04b00741#plug-in-project-structure\",\"88\":\"v-04b00741#load-balancing\",\"89\":\"v-04b00741#hash\",\"90\":\"v-04b00741#randomloadbalance\",\"91\":\"v-04b00741#roundrobinloadbalance\",\"92\":\"v-04b00741#webclientplugin\",\"93\":\"v-04b00741#webclientresponseclient\",\"94\":\"v-8dcfc894\",\"95\":\"v-8dcfc894#data-synchronization-between-background-and-gateway-http-long-polling\",\"96\":\"v-8dcfc894#configuration\",\"97\":\"v-8dcfc894#data-changedlistener-system\",\"98\":\"v-8dcfc894#what-are-the-other-synchronization-strategies-doing-at-this-time\",\"99\":\"v-8dcfc894#thinking-on-the-implementation-of-long-polling\",\"100\":\"v-8dcfc894#http-longpollingdata-changedlistener-long-polling-implementation\",\"101\":\"v-8dcfc894#sum-up\",\"102\":\"v-3efd4156\",\"103\":\"v-3efd4156#data-synchronization-between-background-and-gateway-http-long-polling\",\"104\":\"v-3efd4156#pull-data-on-gateway-startup\",\"105\":\"v-3efd4156#the-gateway-polls-to-listen-for-changes\",\"106\":\"v-1a93b306\",\"107\":\"v-1a93b306#_2-1-start-2-systems\",\"108\":\"v-1a93b306#_2-2-page-operation-search-interface\",\"109\":\"v-1a93b306#_2-3-background-interface\",\"110\":\"v-1a93b306#_2-4-publish-the-event\",\"111\":\"v-1a93b306#_2-5-listen-for-events\",\"112\":\"v-1a93b306#_2-5-1-listener-injection\",\"113\":\"v-1a93b306#_2-5-2-listening-event-processing-logic\",\"114\":\"v-1a93b306#_2-6-synchronize-data-to-soul-bootstrap\",\"115\":\"v-1a93b306#data-synchronization-between-background-and-gateway-web-socket\",\"116\":\"v-1a93b306#how-to-establish-web-socket-in-the-background\",\"117\":\"v-1a93b306#how-does-the-gateway-set-up-a-web-socket\",\"118\":\"v-1a93b306#gateway-data-change-call-chain\",\"119\":\"v-1a93b306#tips\",\"120\":\"v-1532a937\",\"121\":\"v-1532a937#java-spi\",\"122\":\"v-1532a937#start-with-a-demo\",\"123\":\"v-1532a937#implementation-of-spi\",\"124\":\"v-1532a937#java-spi-thinking\",\"125\":\"v-1532a937#jdbc-spi-usage\",\"126\":\"v-1532a937#mysql-driver-package-spi\",\"127\":\"v-1532a937#filter-driver-contract-is-greater-than-configuration\",\"128\":\"v-1532a937#summary-mysql-jdbc\",\"129\":\"v-1532a937#jdbc-demo\",\"130\":\"v-1532a937#soul-spi-implementation\",\"131\":\"v-1532a937#java-spi-bug\",\"132\":\"v-1532a937#optimized-extension-loader\",\"133\":\"v-1532a937#enhanced-search-getjoin\",\"134\":\"v-1532a937#multi-tier-cache\",\"135\":\"v-1532a937#tier-1-cache-cachedinstances\",\"136\":\"v-1532a937#layer-2-cache-cachedclasses\",\"137\":\"v-1532a937#second-tier-cache-joininstances\",\"138\":\"v-1532a937#cache-summary\",\"139\":\"v-1532a937#detailed-source-code-analysis-can-be-skipped\",\"140\":\"v-708cded3\",\"141\":\"v-708cded3#introduction\",\"142\":\"v-708cded3#ak-sk-introduction\",\"143\":\"v-708cded3#plugin-usage-take-dubbo-findall-as-an-example\",\"144\":\"v-708cded3#support-added-sign-in-soulbootstrap-s-pom-xml-films\",\"145\":\"v-708cded3#add-appkey-secretkey\",\"146\":\"v-708cded3#configure-selectors-and-regulators\",\"147\":\"v-708cded3#add-the-service-of-obtaining-authentication\",\"148\":\"v-708cded3#adding-authentication-header-information-in-the-gateway\",\"149\":\"v-708cded3#demo-of-the-requested-result\",\"150\":\"v-708cded3#implementation-analysis-of-sign-plug-in\",\"151\":\"v-708cded3#pair-in-java\",\"152\":\"v-c1dba446\",\"153\":\"v-c1dba446#start-soul-admin-and-soul-bootstrap-and-use-zookeeper-to-synchronize-data-to-the-gateway\",\"154\":\"v-c1dba446#i-configuration-environment\",\"155\":\"v-c1dba446#ii-startup-service\",\"156\":\"v-c1dba446#iii-analysis-of-data-synchronization-principle-of-soul-gateway-zookeeper\",\"157\":\"v-c1dba446#iv-summary\",\"158\":\"v-be71f308\",\"159\":\"v-be71f308#start-the-admin-and-gateway-admin-operation-using-zookeeper-to-synchronize-data-to-the-gateway\",\"160\":\"v-be71f308#_1-soul-admin-changes-the-gateway-data-and-tracks-the-data-synchronization-process\",\"161\":\"v-be71f308#_2-how-does-soul-bootstrap-get-zookeeper-data-and-how-does-it-perceive-changes-in-gateway-data\",\"162\":\"v-be71f308#_3-how-does-soul-bootstrap-sense-changes-in-gateway-data\",\"163\":\"v-be71f308#iv-summary\",\"164\":\"v-50c8d66c\",\"165\":\"v-50c8d66c#how-does-soul-admin-synchronize-gateway-data\",\"166\":\"v-50c8d66c#how-does-soul-bootstrap-synchronize-gateway-data\",\"167\":\"v-50c8d66c#sum-up\",\"168\":\"v-6ab4ff1e\",\"169\":\"v-6ab4ff1e#i-introduction\",\"170\":\"v-23b8b296\",\"171\":\"v-23b8b296#plug-in-overview\",\"172\":\"v-23b8b296#plug-in-processing-flow\",\"173\":\"v-23b8b296#host-probe\",\"174\":\"v-23b8b296#_3-1-opportunity-of-exploration\",\"175\":\"v-23b8b296#_3-2-exploration-mission\",\"176\":\"v-23b8b296#_3-3-activity-check\",\"177\":\"v-23b8b296#load-balancing\",\"178\":\"v-23b8b296#sum-up\",\"179\":\"v-23db38ad\",\"180\":\"v-23db38ad#global-plugin-soulcontext-object-wrapper\",\"181\":\"v-23db38ad#divideplugin-routing-plugin\",\"182\":\"v-23db38ad#abstractsoulplugin\",\"183\":\"v-23db38ad#divideplugin\",\"184\":\"v-23db38ad#web-clientplugin-http-request-calling-plug-in\",\"185\":\"v-23db38ad#web-clientresponseplugin-http-result-processing-plug-in\",\"186\":\"v-5412e854\",\"187\":\"v-5412e854#review\",\"188\":\"v-5412e854#learn-to-use\",\"189\":\"v-5412e854#read-the-official-documents-to-have-a-general-understanding-of-it\",\"190\":\"v-5412e854#initial-use\",\"191\":\"v-5412e854#enable-the-corresponding-plug-in\",\"192\":\"v-5412e854#add-current-limit-selectors-rules\",\"193\":\"v-5412e854#interface-corresponding-access\",\"194\":\"v-5412e854#source-code-reading-read-the-source-code-with-questions\",\"195\":\"v-5412e854#how-to-ensure-that-the-redis-configuration-takes-effect-immediately-after-the-page-is-modified-and-the-corresponding-redis-connection-in-the-background-is-changed-immediately\",\"196\":\"v-5412e854#how-is-the-current-limiting-plug-in-implemented-at-the-bottom\",\"197\":\"v-5412e854#debug-call-chain\",\"198\":\"v-5412e854#method-get-keys-id\",\"199\":\"v-5412e854#execute-this-script-keys-scriptargs\",\"200\":\"v-5412e854#analysis-of-lua-current-limiting-algorithm\",\"201\":\"v-221d845b\",\"202\":\"v-221d845b#plug-in-configuration\",\"203\":\"v-221d845b#maven-dependency\",\"204\":\"v-221d845b#scenes\",\"205\":\"v-221d845b#redirect\",\"206\":\"v-221d845b#gateway-self-interface-forwarding\",\"207\":\"v-221d845b#source-code-parsing\",\"208\":\"v-221d845b#reference-link\",\"209\":\"v-338a3aae\",\"210\":\"v-338a3aae#scene-description\",\"211\":\"v-338a3aae#flow-control\",\"212\":\"v-338a3aae#fuse\",\"213\":\"v-338a3aae#fuse-1\",\"214\":\"v-338a3aae#flow-control-1\",\"215\":\"v-034e7f27\",\"216\":\"v-034e7f27#aim\",\"217\":\"v-034e7f27#what-is-resilience4j\",\"218\":\"v-034e7f27#resilience-4j-experience-with-soul\",\"219\":\"v-034e7f27#current-limiting\",\"220\":\"v-034e7f27#fuse\",\"221\":\"v-034e7f27#interpretation-of-resilience4j-plug-in-source-code\",\"222\":\"v-034e7f27#sum-up\",\"223\":\"v-685b5622\",\"224\":\"v-685b5622#aim\",\"225\":\"v-685b5622#introduction-to-the-apache-dubbo-plugin\",\"226\":\"v-685b5622#introduction-to-metadata\",\"227\":\"v-685b5622#apache-dubbo-plugin-configuration\",\"228\":\"v-685b5622#soul-bootstrap-pom-configuration\",\"229\":\"v-685b5622#soul-admin-configuration\",\"230\":\"v-685b5622#dubbo-service-pom-configuration\",\"231\":\"v-685b5622#introduction-to-apache-dubbo-generalization-calls\",\"232\":\"v-685b5622#using-generalized-calls-through-the-api-the-way-the-gateway-is-currently-used\",\"233\":\"v-685b5622#using-generalization-calls-with-spring\",\"234\":\"v-685b5622#generalization-call-implementation-flow\",\"235\":\"v-685b5622#soul-dubbo-plugin-call-resolution\",\"236\":\"v-685b5622#apachdubboplugin-generalization-call-preparation\",\"237\":\"v-685b5622#apachedubboproxyservice\",\"238\":\"v-685b5622#dubboresponseplugin\",\"239\":\"v-685b5622#web-fluxresultutils-returns-results\",\"240\":\"v-685b5622#introduction-to-dubbo-generalization-calls\",\"241\":\"v-685b5622#how-does-the-service-consumer-org-apache-dubbo-rpc-filter-genericimplfilter-intercept-generalized-calls\",\"242\":\"v-685b5622#the-service-provider-intercepts-the-generalization-request-through-generic-filter\",\"243\":\"v-685b5622#sum-up\",\"244\":\"v-685b5622#reference\",\"245\":\"v-50cb12f2\",\"246\":\"v-50cb12f2#basic-conditions\",\"247\":\"v-50cb12f2#source-repository-impact\",\"248\":\"v-50cb12f2#repository-permissions\",\"249\":\"v-50cb12f2#repository-documentation\",\"250\":\"v-50cb12f2#version-release\",\"251\":\"v-50cb12f2#organization-community\",\"252\":\"v-50cb12f2#donation-project-exit-matters-preliminary-version\",\"253\":\"v-50cb12f2#rights-and-organizational-form\",\"254\":\"v-50cb12f2#the-dromara-committee-has-the-final-interpretation-right-for-the-above-regulations\",\"255\":\"v-a01977a2\",\"256\":\"v-1500d063\",\"257\":\"v-7026e7d6\",\"258\":\"v-7026e7d6#_1-ui-简化\",\"259\":\"v-7026e7d6#_2-api-文档支持保存和打开\",\"260\":\"v-7026e7d6#_3-apis-放入到右键菜单\",\"261\":\"v-7026e7d6#_4-统计页面加入了版本号\",\"262\":\"v-1d208a80\",\"263\":\"v-1d208a80#hmily-released-2-0-2-release\",\"264\":\"v-1d208a80#hmily-s-support-for-the-popular-rpc-framework-and-spring\",\"265\":\"v-1d208a80#hmily-has-a-load-balancing-policy-for-user-rpc-clusters-in-version-2-0-2\",\"266\":\"v-1d208a80#documents\",\"267\":\"v-579c0f00\",\"268\":\"v-579c0f00#architecture\",\"269\":\"v-579c0f00#features\",\"270\":\"v-579c0f00#refactoring-part\",\"271\":\"v-579c0f00#solve-bugs\",\"272\":\"v-579c0f00#user-guide\",\"273\":\"v-579c0f00#dependency-changes\",\"274\":\"v-579c0f00#dubbo-rpc-microservices\",\"275\":\"v-579c0f00#hmily-configuration-changes\",\"276\":\"v-579c0f00#next-version\",\"277\":\"v-579c0f00#community\",\"278\":\"v-2ff94cee\",\"279\":\"v-2ff94cee#adjust-hmily-architecture-with-more-reasonable-module-partition\",\"280\":\"v-2ff94cee#gather-the-hmily-community-issue-and-solve-bugs\",\"281\":\"v-2ff94cee#community-building\",\"282\":\"v-2ff94cee#recently\",\"283\":\"v-2ff94cee#at-last\",\"284\":\"v-371e7f5d\",\"285\":\"v-371e7f5d#what-is-hutool\",\"286\":\"v-371e7f5d#_5-8-0-m1\",\"287\":\"v-371e7f5d#❌-incompatible-feature\",\"288\":\"v-371e7f5d#🐣-new-features\",\"289\":\"v-371e7f5d#🐞bug-fixed\",\"290\":\"v-371e7f5d#community-co-construction\",\"291\":\"v-fc5191d2\",\"292\":\"v-fc5191d2#soul-gateway-released-version-1-0-4-release\",\"293\":\"v-fc5191d2#changes-dubbo-usage\",\"294\":\"v-fc5191d2#recommendations-on-using-version-1-0-4\",\"295\":\"v-fc5191d2#if-you-used-version-1-0-2-before-and-want-to-update-to-version-1-0-4\",\"296\":\"v-fc5191d2#for-more-information\",\"297\":\"v-520b5f51\",\"298\":\"v-520b5f51#plugin\",\"299\":\"v-520b5f51#data-synchronization\",\"300\":\"v-520b5f51#for-users\",\"301\":\"v-520b5f51#for-developers\",\"302\":\"v-520b5f51#what-scenarios-of-soul-gateway-are-suitable-and-what-should-you-pay-attention-to\",\"303\":\"v-520b5f51#scenario1-adimistration-back-end\",\"304\":\"v-520b5f51#scenario2-company-entrance-gateway-open-platform\",\"305\":\"v-520b5f51#there-are-many-other-functions\",\"306\":\"v-520b5f51#at-last\",\"307\":\"v-3f0f9f78\",\"308\":\"v-3f0f9f78#experience-the-new-architecture-and-get-a-high-availability-and-high-performance-gateway-in-10-minutes\",\"309\":\"v-3f0f9f78#bootstrap-soul-admin\",\"310\":\"v-3f0f9f78#build-your-own-gateway\",\"311\":\"v-3f0f9f78#experience-plug-in-hot-swap-under-the-new-architecture\",\"312\":\"v-3f0f9f78#features-of-soul-gateway\",\"313\":\"v-3f0f9f78#what-scenarios-of-soul-gateway-are-suitable-and-what-should-you-pay-attention-to\",\"314\":\"v-3f0f9f78#scenario1-adimistration-back-end\",\"315\":\"v-3f0f9f78#scenario2-company-entrance-gateway-open-platform\",\"316\":\"v-3f0f9f78#my-open-source-story\",\"317\":\"v-6dc367c8\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[6,6],\"2\":[9,5],\"3\":[2,31],\"4\":[5,23],\"5\":[2,82],\"6\":[5],\"7\":[1,3],\"8\":[3,3],\"9\":[9,3],\"10\":[9,12],\"11\":[2,70],\"12\":[8,3],\"13\":[9,12],\"14\":[2,68],\"15\":[2],\"16\":[1,10],\"17\":[1,16],\"18\":[1,11],\"19\":[1,93],\"20\":[1,20],\"21\":[1,38],\"22\":[3,46],\"23\":[2,51],\"24\":[1,43],\"25\":[2,3],\"26\":[1],\"27\":[7],\"28\":[6,72],\"29\":[6,93],\"30\":[9,73],\"31\":[13,49],\"32\":[14,91],\"33\":[7,235],\"34\":[8,45],\"35\":[17,138],\"36\":[8,116],\"37\":[15,41],\"38\":[14,59],\"39\":[5,91],\"40\":[5,152],\"41\":[14],\"42\":[14,27],\"43\":[4,217],\"44\":[2,16],\"45\":[2,16],\"46\":[22,153],\"47\":[7],\"48\":[5,517],\"49\":[5,19],\"50\":[4],\"51\":[9],\"52\":[5,8],\"53\":[8],\"54\":[7,19],\"55\":[3],\"56\":[6,45],\"57\":[5,114],\"58\":[2,12],\"59\":[7,53],\"60\":[5,14],\"61\":[7,68],\"62\":[11,16],\"63\":[6,14],\"64\":[5,88],\"65\":[4,113],\"66\":[7,21],\"67\":[6],\"68\":[5,57],\"69\":[6,113],\"70\":[1,117],\"71\":[2,24],\"72\":[6,100],\"73\":[3,33],\"74\":[3,65],\"75\":[2,2],\"76\":[10],\"77\":[3,68],\"78\":[6,89],\"79\":[13,81],\"80\":[7,205],\"81\":[7,238],\"82\":[14,250],\"83\":[3,82],\"84\":[9,61],\"85\":[1,156],\"86\":[1,247],\"87\":[4,207],\"88\":[2,45],\"89\":[1,105],\"90\":[1,80],\"91\":[1,199],\"92\":[1,175],\"93\":[1,78],\"94\":[8],\"95\":[10],\"96\":[1,62],\"97\":[3,218],\"98\":[11,140],\"99\":[7,90],\"100\":[6,277],\"101\":[2,182],\"102\":[8],\"103\":[10,35],\"104\":[5,316],\"105\":[7,259],\"106\":[7,88],\"107\":[4,18],\"108\":[5,33],\"109\":[4,103],\"110\":[5,87],\"111\":[5,71],\"112\":[5,219],\"113\":[6,153],\"114\":[7,148],\"115\":[9],\"116\":[9,84],\"117\":[10,191],\"118\":[5,190],\"119\":[1,59],\"120\":[4,112],\"121\":[2,118],\"122\":[4,132],\"123\":[3,253],\"124\":[3,127],\"125\":[3,16],\"126\":[4,147],\"127\":[7,121],\"128\":[3,85],\"129\":[2,146],\"130\":[3,51],\"131\":[3,102],\"132\":[3,95],\"133\":[4,61],\"134\":[3,57],\"135\":[4,77],\"136\":[4,67],\"137\":[4,58],\"138\":[2,19],\"139\":[8,178],\"140\":[5],\"141\":[1,11],\"142\":[3,23],\"143\":[8],\"144\":[9,23],\"145\":[3],\"146\":[4,4],\"147\":[6,83],\"148\":[7,2],\"149\":[5,13],\"150\":[6],\"151\":[3,129],\"152\":[7],\"153\":[12],\"154\":[3,52],\"155\":[3,159],\"156\":[9,288],\"157\":[2,30],\"158\":[7],\"159\":[13,54],\"160\":[11,44],\"161\":[16,169],\"162\":[10,125],\"163\":[2,1],\"164\":[6,376],\"165\":[8,193],\"166\":[8,130],\"167\":[2,1],\"168\":[6],\"169\":[2,34],\"170\":[8],\"171\":[3,48],\"172\":[4,171],\"173\":[2,86],\"174\":[5,80],\"175\":[4,98],\"176\":[3,103],\"177\":[2,152],\"178\":[2,52],\"179\":[6,309],\"180\":[5,178],\"181\":[3,41],\"182\":[1,241],\"183\":[1,165],\"184\":[7,219],\"185\":[7,169],\"186\":[5],\"187\":[1,58],\"188\":[3],\"189\":[12,81],\"190\":[2],\"191\":[5,46],\"192\":[6,43],\"193\":[3,41],\"194\":[9],\"195\":[21,165],\"196\":[11],\"197\":[3,208],\"198\":[5,48],\"199\":[6,90],\"200\":[6,144],\"201\":[5,42],\"202\":[3,41],\"203\":[2,29],\"204\":[1,14],\"205\":[1,28],\"206\":[4,35],\"207\":[3,237],\"208\":[3,13],\"209\":[5,62],\"210\":[2,147],\"211\":[2,204],\"212\":[1,254],\"213\":[1,149],\"214\":[2,442],\"215\":[5],\"216\":[1,17],\"217\":[4,95],\"218\":[5,139],\"219\":[2,207],\"220\":[1,98],\"221\":[7,219],\"222\":[2,22],\"223\":[6],\"224\":[1,39],\"225\":[6,63],\"226\":[3,164],\"227\":[4],\"228\":[4,29],\"229\":[3,23],\"230\":[4,67],\"231\":[6,44],\"232\":[12,28],\"233\":[5,12],\"234\":[4,98],\"235\":[5,105],\"236\":[4,99],\"237\":[1,127],\"238\":[1,39],\"239\":[4],\"240\":[5,30],\"241\":[15,123],\"242\":[11,178],\"243\":[2,35],\"244\":[1,18],\"245\":[2],\"246\":[2,96],\"247\":[3,43],\"248\":[2,36],\"249\":[2,22],\"250\":[2,20],\"251\":[2,38],\"252\":[7,117],\"253\":[4,139],\"254\":[12],\"255\":[1],\"256\":[1],\"257\":[6,84],\"258\":[3,14],\"259\":[3,1],\"260\":[3,8],\"261\":[2,7],\"262\":[5],\"263\":[5,38],\"264\":[11,24],\"265\":[15,54],\"266\":[1,28],\"267\":[17,50],\"268\":[1],\"269\":[1,76],\"270\":[2,97],\"271\":[3,62],\"272\":[2,29],\"273\":[2,22],\"274\":[3,28],\"275\":[3,254],\"276\":[2,58],\"277\":[1,30],\"278\":[6,45],\"279\":[8,89],\"280\":[9,83],\"281\":[2,51],\"282\":[1,36],\"283\":[2,75],\"284\":[9,19],\"285\":[3,158],\"286\":[4],\"287\":[3,102],\"288\":[3,153],\"289\":[2,105],\"290\":[3,30],\"291\":[8],\"292\":[8,30],\"293\":[3,29],\"294\":[7,27],\"295\":[14,27],\"296\":[3,20],\"297\":[12,40],\"298\":[1,32],\"299\":[2,31],\"300\":[2,114],\"301\":[2,103],\"302\":[15,24],\"303\":[4,153],\"304\":[7,112],\"305\":[5,15],\"306\":[2,44],\"307\":[13,109],\"308\":[15],\"309\":[3,44],\"310\":[4,86],\"311\":[9,101],\"312\":[4,119],\"313\":[15,24],\"314\":[4,153],\"315\":[7,113],\"316\":[4,210],\"317\":[1]},\"averageFieldLength\":[5.122641509433963,87.21013494091493],\"storedFields\":{\"0\":{\"h\":\"Activity\"},\"1\":{\"h\":\"Dromara Dream Code Book Club Introduction\",\"t\":[\"Dromara Dream Code Book Club Introduction\"]},\"2\":{\"h\":\"Dromara Dream Code Book Club（Dromara 2020 event introduction）\",\"t\":[\"Date: Sunday, December 27, 2020\"]},\"3\":{\"h\":\"Activity background\",\"t\":[\"In order to increase the enthusiasm of community participants, promote the construction of the Dromara community, exercise everyone's expressive ability and improve the core strength of technology, the community organized this event in the form of source code reading.\"]},\"4\":{\"h\":\"Activity purpose, meaning and goal\",\"t\":[\"Increase motivation\",\"Improve technical strength and expand everyone's horizons\",\"Exercise language skills\",\"Promote the harmony, unity and progress of the community\",\"Make the Dromara community bigger and bigger\"]},\"5\":{\"h\":\"Activity development\",\"t\":[\"The activity is divided into multiple phases. First, twelve members are selected for a 12-day source code reading, and two online sharing is carried out during the period.\",\"In order to improve everyone's consciousness, we have set up a punishment system. First hand over 500 yuan to the administrator. If homework is not submitted at 8 am the next day, 100 yuan will be deducted for sharing latecomers. Those who ask for leave in advance do not need to be punished.\",\"Each person writes to their homework submission area in text based on the content they read every day.\"]},\"6\":{\"h\":\"Activity leader and main participants\"},\"7\":{\"h\":\"Principal\",\"t\":[\"Cui, Kimming, Xiaoyu\"]},\"8\":{\"h\":\"The main participants\",\"t\":[\"Dromara community member\"]},\"9\":{\"h\":\"Dromara Soul Source Code 01 Reading Sharing Session 02\",\"t\":[\"Dromara Online Activity\"]},\"10\":{\"h\":\"Dromara source code reading (Soul 2021 first activity)\",\"t\":[\"Date: Sunday, February 6, 2021\",\"Time：20:00 – 23:00\",\"Location: Tencent Meeting\"]},\"11\":{\"h\":\"Activity Details\",\"t\":[\"20:00 - 20:10 The opening introduces the recent dream code sharing situation by kimming & 崔\",\"20:10 - 20:25 Introduction to SPI and how Soul SPI is enhanced by zhuming\",\"20:25 - 20:50 Introduction to Reactive Programming by Ztzzz\",\"20:50 - 21:10 Soul Unit Test by yangze\",\"21:10 - 21:25 Fault-tolerant design by jiangwenbo\",\"21:25 - 21:40 Soul Web Flux loading process and processing request analysis by rwby\",\"21:40 - 21:55 Soul current limiting and fusing analysis by liupenghui\",\"21:55 - 22:05 Summary of common Java problems by muou\",\"22:05 - 22:20 How to open a social interface by weikai\",\"22:20 - 22:30 Summary and Community Development Prospects by Xiaoyu\"]},\"12\":{\"h\":\"Dromara Soul source code 01 reading sharing session 01\",\"t\":[\"Dromara Online Activity\"]},\"13\":{\"h\":\"Dromara source code reading (Soul 2021 first activity)\",\"t\":[\"Date: Sunday, January 24, 2021\",\"Time: 15:00 – 17:00\",\"Location: Tencent Meeting\"]},\"14\":{\"h\":\"Activity Details\",\"t\":[\"15:00-15:10 Opening introduction of dream code sharing process by kimming & Cui\",\"15:10-15:25 Soul data synchronization websocket by Ting\",\"15:25-15:50 Http Discovery Sharing by Zhu Ming\",\"15:50-16:10 Analysis based on the Sofa-Rpc protocol by Dongdong\",\"16:10-16:25 Metrics Monitoring by Ge Tianye\",\"16:25-16:40 Http Long Polling Sharing by Du Yuhang\",\"16:40-16:55 Sharing and introducing the overall architecture of data synchronization by Wentao Xia\",\"16:55-17:05 Microkernel Architecture Sharing by Shen Xiangjun\",\"17:05-17:20 Sharing the experience and insights of reading source code by JinZe\",\"17:20-17:30 Summary and Community Development Prospects by Xiaoyu\"]},\"15\":{\"h\":\"About Us\"},\"16\":{\"h\":\"Idea\",\"t\":[\"Let every open source enthusiast, experience the joy of open source.\"]},\"17\":{\"h\":\"Community\",\"t\":[\"Technology stack comprehensive open source co-build, maintain community neutrality, harmony and happiness to do open source.\"]},\"18\":{\"h\":\"Website\",\"t\":[\"https://dromara.org Is Dromara Open Source Community Official Website.\"]},\"19\":{\"h\":\"Projects\",\"t\":[\"Name\",\"star\",\"项目介绍\",\"High Performance One-Stop Distributed Transaction Solution\",\"Strongly Consistent Distributed Transaction Solution.\",\"Reliable Messaging Distributed Transaction Solution.\",\"Lightweight distributed log tag tracking wizard.\",\"High-level, minimalist lightweight HTTP call API framework.\",\"A library of tools to keep Java sweet.\",\"Industry-leading enterprise-class open source IAM identity management and authentication products.\",\"Non-intrusive distributed monitoring, dedicated to application-level monitoring, helps developers quickly locate problems.\",\"Tools dedicated to image composition.\",\"A simple and lightweight low-intrusive online build, automated deployment, daily operation and maintenance, project monitoring software.\",\"The most full-featured Java permission authentication framework ever!\",\"REST API-oriented high-performance authentication authentication framework .\",\"Enterprise production-grade 10 billion daily PV highly available and scalable RPC framework.\",\"All Projects\"]},\"20\":{\"h\":\"Join\",\"t\":[\"Dromara The community welcomes all open source lovers to join, you can contact us by emailing xiaoyu@dromara.org.\"]},\"21\":{\"h\":\"Responsibility\",\"t\":[\"The organization must not engage in illegal or self-interested things\",\"Responsible for the review of new and old donation projects in the community\",\"Responsible for the management of new and old community members\",\"Responsible for the promotion of all incubated projects under the community, publicity and maintenance of the project version update log\",\"Responsible for coordinating and executing the activities of community organizations\"]},\"22\":{\"h\":\"Code of Conduct\",\"t\":[\"Guidelines for donated projects: All projects donated to Dromara community retain all rights and commercialization of the original project, Dromara community does not interfere in any way except to assist in promotion, publicity and operation, but donated projects must not engage in illegal acts or slander the reputation of Dromara community.\",\"Community Member Guidelines: Do not engage in anything that is illegal or detrimental to others\",\"Community projects: do not engage in illegal or detrimental things\"]},\"23\":{\"h\":\"Project Donation\",\"t\":[\"The Dromara Open Source Community Organization has the following minimum requirements for donated projects：\",\"The project must be original and cannot be a Fork version.\",\"The project must be a complete application solution.\",\"The project must have good code comments and continuous improvement of the usage documentation.\",\"The project has a record of actual valid code submissions for at least the last 2 months.\",\"Projects must be approved by the dromara community technical committee\"]},\"24\":{\"h\":\"Support\",\"t\":[\"The Dromara community can only continue to operate and provide better services with the support of everyone. To become a Dromara community sponsor or supporter, please consider supporting:\",\"The Dromara community is committed to full disclosure of all sponsorship support funds received and subsequent use of funds will be limited to Dromara community operating expenses\",\"All Support\"]},\"25\":{\"h\":\"Contact Us\",\"t\":[\"xiaoyu@dromara.org\"]},\"26\":{\"h\":\"Blog\"},\"27\":{\"h\":\"Hmily:Easy Handle Highly Concurrent Distributed Transactions\"},\"28\":{\"h\":\"Handling Highly Concurrent Transactions with Hmily\",\"t\":[\"Let's start with a quick advertisement. Hmily is participating in the Open Source China Annual Popularity Poll at this link. Click the link, search for Hmily, and cast your vote. It's the second one in the 11th row. Thank you, everyone, for your support! Feel free to follow us and submit pull requests to make Hmily even better and more perfect.\",\"GitHub: [https://github.com/yu199195/hmily] Gitee: [https://gitee.com/dromara/hmily]\",\"Now, let's address some questions from the community and clear up some areas of confusion.\"]},\"29\":{\"h\":\"1. Performance Issues with Hmily?\",\"t\":[\"Answer: Hmily uses AOP aspect to bind with your RPC methods. It essentially saves logs (using asynchronous disruptor) and passes some parameters when you make an RPC call. Both confirm and cancel operations are now asynchronous, so its performance is similar to that of your RPC. Remember, Hmily doesn't create transactions; it's just a facilitator for distributed transactions. In the past, Hmily had a performance drop due to a locking mechanism in the AOP aspect, as discussed in an article by the Spring Cloud China community. This issue has been resolved now, and everything is asynchronous. The testing scenario was somewhat unreasonable, as it was a demo under default configurations. In the following sections, I'll explain how to improve Hmily's performance.\"]},\"30\":{\"h\":\"2. How Does Hmily Handle RPC Call Timeouts?\",\"t\":[\"Answer: In a distributed environment, when you invoke an RPC method and it exceeds the timeout, let's say the Dubbo timeout is set to 100ms but your method takes 140ms, your method has succeeded, but for the caller, it appears as a failure. In this case, a rollback is needed. Hmily's approach is as follows: if the caller thinks the operation failed due to a timeout, it won't include the operation in the rollback chain. So, for an RPC interface that times out, it handles its own rollback. A scheduled task handles the rollback because the log is in the \\\"try\\\" phase, and the cancel method is invoked for rollback, achieving eventual consistency.\"]},\"31\":{\"h\":\"3. Hmily's Support for Cluster Deployment and Log Recovery in Cluster Environments?\",\"t\":[\"Answer: Hmily is naturally compatible with cluster deployment as it's bound to your application via AOP aspect. Log recovery in a clustered environment is rarely an issue, unless your entire cluster crashes simultaneously. If your cluster goes down simultaneously and recovers, the logs have a version field; only those that are successfully updated undergo recovery.\"]},\"32\":{\"h\":\"4. Hmily Asynchronously Saves Logs, What If a Drastic Event Occurs Before Logging?\",\"t\":[\"Answer: If you're having such thoughts, you probably haven't delved into the source code or didn't fully understand it. In the AOP aspect, logs are first saved asynchronously, with the state being PRE_TRY. After the try phase execution completes, it's updated to \\\"try\\\". Even in scenarios like sudden JVM exit or power loss right after this line of code is executed, the mechanism stands. Even if you're testing scenarios like stopping the JVM abruptly or killing the service, keep in mind that Hmily can't account for all accidental events. It's best not to put excessive effort into solving these rare occurrences; the ideal solution is to not focus on them.\"]},\"33\":{\"h\":\"Hmily Configuration Tuning for High-Concurrency Scenarios\",\"t\":[\"The following parameters can be optimized for high-concurrency scenarios in Hmily:\",\"serializer: I recommend using Kryo. Hmily also supports Hessian, Protostuff, and JDK serialization. In our tests, the performance was in the order: Kryo > Hessian > Protostuff > JDK.\",\"recoverDelayTime: Delay time for the recovery task (in seconds, default is 120). This parameter should be greater than the timeout set for your RPC calls.\",\"retryMax: Maximum retry count (default is 3). When your service goes down, the recovery task will execute your cancel or confirm method for a maximum of retryMax times.\",\"bufferSize: Disruptor's buffer size. Increase this for high-concurrency scenarios; it should be a power of 2.\",\"consumerThreads: Number of threads for Disruptor's consumer. Increase this for high-concurrency scenarios.\",\"started: Set this to true for the initiator side and false for the participant side.\",\"asyncThreads: Size of the thread pool for asynchronous execution of confirm and cancel methods. Increase this for high-concurrency scenarios.\",\"Next, the most important aspect: configuring the storage of transaction logs. In our stress tests, I recommend using MongoDB, where the performance ranked as follows: MongoDB > Redis Cluster > MySQL > ZooKeeper.\",\"If you're using MongoDB for log storage, configure as follows:\",\" <bean id=\\\"hmilyTransactionBootstrap\\\" class=\\\"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap\\\"> <property name=\\\"serializer\\\" value=\\\"kryo\\\"/> <property name=\\\"recoverDelayTime\\\" value=\\\"120\\\"/> <property name=\\\"retryMax\\\" value=\\\"3\\\"/> <property name=\\\"loadFactor\\\" value=\\\"2\\\"/> <property name=\\\"scheduledDelay\\\" value=\\\"120\\\"/> <property name=\\\"scheduledThreadMax\\\" value=\\\"4\\\"/> <property name=\\\"bufferSize\\\" value=\\\"4096\\\"/> <property name=\\\"consumerThreads\\\" value=\\\"32\\\"/> <property name=\\\"started\\\" value=\\\"false\\\"/> <property name=\\\"asyncThreads\\\" value=\\\"32\\\"/> <property name=\\\"repositorySupport\\\" value=\\\"db\\\"/> <property name=\\\"tccDbConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccDbConfig\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> </bean> \",\"Here, I recommend using Kryo. Of course, Hmily also supports Hessian, Protostuff, and JDK serialization. In our tests, the performance was in the order: Kryo > Hessian > Protostuff > JDK.\",\"recoverDelayTime :Delay time for the recovery task (in seconds, default is 120). This parameter should be greater than the timeout set for your RPC calls.\",\"retryMax : Maximum retry count (default is 3). When your service goes down, the recovery task will execute your cancel or confirm method for a maximum of retryMax times.\",\"Disruptor's buffer size. Increase this for high-concurrency scenarios; it should be a power of 2.\",\"consumerThreads: Disruptor's consumer thread count. Increase this for high-concurrency scenarios.\",\"started: Set this to true for the initiator side and false for the participant side.\",\"asyncThreads: Size of the thread pool for asynchronous execution of confirm and cancel methods. Increase this for high-concurrency scenarios.\",\"Next is the most important aspect: configuring the storage of transaction logs. In our stress tests, I recommend using MongoDB, where the performance ranked as follows: MongoDB > Redis Cluster > MySQL > ZooKeeper.\",\"If you're using MongoDB for log storage, configure as follows:\",\" <property name=\\\"repositorySupport\\\" value=\\\"mongodb\\\"/> <property name=\\\"tccMongoConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccMongoConfig\\\"> <property name=\\\"mongoDbUrl\\\" value=\\\"192.168.1.68:27017\\\"/> <property name=\\\"mongoDbName\\\" value=\\\"happylife\\\"/> <property name=\\\"mongoUserName\\\" value=\\\"xiaoyu\\\"/> <property name=\\\"mongoUserPwd\\\" value=\\\"123456\\\"/> </bean> </property> \",\"If you're using Redis for log storage, configure as follows:\",\"Single node Redis:\",\" <property name=\\\"repositorySupport\\\" value=\\\"redis\\\" /> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"hostName\\\" value=\\\"192.168.1.68\\\"/> <property name=\\\"port\\\" value=\\\"6379\\\"/> <property name=\\\"password\\\" value=\\\"\\\"/> </bean> </property> \",\"Redis sentinel mode cluster:\",\"<property name=\\\"repositorySupport\\\" value=\\\"redis\\\"/> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"masterName\\\" value=\\\"aaa\\\"/> <property name=\\\"sentinel\\\" value=\\\"true\\\"/> <property name=\\\"sentinelUrl\\\" value=\\\"192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> \",\"Redis cluster mode:\",\"<property name=\\\"repositorySupport\\\" value=\\\"redis\\\"/> <property name=\\\"tccRedisConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccRedisConfig\\\"> <property name=\\\"cluster\\\" value=\\\"true\\\"/> <property name=\\\"clusterUrl\\\" value=\\\"192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> \",\"If you're using ZooKeeper for log storage, configure as follows:\",\" <property name=\\\"repositorySupport\\\" value=\\\"zookeeper\\\"/> <property name=\\\"tccZookeeperConfig\\\"> <bean class=\\\"om.hmily.tcc.common.config.TccZookeeperConfig\\\"> <property name=\\\"host\\\" value=\\\"192.168.1.73:2181\\\"/> <property name=\\\"sessionTimeOut\\\" value=\\\"100000\\\"/> <property name=\\\"rootPath\\\" value=\\\"/tcc\\\"/> </bean> </property> \",\"The database configuration has been provided above, and I won't introduce the file-based storage approach.\",\"The above is the content shared today, an annotation, and a few configuration lines to easily handle high-concurrency distributed transactions!\"]},\"34\":{\"h\":\"Hmily:High-Performance Asynchronous Distributed Transaction TCC Framework\",\"t\":[\"Seamlessly integrates with Spring and Spring Boot.\",\"Seamlessly integrates with Dubbo, Spring Cloud, Motan, and other RPC frameworks.\",\"Supports various transaction log storage methods (Redis, MongoDB, MySQL, etc.).\",\"Offers multiple serialization methods for different types of logs (Kryo, Protostuff, Hessian).\",\"Provides automatic transaction recovery.\",\"Supports embedded transaction dependency propagation.\",\"Zero-intrusion code and flexible configuration.\"]},\"35\":{\"h\":\"1. Asynchronous Read/Write of Transaction Logs Using Disruptor (Disruptor is a Lock-Free, GC-Free Concurrency Framework)\",\"t\":[\"package com.hmily.tcc.core.disruptor.publisher; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.common.enums.EventTypeEnum; import com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory; import com.hmily.tcc.core.coordinator.CoordinatorService; import com.hmily.tcc.core.disruptor.event.HmilyTransactionEvent; import com.hmily.tcc.core.disruptor.factory.HmilyTransactionEventFactory; import com.hmily.tcc.core.disruptor.handler.HmilyConsumerDataHandler; import com.hmily.tcc.core.disruptor.translator.HmilyTransactionEventTranslator; import com.lmax.disruptor.BlockingWaitStrategy; import com.lmax.disruptor.IgnoreExceptionHandler; import com.lmax.disruptor.RingBuffer; import com.lmax.disruptor.dsl.Disruptor; import com.lmax.disruptor.dsl.ProducerType; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import java.util.concurrent.Executor; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; /** * event publisher. * * @author xiaoyu(Myth) */ @Component public class HmilyTransactionEventPublisher implements DisposableBean { private Disruptor<HmilyTransactionEvent> disruptor; private final CoordinatorService coordinatorService; @Autowired public HmilyTransactionEventPublisher(final CoordinatorService coordinatorService) { this.coordinatorService = coordinatorService; } /** * disruptor start. * * @param bufferSize this is disruptor buffer size. * @param threadSize this is disruptor consumer thread size. */ public void start(final int bufferSize, final int threadSize) { disruptor = new Disruptor<>(new HmilyTransactionEventFactory(), bufferSize, r -> { AtomicInteger index = new AtomicInteger(1); return new Thread(null, r, \\\"disruptor-thread-\\\" + index.getAndIncrement()); }, ProducerType.MULTI, new BlockingWaitStrategy()); final Executor executor = new ThreadPoolExecutor(threadSize, threadSize, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), HmilyThreadFactory.create(\\\"hmily-log-disruptor\\\", false), new ThreadPoolExecutor.AbortPolicy()); HmilyConsumerDataHandler[] consumers = new HmilyConsumerDataHandler[threadSize]; for (int i = 0; i < threadSize; i++) { consumers[i] = new HmilyConsumerDataHandler(executor, coordinatorService); } disruptor.handleEventsWithWorkerPool(consumers); disruptor.setDefaultExceptionHandler(new IgnoreExceptionHandler()); disruptor.start(); } /** * publish disruptor event. * * @param tccTransaction {@linkplain com.hmily.tcc.common.bean.entity.TccTransaction } * @param type {@linkplain EventTypeEnum} */ public void publishEvent(final TccTransaction tccTransaction, final int type) { final RingBuffer<HmilyTransactionEvent> ringBuffer = disruptor.getRingBuffer(); ringBuffer.publishEvent(new HmilyTransactionEventTranslator(type), tccTransaction); } @Override public void destroy() { disruptor.shutdown(); } } \",\"The default value of bufferSize here is 4094 * 4, which can be configured based on the user's requirements.\",\" HmilyConsumerDataHandler[] consumers = new HmilyConsumerDataHandler[threadSize]; for (int i = 0; i < threadSize; i++) { consumers[i] = new HmilyConsumerDataHandler(executor, coordinatorService); } disruptor.handleEventsWithWorkerPool(consumers); \",\"Multiple consumers are employed here to process tasks in the queue.\"]},\"36\":{\"h\":\"2.Asynchronous Execution of Confirm and Cancel Methods\",\"t\":[\"package com.hmily.tcc.core.service.handler; import com.hmily.tcc.common.bean.context.TccTransactionContext; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.common.enums.TccActionEnum; import com.hmily.tcc.core.concurrent.threadpool.HmilyThreadFactory; import com.hmily.tcc.core.service.HmilyTransactionHandler; import com.hmily.tcc.core.service.executor.HmilyTransactionExecutor; import org.aspectj.lang.ProceedingJoinPoint; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import java.util.concurrent.Executor; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; /** * this is transaction starter. * * @author xiaoyu */ @Component public class StarterHmilyTransactionHandler implements HmilyTransactionHandler { private static final int MAX_THREAD = Runtime.getRuntime().availableProcessors() << 1; private final HmilyTransactionExecutor hmilyTransactionExecutor; private final Executor executor = new ThreadPoolExecutor(MAX_THREAD, MAX_THREAD, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), HmilyThreadFactory.create(\\\"hmily-execute\\\", false), new ThreadPoolExecutor.AbortPolicy()); @Autowired public StarterHmilyTransactionHandler(final HmilyTransactionExecutor hmilyTransactionExecutor) { this.hmilyTransactionExecutor = hmilyTransactionExecutor; } @Override public Object handler(final ProceedingJoinPoint point, final TccTransactionContext context) throws Throwable { Object returnValue; try { TccTransaction tccTransaction = hmilyTransactionExecutor.begin(point); try { //execute try returnValue = point.proceed(); tccTransaction.setStatus(TccActionEnum.TRYING.getCode()); hmilyTransactionExecutor.updateStatus(tccTransaction); } catch (Throwable throwable) { //if exception ,execute cancel final TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction(); executor.execute(() -> hmilyTransactionExecutor .cancel(currentTransaction)); throw throwable; } //execute confirm final TccTransaction currentTransaction = hmilyTransactionExecutor.getCurrentTransaction(); executor.execute(() -> hmilyTransactionExecutor.confirm(currentTransaction)); } finally { hmilyTransactionExecutor.remove(); } return returnValue; } } \",\"When an exception occurs in the try method's AOP aspect, the cancel method is executed asynchronously using a thread pool. If there is no exception, the confirm method is executed.\"]},\"37\":{\"h\":\"A question might arise: What if the cancel or confirm methods themselves throw exceptions?\",\"t\":[\"Answer: This scenario is quite rare because you've just finished executing the try phase moments ago. Moreover, if such an exception arises, the framework has a built-in scheduling thread pool for recovery, so there's no need to worry.\"]},\"38\":{\"h\":\"Another question might arise: What if there's an exception during log storage?\",\"t\":[\"Answer: First, this is an edge case; second, the log configuration parameters are required during framework startup. Even if log storage fails during runtime, the framework will utilize cached logs, ensuring correct program execution. Lastly, if log storage fails and the system crashes under extremely rare circumstances, well, congratulations, you can consider buying a lottery ticket. The best solution is to not overly concern yourself with such a scenario.\"]},\"39\":{\"h\":\"3.Use of ThreadLocal Cache\",\"t\":[\" /** * transaction begin. * * @param point cut point. * @return TccTransaction */ public TccTransaction begin(final ProceedingJoinPoint point) { LogUtil.debug(LOGGER, () -> \\\"......hmily transaction！start....\\\"); //build tccTransaction final TccTransaction tccTransaction = buildTccTransaction(point, TccRoleEnum.START.getCode(), null); //save tccTransaction in threadLocal CURRENT.set(tccTransaction); //publishEvent hmilyTransactionEventPublisher.publishEvent(tccTransaction, EventTypeEnum.SAVE.getCode()); //set TccTransactionContext this context transfer remote TccTransactionContext context = new TccTransactionContext(); //set action is try context.setAction(TccActionEnum.TRYING.getCode()); context.setTransId(tccTransaction.getTransId()); context.setRole(TccRoleEnum.START.getCode()); TransactionContextLocal.getInstance().set(context); return tccTransaction; } \",\"It's important to understand that the ThreadLocal cache holds transaction information for the initiator method. RPC calls form a chain of invocation, ensuring proper storage.\",\" /** * add participant. * * @param participant {@linkplain Participant} */ public void enlistParticipant(final Participant participant) { if (Objects.isNull(participant)) { return; } Optional.ofNullable(getCurrentTransaction()) .ifPresent(c -> { c.registerParticipant(participant); updateParticipant(c); }); } \"]},\"40\":{\"h\":\"4.Usage of Guava Cache\",\"t\":[\"package com.hmily.tcc.core.cache; import com.google.common.cache.CacheBuilder; import com.google.common.cache.CacheLoader; import com.google.common.cache.LoadingCache; import com.google.common.cache.Weigher; import com.hmily.tcc.common.bean.entity.TccTransaction; import com.hmily.tcc.core.coordinator.CoordinatorService; import com.hmily.tcc.core.helper.SpringBeanUtils; import org.apache.commons.lang3.StringUtils; import java.util.Optional; import java.util.concurrent.ExecutionException; /** * use google guava cache. * @author xiaoyu */ public final class TccTransactionCacheManager { private static final int MAX_COUNT = 10000; private static final LoadingCache<String, TccTransaction> LOADING_CACHE = CacheBuilder.newBuilder().maximumWeight(MAX_COUNT) .weigher((Weigher<String, TccTransaction>) (string, tccTransaction) -> getSize()) .build(new CacheLoader<String, TccTransaction>() { @Override public TccTransaction load(final String key) { return cacheTccTransaction(key); } }); private static CoordinatorService coordinatorService = SpringBeanUtils.getInstance().getBean(CoordinatorService.class); private static final TccTransactionCacheManager TCC_TRANSACTION_CACHE_MANAGER = new TccTransactionCacheManager(); private TccTransactionCacheManager() { } /** * TccTransactionCacheManager. * * @return TccTransactionCacheManager */ public static TccTransactionCacheManager getInstance() { return TCC_TRANSACTION_CACHE_MANAGER; } private static int getSize() { return (int) LOADING_CACHE.size(); } private static TccTransaction cacheTccTransaction(final String key) { return Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(new TccTransaction()); } /** * cache tccTransaction. * * @param tccTransaction {@linkplain TccTransaction} */ public void cacheTccTransaction(final TccTransaction tccTransaction) { LOADING_CACHE.put(tccTransaction.getTransId(), tccTransaction); } /** * acquire TccTransaction. * * @param key this guava key. * @return {@linkplain TccTransaction} */ public TccTransaction getTccTransaction(final String key) { try { return LOADING_CACHE.get(key); } catch (ExecutionException e) { return new TccTransaction(); } } /** * remove guava cache by key. * @param key guava cache key. */ public void removeByKey(final String key) { if (StringUtils.isNotEmpty(key)) { LOADING_CACHE.invalidate(key); } } } \",\"Among the participants, we used ThreadLocal, but why don't we use it among the participants? There are actually two reasons: First, because try and confirm will not be in the same thread, which will cause ThreadLocal to fail. When considering RPC clusters, it may be load balanced to different machines. Here is a detail:\",\" private static TccTransaction cacheTccTransaction(final String key) { return Optional.ofNullable(coordinatorService.findByTransId(key)).orElse(new TccTransaction()); } \",\"When the Guava Cache doesn't have a particular entry, it queries the log for that entry, ensuring support for clustered environments.\"]},\"41\":{\"h\":\"These four aspects collectively make Hmily an asynchronous, high-performance distributed TCC framework.\"},\"42\":{\"h\":\"How to Use Hmily?（ https://github.com/yu199195/hmily/tree/master/hmily-tcc-demo）\",\"t\":[\"Due to package naming issues, the framework package hasn't been uploaded to the Maven Central Repository. Therefore, users need to clone the code, compile it, and deploy it to their private repository.\"]},\"43\":{\"h\":\"1.For Dubbo Users\",\"t\":[\"Include in your API project:\",\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-annotation</artifactId> <version>{you version}</version> </dependency> \",\"Include in your service provider project:\",\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-dubbo</artifactId> <version>{you version}</version> </dependency> \",\"Configure the startup bean in your XML configuration.\",\" <!-- Aspect configuration, whether to enable AOP aspect--> <aop:aspectj-autoproxy expose-proxy=\\\"true\\\"/> <!--Scan the framework's packages--> <context:component-scan base-package=\\\"com.hmily.tcc.*\\\"/> <!--Startup class attribute configuration--> <bean id=\\\"hmilyTransactionBootstrap\\\" class=\\\"com.hmily.tcc.core.bootstrap.HmilyTransactionBootstrap\\\"> <property name=\\\"serializer\\\" value=\\\"kryo\\\"/> <property name=\\\"recoverDelayTime\\\" value=\\\"120\\\"/> <property name=\\\"retryMax\\\" value=\\\"3\\\"/> <property name=\\\"scheduledDelay\\\" value=\\\"120\\\"/> <property name=\\\"scheduledThreadMax\\\" value=\\\"4\\\"/> <property name=\\\"repositorySupport\\\" value=\\\"db\\\"/> <property name=\\\"tccDbConfig\\\"> <bean class=\\\"com.hmily.tcc.common.config.TccDbConfig\\\"> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8\\\"/> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </bean> </property> </bean> \",\"Of course there are many configuration properties, here I only gave a demo. For details, you can refer to this class:\",\"package com.hmily.tcc.common.config; import com.hmily.tcc.common.enums.RepositorySupportEnum; import lombok.Data; /** * hmily config. * * @author xiaoyu */ @Data public class TccConfig { /** * Resource suffix this parameter please fill in about is the transaction store path. * If it's a table store this is a table suffix, it's stored the same way. * If this parameter is not filled in, the applicationName of the application is retrieved by default */ private String repositorySuffix; /** * log serializer. * {@linkplain com.hmily.tcc.common.enums.SerializeEnum} */ private String serializer = \\\"kryo\\\"; /** * scheduledPool Thread size. */ private int scheduledThreadMax = Runtime.getRuntime().availableProcessors() << 1; /** * scheduledPool scheduledDelay unit SECONDS. */ private int scheduledDelay = 60; /** * retry max. */ private int retryMax = 3; /** * recoverDelayTime Unit seconds * (note that this time represents how many seconds after the local transaction was created before execution). */ private int recoverDelayTime = 60; /** * Parameters when participants perform their own recovery. * 1.such as RPC calls time out * 2.such as the starter down machine */ private int loadFactor = 2; /** * repositorySupport. * {@linkplain RepositorySupportEnum} */ private String repositorySupport = \\\"db\\\"; /** * disruptor bufferSize. */ private int bufferSize = 4096 * 2 * 2; /** * this is disruptor consumerThreads. */ private int consumerThreads = Runtime.getRuntime().availableProcessors() << 1; /** * db config. */ private TccDbConfig tccDbConfig; /** * mongo config. */ private TccMongoConfig tccMongoConfig; /** * redis config. */ private TccRedisConfig tccRedisConfig; /** * zookeeper config. */ private TccZookeeperConfig tccZookeeperConfig; /** * file config. */ private TccFileConfig tccFileConfig; } \"]},\"44\":{\"h\":\"SpringCloud Users\",\"t\":[\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-springcloud</artifactId> <version>{you version}</version> </dependency> \"]},\"45\":{\"h\":\"Motan Users\",\"t\":[\" <dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-motan</artifactId> <version>{you version}</version> </dependency> \"]},\"46\":{\"h\":\"hmily-spring-boot-start - this makes it even easier, you just need to import different jar packages according to your RPC framework.\",\"t\":[\"For Dubbo users, add:\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-dubbo</artifactId> <version>${your version}</version> </dependency> \",\"For Spring Cloud users, add:\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-springcloud</artifactId> <version>${your version}</version> </dependency> \",\"For Motan users, add:\",\"<dependency> <groupId>com.hmily.tcc</groupId> <artifactId>hmily-tcc-spring-boot-starter-motan</artifactId> <version>${your version}</version> </dependency> \",\"Next, configure the settings in your YML file:\",\"hmily: tcc: serializer: kryo recoverDelayTime: 128 retryMax: 3 scheduledDelay: 128 scheduledThreadMax: 10 repositorySupport: db tccDbConfig: driverClassName: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.98:3306/tcc?useUnicode=true&amp;characterEncoding=utf8 username: root password: 123456 #repositorySupport : redis #tccRedisConfig: #masterName: mymaster #sentinel : true #sentinelUrl : 192.168.1.91:26379;192.168.1.92:26379;192.168.1.93:26379 #password : foobaredbbexONE123 # repositorySupport : zookeeper # host : 92.168.1.73:2181 # sessionTimeOut : 100000 # rootPath : /tcc # repositorySupport : mongodb # mongoDbUrl : 192.168.1.68:27017 # mongoDbName : happylife # mongoUserName : xiaoyu # mongoUserPwd : 123456 # repositorySupport : file # path : /account # prefix : account \",\"Using Hmily is simple. Just annotate your interface methods with @Tcc, and you're good to go.\",\"Please note that due to space constraints, some intricate details have been summarized. For those interested, you can star and fork the project on GitHub and join the WeChat group or QQ group for discussions.\",\"GitHub repository: https://github.com/yu199195/hmily\",\"Thank you once again! If you're interested, you're welcome to provide any valuable PR contributions.\\\"\"]},\"47\":{\"h\":\"Soul Gateway Learning Admin Source Code Analysis\"},\"48\":{\"h\":\"Page Operation Source Code Analysis\",\"t\":[\"Before analyzing the source code, let's take a look at the image below. The plugin list displayed on the page corresponds to requests made to the backend. Based on these backend requests, the corresponding controller class is identified.\",\"Insert Image Description Here\",\"Then, we find the corresponding method. In the image above, it can be seen that here, we access the mapping that is empty by default in the \\\"plugin\\\". We pass in pagination-related parameters and then query the corresponding plugin records in the database.\",\"Insert Image Description Here\",\"The corresponding table in the database is shown in the image below. The \\\"divide\\\" status is enabled. In the previous article, this plugin was used to test the gateway.\",\"Insert Image Description Here\",\"At the same time, a selector is also requested. The requested controller can be seen in the image below. In the previous demonstration, we directly perform CRUD operations on the conditions in the selector on the page. These changes can be reflected in the gateway in real time without the need to restart the gateway. Therefore, in addition to the \\\"query\\\" method, the \\\"create\\\", \\\"delete\\\", and \\\"update\\\" methods have been added. After saving to the database, a \\\"publishEvent\\\" method is triggered. This event allows users to configure rules directly in the Soul backend, achieving real-time effectiveness.\",\"Insert Image Description Here\",\"public int createOrUpdate(final SelectorDTO selectorDTO) { int selectorCount; SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO); List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions(); if (StringUtils.isEmpty(selectorDTO.getId())) { selectorCount = selectorMapper.insertSelective(selectorDO); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); selectorConditionMapper.insertSelective(SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO)); }); } else { selectorCount = selectorMapper.updateSelective(selectorDO); //delete rule condition then add selectorConditionMapper.deleteByQuery(new SelectorConditionQuery(selectorDO.getId())); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); SelectorConditionDO selectorConditionDO = SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO); selectorConditionMapper.insertSelective(selectorConditionDO); }); } publishEvent(selectorDO, selectorConditionDTOs); return selectorCount; } \",\"Synchronization with soul-bootstrap (WebSocket) Source Code Analysis\",\"Previously, it was explained how data is saved to the database after performing operations on the admin page. Spring's built-in reactive programming is used to synchronize the data with the bootstrap project, achieving dynamic refreshing of gateway rules and plugins without requiring a restart. When soul-bootstrap starts, the following log entry is displayed:\",\"2021-01-21 00:33:39.620 INFO 14276 --- [0.0-9095-exec-5] o.d.s.a.l.websocket.WebsocketCollector : websocket on open successful.... \",\"The question is, which entity is it connecting to using WebSockets and how does the connection happen? By examining the code that generates this log entry, we can gain insights. Here's where the log entry is generated: First, let's analyze this code:\",\"Get the requested address from the websocketConfig configuration, which is of course configured in the location shown in the following figure.\",\"After obtaining this configuration address, a timed thread pool is created with a size of urls.length, and a daemon thread with a thread name prefix of \\\"websocket-connect\\\" is created. Why use daemon threads? Because this is just to ensure that the websocket connections of bootstrap and admin are constantly maintained, similar to the function of a heartbeat, so a daemon thread is the best choice.\",\"According to the created client, one by one, go to the address configured in the configuration file, and then print the previously found logs.\",\"Finally, start a thread to check if the client is closed. If it is closed, it will reconnect (the initial interval is 10 seconds, and then it will check every 30 seconds, so if you see multiple connection success logs printed in the console, it means that reconnection has occurred).\",\"Next, let's take a look at how the data operated in the admin background is synchronized to bootstrap. Previously, it was mentioned that after saving or updating data in the background, the publishEvent method is called. This is a method of spring's built-in reactive programming. Since it is reactive, it is event-based, and therefore requires a listener.\",\"Sure enough, the red box in the above picture is familiar, it is a listener related to websocket. If you still don't understand the connection between the listener and the previous publishEvent, then put breakpoints in the listener's code and debug it. For convenience, I clicked on this synchronization of all data here. This enters the DataChangedEventDispatcher class, calls the event-related methods, and in the lower left corner, you can see familiar methods. Yes, it is the aforementioned publishEvent.\",\"Then it will jump to the WebsocketDataChangedListener class. Here, pay attention to the send method in the debugging method.\",\"Use the send method to send the updated data to bootstrap. At this point, how admin synchronizes data to bootstrap is revealed.\",\"Soul-bootstrap data synchronization (zookeeper) source code analysis\",\"Without further ado, let's first look at the picture. Comment out the websocket configuration, open the zookeeper configuration, and start the local or remote zookeeper service. Then start soul-admin. First, enter the run method of the ZookeeperDataInit class. After this method is executed, the strange thing is that it jumps to the WebsocketDataChangedListener class. I don't understand this point. After the onPluginChanged method in this class is executed, it returns to the ZookeeperDataChangedListener class. If it is not deleted, the zkNode node data will be updated. Method for updating zk node. Moreover, the onSelectorChanged, onMetaDataChanged, and onRuleChanged methods will all first go to the corresponding methods in the WebsocketDataChangedListener class, and then enter the methods in the ZookeeperDataChangedListener class. If the plugin data is changed, it will go through the above steps again. The problem of entering two Listener classes for synchronous data has not been solved yet. Suddenly, I thought that there was a dependency on websocket in the pom file, because the websocket configuration in the application.yml file had been commented out (not enable=false), so I commented out this dependency first and then compiled the code. I found that the code did not pass the compilation. Another way is to change websocket to disabled. After the modification, I found that it would not jump to the websocket-related class again. 4. Analysis of soul-bootstrap data synchronization (http) source code\",\"As usual, modify the configuration in the yml file, and then set a breakpoint in the corresponding listener class. If http is used here, the websocket-related class will still be accessed, so it cannot be commented out directly.\",\"Let's take a look at the code inside: There is a constructor here, which instantiates a clients array blocking queue with a size of 1024. A timed task thread pool with a thread number of 1 and a name prefix of \\\"long-polling\\\" background daemon thread (as can be seen from the name, this is used for long polling). A related property configuration In the initialization method, a timed thread is started. After 5 minutes, the refreshLocalCache method for refreshing the local cache is executed every 5 minutes.\",\" private void refreshLocalCache() { this.updateAppAuthCache(); this.updatePluginCache(); this.updateRuleCache(); this.updateSelectorCache(); this.updateMetaDataCache(); } \",\"If the data is manually synchronized, the following related methods will be executed, and they will also be executed through the timed thread pool, but they will be executed immediately. Five minutes later, execute the corresponding refresh method, and print the log.\",\"2021-01-22 01:00:19.007 INFO 20800 --- [-long-polling-2] a.l.h.HttpLongPollingDataChangedListener : http sync strategy refresh config start. 2021-01-22 01:00:19.010 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[APP_AUTH], old: {group='APP_AUTH', md5='d751713988987e9331980363e24189ce', lastModifyTime=1611248118794}, updated: {group='APP_AUTH', md5='d751713988987e9331980363e24189ce', lastModifyTime=1611248419010} 2021-01-22 01:00:19.012 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[PLUGIN], old: {group='PLUGIN', md5='70b269257d47f0f6404ae7b7e976d8f1', lastModifyTime=1611248295740}, updated: {group='PLUGIN', md5='70b269257d47f0f6404ae7b7e976d8f1', lastModifyTime=1611248419012} 2021-01-22 01:00:19.069 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[RULE], old: {group='RULE', md5='5811b56257e31109621976d39fc226aa', lastModifyTime=1611248301607}, updated: {group='RULE', md5='5811b56257e31109621976d39fc226aa', lastModifyTime=1611248419069} 2021-01-22 01:00:19.075 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[SELECTOR], old: {group='SELECTOR', md5='70bad5ebb1cf6e3fc55278eef2df42f3', lastModifyTime=1611248299419}, updated: {group='SELECTOR', md5='70bad5ebb1cf6e3fc55278eef2df42f3', lastModifyTime=1611248419075} 2021-01-22 01:00:19.077 INFO 20800 --- [-long-polling-2] o.d.s.a.l.AbstractDataChangedListener : update config cache[META_DATA], old: {group='META_DATA', md5='5f79d821e3b601330631a2d53294fb34', lastModifyTime=1611248302571}, updated: {group='META_DATA', md5='5f79d821e3b601330631a2d53294fb34', lastModifyTime=1611248419077} 2021-01-22 01:00:19.077 INFO 20800 --- [-long-polling-2] a.l.h.HttpLongPollingDataChangedListener : http sync strategy refresh config success. \",\"There are other methods for synchronizing data in soul, which will be analyzed later if there is energy. This is the end of the analysis of the soul-admin source code. If further analysis is conducted, another article will be written separately.\",\"There are still many features in soul-admin that have not been used yet, and there are many interesting things. This article will be continuously updated, and the source code inside will be analyzed in detail when it is used.\",\"On January 20, 2021, analyzed how soul-admin synchronizes data to soul-bootstrap using websocket.\",\"On January 21, 2021, analyzed how soul-admin synchronizes data to soul-bootstrap using zookeeper.\",\"On January 21, 2021, analyzed how soul-admin synchronizes data to soul-bootstrap using http.\"]},\"49\":{\"h\":\"Soul Learning(1) Environment Configuration\",\"t\":[\"soul is a High-Performance Java API Gateway\",\"GitHub：https://github.com/dromara/soul\",\"document：https://dromara.org/zh-cn/docs/soul/soul.html\"]},\"50\":{\"h\":\"1. Prepare source code\"},\"51\":{\"h\":\"1.1. Fork dromara/soul repository to my github cchenxi/soul\"},\"52\":{\"h\":\"1.2. Clone the repository\",\"t\":[\"git clone https://github.com/cchenxi/soul.git \"]},\"53\":{\"h\":\"1.3.Open the source code with idea\"},\"54\":{\"h\":\"1.4. Compile the soul source code\",\"t\":[\"You can compile the project as follows.\",\"mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true \",\"待补，文章内部有报错\"]},\"55\":{\"h\":\"2. Startup soul\"},\"56\":{\"h\":\"2.1. Startup soul-admin module\",\"t\":[\"soul-admin is the management system for soul.\",\"Choose to use MySQL to storage gateway data and modify the datasource config.\",\"待补，文章内部有报错\",\"Run org.dromara.soul.admin.SoulAdminBootstrap.\",\"When success, please visit the website http://localhost:9095/, then jump to the login page, and input the corresponding user name and password to log in.\",\"The user name is admin and the password is 123456.\",\"待补，文章内部有报错\",\"待补，文章内部有报错\"]},\"57\":{\"h\":\"2.2. Startup soul-bootstrap module\",\"t\":[\"soul-bootstrap is the core of soul.\",\"Check the configuration of soul-bootstrap.\",\"待补，文章内部有报错\",\"Please make sure the ip and the port has been configured for soul-admin.\",\"If the console output as follows, it means the startup is successful.\",\"2021-01-14 15:01:15.832 INFO 17943 --- [ main] b.s.s.d.w.WebsocketSyncDataConfiguration : you use websocket sync soul data....... 2021-01-14 15:01:15.924 INFO 17943 --- [ main] o.d.s.p.s.d.w.WebsocketSyncDataService : websocket connection is successful..... 2021-01-14 15:01:16.113 INFO 17943 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' log4j:WARN No appenders could be found for logger (com.alibaba.dubbo.common.logger.LoggerFactory). log4j:WARN Please initialize the log4j system properly. log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. 2021-01-14 15:01:17.150 INFO 17943 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 9195 2021-01-14 15:01:17.154 INFO 17943 --- [ main] o.d.s.b.SoulBootstrapApplication : Started SoulBootstrapApplication in 5.508 seconds (JVM running for 6.762) \"]},\"58\":{\"h\":\"3. Test\",\"t\":[\"Add the soul-examples module to soul's pom.xml for test.\"]},\"59\":{\"h\":\"3.1. Startup an HTTP backend service\",\"t\":[\"Startup soul-examples-http\",\"You can see the dependency in soul-examples-http's pom.xml.\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-client-springmvc</artifactId> <version>${soul.version}</version> </dependency> \",\"Configure the application.yml\",\"soul: http: adminUrl: http://localhost:9095 port: 8188 contextPath: /http appName: http full: false \",\"If soul.http.full=false, you need to add the @SoulSpringMvcClient annotation in controller or controller method.\"]},\"60\":{\"h\":\"3.1.1. Test the service\",\"t\":[\"Visit http://localhost:8188/test/findByUserId?userId=1 and the result as follows.\",\"待补，文章内部有报错\"]},\"61\":{\"h\":\"3.1.2. Test forward HTTP request\",\"t\":[\"Visit http://localhost:9195/http/test/findByUserId?userId=1 and the result as follows.\",\"待补，文章内部有报错\",\"You can see the following information in the console of soul-bootstrap. It means the forward HTTP request is successful.\",\"2021-01-14 20:42:57.123 INFO 29812 --- [work-threads-11] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:42:57.125 INFO 29812 --- [work-threads-11] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:42:57.126 INFO 29812 --- [work-threads-11] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 \"]},\"62\":{\"h\":\"3.2. Startup two HTTP backend services to simulate load balance\",\"t\":[\"Choose Allow parallel run\",\"Change the port to 8189\",\"Startup soul-examples-http again\",\"待补，文章内部有报错\"]},\"63\":{\"h\":\"3.2.1. Test the service\",\"t\":[\"Visit http://localhost:8189/test/findByUserId?userId=1 and the result as follows.\",\"待补，文章内部有报错\"]},\"64\":{\"h\":\"3.2.2. Test load balance\",\"t\":[\"待补，文章内部有报错\",\"Configure two HTTP service in selector\",\"Visit http://localhost:9195/http/test/findByUserId?userId=1 more and more and result as follows.\",\"待补，文章内部有报错 You can see the following information in the console of soul-bootstrap. It means the load balance is successful.\",\"2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:34.460 INFO 29812 --- [work-threads-21] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8189/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:35.147 INFO 29812 --- [work-threads-22] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:38.755 INFO 29812 --- [work-threads-23] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:38.756 INFO 29812 --- [work-threads-23] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:38.756 INFO 29812 --- [work-threads-23] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:39.609 INFO 29812 --- [work-threads-24] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8189/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:40.317 INFO 29812 --- [work-threads-25] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 2021-01-14 20:48:40.976 INFO 29812 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http 2021-01-14 20:48:40.976 INFO 29812 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin : divide selector success match , selector name :/http/test/** 2021-01-14 20:48:40.977 INFO 29812 --- [-work-threads-1] o.d.s.plugin.httpclient.WebClientPlugin : The request urlPath is http://172.27.121.155:8188/test/findByUserId?userId=1, retryTimes is 0 \"]},\"65\":{\"h\":\"3.2.3. Press test\",\"t\":[\"Use wrk to press test and compare the two ways as follows.\",\"Visit the backend service directly.\",\"Visit the service via soul.\",\"The performance drops slightly after using the gateway, probably because of the extra layer of forwarding.\",\"➜ soul git:(master) ✗ wrk -t8 -c40 -d30s http://localhost:8189/test/findByUserId\\\\?userId\\\\=1 Running 30s test @ http://localhost:8189/test/findByUserId?userId=1 8 threads and 40 connections Thread Stats Avg Stdev Max +/- Stdev Latency 6.06ms 28.81ms 442.25ms 98.22% Req/Sec 2.05k 493.86 2.84k 74.82% 486269 requests in 30.05s, 51.01MB read Requests/sec: 16179.68 Transfer/sec: 1.70MB ➜ soul git:(master) ✗ wrk -t8 -c40 -d30s http://localhost:9195/http/test/findByUserId\\\\?userId\\\\=1 Running 30s test @ http://localhost:9195/http/test/findByUserId?userId=1 8 threads and 40 connections Thread Stats Avg Stdev Max +/- Stdev Latency 14.37ms 18.11ms 255.66ms 93.06% Req/Sec 459.41 139.11 1.01k 74.23% 109533 requests in 30.09s, 11.49MB read Requests/sec: 3639.60 Transfer/sec: 390.98KB \"]},\"66\":{\"h\":\"3.2.4. Problem in the process\",\"t\":[\"When startup the port of 8189，but the output of console is still 8188.\",\"待补，文章内部有报错\",\"After modify the value of soul.http.port, the problem solved.\",\"待补，文章内部有报错\"]},\"67\":{\"h\":\"Soul Learning(2) Use Divide Plugin\"},\"68\":{\"h\":\"I. Initiation of the Project\",\"t\":[\"Start the soul-bootstrap (9195) and soul-admin (9095) modules. We can see from the bootstrap configuration file that the two modules perform data synchronization through the Web Socket protocol:\",\"picture\",\"You can also see from the bootstrap log:\",\"picture\",\"The so-called data synchronization refers to synchronizing the data configured in soul-admin to the JVM memory in the soul cluster, which is the key to the high performance of the gateway.\",\"After we start the two projects, we can test the divide plug-in through the background management system.\"]},\"69\":{\"h\":\"II. Introduction to divide Plug-in\",\"t\":[\"The divide plug-in is the core processing plug-in for the gateway to process HTTP protocol requests, and is also the only plug-in that is enabled by default:\",\"picture\",\"We can imagine what the gateway does and guess what the divide plug-in might do to handle HTTP requests?\",\"First of all, as a micro-service gateway, there must be a distributed micro-service cluster with multiple business lines behind it, and as a unified entrance to all services, the gateway must have the ability of traffic distribution/routing/load balancing, and the word divide, as its name implies, means distribution and distribution. So we can guess that the divide plug-in is to route and forward HTTP requests according to various rules, which is also the most basic capability of the gateway.\",\"When we open the list of plug-ins on the management interface, we can see that all plug-ins are composed of two parts: ** Selector ** (selector) and ** Selector rule **.\",\"The plug-in design idea is the core design idea of soul gateway, and the two concepts of selector and rule are also the soul of soul gateway. In theory, if we master it well, we can manage the traffic of any access gateway.\",\"A plug-in has multiple selectors, and one selector corresponds to multiple rules. The selector is equivalent to the first screening of traffic, and the rule is the final screening.\"]},\"70\":{\"h\":\"Selector\",\"t\":[\"picture\",\"* ** Name **: Give your selector an easily distinguishable name * ** Type **: custom flow is a custom flow. Full flow is full flow. Custom traffic means that the request will follow your matching methods and conditions below. Full flow does not go. * ** Match mode **: and or or means that the following multiple conditions are combined in the way of and or or. * ** Condition **： * URI: It means that you filter traffic according to the way of URI, and the way of match supports fuzzy matching (/**) * Header: refers to filtering traffic based on the fields in the request header. * Query: refers to filtering traffic based on the query criteria of the URI. * IP: Refers to filtering traffic based on the real IP you request. * Host: refers to filtering traffic based on the real host you request. * Post: Not recommended. * Condition matching: * Match: Fuzzy matching, recommended and URI condition collocation, support restful style matching. （/test/**） * =: The preceding and following values must be equal to match. * RegEx: Regular match, which means that the previous value matches the following regular expression. * Like: string fuzzy match. * ** Whether to open or not **: Open to take effect * ** Print the log **: When opened, the match log is printed when a match is made. * ** Order of execution **: When there are multiple selectors, the one with the smaller execution order is executed first. \"]},\"71\":{\"h\":\"Selector rule\",\"t\":[\"picture\",\"picture\",\"As you can see, the configuration of rules is similar to that of selectors, which can be understood as a more fine-grained custom configuration.\"]},\"72\":{\"h\":\"III. Use of divide plug-in\",\"t\":[\"Without further ado, let's just run the examples module provided by soul to demonstrate the divide plugin.\",\"picture\",\"Notice that we ended up running the soul-examples-http module. The configuration file can use the default or customize the contextPath and appName, as shown in the figure above.\",\"We need to note that the contextPath attribute is very important, which is equivalent to the namespace of all our HTTP requests, and the selector is aligned one by one. Generally speaking, we can configure a service to correspond to a contextPath, and multiple service instances configured with the same contextPath under a service will be automatically mapped to the same selector for load balancing.\",\"After we start the process with port 8188, we can find that the selector and rule corresponding to this instance are automatically configured in the divide plug-in list of the management console:\",\"picture\",\"You can see that the 8188 project address I started is automatically registered:\",\"picture\"]},\"73\":{\"h\":\"Test gateway routing\",\"t\":[\"Test the forwarding without gateway through postman first:\",\"http://localhost:8188/order/findById?id=1 \",\"picture\",\"Then test the forwarding to this interface through the gateway:\",\"http://localhost:9195/my-http/order/findById?id=1 \",\"picture\",\"Looking at the log, we found that it was indeed forwarded to the 8188 interface address through the gateway:\",\"picture\"]},\"74\":{\"h\":\"Test load balancing\",\"t\":[\"We change the port to 8189 and start the second process.\",\"picture\",\"Note that IDEA needs to remove the restriction of Single instance only:\",\"picture\",\"We enter the management console again and find that two configuration addresses appear under the my-http selector:\",\"picture\",\"At this point, we continue to test and find that the load balancing strategy does work:\",\"picture\",\"Today, I just demonstrated the most basic configuration of the divide plug-in, and there are various other rule configurations that can be tried later.\"]},\"75\":{\"h\":\"待补，文章内部有报错\",\"t\":[\"待补，文章内部有报错\"]},\"76\":{\"h\":\"Soul Gateway Learning (2) HTTP Client Access Source Code Parsing\"},\"77\":{\"h\":\"1. Registration portal\",\"t\":[\"When the HTTP user accesses the Soul Gateway, it will call the soul-admin interface to register the interface that needs to be managed by the Soul Gateway. Let's see what we have done today.\",\"First look at the interface information called as follows:\",\"// SpringMvcClientBeanPostProcessor.java /** * Instantiates a new Soul client bean post processor. * * @param soulSpringMvcConfig the soul spring mvc config */ public SpringMvcClientBeanPostProcessor(final SoulSpringMvcConfig soulSpringMvcConfig) { ValidateUtils.validate(soulSpringMvcConfig); this.soulSpringMvcConfig = soulSpringMvcConfig; url = soulSpringMvcConfig.getAdminUrl() + \\\"/soul-client/springmvc-register\\\"; executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>()); } \"]},\"78\":{\"h\":\"2. Spring mvc-register interface logic\",\"t\":[\"Search \\\"springmvc-register\\\" globally and find the SoulClientController under the soul-admin module. See here. Are we familiar with those who often write CRUD? Ha-ha\",\"// SoulClientController.java /** * Register spring mvc string. * * @param springMvcRegisterDTO the spring mvc register dto * @return the string */ @PostMapping(\\\"/springmvc-register\\\") public String registerSpringMvc(@RequestBody final SpringMvcRegisterDTO springMvcRegisterDTO) { return soulClientRegisterService.registerSpringMvc(springMvcRegisterDTO); } \",\"Service layer implementation class:\",\"// SoulClientRegisterServiceImpl.java @Override @Transactional public String registerSpringMvc(final SpringMvcRegisterDTO dto) { if (dto.isRegisterMetaData()) { MetaDataDO exist = metaDataMapper.findByPath(dto.getPath()); if (Objects.isNull(exist)) { saveSpringMvcMetaData(dto); } } String selectorId = handlerSpringMvcSelector(dto); handlerSpringMvcRule(selectorId, dto); return SoulResultMessage.SUCCESS; } \",\"Dto. IsRegister MetaData () is used to determine whether to register metadata information. I don't know when to use it, and I have doubts.//TODO, go down first.\"]},\"79\":{\"h\":\"2.1 Take a look at the method handlerSpringMvcSelector to handle the Selector.\",\"t\":[\"// SoulClientRegisterServiceImpl.java private String handlerSpringMvcSelector(final SpringMvcRegisterDTO dto) { String contextPath = dto.getContext(); // 根据 contextPath 到数据库里查询，是否已经注册过。 SelectorDO selectorDO = selectorService.findByName(contextPath); String selectorId; String uri = String.join(\\\":\\\", dto.getHost(), String.valueOf(dto.getPort())); if (Objects.isNull(selectorDO)) { // 还没有注册过 selectorId = registerSelector(contextPath, dto.getRpcType(), dto.getAppName(), uri); } else { // 已经注册过，业务系统重启了会到这里 selectorId = selectorDO.getId(); //update upstream String handle = selectorDO.getHandle(); String handleAdd; DivideUpstream addDivideUpstream = buildDivideUpstream(uri); SelectorData selectorData = selectorService.buildByName(contextPath); if (StringUtils.isBlank(handle)) { handleAdd = GsonUtils.getInstance().toJson(Collections.singletonList(addDivideUpstream)); } else { List<DivideUpstream> exist = GsonUtils.getInstance().fromList(handle, DivideUpstream.class); for (DivideUpstream upstream : exist) { if (upstream.getUpstreamUrl().equals(addDivideUpstream.getUpstreamUrl())) { return selectorId; } } exist.add(addDivideUpstream); handleAdd = GsonUtils.getInstance().toJson(exist); } selectorDO.setHandle(handleAdd); selectorData.setHandle(handleAdd); // update db selectorMapper.updateSelective(selectorDO); // submit upstreamCheck upstreamCheckService.submit(contextPath, addDivideUpstream); // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(selectorData))); } return selectorId; } \"]},\"80\":{\"h\":\"2.1.1 First Access to Soul Gateway\",\"t\":[\"For the new access, the selectorDO cannot be found in the database. Enter the registerSelector method to carefully see which database tables have been inserted with data.\",\"// SoulClientRegisterServiceImpl.java private String registerSelector(final String contextPath, final String rpcType, final String appName, final String uri) { SelectorDTO selectorDTO = SelectorDTO.builder() .name(contextPath) .type(SelectorTypeEnum.CUSTOM_FLOW.getCode()) .matchMode(MatchModeEnum.AND.getCode()) .enabled(Boolean.TRUE) .loged(Boolean.TRUE) .continued(Boolean.TRUE) .sort(1) .build(); if (RpcTypeEnum.DUBBO.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.DUBBO.getName())); } else if (RpcTypeEnum.SPRING_CLOUD.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.SPRING_CLOUD.getName())); selectorDTO.setHandle(GsonUtils.getInstance().toJson(buildSpringCloudSelectorHandle(appName))); } else if (RpcTypeEnum.SOFA.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.SOFA.getName())); selectorDTO.setHandle(appName); } else if (RpcTypeEnum.TARS.getName().equals(rpcType)) { selectorDTO.setPluginId(getPluginId(PluginEnum.TARS.getName())); selectorDTO.setHandle(appName); } else { //is divide DivideUpstream divideUpstream = buildDivideUpstream(uri); String handler = GsonUtils.getInstance().toJson(Collections.singletonList(divideUpstream)); selectorDTO.setHandle(handler); selectorDTO.setPluginId(getPluginId(PluginEnum.DIVIDE.getName())); upstreamCheckService.submit(selectorDTO.getName(), divideUpstream); } SelectorConditionDTO selectorConditionDTO = new SelectorConditionDTO(); selectorConditionDTO.setParamType(ParamTypeEnum.URI.getName()); selectorConditionDTO.setParamName(\\\"/\\\"); selectorConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); selectorConditionDTO.setParamValue(contextPath + \\\"/**\\\"); selectorDTO.setSelectorConditions(Collections.singletonList(selectorConditionDTO)); return selectorService.register(selectorDTO); } \",\"Are you excited to see so many if else? You can think about how to optimize so many if else and PR -.\",\"Having written so much, it is nothing more than encapsulating the Selector DTO object, and finally calling the selectorS ervice. Register (Selector DTO) into the library, and continuing to follow.\",\"// SelectorServiceImpl.java @Override public String register(final SelectorDTO selectorDTO) { SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO); List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions(); if (StringUtils.isEmpty(selectorDTO.getId())) { selectorMapper.insertSelective(selectorDO); selectorConditionDTOs.forEach(selectorConditionDTO -> { selectorConditionDTO.setSelectorId(selectorDO.getId()); // 这里在 for 循环里调用 dao 层插入数据，是不是可以考虑挪出去一次性批量插入？ selectorConditionMapper.insertSelective(SelectorConditionDO .buildSelectorConditionDO(selectorConditionDTO)); }); } publishEvent(selectorDO, selectorConditionDTOs); return selectorDO.getId(); } \",\"You can see that there are two warehousing methods, which insert data into the selector and selector _ condition tables respectively. Here we will not discuss the structure and business significance of the table in detail, and we will add it later.\",\"The publishEvent method, which involves the ApplicationEventPublisher interface, is an implementation of the observer pattern. After the event is published, the subsequent operations are completed through the listener. Here, press No Table first, and then write an article for analysis.\"]},\"81\":{\"h\":\"2.1.2 Soul Gateway has been accessed\",\"t\":[\"Just like Inception, we go back two layers of dreams and go back to the other branch of inserting data. It can be imagined that the system that has been connected to the Soul gateway restarts, or the new node starts to go.\",\"Post the previous code again:\",\"// SoulClientRegisterServiceImpl.java private String handlerSpringMvcSelector(final SpringMvcRegisterDTO dto) { String contextPath = dto.getContext(); // 根据 contextPath 到数据库里查询，是否已经注册过。 SelectorDO selectorDO = selectorService.findByName(contextPath); String selectorId; String uri = String.join(\\\":\\\", dto.getHost(), String.valueOf(dto.getPort())); if (Objects.isNull(selectorDO)) { // 还没有注册过 selectorId = registerSelector(contextPath, dto.getRpcType(), dto.getAppName(), uri); } else { // 已接入的业务系统重启，或新节点启动，会到这里 selectorId = selectorDO.getId(); //update upstream // handle 字段存储这个接口真实节点信息，可能存在多台机器需要负载均衡的场景 String handle = selectorDO.getHandle(); String handleAdd; DivideUpstream addDivideUpstream = buildDivideUpstream(uri); SelectorData selectorData = selectorService.buildByName(contextPath); if (StringUtils.isBlank(handle)) { // 这个接口虽然之前注册过，但第1个服务器节点接入 Soul 时会进来 handleAdd = GsonUtils.getInstance().toJson(Collections.singletonList(addDivideUpstream)); } else { // 如果已经至少有1个服务器节点已接入，会进到这里，判断是否是同一个节点（使用 upstreamUrl 区分），如果相同直接返回 List<DivideUpstream> exist = GsonUtils.getInstance().fromList(handle, DivideUpstream.class); for (DivideUpstream upstream : exist) { if (upstream.getUpstreamUrl().equals(addDivideUpstream.getUpstreamUrl())) { return selectorId; } } // 如果不是同一个节点，把新节点加入到 handle 字段中 exist.add(addDivideUpstream); handleAdd = GsonUtils.getInstance().toJson(exist); } selectorDO.setHandle(handleAdd); selectorData.setHandle(handleAdd); // update db 更新数据库 selectorMapper.updateSelective(selectorDO); // submit upstreamCheck upstreamCheckService.submit(contextPath, addDivideUpstream); // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(selectorData))); } return selectorId; } \",\"Because the database table structure design has not been studied, according to some known guesses, one selector corresponds to one divide plug-in, which is identified by contextPath (here is \\\"/HTTP\\\"), and one contextPath can deploy multiple server nodes. The node information is stored in the handle field as JSON.\",\"// handle/handleAdd 数据格式 [ { \\\"upstreamHost\\\": \\\"localhost\\\", \\\"protocol\\\": \\\"http://\\\", \\\"upstreamUrl\\\": \\\"10.0.0.12:8188\\\", \\\"weight\\\": 50, \\\"status\\\": true, \\\"timestamp\\\": 0, \\\"warmup\\\": 0 } ] \",\"The next step is to update the database update Selective.\",\"upstreamCheckService.submit(contextPath, addDivideUpstream); The real server node information is cached in a Map (UPSTREAM _ MAP), and there are regular tasks to detect the activity. If the service node is found to be down, it will be eliminated to prevent the request from being sent to the node that has been down.\",\"Then there is the eventPublisher. PublishEvent (), which, like the previous publishEvent method, publishes the event and completes the subsequent operations through the listener. Here, the message of data SelectorData modification is sent through the web socket long connection established with the Soul gateway. The Soul gateway modifies the data according to the message. What data is modified and how to modify it will be analyzed later.\",\"At this point, the handlerSpringMvcSelector method is finally analyzed.\"]},\"82\":{\"h\":\"2.Let's take a look at the method handlerSpringMvcRule, which handles the Rule.\",\"t\":[\"// SoulClientRegisterServiceImpl.java private void handlerSpringMvcRule(final String selectorId, final SpringMvcRegisterDTO dto) { RuleDO ruleDO = ruleMapper.findByName(dto.getRuleName()); if (Objects.isNull(ruleDO)) { registerRule(selectorId, dto.getPath(), dto.getRpcType(), dto.getRuleName()); } } \",\"First, take the name of the rule and go to the rule table to get the data. If the table name has been registered, there is no operation.\",\"Look at the database data, which is the interface address under the business system.\",\"mysql> use soul; Database changed mysql> select * from rule where name = '/http/order/findById' \\\\G *************************** 1. row *************************** id: 1349650371868782592 selector_id: 1349650371302551552 match_mode: 0 name: /http/order/findById enabled: 1 loged: 1 sort: 1 handle: {\\\"loadBalance\\\":\\\"random\\\",\\\"retry\\\":0,\\\"timeout\\\":3000} date_created: 2021-01-14 17:31:39 date_updated: 2021-01-14 17:31:39 1 row in set (0.00 sec) \",\"If you don't get the data, register this rule.\",\"// SoulClientRegisterServiceImpl.java private void registerRule(final String selectorId, final String path, final String rpcType, final String ruleName) { RuleHandle ruleHandle = RuleHandleFactory.ruleHandle(RpcTypeEnum.acquireByName(rpcType), path); RuleDTO ruleDTO = RuleDTO.builder() .selectorId(selectorId) .name(ruleName) .matchMode(MatchModeEnum.AND.getCode()) .enabled(Boolean.TRUE) .loged(Boolean.TRUE) .sort(1) .handle(ruleHandle.toJson()) .build(); RuleConditionDTO ruleConditionDTO = RuleConditionDTO.builder() .paramType(ParamTypeEnum.URI.getName()) .paramName(\\\"/\\\") .paramValue(path) .build(); if (path.indexOf(\\\"*\\\") > 1) { ruleConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); } else { ruleConditionDTO.setOperator(OperatorEnum.EQ.getAlias()); } ruleDTO.setRuleConditions(Collections.singletonList(ruleConditionDTO)); ruleService.register(ruleDTO); } \",\"In the first line, the corresponding RuleHandle is obtained according to rpcType ( \\\"HTTP\\\"). Here, three types are built in by default. Here, HTTP corresponds to DivideRuleHandle.\",\"// RuleHandleFactory.java public final class RuleHandleFactory { /** * The RpcType to RuleHandle class map. */ private static final Map<RpcTypeEnum, Class<? extends RuleHandle>> RPC_TYPE_TO_RULE_HANDLE_CLASS = new ConcurrentHashMap<>(); /** * The default RuleHandle. */ private static final Class<? extends RuleHandle> DEFAULT_RULE_HANDLE = SpringCloudRuleHandle.class; static { RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.HTTP, DivideRuleHandle.class); RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.DUBBO, DubboRuleHandle.class); RPC_TYPE_TO_RULE_HANDLE_CLASS.put(RpcTypeEnum.SOFA, SofaRuleHandle.class); } /** * Get a RuleHandle object with given rpc type and path. * @param rpcType rpc type. * @param path path. * @return RuleHandle object. */ public static RuleHandle ruleHandle(final RpcTypeEnum rpcType, final String path) { if (Objects.isNull(rpcType)) { return null; } Class<? extends RuleHandle> clazz = RPC_TYPE_TO_RULE_HANDLE_CLASS.getOrDefault(rpcType, DEFAULT_RULE_HANDLE); try { return clazz.newInstance().createDefault(path); } catch (InstantiationException | IllegalAccessException e) { throw new SoulException( String.format(\\\"Init RuleHandle failed with rpc type: %s, rule class: %s, exception: %s\\\", rpcType, clazz.getSimpleName(), e.getMessage())); } } } \",\"Let's construct the RuleDTO object and register the rules.\",\"// RuleServiceImpl.java @Override public String register(final RuleDTO ruleDTO) { RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO); List<RuleConditionDTO> ruleConditions = ruleDTO.getRuleConditions(); if (StringUtils.isEmpty(ruleDTO.getId())) { ruleMapper.insertSelective(ruleDO); ruleConditions.forEach(ruleConditionDTO -> { ruleConditionDTO.setRuleId(ruleDO.getId()); // 这里在 for 循环里调用 dao 层插入数据，是不是可以考虑挪出去一次性批量插入？ ruleConditionMapper.insertSelective(RuleConditionDO .buildRuleConditionDO(ruleConditionDTO)); }); } publishEvent(ruleDO, ruleConditions); return ruleDO.getId(); } \",\"Insert data into the rule and rule _ condition tables, respectively.\",\"The publishEvent () method sends RuleData data to the Soul gateway through the web socket long connection.\"]},\"83\":{\"h\":\"3.Sum up\",\"t\":[\"At this point, the logical analysis of calling the \\\"/soul-client/springmvc-register\\\" interface is finished, and we summarize as follows:\",\"Process the selector \",\"Add or modify selector and selector _ condition table data, and persist them to MySQL.\",\"Send data change information to Soul gateway through websocket.\",\"Process the rule \",\"Add or modify the data of rule and rule _ condition tables, and persist them to MySQL.\",\"Send data change information to Soul gateway through websocket.\",\"The table structure and field meaning need further study and research. After the websocket is sent to the Soul gateway, what the gateway has done also needs follow-up analysis.\",\"At this point, the registration logic of the HTTP user accessing the Soul gateway is analyzed.\",\"If you have the need to use the gateway in your work, or you have the pursuit of learning the gateway, welcome to analyze and learn with me. Soul Gateway, you deserve it.\"]},\"84\":{\"h\":\"Soul Gateway learning plugin chain and load balancing analysis\",\"t\":[\"Start with a class diagram:\",\"plugin diagram\",\"Two of the most basic plug-in classes are:\",\"SoulPlugin: Defines the interface of the plug-in responsibility. The key method execute() is called by the upper layer. skip() The method can cause some plug-ins to be skipped in some requests.\",\"AbstractPlugin: An abstract class that implements an interface execute(), defines a common execution process, and uses the design pattern of the template method to provide doExecute() an abstract method for the implementation class to write its own logic.\"]},\"85\":{\"h\":\"AbstractSoulPlugin\",\"t\":[\"Specific analysis of the execute() following AbstractSoulPlugin categories:\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String pluginName = named(); final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); // If pluginData.getEnabled() is false, it will skip to the next plugin, only a few plugins will enter this condition (DividePlugin, AlibabaDubboPlugin, etc.) if (pluginData != null && pluginData.getEnabled()) { // Get all selectors on the plugin final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); if (CollectionUtils.isEmpty(selectors)) { return CheckUtils.checkSelector(pluginName, exchange, chain); } // Check whether the request path in the context matches the selector and get the only matching selector data final SelectorData selectorData = matchSelector(exchange, selectors); if (Objects.isNull(selectorData)) { if (PluginEnum.WAF.getName().equals(pluginName)) { return doExecute(exchange, chain, null, null); } return CheckUtils.checkSelector(pluginName, exchange, chain); } if (selectorData.getLoged()) { log.info(\\\"{} selector success match , selector name :{}\\\", pluginName, selectorData.getName()); } // Gets the individual resource rules in the selector final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); if (CollectionUtils.isEmpty(rules)) { if (PluginEnum.WAF.getName().equals(pluginName)) { return doExecute(exchange, chain, null, null); } return CheckUtils.checkRule(pluginName, exchange, chain); } RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { rule = rules.get(rules.size() - 1); } else { // Match the path to obtain a unique rule rule = matchRule(exchange, rules); } if (Objects.isNull(rule)) { return CheckUtils.checkRule(pluginName, exchange, chain); } if (rule.getLoged()) { log.info(\\\"{} rule success match ,rule name :{}\\\", pluginName, rule.getName()); } // Execute methods of subclasses return doExecute(exchange, chain, selectorData, rule); } // Execute the next plug-in on the plug-in chain return chain.execute(exchange); } \",\"Through code analysis, some conclusions can be drawn:\",\"Execute () has two logics: one is the matching of the request path with the selector and the rule, which finally confirms a unique rule and calls the subclass doExecute (); The second is to execute the next plug-in in the plug-in chain.\",\"The execute () actually abstracts a set of rule matching logic, which is used by all the \\\"forwarding type\\\" plug-ins. Currently, I know the forwarding type plug-ins are DividePlugin (HTTP request) and AlibabaDubboPlugin (dubbo request). Other types of plug-ins that do not override the execute () method will go directly to the next plug-in.\"]},\"86\":{\"h\":\"SoulPluginChain\",\"t\":[\"Another point here is the formation and chain call of the plug-in chain. Let's analyze SoulPluginChain this part:\",\"plugin02\",\"The SoulPluginChain interface also defines execute() methods for the caller to use, and its only subclass, DefaultSoulPluginChain, implements chained calls:\",\"public Mono<Void> execute(final ServerWebExchange exchange) { return Mono.defer(() -> { // plugins contains all plugins loaded by the gateway if (this.index < plugins.size()) { // Each time the execute() method is called, the index index increases and is called to the next plug-in SoulPlugin plugin = plugins.get(this.index++); // Determine whether the current plug-in needs to be skipped based on the context Boolean skip = plugin.skip(exchange); if (skip) { return this.execute(exchange); } else { return plugin.execute(exchange, this); } } else { return Mono.empty(); } }); } \",\"It's curious plugins to see where this list of plug-ins comes from. Here's an explanation. DefaultSoulPluginChain is a static inner class of SoulWebHandler. Is plugins an attribute in the Soul Web Handle:\",\"public final class SoulWebHandler implements WebHandler { private List<SoulPlugin> plugins; public SoulWebHandler(final List<SoulPlugin> plugins) { this.plugins = plugins; // ... } @Override public Mono<Void> handle(@NonNull final ServerWebExchange exchange) { // ... return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler) .doOnSuccess(t -> startTimer.ifPresent(time -> MetricsTrackerFacade.getInstance().histogramObserveDuration(time))); } private static class DefaultSoulPluginChain implements SoulPluginChain { } } \",\"So where did the plugins SoulWeb Handler come from? You can continue to trace back to where its constructor was called:\",\"@Configuration public class SoulConfiguration { @Bean(\\\"webHandler\\\") public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { List<SoulPlugin> pluginList = plugins.getIfAvailable(Collections::emptyList); final List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); soulPlugins.forEach(soulPlugin -> log.info(\\\"loader plugin:[{}] [{}]\\\", soulPlugin.named(), soulPlugin.getClass().getName())); return new SoulWebHandler(soulPlugins); } } \",\"It can be seen that the writing plugins is started by means of Spring Bean, that is, when the container starts, all plug-ins are loaded. Here, the entry parameter is used ObjectProvider to lazily load all beans of the SoulPlugin type (if none of them are used, no error will be reported) and inject them into the SoulWebHandler.\",\"** There's a little hole to watch out for! **\",\"All plug-ins, including DividePlugin, AlibabaDubboPlugin, etc., are configured by the XX PluginConfiguration class in their respective soul-spring-boot-starter-plugin-xx projects to register their own plug-ins as beans, similar to the following example:\",\"@Configuration public class DividePluginConfiguration { @Bean public SoulPlugin dividePlugin() { return new DividePlugin(); } } \",\"Therefore, in the gateway project soul-bootstrap, if you need to use a plug-in, you not only need to open the plug-in in the management background, but also need to confirm whether there is a dependency of the soul-spring-boot-starter-plugin-xx relevant plug-in in the following soul-bootstrappom.xml, for example:\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-divide</artifactId> <version>${project.version}</version> </dependency> \",\"If you have a comment here or it doesn't exist, don't expect to see it on the plugin chain..\"]},\"87\":{\"h\":\"Plug-in project structure\",\"t\":[\"Finally, briefly describe the functions of each plug-in project:\",\"The first is the spring bean startup class project just mentioned, listing a general idea:\",\"soul-spring-boot-starter-plugin-alibaba-dubbo soul-spring-boot-starter-plugin-apache-dubbo soul-spring-boot-starter-plugin-context-path soul-spring-boot-starter-plugin-divide soul-spring-boot-starter-plugin-global soul-spring-boot-starter-plugin-httpclient soul-spring-boot-starter-plugin-hystrix soul-spring-boot-starter-plugin-monitor soul-spring-boot-starter-plugin-ratelimiter soul-spring-boot-starter-plugin-resilience4j soul-spring-boot-starter-plugin-rewrite soul-spring-boot-starter-plugin-sentinel soul-spring-boot-starter-plugin-sign soul-spring-boot-starter-plugin-sofa soul-spring-boot-starter-plugin-springcloud soul-spring-boot-starter-plugin-tars soul-spring-boot-starter-plugin-waf \",\"Their main functions have just been mentioned, registering their own SoulPlugin subclasses as spring beans, and registering spring beans to the PluginData Handler interface called in AbstractSoulPlugin. Provide its own implementation subclass, such as DividePluginDataHandler.\",\"Specific plug-in class project:\",\"soul-plugin-alibaba-dubbo soul-plugin-apache-dubbo soul-plugin-api soul-plugin-base soul-plugin-context-path soul-plugin-divide soul-plugin-global soul-plugin-httpclient soul-plugin-hystrix soul-plugin-monitor soul-plugin-ratelimiter soul-plugin-resilience4j soul-plugin-rewrite soul-plugin-sentinel soul-plugin-sign soul-plugin-sofa soul-plugin-springcloud soul-plugin-tars soul-plugin-waf \",\"Take the soul-plugin-divide DividePlugin and DividePluginDataHandler mentioned just now as examples. And the project also has node information cache manager Upstream Cache Manager, load balancing strategy class LoadBalance and so on.\",\"The function of DividePlugin is to match Http requests. Since there are Http requests, there are naturally forwarding downstream and returning responses. So here we will analyze three plug-ins: DividePlugin, WebClientPlugin, WebClientResponsePlugin.\",\"Let's start with that implementation in doExecute() DividePlugin, where I just keep the core point:\",\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // Get the cluster of service nodes in the cache by selector ID final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); // Call the load balancing method and pass in the policy type to get a unique node DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); // Get the real url of the node and put it in the exchange context String domain = buildDomain(divideUpstream); String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); // Continue to call the next plug-in return chain.execute(exchange); } \",\"As you can see, after executing the DividePlugin doExecute() method, we already have the real path of the downstream service node in the ServerWeb Exchange context, and we just need to request it. But don't worry, the load balancing strategy here is also the key point, and then analyze.\"]},\"88\":{\"h\":\"Load balancing\",\"t\":[\"How to execute the load balancing of Soul Gateway involves not only various strategies (hasn, random, polling), but also the concept of \\\"weight score\\\". The specific configuration of the management background is as follows:\",\"待补，文章内部有报错\",\"待补，文章内部有报错\",\"待补，文章内部有报错\",\"After showing the background configuration, let's take a look at the code implementation of each strategy.\"]},\"89\":{\"h\":\"Hash\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { final ConcurrentSkipListMap<Long, DivideUpstream> treeMap = new ConcurrentSkipListMap<>(); for (DivideUpstream address : upstreamList) { // Each node *VIRTUAL_NODE_NUM(default 5) to make the hash more uniform for (int i = 0; i < VIRTUAL_NODE_NUM; i++) { long addressHash = hash(\\\"SOUL-\\\" + address.getUpstreamUrl() + \\\"-HASH-\\\" + i); treeMap.put(addressHash, address); } } // Obtain a hash value from the current ip address and compare treemap(ordered) to find a location greater than the hash value long hash = hash(String.valueOf(ip)); SortedMap<Long, DivideUpstream> lastRing = treeMap.tailMap(hash); // As long as the service node does not increase or decrease, the node obtained by the same ip address can remain unchanged if (!lastRing.isEmpty()) { return lastRing.get(lastRing.firstKey()); } return treeMap.firstEntry().getValue(); } \",\"The load balancing of the hash algorithm does not use the concept of \\\"weight score\\\", that is to say, for each unknown IP, the probability of each node being accessed is the same. (Of course, multiple calls to the same IP will only access the same node.)\"]},\"90\":{\"h\":\"RandomLoadBalance\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { // Total number int length = upstreamList.size(); // Total weight int totalWeight = 0; // Whether the weights are the same boolean sameWeight = true; for (int i = 0; i < length; i++) { int weight = upstreamList.get(i).getWeight(); // Cumulative total weight totalWeight += weight; if (sameWeight && i > 0 && weight != upstreamList.get(i - 1).getWeight()) { // Calculate whether the ownership weight is the same sameWeight = false; } } if (totalWeight > 0 && !sameWeight) { // If the weights are not the same and the weights are greater than 0, random by the total weights int offset = RANDOM.nextInt(totalWeight); // and determine which segment the random value falls on for (DivideUpstream divideUpstream : upstreamList) { offset -= divideUpstream.getWeight(); if (offset < 0) { return divideUpstream; } } } // Equally random if the weight is the same or if the weight is 0 return upstreamList.get(RANDOM.nextInt(length)); } \",\"When the rule is used random, all the node weights are accumulated and the number is obtained randomly, depending on the weight fragment of the node; If the score is 0 or the same, it is straightforward to randomize the cluster length.\"]},\"91\":{\"h\":\"RoundRobinLoadBalance\",\"t\":[\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { String key = upstreamList.get(0).getUpstreamUrl(); ConcurrentMap<String, WeightedRoundRobin> map = methodWeightMap.get(key); if (map == null) { methodWeightMap.putIfAbsent(key, new ConcurrentHashMap<>(16)); map = methodWeightMap.get(key); } int totalWeight = 0; long maxCurrent = Long.MIN_VALUE; long now = System.currentTimeMillis(); DivideUpstream selectedInvoker = null; WeightedRoundRobin selectedWRR = null; for (DivideUpstream upstream : upstreamList) { String rKey = upstream.getUpstreamUrl(); // Retrieves the node information in the cache WeightedRoundRobin weightedRoundRobin = map.get(rKey); int weight = upstream.getWeight(); if (weightedRoundRobin == null) { weightedRoundRobin = new WeightedRoundRobin(); weightedRoundRobin.setWeight(weight); map.putIfAbsent(rKey, weightedRoundRobin); } if (weight != weightedRoundRobin.getWeight()) { weightedRoundRobin.setWeight(weight); } // Here is the first key: the score in the cache increases the weight score of the current node long cur = weightedRoundRobin.increaseCurrent(); weightedRoundRobin.setLastUpdate(now); // Select the node with a high cache score if (cur > maxCurrent) { maxCurrent = cur; selectedInvoker = upstream; selectedWRR = weightedRoundRobin; } totalWeight += weight; } if (!updateLock.get() && upstreamList.size() != map.size() && updateLock.compareAndSet(false, true)) { try { ConcurrentMap<String, WeightedRoundRobin> newMap = new ConcurrentHashMap<>(map); newMap.entrySet().removeIf(item -> now - item.getValue().getLastUpdate() > recyclePeriod); methodWeightMap.put(key, newMap); } finally { updateLock.set(false); } } if (selectedInvoker != null) { // Here is the second key: the score in the cache, reducing the total node weight score selectedWRR.sel(totalWeight); return selectedInvoker; } return upstreamList.get(0); } \",\"This algorithm is a bit complicated. Let me explain the core aspect of calculating weights:\",\"Two nodes with a score of 2 and 100 respectively enter, and each of them is kept in the cache, with the score starting from 0.\",\"After the for loop, the scores of the two nodes in the cache will increase based on themselves. Assuming that the following steps are not performed, the cache will be 2 and 100 for the first time, 4 and 200 for the second time, and so on.\",\"The third key step is to select the node cache with the highest score and take \\\"punishment\\\" measures to reduce the cumulative score of all nodes, that is, 102.\",\"According to the steps of this algorithm, nodes that have not been selected, as \\\"growth rewards\\\", will continue to increase on their own basis. The selected node, as a \\\"penalty,\\\" reduces the sum of the weights of the other nodes.\",\"It can be predicted that a node with a small weight will not be selected until a long time later. However, at that moment, it will be punished with great strength, which will lead to a long accumulation of strength once it returns to the pre-liberation period. For nodes with large weight scores, the penalty for being selected each time is very small. Even if the score is too low to be selected after many times, his reward score (itself) is particularly high, and one increase far surpasses other nodes.\"]},\"92\":{\"h\":\"WebClientPlugin\",\"t\":[\"After the DividePlugin plug-in is called, the downstream service node path is determined, and then the Web ClientPlugin plug-in comes into play. It implements the SoulPlugin interface directly and implements the execute() methods (keeping only the core code):\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String urlPath = exchange.getAttribute(Constants.HTTP_URL); // Request type: Get request, orPost request, etc HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue()); // Build a shell of the request object and inject the request type and URL WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath); return handleRequestBody(requestBodySpec, exchange, timeout, chain); } private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBodySpec, final ServerWebExchange exchange, final long timeout, final SoulPluginChain chain) { return requestBodySpec.headers(httpHeaders -> { // Add the request header in context... Later is also to add some attributes, do not go into details httpHeaders.addAll(exchange.getRequest().getHeaders()); httpHeaders.remove(HttpHeaders.HOST); }) .contentType(buildMediaType(exchange)) .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody())) // Start asynchronous http calls to downstream services .exchange() .doOnError(e -> log.error(e.getMessage())) .timeout(Duration.ofMillis(timeout)) // Callback receives the return value .flatMap(e -> doNext(e, exchange, chain)); } // Here is an asynchronous callback method that works in another thread private Mono<Void> doNext(final ClientResponse res, final ServerWebExchange exchange, final SoulPluginChain chain) { // ... // Continue to complete the remaining plug-in chain calls return chain.execute(exchange); } \",\"Take a quick look at handleRequestBody() the implementation of this method in exchange(), here are the key Http calls:\",\"class DefaultWebClient implements WebClient { @Override public Mono<ClientResponse> exchange() { ClientRequest request = (this.inserter != null ? initRequestBuilder().body(this.inserter).build() : initRequestBuilder().build()); // Here is the critical call, which will go to spring-web-reactive return Mono.defer(() -> exchangeFunction.exchange(request) .checkpoint(\\\"Request to \\\" + this.httpMethod.name() + \\\" \\\" + this.uri + \\\" [DefaultWebClient]\\\") .switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR)); } } \",\"To sum up, the processing of Web ClientPlugin will call the downstream service asynchronously, wait for the response, and then execute the subsequent plug-in chain call in another thread.\"]},\"93\":{\"h\":\"WebClientResponseClient\",\"t\":[\"Finally, the plug-in chain goes to the Web ClientResponseClient link to encapsulate the response information:\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { // Gets the response information stored in the context ServerHttpResponse response = exchange.getResponse(); ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR); if (Objects.isNull(clientResponse) || response.getStatusCode() == HttpStatus.BAD_GATEWAY || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) { Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } else if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) { Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // Various assembly response.setStatusCode(clientResponse.statusCode()); response.getCookies().putAll(clientResponse.cookies()); response.getHeaders().putAll(clientResponse.headers().asHttpHeaders()); return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())); })); } \"]},\"94\":{\"h\":\"Soul Gateway Learns Http Long Polling Analysis 01\"},\"95\":{\"h\":\"Data synchronization between background and gateway (Http long polling)\"},\"96\":{\"h\":\"Configuration\",\"t\":[\"** Background information mode switching **\",\"In the previous analysis of Zookeeper synchronization ( Soul Gateway Source Code Analysis-Issue 11 ), we switched through the DataSyncConfiguration configuration class. This time, we have experience and paste the configuration directly.\",\"soul: sync: websocket: enabled: false http: enabled: true \",\"** Gateway information mode switching **\",\"After the background mode switching is completed, the next step is the gateway. Continue to find the parameter settings on the key configuration class. The gateway configuration is also directly posted here.\",\"soul: sync: # websocket: # urls: ws://localhost:9095/websocket http: url: http://localhost:9095 \"]},\"97\":{\"h\":\"Data ChangedListener system\",\"t\":[\"Background data initialization Data SyncConfiguration configures key beans. Take a look at the Http long polling Bean here.\",\"@Configuration public class DataSyncConfiguration { @Configuration @ConditionalOnProperty(name = \\\"soul.sync.http.enabled\\\", havingValue = \\\"true\\\") @EnableConfigurationProperties(HttpSyncProperties.class) static class HttpLongPollingListener { @Bean @ConditionalOnMissingBean(HttpLongPollingDataChangedListener.class) public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) { return new HttpLongPollingDataChangedListener(httpSyncProperties); } } } \",\"Http LongPollingData ChangedListener inherit from AbstractData ChangedListener, which are implemented from the interface DataChangedListener.\",\"We should be very familiar with the DataChangedListener interface, which provides many methods of different data type changes for the DataChangedEventDispatcher to call, and this class is an \\\"old friend\\\" as a transit station. Diligent ** Handle event classification and distribution for data synchronization **\",\"public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { // Hold the DataChangedListener collection private List<DataChangedListener> listeners; // Method to notify the DataChangedListener of different event types when an event changes public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } } \",\"public interface DataChangedListener { default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum eventType) {} default void onPluginChanged(List<PluginData> changed, DataEventTypeEnum eventType) {} default void onSelectorChanged(List<SelectorData> changed, DataEventTypeEnum eventType) {} default void onMetaDataChanged(List<MetaData> changed, DataEventTypeEnum eventType) {} default void onRuleChanged(List<RuleData> changed, DataEventTypeEnum eventType) {} } \",\"After understanding the functions of these two, what does AbstractData ChangedListener do? Take an example of onPluginChanged ():\",\"public abstract class AbstractDataChangedListener implements DataChangedListener, InitializingBean { protected static final ConcurrentMap<String, ConfigDataCache> CACHE = new ConcurrentHashMap<>(); @Override public void onPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { if (CollectionUtils.isEmpty(changed)) { return; } this.updatePluginCache(); this.afterPluginChanged(changed, eventType); } // Modify cache (overwritable) protected void updatePluginCache() { this.updateCache(ConfigGroupEnum.PLUGIN, pluginService.listAll()); } protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data) { String json = GsonUtils.getInstance().toJson(data); ConfigDataCache newVal = new ConfigDataCache(group.name(), json, Md5Utils.md5(json), System.currentTimeMillis()); ConfigDataCache oldVal = CACHE.put(newVal.getGroup(), newVal); log.info(\\\"update config cache[{}], old: {}, updated: {}\\\", group, oldVal, newVal); } // Hook, customize what to do after ending data changes (rewritable) protected void afterPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { } } \",\"For a plug-in data change method (onPluginChanged), AbstractDataChangedListener actually defines a template, so that the subclass can work according to the specified steps, and the details of each step can be implemented by the subclass itself.\",\"Second, if you do not override its cache updates, it is maintained by the class in CACHE.\"]},\"98\":{\"h\":\"What are the other synchronization strategies doing at this time?\",\"t\":[\"After the DataChange dEventDispatcher calls onPluginChanged (), how does the long polling module work? ** Think about what other synchronization methods are doing at this point. **\",\"The web socket pattern, for example, rewrites onPluginChanged () itself to send the websocket information to the holding session, which has a gateway.\",\"public class WebsocketDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> pluginDataList, final DataEventTypeEnum eventType) { WebsocketData<PluginData> websocketData = new WebsocketData<>(ConfigGroupEnum.PLUGIN.name(), eventType.name(), pluginDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } } \",\"Looking at the zookeeper pattern, it also rewrites onPluginChanged () to modify the node information on the zookeeper so that the gateway side will hear their node changes.\",\"public class ZookeeperDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { for (PluginData data : changed) { String pluginPath = ZkPathConstants.buildPluginPath(data.getName()); // delete if (eventType == DataEventTypeEnum.DELETE) { deleteZkPathRecursive(pluginPath); String selectorParentPath = ZkPathConstants.buildSelectorParentPath(data.getName()); deleteZkPathRecursive(selectorParentPath); String ruleParentPath = ZkPathConstants.buildRuleParentPath(data.getName()); deleteZkPathRecursive(ruleParentPath); continue; } //create or update insertZkNode(pluginPath, data); } } } \",\"As you can see, at this juncture, other synchronization strategies are already busy notifying gateways, so Http long polling must also do this.\",\"These two strategies are also different in the way of notification, websocket is a good person to do to the end, directly find the session session to send the information in person. After the zookeeper changes the node information, the gateway monitors the change and then synchronizes.\",\"So how does our Http long polling now notify the gateway? Keep looking..\"]},\"99\":{\"h\":\"Thinking on the Implementation of Long Polling\",\"t\":[\"First think about how I can design long polling by myself?\",\"Normal long polling implementation should be actively requested by the gateway. The background receives the request and holds it. If there is an update, it will return directly. If not, it will be blocked for a certain period of time. And the background is to do a good job of updating the data, hold the time to check whether the data has changed.\",\"There are three points involved here:\",\"How do you know if the data has changed? Do you set a last update time and compare it with the request time of the gateway to see if there is any data modification?\",\"After holding, how does the background know whether the data is updated, repeated traversal or blocked waiting?\",\"Where is the data used for updating? In the case of caching, consider how the background cache interacts with the database.\"]},\"100\":{\"h\":\"Http LongPollingData ChangedListener Long Polling Implementation\",\"t\":[\"Around our thinking, look at how Http LongPollingData ChangedListener is achieved. Let's take a look at the implementation of the parent onPluginChanged ().\",\"public class HttpLongPollingDataChangedListener extends AbstractDataChangedListener { private final ScheduledExecutorService scheduler; @Override protected void afterPluginChanged(final List<PluginData> changed, final DataEventTypeEnum eventType) { scheduler.execute(new DataChangeTask(ConfigGroupEnum.PLUGIN)); } } \",\"Http long polling does not directly override onPluginChanged (), but directly uses its parent class, which means that its CACHE is used. In the end, our information acquisition must also be analyzed. Put it aside for the time being.\",\"The following logic will call the afterPluginChanged () method of our implementation, where a timed thread pool is used to run a Runnable task DataChangeTask.\",\"class DataChangeTask implements Runnable { @Override public void run() { // Iterate through clients for (Iterator<LongPollingClient> iter = clients.iterator(); iter.hasNext();) { LongPollingClient client = iter.next(); iter.remove(); // Description Complete response The response is complete client.sendResponse(Collections.singletonList(groupKey)); log.info(\\\"send response with the changed group,ip={}, group={}, changeTime={}\\\", client.ip, groupKey, changeTime); } } } \",\"After the data is changed, the thread pool is used to call this method, take all clients the elements while traversing, and call the method sendResponse (), like marking that the response has been completed.\",\"Let me guess what it does. clients It's likely that the request is held by the gateway, and send response () is likely to actually add response information to the request context. Another key action is to end the hold, allowing the gateway to receive the response and remove the request from the collection.\",\"We now trace the following client generation, which is a BlockingQueue blocking queue in the HttpLongPollingData ChangedListener, which is periodically detected in the LongPolling Client.\",\"class LongPollingClient implements Runnable { @Override public void run() { this.asyncTimeoutFuture = scheduler.schedule(() -> { clients.remove(LongPollingClient.this); List<ConfigGroupEnum> changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest()); sendResponse(changedGroups); }, timeoutTime, TimeUnit.MILLISECONDS); // Here is the key, indicating the source clients.add(this); } } \",\"Instead of analyzing the detection code block of remove (), you can see the add () in the last sentence, which is clients the source of the data.\",\"Find where LongPollingClient is called. HttpLongPollingData ChangedListener # doLongPolling\",\"public void doLongPolling(final HttpServletRequest request, final HttpServletResponse response) { // ... // listen for configuration changed. // Enable synchronous blocking requests final AsyncContext asyncContext = request.startAsync(); // AsyncContext.settimeout() does not timeout properly, so you have to control it yourself asyncContext.setTimeout(0L); // block client's thread. // The thread pool calls LongPollingClient#run scheduler.execute(new LongPollingClient(asyncContext, clientIp, HttpConstants.SERVER_MAX_HOLD_TIMEOUT)); } \",\"The last sentence here will be called and added client, and there is a key line of code that blocks the request:\",\"final AsyncContext asyncContext = request.startAsync(); \",\"In the LongPolling Client # sendResponse, it has just been analyzed that, in addition to wrapping the injected response information, the held request will also be released.\",\"class LongPollingClient implements Runnable { void sendResponse(final List<ConfigGroupEnum> changedGroups) { // cancel scheduler if (null != asyncTimeoutFuture) { asyncTimeoutFuture.cancel(false); } generateResponse((HttpServletResponse) asyncContext.getResponse(), changedGroups); // The synchronization is complete asyncContext.complete(); } } \",\"After this analysis, we go back to doLongPolling (), where the thread pool calls another key point.\",\"scheduler.execute(new LongPollingClient(asyncContext, clientIp, HttpConstants.SERVER_MAX_HOLD_TIMEOUT)); \",\"The timeout time of 60s is passed to the LongPolling Client here. What is it used for? Remember that piece of code we skipped over at LongPolling Client # run?\",\"class LongPollingClient implements Runnable { @Override public void run() { // Start time. The delay time is based on timeoutTime this.asyncTimeoutFuture = scheduler.schedule(() -> { // Remove the managed connection clients.remove(LongPollingClient.this); List<ConfigGroupEnum> changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest()); // This method releases the blocked request sendResponse(changedGroups); }, timeoutTime, TimeUnit.MILLISECONDS); clients.add(this); } } \",\"Here we have understood the implementation of the long polling process in the background. Finally, we will see how doLongPolling () is called and find the calling class ConfigController.\",\"@ConditionalOnBean(HttpLongPollingDataChangedListener.class) @RestController @RequestMapping(\\\"/configs\\\") @Slf4j public class ConfigController { @PostMapping(value = \\\"/listener\\\") public void listener(final HttpServletRequest request, final HttpServletResponse response) { longPollingListener.doLongPolling(request, response); } } \",\"It is also basically clear that the background exposes the HTTP path through this Controller for the gateway to call and listen to data changes.\"]},\"101\":{\"h\":\"Sum up\",\"t\":[\"The background exposes the API to the gateway through the Controller layer. When the gateway requests the background, the background does not immediately return a response (whether the data has changed), but holds the request for a maximum of 60 seconds. These held requests are added to the blocking queue as an in-memory cache.\",\"If there is any data change in these 60 seconds, it will be distributed to our HttpLongPollingData ChangedListener through the DataChangedEventDispatcher. All held requests are traversed ** Invoke the thread pool immediately ** in the blocking queue, stuffed with response information and released.\",\"If there is still no data change after 60 seconds, the held request will be released and the corresponding request object of the blocking queue will be removed.\",\"At this point, we have sorted out its most basic long polling logic, then corresponding to the next beginning of thinking, see what conclusions or doubts.\",\"How do you know if the data has changed? Do you set a last update time and compare it with the request time of the gateway to see if there is any data modification?\",\"After holding, how does the background know whether the data is updated, repeated traversal or blocked waiting?\",\"Where is the data used for updating? In the case of caching, consider how the background cache interacts with the database.\",\"In response to point 1, how do we know that the data has changed?\",\"At present, the data change source of our analysis is DataChangedEventDispatcher, which not only informs us when the data changes, but also calls it immediately every time we manually click the background synchronization.\",\"Then there must be something like new and old data comparison. Otherwise, every call will directly release the blocking request of the gateway. This is not possible. White IO consumption is certainly not a good design.\",\"For the second point, we now know that the mode is blocking and waiting, which is AsyncContext used in this way. I have not understood this part, and I will discuss it in an extra chapter.\",\"For the third point, we know that the background configuration must be modified to the database, so the interaction between this cache and the database is also a point worth analyzing. I will continue to analyze these questions in the next chapter.\"]},\"102\":{\"h\":\"Soul Gateway Learns Http Long Polling Analysis 02\"},\"103\":{\"h\":\"Data synchronization between background and gateway (Http long polling)\",\"t\":[\"The last chapter of long polling analysis summarizes the implementation of long polling on the gateway side and the way of data flow.\",\"The overall process of long polling at the gateway end is also divided into two modules: one is pulling at startup, and the other is polling to monitor changes.\"]},\"104\":{\"h\":\"Pull data on gateway startup\",\"t\":[\"After the gateway is started, it will call the interface provided by the background to pull data and send the data to the data processing class of each plug-in\",\"The following shows the processing flow for the gateway to start pulling data: \",\"These several processing steps are dispersed into the method collaborations of the following classes:\",\"02\",\"HttpS yncData Service # start: When the gateway is started, the HttpS yncData Service initialization will call start() a method, which will call the background to pull data and start multiple threads for polling and monitoring (this part will be analyzed in the next module)\",\"public class HttpSyncDataService implements SyncDataService, AutoCloseable { private void start() { // Prevents the CAS operation from being invoked twice if (RUNNING.compareAndSet(false, true)) { // Here is the focus of the process, calling the method to pull data this.fetchGroupConfig(ConfigGroupEnum.values()); int threadSize = serverList.size(); // This will be analyzed in the next module, which will enable thread polling listening according to the background cluster this.executor = new ThreadPoolExecutor(threadSize, threadSize, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), SoulThreadFactory.create(\\\"http-long-polling\\\", true)); this.serverList.forEach(server -> this.executor.execute(new HttpLongPollingTask(server))); } else { log.info(\\\"soul http long polling was started, executor=[{}]\\\", executor); } } } \",\"HttpS yncData Service # fetchGroup Config: It is only used to repeatedly call the pull data method according to the data type (for the same background, it will be requested many times, and the information of a certain data type will be pulled each time). The data type here refers to plugin, rule, selector, and so on\",\"private void fetchGroupConfig(final ConfigGroupEnum... groups) throws SoulException { for (int index = 0; index < this.serverList.size(); index++) { String server = serverList.get(index); try { // Call the pull data method multiple times according to the passed data type enumeration this.doFetchGroupConfig(server, groups); break; } catch (SoulException e) { if (index >= serverList.size() - 1) { throw e; } log.warn(\\\"fetch config fail, try another one: {}\\\", serverList.get(index + 1)); } } } \",\"HttpS yncData Service # doFetchGroup Config: Request the /configs/fetch background interface, get a certain type of data, and update the cache. Before updating the cache, it will check whether it has changed, and if it has changed, it will end. ** ** (Since it is the first time to start, the cache will definitely be updated when the data is empty, so it will end directly.)\",\"private void doFetchGroupConfig(final String server, final ConfigGroupEnum... groups) { StringBuilder params = new StringBuilder(); for (ConfigGroupEnum groupKey : groups) { params.append(\\\"groupKeys\\\").append(\\\"=\\\").append(groupKey.name()).append(\\\"&\\\"); } // Construct the specific request path to fetch background data String url = server + \\\"/configs/fetch?\\\" + StringUtils.removeEnd(params.toString(), \\\"&\\\"); log.info(\\\"request configs: [{}]\\\", url); String json = null; try { json = this.httpClient.getForObject(url, String.class); } catch (RestClientException e) { String message = String.format(\\\"fetch config fail from server[%s], %s\\\", url, e.getMessage()); log.warn(message); throw new SoulException(message, e); } // Update cache information boolean updated = this.updateCacheWithJson(json); // If there are updates, end the process if (updated) { log.info(\\\"get latest configs: [{}]\\\", json); return; } log.info(\\\"The config of the server[{}] has not been updated or is out of date. Wait for 30s to listen for changes again.\\\", server); ThreadUtils.sleep(TimeUnit.SECONDS, 30); } \",\"HttpS yncData Service # update Cache WithJson: Take out the changed data information from data the response information and send it to the DataRefresh Factory\",\"private DataRefreshFactory factory; public HttpSyncDataService(...){ this.factory = new DataRefreshFactory(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers); } private boolean updateCacheWithJson(final String json) { JsonObject jsonObject = GSON.fromJson(json, JsonObject.class); JsonObject data = jsonObject.getAsJsonObject(\\\"data\\\"); return factory.executor(data); } \",\"DataRefreshFactory # executor: Send the data to all kinds of data refresh classes (the information type is not distinguished here, but all data refresh classes are notified, and optimization can be considered)\",\"public final class DataRefreshFactory { private static final EnumMap<ConfigGroupEnum, DataRefresh> ENUM_MAP = new EnumMap<>(ConfigGroupEnum.class); public DataRefreshFactory(final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { // 注入各类型订阅器到 MAP 中 ENUM_MAP.put(ConfigGroupEnum.PLUGIN, new PluginDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.SELECTOR, new SelectorDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.RULE, new RuleDataRefresh(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.APP_AUTH, new AppAuthDataRefresh(authDataSubscribers)); ENUM_MAP.put(ConfigGroupEnum.META_DATA, new MetaDataRefresh(metaDataSubscribers)); } public boolean executor(final JsonObject data) { final boolean[] success = {false}; // Tureen: 所有数据类型的 DataRefresh 全调用 ENUM_MAP.values().parallelStream().forEach(dataRefresh -> success[0] = dataRefresh.refresh(data)); return success[0]; } } \",\"AbstractData Refresh # refresh: Determine whether to update the cache, and if so, call the method of each type refresh()\",\"@Override public Boolean refresh(final JsonObject data) { boolean updated = false; JsonObject jsonObject = convert(data); if (null != jsonObject) { ConfigData<T> result = fromJson(jsonObject); if (this.updateCacheIfNeed(result)) { updated = true; // Turren: 调用 refresh refresh(result.getData()); } } return updated; } \",\"PluginData Refresh # refresh: Invokes the plugin's subscriber, which in turn notifies all extension related events of the change\",\"@Override protected void refresh(final List<PluginData> data) { if (CollectionUtils.isEmpty(data)) { log.info(\\\"clear all plugin data cache\\\"); pluginDataSubscriber.refreshPluginDataAll(); } else { pluginDataSubscriber.refreshPluginDataAll(); // Turren: HTTP synchronization is used, calling the plugin data subscriber data.forEach(pluginDataSubscriber::onSubscribe); } } \"]},\"105\":{\"h\":\"The gateway polls to listen for changes\",\"t\":[\"When the gateway is started, the thread is also started to make a background monitoring request. The monitoring request makes a while endless loop to poll, and the request will be hijacked on the background side. This is specifically analyzed in the background summary (后台与网关数据同步 (Http 长轮询篇 <二>)).\",\"The following shows the overall process of monitoring data changes by the gateway:\",\"03\",\"The corresponding actual code implementation is as follows:\",\"04\",\"The monitoring process on the ** gateway side is implemented in the HttpSyncDataService class, and will be doFetchGroupConfig() passed to various subscribers at the end. The following process is the same ** as that at startup\",\"HttpS yncData Service # start: Start the thread to execute the Http LongPollingTask Runnable\",\"Http LongPolling Task # run: Turn on cyclic call to poll method.\",\"@Override public void run() { while (RUNNING.get()) { for (int time = 1; time <= retryTimes; time++) { try { doLongPolling(server); } catch (Exception e) { if (time < retryTimes) { log.warn(\\\"Long polling failed, tried {} times, {} times left, will be suspended for a while! {}\\\", time, retryTimes - time, e.getMessage()); ThreadUtils.sleep(TimeUnit.SECONDS, 5); continue; } log.error(\\\"Long polling failed, try again after 5 minutes!\\\", e); ThreadUtils.sleep(TimeUnit.MINUTES, 5); } } } } \",\"Http LongPolling Task # doLongPolling: Get the response result of the listening request. If there is a changed type in the return value, call the data pulling method.\",\"private void doLongPolling(final String server) { // Retrieve data from the cache MultiValueMap<String, String> params = new LinkedMultiValueMap<>(8); for (ConfigGroupEnum group : ConfigGroupEnum.values()) { ConfigData<?> cacheConfig = factory.cacheConfigData(group); String value = String.join(\\\",\\\", cacheConfig.getMd5(), String.valueOf(cacheConfig.getLastModifyTime())); params.put(group.name(), Lists.newArrayList(value)); } // Build the HTTP request information HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED); HttpEntity httpEntity = new HttpEntity(params, headers); String listenerUrl = server + \\\"/configs/listener\\\"; log.debug(\\\"request listener configs: [{}]\\\", listenerUrl); JsonArray groupJson = null; try { String json = this.httpClient.postForEntity(listenerUrl, httpEntity, String.class).getBody(); groupJson = GSON.fromJson(json, JsonObject.class).getAsJsonArray(\\\"data\\\"); } catch (RestClientException e) { String message = String.format(\\\"listener configs fail, server:[%s], %s\\\", server, e.getMessage()); throw new SoulException(message, e); } // Obtain the changed types if (groupJson != null) { ConfigGroupEnum[] changedGroups = GSON.fromJson(groupJson, ConfigGroupEnum[].class); if (ArrayUtils.isNotEmpty(changedGroups)) { log.info(\\\"Group config changed: {}\\\", Arrays.toString(changedGroups)); // Retrieve data of corresponding types from the background this.doFetchGroupConfig(server, changedGroups); } } } \",\"LongPollingClient#doFetchGroupConfig:\",\"This piece of code was analyzed in the previous startup, and the biggest difference between it and the startup is that ** **..\",\"What do you mean? If the gateway goes to fetch the background data and takes it back for comparison, it is found that it has been cheated! There is no change. Just wait for 30s to start the next monitoring. During this period, if there is a data change in the background, there is no way to notify the gateway.\",\"Why is the gateway doing this? Naturally, in order to prevent a large number of useless pull cycles, if there is a problem in the background and the data is constantly notified to change, but there is no actual change, then the gateway will generate a large number of useless network IO and data exchange with the background without delay.\"]},\"106\":{\"h\":\"Soul Gateway Learns WebSocket Data Synchronization Analysis\",\"t\":[\"Fan Jinpeng\",\"In Part 4, we analyzed that after the HTTP user service system accesses the Soul gateway, it will call the registration interface of soul-admin, register all the interface information that needs to be proxied by the gateway to soul-admin, and finally, it will connect through the web socket. Synchronize the interface information received by soul-admin to Soul Gateway (soul-bootstrap). Today, we will continue to analyze how the data is synchronized to soul-bootstrap.\",\"If you don't know the process, you can go out and turn left to see the fourth article.\",\"In order to verify the data synchronization process, there is no need to start the business system. You can just start the soul-admin and soul-bootstrap systems. You can open or close the plug-in on the page to see how this process is implemented.\",\"Link to the official website of data synchronization strategy\"]},\"107\":{\"h\":\"2.1 Start 2 systems\",\"t\":[\"They are all started by default according to the project, and no configuration files need to be modified.\"]},\"108\":{\"h\":\"2.2. Page operation search interface\",\"t\":[\"Start the divide plug-in here, F12, and see which interface soul-admin will be called in the foreground.\",\" open_divide_plugin \",\"You can see that the foreground sends a PUT request to the background: http://localhost:9095/plugin/5.\"]},\"109\":{\"h\":\"2.3 Background interface\",\"t\":[\"Search for this interface in the project\",\"// PluginController.java @RestController @RequestMapping(\\\"/plugin\\\") public class PluginController { ... /** * update plugin. * * @param id primary key. * @param pluginDTO plugin. * @return {@linkplain SoulAdminResult} */ @PutMapping(\\\"/{id}\\\") public SoulAdminResult updatePlugin(@PathVariable(\\\"id\\\") final String id, @RequestBody final PluginDTO pluginDTO) { Objects.requireNonNull(pluginDTO); pluginDTO.setId(id); final String result = pluginService.createOrUpdate(pluginDTO); if (StringUtils.isNoneBlank(result)) { return SoulAdminResult.error(result); } return SoulAdminResult.success(SoulResultMessage.UPDATE_SUCCESS); } ... } \",\"Into the implementation class.\",\"// PluginServiceImpl.java /** * create or update plugin. * * @param pluginDTO {@linkplain PluginDTO} * @return rows */ @Override @Transactional(rollbackFor = Exception.class) public String createOrUpdate(final PluginDTO pluginDTO) { final String msg = checkData(pluginDTO); if (StringUtils.isNoneBlank(msg)) { return msg; } PluginDO pluginDO = PluginDO.buildPluginDO(pluginDTO); DataEventTypeEnum eventType = DataEventTypeEnum.CREATE; if (StringUtils.isBlank(pluginDTO.getId())) { pluginMapper.insertSelective(pluginDO); } else { eventType = DataEventTypeEnum.UPDATE; pluginMapper.updateSelective(pluginDO); } // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, eventType, Collections.singletonList(PluginTransfer.INSTANCE.mapToData(pluginDO)))); return StringUtils.EMPTY; } \",\"It can be seen here that the first half is to operate the database and persist the relevant information; the second half is to publish an event.\"]},\"110\":{\"h\":\"2.4 Publish the event\",\"t\":[\"The event published here is encapsulated by DataChangedEvent, and there is an enumeration in it. There are many types here:\",\"/** * configuration group. * * @author huangxiaofeng */ public enum ConfigGroupEnum { APP_AUTH, PLUGIN, RULE, SELECTOR, META_DATA; ... } \",\"Seeing these types, if you still have an impression of the fourth article, you can see that the types of events sent at that time were SELECTOR and RULE, and now it is PLUGIN. Although the types are different, it does not affect us to continue to analyze the logic behind. Let's continue.\",\"Another eventType is also an enumeration. There are five types: DELETE, CREATE, UPDATE, REFRESH, and MYSELF. In this case, it is UPDATE.\",\"/** * The enum Data event type. * * @author xiaoyu */ public enum DataEventTypeEnum { /** * delete event. */ DELETE, /** * insert event. */ CREATE, /** * update event. */ UPDATE, /** * REFRESH data event type enum. */ REFRESH, /** * Myself data event type enum. */ MYSELF; ... } \"]},\"111\":{\"h\":\"2.5 Listen for events\",\"t\":[\"Locate the code that listens for events:\",\"// DataChangedEventDispatcher.java @Component public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { private ApplicationContext applicationContext; private List<DataChangedListener> listeners; public DataChangedEventDispatcher(final ApplicationContext applicationContext) { this.applicationContext = applicationContext; } @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } } \"]},\"112\":{\"h\":\"2.5.1 Listener injection\",\"t\":[\"You can see that the DataChangedEventDispatcher implements the InitializingBean interface, overrides the afterPropertiesSet method, and uses @ Component when Spring starts. This override method is called after the container is loaded. In the After PropertiesSet method, all the beans of the DataChangedListener type are obtained and placed in the class property listeners.\",\"So the question is, when are these listeners injected into the container?\",\"First look at the definition of the Data ChangedListener interface:\",\"/** * Event listener, used to send notification of event changes, * used to support HTTP, websocket, zookeeper and other event notifications. * * @author huangxiaofeng * @author xiaoyu */ public interface DataChangedListener { /** * invoke this method when AppAuth was received. * * @param changed the changed * @param eventType the event type */ default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Plugin was received. * * @param changed the changed * @param eventType the event type */ default void onPluginChanged(List<PluginData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Selector was received. * * @param changed the changed * @param eventType the event type */ default void onSelectorChanged(List<SelectorData> changed, DataEventTypeEnum eventType) { } /** * On meta data changed. * * @param changed the changed * @param eventType the event type */ default void onMetaDataChanged(List<MetaData> changed, DataEventTypeEnum eventType) { } /** * invoke this method when Rule was received. * * @param changed the changed * @param eventType the event type */ default void onRuleChanged(List<RuleData> changed, DataEventTypeEnum eventType) { } } \",\"It can be seen that there are five methods defined in the interface, which respectively deal with the corresponding processing methods when the data changes of appAuth, plugin, selector, metaData and rule are monitored.\",\"Its inheritance relationship:\",\" DataChangedListener \",\"Because the websocket is used by default, the listener here corresponds to the Web socketData ChangedListener, Alt + F7, and the place where this class is instantiated is the following configuration class:\",\"// DataSyncConfiguration.java @Configuration public class DataSyncConfiguration { /** * http long polling. */ @Configuration @ConditionalOnProperty(name = \\\"soul.sync.http.enabled\\\", havingValue = \\\"true\\\") @EnableConfigurationProperties(HttpSyncProperties.class) static class HttpLongPollingListener { @Bean @ConditionalOnMissingBean(HttpLongPollingDataChangedListener.class) public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) { return new HttpLongPollingDataChangedListener(httpSyncProperties); } } /** * The type Zookeeper listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.zookeeper\\\", name = \\\"url\\\") @Import(ZookeeperConfiguration.class) static class ZookeeperListener { @Bean @ConditionalOnMissingBean(ZookeeperDataChangedListener.class) public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) { return new ZookeeperDataChangedListener(zkClient); } @Bean @ConditionalOnMissingBean(ZookeeperDataInit.class) public ZookeeperDataInit zookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { return new ZookeeperDataInit(zkClient, syncDataService); } } /** * The type Nacos listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.nacos\\\", name = \\\"url\\\") @Import(NacosConfiguration.class) static class NacosListener { @Bean @ConditionalOnMissingBean(NacosDataChangedListener.class) public DataChangedListener nacosDataChangedListener(final ConfigService configService) { return new NacosDataChangedListener(configService); } } /** * The WebsocketListener(default strategy). */ @Configuration @ConditionalOnProperty(name = \\\"soul.sync.websocket.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) @EnableConfigurationProperties(WebsocketSyncProperties.class) static class WebsocketListener { @Bean @ConditionalOnMissingBean(WebsocketDataChangedListener.class) public DataChangedListener websocketDataChangedListener() { return new WebsocketDataChangedListener(); } @Bean @ConditionalOnMissingBean(WebsocketCollector.class) public WebsocketCollector websocketCollector() { return new WebsocketCollector(); } @Bean @ConditionalOnMissingBean(ServerEndpointExporter.class) public ServerEndpointExporter serverEndpointExporter() { return new ServerEndpointExporter(); } } } \",\"There are four data synchronization strategies: HTTP long polling, zookeeper, nacos, and websocket (default strategy).\",\"See the web socket annotation @ ConditionalOnProperty (name = \\\"soul. Sync. Web socket. Enabled\\\", having Value = \\\"true\\\", Match (IfMissing = true), find the following configuration in the configuration file:\",\"soul: sync: websocket: enabled: true \",\"This is where the truth comes out.\",\"If you do not want to use the default synchronization policy of the web socket, you can write the corresponding configuration in the configuration file.\"]},\"113\":{\"h\":\"2.5.2 Listening event processing logic\",\"t\":[\"In order to prevent you from turning back and looking at it, which is inconvenient, I will post the processing logic code here:\",\"// DataChangedEventDispatcher.java @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; case PLUGIN: listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType()); break; case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; case SELECTOR: listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType()); break; case META_DATA: listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType()); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } \",\"All listeners are traversed here. For the current web socket, there is only one listener, and it is not known when the other multiple cases will appear. It is doubtful here, and we will come back to add (//TODO) when we encounter related cases later.\",\"Different logics are used according to the type of the published event. The types here correspond to the methods defined in the DataChangedListener interface.\",\"The listener here is an instance of the Web socketData ChangedListener, which will enter the corresponding method in the class:\",\"// WebsocketDataChangedListener.java public class WebsocketDataChangedListener implements DataChangedListener { @Override public void onPluginChanged(final List<PluginData> pluginDataList, final DataEventTypeEnum eventType) { WebsocketData<PluginData> websocketData = new WebsocketData<>(ConfigGroupEnum.PLUGIN.name(), eventType.name(), pluginDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } @Override public void onSelectorChanged(final List<SelectorData> selectorDataList, final DataEventTypeEnum eventType) { WebsocketData<SelectorData> websocketData = new WebsocketData<>(ConfigGroupEnum.SELECTOR.name(), eventType.name(), selectorDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(websocketData), eventType); } @Override public void onRuleChanged(final List<RuleData> ruleDataList, final DataEventTypeEnum eventType) { WebsocketData<RuleData> configData = new WebsocketData<>(ConfigGroupEnum.RULE.name(), eventType.name(), ruleDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } @Override public void onAppAuthChanged(final List<AppAuthData> appAuthDataList, final DataEventTypeEnum eventType) { WebsocketData<AppAuthData> configData = new WebsocketData<>(ConfigGroupEnum.APP_AUTH.name(), eventType.name(), appAuthDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } @Override public void onMetaDataChanged(final List<MetaData> metaDataList, final DataEventTypeEnum eventType) { WebsocketData<MetaData> configData = new WebsocketData<>(ConfigGroupEnum.META_DATA.name(), eventType.name(), metaDataList); WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType); } } \",\"As you can see in the code, the data is encapsulated as Web socketData and sent using the WebsocketController. Send method.\"]},\"114\":{\"h\":\"2.6 Synchronize data to soul-bootstrap\",\"t\":[\"// WebsocketCollector.java @Slf4j @ServerEndpoint(\\\"/websocket\\\") public class WebsocketCollector { private static final Set<Session> SESSION_SET = new CopyOnWriteArraySet<>(); private static final String SESSION_KEY = \\\"sessionKey\\\"; /** * On open. * * @param session the session */ @OnOpen public void onOpen(final Session session) { log.info(\\\"websocket on open successful....\\\"); SESSION_SET.add(session); } /** * On message. * * @param message the message * @param session the session */ @OnMessage public void onMessage(final String message, final Session session) { if (message.equals(DataEventTypeEnum.MYSELF.name())) { try { ThreadLocalUtil.put(SESSION_KEY, session); SpringBeanUtils.getInstance().getBean(SyncDataService.class).syncAll(DataEventTypeEnum.MYSELF); } finally { ThreadLocalUtil.clear(); } } } /** * On close. * * @param session the session */ @OnClose public void onClose(final Session session) { SESSION_SET.remove(session); ThreadLocalUtil.clear(); } /** * On error. * * @param session the session * @param error the error */ @OnError public void onError(final Session session, final Throwable error) { SESSION_SET.remove(session); ThreadLocalUtil.clear(); log.error(\\\"websocket collection error: \\\", error); } /** * Send. * * @param message the message * @param type the type */ public static void send(final String message, final DataEventTypeEnum type) { if (StringUtils.isNotBlank(message)) { if (DataEventTypeEnum.MYSELF == type) { try { Session session = (Session) ThreadLocalUtil.get(SESSION_KEY); if (session != null) { session.getBasicRemote().sendText(message); } } catch (IOException e) { log.error(\\\"websocket send result is exception: \\\", e); } return; } for (Session session : SESSION_SET) { try { session.getBasicRemote().sendText(message); } catch (IOException e) { log.error(\\\"websocket send result is exception: \\\", e); } } } } } \",\"The Web socketController uses the @ ServerEndpoint ( \\\"/web socket\\\") annotation, opens a web socket service interface, and waits for a connection.\",\"After the soul-bootstrap is started, the web socket will be connected, and the onOpen method will be triggered to store the Session of this connection information in the Set set of the SESSION _ SET.\",\"In the send method, it will first determine whether the DataEventTypeEnum type is MYSELF. This type can be traced back to 2.3-2.4. This time it is UPDATE. As for when it is MYSELF, it needs to be added later. It is doubtful here (//TODO).\",\"The following for loop iterates through all the web socket connection sessions to send the change data.\",\"At this point, the default web socket synchronization data strategy is clear.\",\"Zhu Ming\"]},\"115\":{\"h\":\"Data synchronization between background and gateway (Web socket)\"},\"116\":{\"h\":\"How to establish Web socket? In the background?\",\"t\":[\" Data SyncConfiguration: As the configuration factory of Spring Bean, various listeners can be constructed according to the configuration information. Including HTTP long polling mode, Zookeeper mode, Nacos mode, Web socket method.\",\"@Configuration public class DataSyncConfiguration { // In the configuration of the soul-admin project, use soul.sync.websocket.enabled to enable or disable WebSocket. @Configuration @ConditionalOnProperty(name = \\\"soul.sync.websocket.enabled\\\", havingValue = \\\"true\\\", matchIfMissing = true) @EnableConfigurationProperties(WebsocketSyncProperties.class) static class WebsocketListener { @Bean @ConditionalOnMissingBean(WebsocketCollector.class) public WebsocketCollector websocketCollector() { return new WebsocketCollector(); } } } \",\"Web socketListener: As DataSyncConfiguration the internal class of, it is responsible for the initialization of the web socket listener. Web socket Collector: It monitors the websocket connection and receives information. Maintain all session sessions connected to the background, and provide send() methods to notify session information.\"]},\"117\":{\"h\":\"How does the gateway set up a Web socket?\",\"t\":[\"06\",\"Web socket SyncData Configuration: As the configuration factory of Spring Bean, it is the gateway's entrance to build Websocket communication. (An independent startup project soul-spring-boot-starter-sync-data-websocket is provided for the gateway to choose freely.)\",\"@Configuration @ConditionalOnClass(WebsocketSyncDataService.class) @ConditionalOnProperty(prefix = \\\"soul.sync.websocket\\\", name = \\\"urls\\\") @Slf4j public class WebsocketSyncDataConfiguration { // Collect all subscribers registered as Beans, such as PluginDataSubscriber, MetaDataSubscriber, AuthDataSubscriber @Bean public SyncDataService websocketSyncDataService(final ObjectProvider<WebsocketConfig> websocketConfig, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use websocket sync soul data.......\\\"); return new WebsocketSyncDataService(websocketConfig.getIfAvailable(WebsocketConfig::new), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } // In the configuration of the soul-bootstrap project, use soul.sync.websocket to configure the backend path for establishing connections @Bean @ConfigurationProperties(prefix = \\\"soul.sync.websocket\\\") public WebsocketConfig websocketConfig() { return new WebsocketConfig(); } } \",\"Web socket SyncData Service: Get all the registered beans WebsocketConfig and the various DataSubscriber subscribers, and build an implemented WebsocketClientSoulWebsocketClient list\",\"SoulWeb socket Client: Websocket The communication class monitors the websocket connection and receives information. After receiving the information from the background, it will notify each subscriber.\",\"public final class SoulWebsocketClient extends WebSocketClient { private final WebsocketDataHandler websocketDataHandler; private void handleResult(final String result) { WebsocketData websocketData = GsonUtils.getInstance().fromJson(result, WebsocketData.class); ConfigGroupEnum groupEnum = ConfigGroupEnum.acquireByName(websocketData.getGroupType()); // Determine the event type of data changes based on the incoming information, such as refresh, update, delete, etc. String eventType = websocketData.getEventType(); String json = GsonUtils.getInstance().toJson(websocketData.getData()); websocketDataHandler.executor(groupEnum, json, eventType); } } \",\"Web socketData Handler: Construct the data processing classes of various implementations AbstractDataHandler and cache them during initialization.\",\"public class WebsocketDataHandler { // Cache all DataHandler data change handling classes private static final EnumMap<ConfigGroupEnum, DataHandler> ENUM_MAP = new EnumMap<>(ConfigGroupEnum.class); public WebsocketDataHandler(final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { ENUM_MAP.put(ConfigGroupEnum.PLUGIN, new PluginDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.SELECTOR, new SelectorDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.RULE, new RuleDataHandler(pluginDataSubscriber)); ENUM_MAP.put(ConfigGroupEnum.APP_AUTH, new AuthDataHandler(authDataSubscribers)); ENUM_MAP.put(ConfigGroupEnum.META_DATA, new MetaDataHandler(metaDataSubscribers)); } public void executor(final ConfigGroupEnum type, final String json, final String eventType) { // Call the corresponding DataHandler data processing class based on the data change event type ENUM_MAP.get(type).handle(json, eventType); } } \"]},\"118\":{\"h\":\"Gateway data change call chain\",\"t\":[\"After the entry class SoulWebsocketClient that implements Websocket communication receives the background communication, the executor() method called WebsocketDataHandler matches the information type, and calls the corresponding DataHandlerhandler() to process the information.\",\"07\",\"AbstractDataHandler: The implementation handler() method calls the corresponding event abstract method according to the type of the event (such as refresh, update, create, delete, etc.).\",\"public abstract class AbstractDataHandler<T> implements DataHandler { // Distribute to respective methods based on the data event type (eventType), these methods are implemented by subclasses since different types of metadata handlers have different ways of processing @Override public void handle(final String json, final String eventType) { List<T> dataList = convert(json); if (CollectionUtils.isNotEmpty(dataList)) { DataEventTypeEnum eventTypeEnum = DataEventTypeEnum.acquireByName(eventType); switch (eventTypeEnum) { case REFRESH: case MYSELF: doRefresh(dataList); break; case UPDATE: case CREATE: doUpdate(dataList); break; case DELETE: doDelete(dataList); break; default: break; } } } } \",\"XXX DataHandler: This refers to each implementation class AbstractDataHandler of (such as PluginDataHandler), whose main function is to call its subscriber.\",\"Different DataHandler calls have different subscription methods:\",\"Notification of plug-in metadata changes PluginDataHandler is called onSubscribe()\",\"The notification selector is SelectorDataHandler called onSelectorSubscribe() to change the metadata\",\"Notification rule metadata change RuleDataHandler is invoked onRuleSubscribe()\",\"@RequiredArgsConstructor public class PluginDataHandler extends AbstractDataHandler<PluginData> { private final PluginDataSubscriber pluginDataSubscriber; @Override protected void doUpdate(final List<PluginData> dataList) { // Call onSubscribe() of the subscriber, sending the PluginData data object dataList.forEach(pluginDataSubscriber::onSubscribe); } // ... } \",\"CommonPluginData Subscriber: The onSubscribe() method of the subscriber notifies all classes injected as beans PluginDataHandler (not to be confused with the previous class of the same name, which is soul-plugin-base the interface under. Its implementation classes are in the respective pluggable plug-in packages.\",\" image-20210122172333111 \",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { // Collect and cache all registered data handlers, such as DividePluginDataHandler under the HTTP plugin divide private final Map<String, PluginDataHandler> handlerMap; // Called for plugin metadata changes @Override public void onSubscribe(final PluginData pluginData) { BaseDataCache.getInstance().cachePluginData(pluginData); Optional.ofNullable(handlerMap.get(pluginData.getName())).ifPresent(handler -> handler.handlerPlugin(pluginData)); } // Called for selector metadata changes @Override public void onSelectorSubscribe(final SelectorData selectorData) { BaseDataCache.getInstance().cacheSelectData(selectorData); Optional.ofNullable(handlerMap.get(selectorData.getPluginName())).ifPresent(handler -> handler.handlerSelector(selectorData)); } // Called for rule metadata changes @Override public void onRuleSubscribe(final RuleData ruleData) { BaseDataCache.getInstance().cacheRuleData(ruleData); Optional.ofNullable(handlerMap.get(ruleData.getPluginName())).ifPresent(handler -> handler.handlerRule(ruleData)); } } \"]},\"119\":{\"h\":\"TIPS\",\"t\":[\"There are two classes PluginDataHandler with the same name under the whole project. One soul-sync-data-websocket of them is under the project, which is used to notify the plug-in metadata change, and the other is under the soul-plugin-base project, which is used to define the metadata update of each type of plug-in.\",\"To summarize the naming meaning of these two classes, ** soul-sync-data-websocket the \\\"plugin\\\" in the lower class name means that the type of metadata is a plug-in class, and soul-plugin-base the \\\"plugin\\\" in the lower class name means that the subclass that inherits it comes from each pluggable plug-in. Such as divide, dubbo plugins, etc. **\"]},\"120\":{\"h\":\"Soul Gateway Learning SPI\",\"t\":[\"When analyzing the load balancing strategy of the divide plug-in, I saw a line of code:\",\"DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); \",\"At that time, it was easy to skip its implementation, and its function was easy to analyze, calling a method that looked like a tool class, passing in a cluster of multiple nodes, and returning a node. This is a load balancer..\",\"But there are a lot of details, the most important of which is the use of the SPI to select specific implementation classes. Take a look at the code for this method:\",\"public class LoadBalanceUtils { public static DivideUpstream selector(final List<DivideUpstream> upstreamList, final String algorithm, final String ip) { // 调用自定义的 SPI 得到一个子类 LoadBalance loadBalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); return loadBalance.select(upstreamList, ip); } } \",\"The latter is to call the select() specific subclass method, according to the different implementation of the subclass, will eventually show a variety of forms. The current subclass implementations are:\",\"HashLoadBalance\",\"RandomLoadBalance\",\"RoundRobinLoadBalance\",\"The key is ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); this line of work.\",\"Before we look at it, let's take a look at the SPI mechanism provided by Java.\"]},\"121\":{\"h\":\"Java SPI\",\"t\":[\"There is such a definition <<高可用可伸缩微服务架构>> 第 3 章 Apache Dubbo 框架的原理与实现 in.\",\"The full name of SPI is Service Provider Interface, which is a built-in service provider discovery function of JDK and a dynamic replacement discovery mechanism. For example, to dynamically add an implementation to an interface at runtime, you only need to add an implementation.\",\"There is also a very vivid brain map in the book, which shows the use of SPI:\",\"08\",\"That is to say, in the implementation of our code, there is no need to write a Factory, use MAP to wrap some subclasses, and the final return type is the parent interface. You only need to define the resource file and specify the parent interface and its subclasses in the file, and then you can get all the defined subclass objects by setting them:\",\"ServiceLoader<Interface> loaders = ServiceLoader.load(Interface.class) for(Interface interface : loaders){ System.out.println(interface.toString()); } \",\"Compared with the ordinary factory pattern, this method is definitely more in line with the principle of opening and closing, adding a new subclass without modifying the factory method, but editing the resource file.\"]},\"122\":{\"h\":\"Start with a Demo\",\"t\":[\"According to the specification of SPI, I built a demo to see the specific implementation effect.\",\" image-20210129095623013 \",\" image-20210129095703911 \",\"A run() method is defined in Animal, and a subclass implements it.\",\"public interface Animal { void run(); } public class Dog implements Animal { @Override public void run() { System.out.println(\\\"狗在跑\\\"); } } public class Horse implements Animal { @Override public void run() { System.out.println(\\\"马在跑\\\"); } } \",\"Use the loading class of SPI to get the execution result of the subclass:\",\"private static void test() { final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\" image-20210129103047851 \",\"After the call, we get the implementation classes previously written in the resource file and successfully invoke their respective run() methods.\",\"At this point, I have a question **, does each call ServiceLoader.load(Animal.class) return the same object? ** If it is, I guess it is loaded into the cache at startup, if not, it may be using reflection at the bottom, and each call has a certain consumption. Let's look at the following experiment:\",\"public static void main(String[] args) { for (int i = 0; i < 2; i++) { test(); System.out.println(\\\"----------\\\"); } } private static void test() { final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\" image-20210129103451844 \",\"The objects in the two calls are different, which makes me worry about its performance, so let's analyze its code first and see how to implement it.\"]},\"123\":{\"h\":\"Implementation of SPI\",\"t\":[\"To find java.util,ServiceLoaders this class, the most striking thing is the directory where we placed the resource files according to the specifications before.\",\"public final class ServiceLoader<S> implements Iterable<S> { private static final String PREFIX = \\\"META-INF/services/\\\"; } \",\"When the debug PREFIX attribute is called, it is found that ServiceLoader.load the lazy loading method is actually used, and the actual return class is not found when it is called, but when it is traversed.\",\"Its lazy loading is implemented in the following code:\",\"public final class ServiceLoader<S> implements Iterable<S> { public static <S> ServiceLoader<S> load(Class<S> service) { // 获取当前的类加载器 (我们自己的通常是弟中弟 AppClassLoader ) ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); } public static <S> ServiceLoader<S> load(Class<S> service, ClassLoader loader) { // 调用构造器初始化对象 (说明每次调用都使用新的 ServiceLoader 对象) return new ServiceLoader<>(service, loader); } private ServiceLoader(Class<S> svc, ClassLoader cl) { service = Objects.requireNonNull(svc, \\\"Service interface cannot be null\\\"); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; // 上面都是将信息放入对象实例属性中, 这行才是关键调用 reload(); } public void reload() { providers.clear(); // 创建懒加载迭代器, 传入关键的接口 Class 以及加载器 lookupIterator = new LazyIterator(service, loader); } } \",\"After the call ServiceLoader.load, the key thing is not done, just pass the interface class and loader to LazyIterator, the implementation class of the iterator.\",\"Seeing this, we can guess that when the object returned by the real iteration call is called, the iterator must be required to complete the search and initialization of the implementation class, while the parameter passing is Class information and loader, and the initialization of the implementation class will obviously be reflection.\",\"Take a look at how LazyIterator is implemented, starting with where it will be called hasNext() in the first place:\",\"private class LazyIterator implements Iterator<S> { public boolean hasNext() { if (acc == null) { return hasNextService(); } else { // ... } } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else // 加载资源文件 configs = loader.getResources(fullName); } catch (IOException x) { fail(service, \\\"Error locating configuration files\\\", x); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } // 解析出资源文件中写入的实现类类名 pending = parse(service, configs.nextElement()); } // 获取一个类名 nextName = pending.next(); return true; } } \",\" image-20210129111231212 \",\"hasNext() The call can get the name of the class in our resource, write it to the instance property nextName, and return it true so that the iterator can make next() the call.\",\"public S next() { if (acc == null) { return nextService(); } else { // ... } } private S nextService() { if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class<?> c = null; try { // 反射得到 Class 对象 c = Class.forName(cn, false, loader); } catch (ClassNotFoundException x) { fail(service, \\\"Provider \\\" + cn + \\\" not found\\\"); } if (!service.isAssignableFrom(c)) { fail(service, \\\"Provider \\\" + cn + \\\" not a subtype\\\"); } try { // 初始化对象, 并判断是否与接口符合 S p = service.cast(c.newInstance()); // 将初始化的对象放入hash缓存 (关键步骤) providers.put(cn, p); return p; } catch (Throwable x) { fail(service, \\\"Provider \\\" + cn + \\\" could not be instantiated\\\", x); } throw new Error(); // This cannot happen } \",\"Here we understand that after initialization, the object will be put into the cache, and the key is the interface class. There will be no reflection consumption in the second call.\",\"So why do we produce different object instances in the way we test before? The reason is that each call ServiceLoader.load() produces a new ServiceLoader object. We will improve the test method:\",\"public static void main(String[] args) { // 复用 ServiceLoaders final ServiceLoader<Animal> load = ServiceLoader.load(Animal.class); for (int i = 0; i < 2; i++) { test(load); System.out.println(\\\"----------\\\"); } } private static void test(ServiceLoader<Animal> load) { for (Animal animal : load) { System.out.println(animal); animal.run(); } } \",\" image-20210129113307494 \"]},\"124\":{\"h\":\"Java SPI Thinking\",\"t\":[\"There are a lot of details that we haven't described in the Java SPI, but that's the main process. Our two previous questions about how to implement and performance can also be answered:\",\"How to implement: Read the resource file through the IO stream, load the corresponding path by reflection and generate a Class object, and put it into the cache after initialization\",\"Performance: The first iteration call will have a reflection call, but when used multiple times, as long as the same ServiceLoader object is used, multiple reflections can be avoided, because the objects in the cache will be reused directly.\",\"At this point, I have a very confused place, before I thought it was very similar to the factory method, but it has an advantage over it, because after adding a subclass, you only need to change the resource file without changing the factory class.\",\"But when I tried to use Java SPI to implement it, I found that it could not achieve this effect. An important reason is ** The individual implementation classes in the resource file are not differentiated ** that I could not filter out the implementation class that I needed to cache in ServiceLoaders.\",\"So where is its usage scenario?\"]},\"125\":{\"h\":\"JDBC SPI Usage\",\"t\":[\"According to the information, the most critical pluggable driver design in JDBC is implemented by SPI.\"]},\"126\":{\"h\":\"Mysql driver package SPI\",\"t\":[\"In each database connection package, the implementation of JDBC mode needs to implement its Driver interface. The practical one is the SPI mode. Let's take a look.\",\" image-20210130202512831 \",\"So how do the JDBC-related classes in the JDK implement this? The key class is DriverManager\",\"public class DriverManager { static { loadInitialDrivers(); } private static void loadInitialDrivers() { // ... AccessController.doPrivileged(new PrivilegedAction<Void>() { public Void run() { // 这里就是 SPI 的实现, 迭代时实际会 Class.forName() 初始化实现类 ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); Iterator<Driver> driversIterator = loadedDrivers.iterator(); try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); // ... } } \",\"If the static method of DriverManager is called in the code, the above code will be triggered, and what does the initialization of the ** Its function is to initialize all the Driver implementation classes in the SPI resource file. ** implementation class do? Keep looking com.mysql.jdbc.Driver\",\"public class Driver extends NonRegisteringDriver implements java.sql.Driver { static { try { // 调用 DriverManager 的注册方法, 将此 Driver 实现类注册到 JDBC 的 Driver 管理器中 java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(\\\"Can't register driver!\\\"); } } } \",\"The registration method of DriverManager is very simple, that is, the input parameters are put into static variables as a global cache.\",\"public class DriverManager { // 缓存 Driver 实现类 private final static CopyOnWriteArrayList<DriverInfo> registeredDrivers = new CopyOnWriteArrayList<>(); public static synchronized void registerDriver(java.sql.Driver driver) throws SQLException { registerDriver(driver, null); } public static synchronized void registerDriver(java.sql.Driver driver, DriverAction da) throws SQLException { if(driver != null) { // 注册到变量中 registeredDrivers.addIfAbsent(new DriverInfo(driver, da)); } else { throw new NullPointerException(); } } } \"]},\"127\":{\"h\":\"Filter Driver: Contract is greater than configuration\",\"t\":[\"In normal use, we will get the connection directly DriverManager.getConnection(url, user, passwd), but there is a question here. We have registered multiple drivers in DriverManager. Why can we determine a unique Driver here?\",\"To find the getConnection() DriverManager first:\",\"public static Connection getConnection(String url, String user, String password) throws SQLException { // ... return (getConnection(url, info, Reflection.getCallerClass())); } private static Connection getConnection( String url, java.util.Properties info, Class<?> caller) throws SQLException { // ... for(DriverInfo aDriver : registeredDrivers) { // isDriverAllowed() 仅是通过 Class.forName() 初始化, 没有甄别作用 if(isDriverAllowed(aDriver.driver, callerCL)) { try { // 最关键的点在这行, 筛选工作其实在实现类自身的 connect() 方法中, 会根据传入的 url 筛选 Connection con = aDriver.driver.connect(url, info); if (con != null) { return (con); } } catch (SQLException ex) { } } else { } } // ... } \",\"See how filtering is implemented in the all-important Mysql Driver (which inherits from NonRegisteringDriver)\",\"public class NonRegisteringDriver implements java.sql.Driver { private static final String URL_PREFIX = \\\"jdbc:mysql://\\\"; private static final String REPLICATION_URL_PREFIX = \\\"jdbc:mysql:replication://\\\"; private static final String MXJ_URL_PREFIX = \\\"jdbc:mysql:mxj://\\\"; public static final String LOADBALANCE_URL_PREFIX = \\\"jdbc:mysql:loadbalance://\\\"; public java.sql.Connection connect(String url, Properties info) throws SQLException { // ... // parseURL() 会匹配 url 是否符合其所在 Driver 的连接方式 // 这里就是采用\\\"约定大于配置\\\"的思想, 通过匹配路径头做筛选 if ((props = parseURL(url, info)) == null) { return null; } // ... } public Properties parseURL(String url, Properties defaults) throws java.sql.SQLException { // ... // 如果 url 不匹配此 Driver 的路径则返回null, 最外层会继续尝试下个 Driver if (!StringUtils.startsWithIgnoreCase(url, URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, MXJ_URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, LOADBALANCE_URL_PREFIX) && !StringUtils.startsWithIgnoreCase(url, REPLICATION_URL_PREFIX)) { return null; } // ... } } \"]},\"128\":{\"h\":\"Summary MySQL & JDBC\",\"t\":[\"See here, I think you already understand the implementation of SPI in MySQL & JDBC. Summarize a few points.\",\"The DriverManager in JDBC loads the SPI resource file and java.sql.Driver initializes all the implementation classes.\",\"In fact, when the class is initialized, it will create its own object and inject it into DriverManager for unified management.\",\"The DriverManager filters the managed Drivers by the Driver implementation class itself, which is only responsible for traversing and taking out the available Drivers\",\"The Driver implementation class determines whether it should return itself by passing in the database URL header. If not, return null.. JDBC's DriverManager receives the null call that will continue with the next Driver implementation class.\",\"The MySql driver actual selection scheme is path header matching, which is one of\"]},\"129\":{\"h\":\"JDBC Demo\",\"t\":[\"After writing these analyses, let's look at how to implement a simple demo.\",\"Let's share the way I wrote it before.\",\"static { try { // 反射, 该类加载时会在静态块中, 向 DriverManager 注册 Driver Class.forName(\\\"com.mysql.jdbc.Driver\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } public static void main(String[] args) { try ( final Connection conn = DriverManager.getConnection(url, user, passwd); final Statement stmt = conn.createStatement(); final ResultSet rs = stmt.executeQuery(\\\"select count(1) from test\\\") ) { while (rs.next()) { int count = rs.getInt(\\\"count(1)\\\"); System.out.println(count); } } catch (Exception e) { e.printStackTrace(); } } \",\"Although this can be used, don't you think there is extra code? Look at my new way of writing.\",\"public static void main(String[] args) throws ClassNotFoundException { try ( final Connection conn = DriverManager.getConnection(url, user, passwd); final Statement stmt = conn.createStatement(); final ResultSet rs = stmt.executeQuery(\\\"select count(1) from test\\\") ) { while (rs.next()) { int count = rs.getInt(\\\"count(1)\\\"); System.out.println(count); } } catch (Exception e) { e.printStackTrace(); } } \",\"Only these simple codes are needed. DriverManager.getConnection() When called, the DriverManager will automatically load the implementation class in the SPI, and we do not need to Class.forName() manually call java.mysql.Driver the initialization.\",\"** See here I think you still understand the most important role of SPI. There is no need to explicitly write out the implementation class corresponding to the interface **\",\"So we also have a problem in \\\"Java SPI Thinking\\\" that has been solved. ** How do you distinguish the implementation classes to be used in the SPI? Let the implementation class decide for itself, and the outer call simply iterates over all. **\"]},\"130\":{\"h\":\"SOUL SPI implementation\",\"t\":[\"We have a thorough understanding of the use of SPI in Java, while the SPI in Soul is designed by ourselves, using the design idea of SPI in Dubbo. You can see the associated annotation on the org.dromara.soul.spi.SPI annotation class.\",\"/** * SPI Extend the processing. * All spi system reference the apache implementation of * https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension. */ \"]},\"131\":{\"h\":\"Java SPI bug\",\"t\":[\"When analyzing the use of Java SPI in the last two modules, some shortcomings were found:\",\"If the ServiceLoader is used improperly ** Does not properly utilize its caching mechanism **, it will cause the class object to be reflected and the instance object to be initialized every time the concrete implementation class is obtained. Not to mention that the performance is over, the object obtained every time is different, which may cause program problems.\",\"That is to say, every time you look for a specific implementation class, you have to iterate over it. Although the use of fewer subclasses has no effect, this way is still silly. In addition, referring to the implementation of JDBC in MySQL driver, we also need to design a more complex filtering mechanism.\",\"So how does the implementation of Soul SPI solve these two problems? The key lies in the next two sub-modules.\",\"Optimized Extension Loader\",\"Enhanced getJoin ()\"]},\"132\":{\"h\":\"Optimized Extension Loader\",\"t\":[\"Let's first look at the overall picture of the SPI implementation project, which is soul-spi:\",\" image-20210130214402997 \",\"The core class is the Extension Loader, which can be said to be the Soul version of the ServiceLoader. It also defines the path location of the SPI resource file.\",\"public final class ExtensionLoader<T> { private static final String SOUL_DIRECTORY = \\\"META-INF/soul/\\\"; } \",\"By examining the callers of its methods, we find the entry method.\",\"public final class ExtensionLoader<T> { private static final Map<Class<?>, ExtensionLoader<?>> LOADERS = new ConcurrentHashMap<>(); public static <T> ExtensionLoader<T> getExtensionLoader(final Class<T> clazz) { // ... // 根据加载类对象取出缓存中数据, 如果没有则新建 ExtensionLoader 对象并放入缓存 ExtensionLoader<T> extensionLoader = (ExtensionLoader<T>) LOADERS.get(clazz); if (extensionLoader != null) { return extensionLoader; } LOADERS.putIfAbsent(clazz, new ExtensionLoader<>(clazz)); return (ExtensionLoader<T>) LOADERS.get(clazz); } } \",\"This method acts like a ServiceLoader load() method and returns a ServiceLoader object.\",\"It's just that the implementation in Soul changes the way it caches the Extension Loader object so that\"]},\"133\":{\"h\":\"Enhanced search getJoin ()\",\"t\":[\"Let's look at the getJoin() Extension Loader method, which I understand as ** Better implementation of ServiceLoader Iterator Edition **. It also does two things that the ServiceLoader iteration did:\",\"Initialize the implementation class in the SPI\",\"Cache the implementation class-> as a Map collection of the form Key-Value\",\"Based on the K-V cache mode, it also made a transformation that I was most looking forward to:\",\"The direct matching of time complexity O(1) to realize class mode\"]},\"134\":{\"h\":\"Multi-tier cache\",\"t\":[\"The reason ExtensionLoader can do this enhanced search without iterating over everything each time is that it relies on three different types of caching.\",\"These three caches are divided into two layers, each of which has different purposes. The overview is as follows:\",\"// 一层缓存 private final Map<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>(); // 二层缓存之一 private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>(); // 二层缓存之一 private final Map<Class<?>, Object> joinInstances = new ConcurrentHashMap<>(); \"]},\"135\":{\"h\":\"Tier 1 cache: cachedInstances\",\"t\":[\"The first is the first-tier cache, which is the first thing we come into contact with when searching for the specific implementation class of the interface. If we hit it, we can directly get the object of the implementation class.\",\"private final Map<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>(); \",\"It key is actually the information we configured in the Soul SPI resource file, such as the resource file of the load balancing implementation class of the Divide plug-in.\",\" image-20210130230250748 \",\"And it value 's the Holder object, which holds the object of the implementation class. When called getJoin(), pass in an identity (such as random) to get the implementation class object.\",\"public T getJoin(final String name) { // ... Holder<Object> objectHolder = cachedInstances.get(name); Object value = objectHolder.getValue(); // ... return (T) value; } \"]},\"136\":{\"h\":\"Layer 2 Cache: cachedClasses\",\"t\":[\"It cachedClasses stores the mapping between the identity (random) and the class object\",\"private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>(); \",\"How is the cachedClasses cached information populated? Is directly triggered to retrieve the SPI resource file and then parse it into a cachedClasses cache. The specific method is in loadResources()\",\"private void loadResources(final Map<String, Class<?>> classes, final URL url) throws IOException { Properties properties = new Properties(); // 解析资源文件 properties.load(inputStream); properties.forEach((name, classPath) -> { // 读出 K-V 结构并组装成 classes, 外层调用会包装到 cachedClasses loadClass(classes, name, classPath); }); } \"]},\"137\":{\"h\":\"Second-tier cache: joinInstances\",\"t\":[\"The joinInstances cache holds the mapping of class objects to object instances.\",\"private final Map<Class<?>, Object> joinInstances = new ConcurrentHashMap<>(); \",\"This layer of cache will get the class object of the corresponding identifier (random) with the help of the second layer of cache, and cache it into itself through the initialization instance of the class object. The corresponding implementation method is as follow\",\"private T createExtension(final String name) { Class<?> aClass = getExtensionClasses().get(name); Object o = joinInstances.get(aClass); if (o == null) { joinInstances.putIfAbsent(aClass, aClass.newInstance()); } return (T) o; } \"]},\"138\":{\"h\":\"Cache summary\",\"t\":[\"When the implementation class of an interface is loaded through the Extension Loader, the flow chart of the cache call is as follows:\",\"09\"]},\"139\":{\"h\":\"Detailed source code analysis (can be skipped)\",\"t\":[\"// name can be understood as an identifier used to distinguish a specific implementation class in the SPI file. public T getJoin(final String name) { // ... // cachedInstances caches all Holder objects. The value property of the Holder object holds the concrete implementation class. // I understand cachedInstances as the first-level cache. If it hits, it directly returns the desired class. Holder<Object> objectHolder = cachedInstances.get(name); if (objectHolder == null) { cachedInstances.putIfAbsent(name, new Holder<>()); objectHolder = cachedInstances.get(name); } Object value = objectHolder.getValue(); // Double-checked locking: if not hit, call createExtension() if (value == null) { synchronized (cachedInstances) { value = objectHolder.getValue(); if (value == null) { value = createExtension(name); objectHolder.setValue(value); } } } return (T) value; } \",\"private T createExtension(final String name) { // Critical code, searching for the class object corresponding to the identifier. Class<?> aClass = getExtensionClasses().get(name); if (aClass == null) { throw new IllegalArgumentException(\\\"name is error\\\"); } // joinInstances can be understood as the second-level cache, where K-V maps class objects to their initialized instances. Object o = joinInstances.get(aClass); if (o == null) { try { joinInstances.putIfAbsent(aClass, aClass.newInstance()); o = joinInstances.get(aClass); } catch (InstantiationException | IllegalAccessException e) { // ... } } return (T) o; } \",\"public Map<String, Class<?>> getExtensionClasses() { // cachedClasses is the third-level cache, storing the mapping of identifiers to class objects. Map<String, Class<?>> classes = cachedClasses.getValue(); if (classes == null) { synchronized (cachedClasses) { classes = cachedClasses.getValue(); if (classes == null) { // Construct the classes cache, with K-V structure as identifier-class object. classes = loadExtensionClass(); cachedClasses.setValue(classes); } } } return classes; } \",\"private Map<String, Class<?>> loadExtensionClass() { // Get the SPI annotation of the interface. SPI annotation = clazz.getAnnotation(SPI.class); if (annotation != null) { String value = annotation.value(); if (StringUtils.isNotBlank(value)) { cachedDefaultName = value; } } // Construct the classes cache, with K-V structure as identifier-class object. Map<String, Class<?>> classes = new HashMap<>(16); loadDirectory(classes); return classes; } \",\"private void loadDirectory(final Map<String, Class<?>> classes) { String fileName = SOUL_DIRECTORY + clazz.getName(); try { ClassLoader classLoader = ExtensionLoader.class.getClassLoader(); // Read the SPI resource file. Enumeration<URL> urls = classLoader != null ? classLoader.getResources(fileName) : ClassLoader.getSystemResources(fileName); if (urls != null) { while (urls.hasMoreElements()) { URL url = urls.nextElement(); // Construct the classes cache, with K-V structure as identifier-class object. loadResources(classes, url); } } } } \",\"private void loadResources(final Map<String, Class<?>> classes, final URL url) throws IOException { try (InputStream inputStream = url.openStream()) { Properties properties = new Properties(); properties.load(inputStream); // Parse the resource file into K-V structure. properties.forEach((k, v) -> { String name = (String) k; String classPath = (String) v; if (StringUtils.isNotBlank(name) && StringUtils.isNotBlank(classPath)) { try { // Load the class path into classes cache, along with identifier and class path. loadClass(classes, name, classPath); } catch (ClassNotFoundException e) { throw new IllegalStateException(\\\"load extension resources error\\\", e); } } }); } } \",\"private void loadClass(final Map<String, Class<?>> classes, final String name, final String classPath) throws ClassNotFoundException { // Reflect the class path from the resource file into a class object. Class<?> subClass = Class.forName(classPath); // Get the Join annotation of the implementation class. Join annotation = subClass.getAnnotation(Join.class); Class<?> oldClass = classes.get(name); if (oldClass == null) { // Put it into the classes cache as K-V, with identifier as the key and class object as the value. classes.put(name, subClass); } } \"]},\"140\":{\"h\":\"Soul Gateway Learning Sign Plugin\"},\"141\":{\"h\":\"Introduction\",\"t\":[\"The sign plug-in is used to sign and authenticate requests.\"]},\"142\":{\"h\":\"AK/SK Introduction\",\"t\":[\"AK/SK (Access Key ID/Secret Access Key) is the access key, including the access key ID (AK) and the secret access key (SK), which is mainly used to authenticate and authenticate the user's calling behavior.\"]},\"143\":{\"h\":\"Plugin usage-take (/dubbo/findAll) as an example\"},\"144\":{\"h\":\"Support added sign in SoulBootstrap's POM. XML films\",\"t\":[\" <!-- soul sign plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-sign</artifactId> <version>${last.version}</version> </dependency> <!-- soul sign plugin end--> \"]},\"145\":{\"h\":\"Add appKey, secretKey\"},\"146\":{\"h\":\"Configure Selectors and Regulators\",\"t\":[\"Add Selector Add Ruler \"]},\"147\":{\"h\":\"Add the service of obtaining authentication\",\"t\":[\"Add an external access method to your service\",\" @GetMapping(\\\"/authUrl\\\") public String authUrl() { Map<String, String> map = Maps.newHashMapWithExpectedSize(2); //Convert timestamp to string form of milliseconds: String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(\\\"+8\\\")).toEpochMilli()) String timetamp = String.valueOf(LocalDateTime.now().toInstant(ZoneOffset.of(\\\"+8\\\")).toEpochMilli()) ; System.out.println(timetamp); map.put(\\\"timestamp\\\",timetamp); //The value should be in the form of a string representing milliseconds map.put(\\\"path\\\", \\\"/dubbo/findAll\\\"); map.put(\\\"version\\\", \\\"1.0.0\\\"); List<String> storedKeys = Arrays.stream(map.keySet() .toArray(new String[]{})) .sorted(Comparator.naturalOrder()) .collect(Collectors.toList()); final String sign = storedKeys.stream() .map(key -> String.join(\\\"\\\", key, map.get(key))) .collect(Collectors.joining()).trim() .concat(\\\"D19CF79F647A465AB9C5C66F430CAD28\\\");//SECRETkey return DigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase(); } \",\"The following should be noted \"]},\"148\":{\"h\":\"Adding authentication header information in the gateway\",\"t\":[\"image.png\"]},\"149\":{\"h\":\"Demo of the requested result\",\"t\":[\"Passed return 5min timeout return appKey filling error return signature error return disable sign plug-in return \"]},\"150\":{\"h\":\"Implementation Analysis of sign Plug-in\"},\"151\":{\"h\":\"Pair in Java\",\"t\":[\"Simply speaking, pair stores a pair of key values, while map can store multiple pairs of key values. SignPlugin plug-in calls signVerify method in DefaultSignService to judge whether sign plug-in is available. If yes, obtain the soul Context stored in global plug-in and call verify method\",\"if (signData != null && signData.getEnabled()) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; return verify(soulContext, exchange); } \",\"In the verify method, determine whether the request header information is correct. If not, throw the log. Error ( \\\"sign parameters are incomplete, { }\\\", soulContext) exception\",\"if (StringUtils.isBlank(soulContext.getAppKey()) || StringUtils.isBlank(soulContext.getSign()) || StringUtils.isBlank(soulContext.getTimestamp())) { log.error(\\\"sign parameters are incomplete,{}\\\", soulContext); return Pair.of(Boolean.FALSE, Constants.SIGN_PARAMS_ERROR); } \",\"Judge whether the request time is timeout\",\" if (between > delay) { return Pair.of(Boolean.FALSE, String.format(SoulResultEnum.SING_TIME_IS_TIMEOUT.getMsg(), delay)); } \",\"Continue to call the sign method without timeout to get the authentication data, which is configured in soulAdmin\",\"AppAuthData appAuthData = SignAuthDataCache.getInstance().obtainAuthData(soulContext.getAppKey()); \",\"The appAuthData data will be judged later. If the data is wrong, the acquired parameters will not be re-signed to judge whether the incoming data is the same as the re-signed data.\",\"String sigKey = SignUtils.generateSign(appAuthData.getAppSecret(), buildParamsMap(soulContext)); \",\"If all the verification is passed, the authentication access request is completed.\"]},\"152\":{\"h\":\"Soul Gateway Learns Zookeeper Data Synchronization 01\"},\"153\":{\"h\":\"Start soul-admin and soul-bootstrap, and use zookeeper to synchronize data to the gateway\"},\"154\":{\"h\":\"I. Configuration environment\",\"t\":[\"For soul-admin service configuration, restart the service.\",\"soul-admin/src/main/resources/application.yml\",\"soul: sync: zookeeper: url: localhost:2181 sessionTimeout: 5000 connectionTimeout: 2000 \",\"Soul-bootstrap gateway service configuration needs to be restarted\",\"soul-bootstrap/pom.xml\",\"<!--soul data sync start use zookeeper--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-zookeeper</artifactId> <version>${project.version}</version> </dependency> \",\"soul-bootstrap/src/main/resources/application-local.yml\",\"soul: sync: zookeeper: url: localhost:2181 sessionTimeout: 5000 connectionTimeout: 2000 \"]},\"155\":{\"h\":\"II. Startup Service\",\"t\":[\"Start zookeeper\",\"zookeeper ./bin/zkServer.sh start /usr/bin/java ZooKeeper JMX enabled by default Using config: /Documents/soft/zookeeper/bin/../conf/zoo.cfg Starting zookeeper ... STARTED \",\"The soul-admin gateway background service is started. After the service is started, you can see the ZooKeeper request call.\",\" 2021-01-20 17:34:48.752 INFO 64500 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread : Starting ZkClient event thread. 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:zookeeper.version=3.5.6-c11b7e26bc554b8523dc929761dd28808913f091, built on 10/08/2019 20:18 GMT 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:host.name=10.7.254.31 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:java.version=1.8.0_261 2021-01-20 17:34:48.761 INFO 64500 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:java.vendor=Oracle Corporation ...... 2021-01-20 17:34:48.806 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error) 2021-01-20 17:34:48.826 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Socket connection established, initiating session, client: /0:0:0:0:0:0:0:1:58214, server: localhost/0:0:0:0:0:0:0:1:2181 2021-01-20 17:34:48.857 INFO 64500 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x1000b5e22f50001, negotiated timeout = 5000 2021-01-20 17:34:48.861 INFO 64500 --- [ain-EventThread] org.I0Itec.zkclient.ZkClient : zookeeper state changed (SyncConnected) \",\"The soul-bootstrap gateway service is started. After the service is started, you can see the ZooKeeper request call.\",\"2021-01-20 17:35:58.996 INFO 64583 --- [ main] s.b.s.d.z.ZookeeperSyncDataConfiguration : you use zookeeper sync soul data....... 2021-01-20 17:35:59.003 INFO 64583 --- [-localhost:2181] org.I0Itec.zkclient.ZkEventThread : Starting ZkClient event thread. ...... 2021-01-20 17:35:59.012 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:user.home=/Users/liquan 2021-01-20 17:35:59.012 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Client environment:os.memory.total=310MB 2021-01-20 17:35:59.018 INFO 64583 --- [ main] org.apache.zookeeper.ZooKeeper : Initiating client connection, connectString=localhost:2181 sessionTimeout=5000 watcher=org.I0Itec.zkclient.ZkClient@114a5e0 2021-01-20 17:35:59.121 INFO 64583 --- [localhost:2181)] org.apache.zookeeper.ClientCnxn : Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1000b5e22f50002, negotiated timeout = 5000 2021-01-20 17:35:59.126 INFO 64583 --- [ain-EventThread] org.I0Itec.zkclient.ZkClient : zookeeper state changed (SyncConnected) \",\"View the registration information of soul gateway synchronization on zookeeper\"]},\"156\":{\"h\":\"III. Analysis of data synchronization principle of Soul gateway Zookeeper\",\"t\":[\"After the soul-admin is started, the zkclient. ZkClient org.I0Itec. Is seen in the console, which is used as an entry point for tracing and debugging.\",\"Function of ZookeeperConfiguration: Register zkClient to the Spring container.\",\"// EnableConfigurationProperties Purpose: Enables classes annotated with @ConfigurationProperties. If a configuration class is only annotated with @ConfigurationProperties and not with @Component, then the bean converted from the properties configuration file cannot be obtained in the IOC container. @EnableConfigurationProperties is equivalent to injecting classes that use @ConfigurationProperties. // @ConditionalOnMissingBean If the specified class is missing in the container, perform injection. Opposite of @ConditionalOnBean. /** * ZookeeperConfiguration . * @author xiaoyu(Myth) */ @EnableConfigurationProperties(ZookeeperProperties.class) public class ZookeeperConfiguration { /** * register zkClient in spring ioc. * * @param zookeeperProp the zookeeper configuration * @return ZkClient {@linkplain ZkClient} */ @Bean @ConditionalOnMissingBean(ZkClient.class) public ZkClient zkClient(final ZookeeperProperties zookeeperProp) { return new ZkClient(zookeeperProp.getUrl(), zookeeperProp.getSessionTimeout(), zookeeperProp.getConnectionTimeout()); } } \",\"After the soul-admin is started, it will read the zookeeper configuration information and inject zkClient into the container to establish a connection with the zookeeper. \",\"pic\",\"The afterPropertiesSet method of DataChangedEventDispatcher will be called in the call stack of the instantiated ZkClient.\",\"The org. Dromara. Soul. Admin. Listener. DataChangedEventDispatcher acts as an event router, which forwards changed events to each ConfigEventListener.\",\"This class implements the InitializingBean. During the DataChangedEventDispatcher initialization, the afterPropertiesSet method is executed.\",\"The After PropertiesSet method looks for beans in the container whose type is the DataChangedListener. Class.\",\"@Component public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean { private ApplicationContext applicationContext; private List<DataChangedListener> listeners; public DataChangedEventDispatcher(final ApplicationContext applicationContext) { this.applicationContext = applicationContext; } @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { case APP_AUTH: listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType()); break; ....... default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } ...... @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } } \",\"The execution of the afterPropertiesSet method will find the instantiation of DataChangedListener. Class related classes.\",\"Role of org. Dromara. Soul. Admin. Config. Data SyncConfiguration: Data synchronization configuration class.\",\"ZookeeperData ChangedListener Data Change Listener, which is used to listen to metadata changes and then synchronize to zookeeper.\",\"ZookeeperDataInit zookeeper data initialization. Function: Synchronize initialization data to zookeeper.\",\"/** * The type Zookeeper listener. */ @Configuration @ConditionalOnProperty(prefix = \\\"soul.sync.zookeeper\\\", name = \\\"url\\\") @Import(ZookeeperConfiguration.class) static class ZookeeperListener { /** * Config event listener data changed listener. * @param zkClient the zk client * @return the data changed listener */ @Bean @ConditionalOnMissingBean(ZookeeperDataChangedListener.class) public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) { return new ZookeeperDataChangedListener(zkClient); } /** * Zookeeper data init zookeeper data init * @param zkClient the zk client * @param syncDataService the sync data service * @return the zookeeper data init */ @Bean @ConditionalOnMissingBean(ZookeeperDataInit.class) public ZookeeperDataInit zookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { return new ZookeeperDataInit(zkClient, syncDataService); } } \",\"Role of org. Dromara. Soul. Admin. Listener. Zookeeper. ZookeeperDataInit: responsible for synchronizing initialization data to zookeeper. This class implements the CommandLine Runner.\",\"CommandLine Runner: Function: SpringBoot will traverse all entity classes that implement CommandLineRunner and execute the run method after the project is started. If it needs to be executed in a certain order, Then you need to use a @ Order annotation on the entity class (or implement the Order interface) to indicate the order.\",\"The run method calls the syncData Service. SyncAll method.\",\"public class ZookeeperDataInit implements CommandLineRunner { private final ZkClient zkClient; private final SyncDataService syncDataService; /** * Instantiates a new Zookeeper data init. * @param zkClient the zk client * @param syncDataService the sync data service */ public ZookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) { this.zkClient = zkClient; this.syncDataService = syncDataService; } @Override public void run(final String... args) { String pluginPath = ZkPathConstants.PLUGIN_PARENT; String authPath = ZkPathConstants.APP_AUTH_PARENT; String metaDataPath = ZkPathConstants.META_DATA; if (!zkClient.exists(pluginPath) && !zkClient.exists(authPath) && !zkClient.exists(metaDataPath)) { syncDataService.syncAll(DataEventTypeEnum.REFRESH); } } } \",\"5、org.dromara.soul.admin.service.sync.SyncDataServiceImpl\",\"The syncAll method invokes the event publisher to publish an event of DataEventTypeEnum. REFRESH.\",\"/** * The type sync data service. * @author xiaoyu(Myth) */ @Service(\\\"syncDataService\\\") public class SyncDataServiceImpl implements SyncDataService { // Publishes events, informing all listeners related to this event. private final ApplicationEventPublisher eventPublisher; ...... @Override public boolean syncAll(final DataEventTypeEnum type) { appAuthService.syncData(); List<PluginData> pluginDataList = pluginService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, type, pluginDataList)); List<SelectorData> selectorDataList = selectorService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, type, selectorDataList)); List<RuleData> ruleDataList = ruleService.listAll(); eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, type, ruleDataList)); metaDataService.syncData(); return true; } ...... } \",\"pic\",\"After the event is published, the onApplicationEvent method of the org. Dromara. Soul. Admin. Listener. DataChangedEventDispatcher class will listen to the change of the event and traverse all listeners to synchronize the data. The listener implementation class here is ZookeeperData ChangedListener, which synchronizes data to zookeeper through zkClient according to the corresponding event type.\",\"pic\",\"Soul-admin initialization to data to zookeeper mind map\",\"pic\"]},\"157\":{\"h\":\"IV. Summary\",\"t\":[\"When the soul-admin is started, it will synchronize the gateway data rule, metaData, selector, plugin, etc. To the zookeeper. The data change will publish the DataChangedEvent event, and the listening event will synchronize the data to the zookeeper.\",\" Soul gateway data synchronization principle \"]},\"158\":{\"h\":\"Soul Gateway Learns Zookeeper Data Synchronization 02\"},\"159\":{\"h\":\"Start the admin? And Gateway. Admin operation, using zookeeper to synchronize data to the gateway\",\"t\":[\"The soul-admin previous article startup process is the entry. After analyzing the soul-admin startup, the gateway data rule, metaData, selector, plugin, etc. Will be synchronized to the zookeeper.\",\"The data change will publish the DataChangedEvent event, and the listening event will synchronize the data to the zookeeper. This article follows the previous article to continue to track the source code and analyze the principle of zookeeper synchronizing data to the gateway:\",\"Soul-admin changes the gateway data and tracks the data synchronization process.\",\"How soul-bootstrap gets zookeeper data and how it senses changes in gateway data.\"]},\"160\":{\"h\":\"1. Soul-admin changes the gateway data and tracks the data synchronization process\",\"t\":[\"Try to change the status of the divide plug-in in the background of the gateway, debug tracking.\",\"pic\",\"After the plug-in is updated, a Data ChangedEvent event will be issued.\",\"pic\",\"Org. Dromara. Soul. Admin. Listener. DataChangedEventDispatcher -- > onApplicationEvent () is responsible for listening to events.\",\"pic\",\"The org. Dromara. Soul. Admin. Listener. Zookeeper. ZookeeperData ChangedListener is responsible for synchronizing data to zookeeper.\",\"pic\"]},\"161\":{\"h\":\"2. How does soul-bootstrap get zookeeper data and how does it perceive changes in gateway data.\",\"t\":[\"Soul-bootstrap dependency\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-zookeeper</artifactId> <version>${project.version}</version> </dependency> \",\"Soul-bootstrap will automatically inject org. Dromara. Soul. Spring. Boot. Sync. Data. Zookeeper. ZookeeperSyncData Configuration after startup.\",\"Inject ZkClient into the container by reading the Zookeeper configuration.\",\"The SyncData Service injects the data synchronization service bean into the container and obtains the ZkClient (zookeeper client) from the Spring container. Plugin Subscriber, metaSubscribers, authSubscribers.\",\"public class ZookeeperSyncDataConfiguration { /** * Sync data service sync data service. * @param zkClient the zk client * @param pluginSubscriber the plugin subscriber * @param metaSubscribers the meta subscribers * @param authSubscribers the auth subscribers * @return the sync data service */ @Bean public SyncDataService syncDataService(final ObjectProvider<ZkClient> zkClient, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use zookeeper sync soul data.......\\\"); return new ZookeeperSyncDataService(zkClient.getIfAvailable(), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } /** * register zkClient in spring ioc. * @param zookeeperConfig the zookeeper configuration * @return ZkClient {@linkplain ZkClient} */ @Bean public ZkClient zkClient(final ZookeeperConfig zookeeperConfig) { return new ZkClient(zookeeperConfig.getUrl(), zookeeperConfig.getSessionTimeout(), zookeeperConfig.getConnectionTimeout()); } } \",\"Initialize the org. Dromara. Soul. Sync. Data. Zookeeper. ZookeeperSyncData Service, that is, after the soul-bootstrap is started, the data will be obtained from the zookeeper and synchronized to the memory.\",\"watcherData()--> watcherAll() --> watcherPlugin() --> cachePluginData()。\",\"The zkClient. SubscribeData Changes () monitors the modification and deletion of the contents of the current node and its child nodes.\",\"public class ZookeeperSyncDataService implements SyncDataService, AutoCloseable { private final ZkClient zkClient; private final PluginDataSubscriber pluginDataSubscriber; private final List<MetaDataSubscriber> metaDataSubscribers; private final List<AuthDataSubscriber> authDataSubscribers; /** * Instantiates a new Zookeeper cache manager. * @param zkClient the zk client * @param pluginDataSubscriber the plugin data subscriber * @param metaDataSubscribers the meta data subscribers * @param authDataSubscribers the auth data subscribers */ public ZookeeperSyncDataService(final ZkClient zkClient, final PluginDataSubscriber pluginDataSubscriber, final List<MetaDataSubscriber> metaDataSubscribers, final List<AuthDataSubscriber> authDataSubscribers) { this.zkClient = zkClient; this.pluginDataSubscriber = pluginDataSubscriber; this.metaDataSubscribers = metaDataSubscribers; this.authDataSubscribers = authDataSubscribers; watcherData(); watchAppAuth(); watchMetaData(); } ...... private void watcherData() { final String pluginParent = ZkPathConstants.PLUGIN_PARENT; List<String> pluginZKs = zkClientGetChildren(pluginParent); for (String pluginName : pluginZKs) { watcherAll(pluginName); } zkClient.subscribeChildChanges(pluginParent, (parentPath, currentChildren) -> { if (CollectionUtils.isNotEmpty(currentChildren)) { for (String pluginName : currentChildren) { watcherAll(pluginName); } } }); } ...... private void watcherPlugin(final String pluginName) { String pluginPath = ZkPathConstants.buildPluginPath(pluginName); if (!zkClient.exists(pluginPath)) { zkClient.createPersistent(pluginPath, true); } cachePluginData(zkClient.readData(pluginPath)); subscribePluginDataChanges(pluginPath, pluginName); } } \",\"The debug process\",\"pic\"]},\"162\":{\"h\":\"3. How does soul-bootstrap sense changes in gateway data\",\"t\":[\"Put a breakpoint on the org. Dromara. Soul. Sync. Data. Zookeeper. ZookeeperSyncData ServicecacheRuleData method, update the plug-in rule, and observe whether the breakpoint is entered.\",\"private void cacheRuleData(final RuleData ruleData) { Optional.ofNullable(ruleData) .ifPresent(data -> Optional.ofNullable(pluginDataSubscriber).ifPresent(e -> e.onRuleSubscribe(data))); } \",\"Soul-admin operates in the background to change the divide plug-in rules. First, soul-admin will publish the event and listen to the event to update the data synchronously to zookeeper.\",\"pic\",\"Soul-bootstrap has indeed received an update of the plug-in data. According to the \\\"zookeeper synchronization principle\\\" introduced by Soul's official website, it mainly relies on the watch mechanism of zookeeper.\",\"Org. Dromara. Soul. Sync. Data. Zookeeper. ZookeeperSyncData Service:\",\"The zkClient. SubscribeData Changes () monitors the modification and deletion of the contents of the current node and its child nodes.\",\"zkClient.subscribeChildChanges(groupParentPath, (parentPath, currentChildren) -> { if (CollectionUtils.isNotEmpty(currentChildren)) { List<String> addSubscribePath = addSubscribePath(childrenList, currentChildren); // Get the newly added node data and subscribe to that node addSubscribePath.stream().map(addPath -> { String realPath = buildRealPath(parentPath, addPath); cacheRuleData(zkClient.readData(realPath)); return realPath; }).forEach(this::subscribeRuleDataChanges); } }); private void subscribeRuleDataChanges(final String path) { zkClient.subscribeDataChanges(path, new IZkDataListener() { @Override public void handleDataChange(final String dataPath, final Object data) { cacheRuleData((RuleData) data); } @Override public void handleDataDeleted(final String dataPath) { unCacheRuleData(dataPath); } }); } \",\"pic\"]},\"163\":{\"h\":\"IV. Summary\",\"t\":[\"pic\"]},\"164\":{\"h\":\"Soul Gateway Learns Nacos Data Synchronization\",\"t\":[\"This article analyzes the principle of Nacos data synchronization.\",\"Configure the environment first\",\"soul-adminsoul-admin/src/main/resources/application.yml\",\"soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: \",\"Soul-admin/POM. XML, where the default configuration is available\",\"<dependency> <groupId>com.alibaba.nacos</groupId> <artifactId>nacos-client</artifactId> <version>${nacos-client.version}</version> </dependency> \",\"soul-bootstrapsoul-bootstrap/src/main/resources/application-local.yml\",\"soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: \",\"Soul-bootstrap/POM. XML. The following configuration is not available by default and needs to be added manually\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-nacos</artifactId> <version>${project.version}</version> </dependency> \",\"Start the service\",\"1、Start nacos 2、Start soul-admin 3、Start soul-bootstrap \",\"The above looks quite smooth. This process has encountered a pit. The soul-bootstrap cannot be started and the null pointer exception is reported. The following is a detailed record. First of all, soul-admin will not actively synchronize the gateway data to nacos after it is started. It needs to be synchronized manually, which is not mentioned on the official website. This problem has been bothering me for a long time. Finally, I saw other students in the group encounter the same problem and refer to their articles to solve it. Here is a record of the solution process.\",\"Soul-bootstrap encountered the following error, NullPointerException, when starting.\",\"When the soul-bootstrap is started, it will go to nacos to get the gateway data, see the breakpoint below, and get the empty data.\",\"Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2021-01-25 16:49:06.052 ERROR 5273 --- [ main] o.s.boot.SpringApplication : Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'nacosSyncDataService' defined in class path resource [org/dromara/soul/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.dromara.soul.sync.data.api.SyncDataService]: Factory method 'nacosSyncDataService' threw exception; nested exception is java.lang.NullPointerException ...... at org.dromara.soul.bootstrap.SoulBootstrapApplication.main(SoulBootstrapApplication.java:37) [classes/:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.dromara.soul.sync.data.api.SyncDataService]: Factory method 'nacosSyncDataService' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] ... 19 common frames omitted Caused by: java.lang.NullPointerException: null at org.dromara.soul.sync.data.nacos.handler.NacosCacheHandler.updateMetaDataMap(NacosCacheHandler.java:128) ~[classes/:na] at org.dromara.soul.sync.data.nacos.handler.NacosCacheHandler.watcherData(NacosCacheHandler.java:167) ~[classes/:na] at org.dromara.soul.sync.data.nacos.NacosSyncDataService.start(NacosSyncDataService.java:59) ~[classes/:na] at org.dromara.soul.sync.data.nacos.NacosSyncDataService.<init>(NacosSyncDataService.java:49) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration.nacosSyncDataService(NacosSyncDataConfiguration.java:66) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7.CGLIB$nacosSyncDataService$0(<generated>) ~[classes/:na] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7$$FastClassBySpringCGLIB$$3830e886.invoke(<generated>) ~[classes/:na] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE] at org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration$$EnhancerBySpringCGLIB$$cce084b7.nacosSyncDataService(<generated>) ~[classes/:na] ...... at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE] ... 20 common frames omitted \",\"pic\",\"Go to nacos to check whether there is gateway data. According to the configured \\\"namespace: 1c10d748-af86-43b9-8265-75f487d20c6c\\\", there is nothing.\",\"pic\",\"pic\",\"Try to go to soul-admin for manual synchronization, but nacos cannot see the data. You must manually create the namespace \\\"1c10d748-af86-43b9-8265-75f487d20c6c\\\", as shown in the following figure.\",\"pic\",\"Go to soul-admin to manually synchronize the data, and you will see the configuration information of the gateway on nacos. At this time, soul-bootstrap still cannot be started, because there is still a lack of metadata information. Only dubbo and spring cloud services have metadata, while HTTP does not have metadata, so we have to start the dubbo service. Then synchronize the metadata in soul-admin.\",\"pic\",\"Soul-admin Click Synchronize Data to synchronize the metadata to nacos\",\"pic\",\"Soul-admin Click Synchronize Data to synchronize the authentication data to nacos\",\"pic\",\"At this point, nacos has seen all the gateway data\",\"pic\",\"Start the soul-bootstrap again, and finally start it successfully.\",\"2021-01-25 17:56:54.798 INFO 10051 --- [ main] o.d.s.w.configuration.SoulConfiguration : load plugin:[monitor] [org.dromara.soul.plugin.monitor.MonitorPlugin] 2021-01-25 17:56:54.798 INFO 10051 --- [ main] o.d.s.w.configuration.SoulConfiguration : load plugin:[response] [org.dromara.soul.plugin.httpclient.response.WebClientResponsePlugin] 2021-01-25 17:56:54.990 INFO 10051 --- [ main] d.s.s.s.s.d.n.NacosSyncDataConfiguration : you use nacos sync soul data....... 2021-01-25 17:56:58.890 INFO 10051 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 2 endpoint(s) beneath base path '/actuator' 2021-01-25 17:56:59.758 INFO 10051 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 9195 2021-01-25 17:56:59.764 INFO 10051 --- [ main] o.d.s.b.SoulBootstrapApplication : Started SoulBootstrapApplication in 8.401 seconds (JVM running for 9.95) \",\"Summary:\",\"After configuration, I feel that using nacos to synchronize data is not very friendly. There are many pitfalls in the configuration process. First of all, soul-admin will not actively synchronize gateway data to nacos, and manual synchronization is required. Soul-bootstrap must rely on all of the gateway configuration data soul. Plugin, soul. Selector, soul. Selector, soul. Meta, and soul. Auth. If the gateway only proxies the HTTP service (no metadata), the soul-bootstrap cannot be started. There is no detailed explanation on the official website, which is not very friendly to Xiaobai.\",\"We know that soul-admin will not automatically synchronize data to nacos after startup, and manual operation is required.\",\"Let's analyze the data synchronization process of soul-admin, nacos, and soul-bootstrap.\"]},\"165\":{\"h\":\"How does soul-admin synchronize gateway data?\",\"t\":[\"After the plug-in information is updated, a DataChangedEvent event will be released.\",\"/** * create or update plugin * @param pluginDTO {@linkplain PluginDTO} * @return rows */ @Override @Transactional(rollbackFor = Exception.class) public String createOrUpdate(final PluginDTO pluginDTO) { ...... // publish change event. eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, eventType, Collections.singletonList(PluginTransfer.INSTANCE.mapToData(pluginDO)))); return StringUtils.EMPTY; } \",\"The listening event processing class DataChangedEventDispatcher is responsible for calling the specific listening implementation class to process the DataChangedEvent event. The specific implementation class here is NacosData ChangedListener.\",\"org.dromara.soul.admin.listener.DataChangedEventDispatcher\",\"After the DataChangedEventDispatcher is initialized, it will execute afterPropertiesSet () to obtain all beans with DataChangedListener. Class in the container\",\" @Override public void afterPropertiesSet() { Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values(); this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans)); } \",\"After the DataChangedEventDispatcher monitors the change event, it will execute onApplicationEvent to traverse all listening classes to process the listening event. Here is NacosDataChangedListener, as shown in the following debug figure.\",\" @Override @SuppressWarnings(\\\"unchecked\\\") public void onApplicationEvent(final DataChangedEvent event) { for (DataChangedListener listener : listeners) { switch (event.getGroupKey()) { ...... case RULE: listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType()); break; ...... default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getGroupKey()); } } } \",\"pic\",\"NacosData ChangedListener will execute onRuleChanged, and updateRuleMap will first synchronize the gateway data to the memory, and then synchronize to nacos through publishConfig.\",\"org.dromara.soul.admin.listener.nacos.NacosDataChangedListener\",\"// Execute the listening event @Override public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) { updateRuleMap(getConfig(RULE_DATA_ID)); switch (eventType) { ...... default: changed.forEach(rule -> { List<RuleData> ls = RULE_MAP .getOrDefault(rule.getSelectorId(), new ArrayList<>()) .stream() .filter(s -> !s.getId().equals(rule.getSelectorId())) .sorted(RULE_DATA_COMPARATOR) .collect(Collectors.toList()); ls.add(rule); RULE_MAP.put(rule.getSelectorId(), ls); }); break; } publishConfig(RULE_DATA_ID, RULE_MAP); } // Synchronize to memory private void updateRuleMap(final String configInfo) { JsonObject jo = GsonUtils.getInstance().fromJson(configInfo, JsonObject.class); Set<String> set = new HashSet<>(RULE_MAP.keySet()); ...... RULE_MAP.keySet().removeAll(set); } // Synchronize to Nacos @SneakyThrows private void publishConfig(final String dataId, final Object data) { configService.publishConfig(dataId, GROUP, GsonUtils.getInstance().toJson(data)); } \",\"pic\",\"DataChangedEventDispatcher and NacosData ChangedListener Class Inheritance Relationship\",\"pic\",\"pic\",\"Summary\",\"For example, soul-admin updates the gateway data and publishes a DataChangedEvent event, and the eventPublisher. PublishEvent (new DataChangedEvent ()).\",\"The DataChange dEventDispatcher -- > onApplicationEvent () method listens to events and determines that the listening class is NacosData ChangedListener.\",\"NacosData ChangedListener -- > onRuleChanged () handles the event\",\"Synchronize to memory update RuleMap (RULE _ DATA _ ID)\",\"Sync to nacos publishConfig (RULE _ DATA _ ID, RULE _ MAP)\"]},\"166\":{\"h\":\"How does soul-bootstrap synchronize gateway data?\",\"t\":[\"Soul-bootstrap adds nacos dependency soul-spring-boot-starter-sync-data-nacos, which will automatically inject NacosSyncDataConfiguration after the service is started.\",\"org.dromara.soul.springboot.starter.sync.data.nacos.NacosSyncDataConfiguration\",\"The NacosSyncData Service is responsible for reading and synchronizing the nacos gateway data\",\"@Configuration @ConditionalOnClass(NacosSyncDataService.class) @ConditionalOnProperty(prefix = \\\"soul.sync.nacos\\\", name = \\\"url\\\") @Slf4j public class NacosSyncDataConfiguration { // Inject the Nacos data synchronization service @Bean public SyncDataService nacosSyncDataService(final ObjectProvider<ConfigService> configService, final ObjectProvider<PluginDataSubscriber> pluginSubscriber, final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) { log.info(\\\"you use nacos sync soul data.......\\\"); return new NacosSyncDataService(configService.getIfAvailable(), pluginSubscriber.getIfAvailable(), metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList)); } // Inject Nacos client configuration service @Bean public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Exception { Properties properties = new Properties(); ...... return NacosFactory.createConfigService(properties); } // Inject Nacos configuration @Bean @ConfigurationProperties(prefix = \\\"soul.sync.nacos\\\") public NacosConfig nacosConfig() { return new NacosConfig(); } } \",\"2、org.dromara.soul.sync.data.nacos.NacosSyncDataService\",\"Initialization executes start\",\"The watcherData is responsible for listening to the nacos gateway data\",\"UpdatePluginMap synchronize gateway data to memory\",\"public void start() { ...... watcherData(RULE_DATA_ID, this::updateRuleMap); ...... } @SneakyThrows private String getConfigAndSignListener(final String dataId, final Listener listener) { return configService.getConfigAndSignListener(dataId, GROUP, 6000, listener); } protected void watcherData(final String dataId, final OnChange oc) { Listener listener = new Listener() { @Override public void receiveConfigInfo(final String configInfo) { oc.change(configInfo); } ...... }; oc.change(getConfigAndSignListener(dataId, listener)); LISTENERS.getOrDefault(dataId, new ArrayList<>()).add(listener); } \",\"pic\",\"NacosSyncData Service Class Diagram\",\"pic\",\"Summary\",\"Soul-bootstrap starts to automatically inject NacosSyncDataConfiguration into the container\",\"The NacosSyncDataConfiguration class will inject the NacosSyncData Service into the container.\",\"NacosSyncData Service -- > start () -- > watcherData () listens to nacos and synchronizes gateway data to memory 4、watcherData() --> updatePluginMap()\"]},\"167\":{\"h\":\"Sum up\",\"t\":[\"pic\"]},\"168\":{\"h\":\"Soul Gateway Learning Plugin Chain Implementation\"},\"169\":{\"h\":\"I. Introduction\",\"t\":[\"** Plugins are the soul of Soul. **\",\"Soul uses the idea of plug-in design to realize the hot plug of plug-ins, and it is very easy to expand. Built-in rich plug-in support, authentication, current limiting, fuse, firewall and so on.\\n待补，文章内部有报错\"]},\"170\":{\"h\":\"Soul Gateway Learning Divide Plugin Source Code Interpretation\"},\"171\":{\"h\":\"Plug-in overview\",\"t\":[\"** Plug-in positioning **\",\"The divide plug-in is an HTTP forward proxy plug-in, and all HTTP requests are load balanced by the plug-in (the specific load balancing policy is specified in the rule).\",\"** Effective time **\",\"When the rpcType of the request header is HTTP and the plug-in is enabled, it will match the rules according to the request parameters, and finally be handed over to the downstream plug-in for responsive proxy invocation.\"]},\"172\":{\"h\":\"Plug-in processing flow\",\"t\":[\"First, review the general process of the request processing plug-in (AbstractSoulPlugin # execute):\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { // Get plugin data String pluginName = named(); final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); if (pluginData != null && pluginData.getEnabled()) { // Obtain selector data final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); ... // Match selector final SelectorData selectorData = matchSelector(exchange, selectors); ... // Obtain rule data final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); ... // Match rule RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { //get last rule = rules.get(rules.size() - 1); } else { rule = matchRule(exchange, rules); } ... // Execute custom processing return doExecute(exchange, chain, selectorData, rule); } // Continue executing plugin chain processing return chain.execute(exchange); } \",\"The AbstractSoulPlugin first matches the corresponding selector and rule, and then executes the custom processing of the plug-in if the match is passed.\",\"Take a look at the custom processing flow of the divide plug-in (DividePlugin # doExecute):\",\"protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { ... // Prepare rule handling object (internally holds: load balancing algorithm name, retry count, and timeout) final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // Get the list of available services for the selector final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); ... // Select the specific service instance IP to be distributed (load balancing) final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress(); DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); ... //Set HTTP URL, timeout, and retry count String domain = buildDomain(divideUpstream); String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout()); exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry()); // Continue executing downstream of the plugin chain return chain.execute(exchange); } \",\"The DividePlugin first obtains the list of available services corresponding to the selector, then performs load balancing to select the target server instance IP to be distributed, and finally sets the final URL, timeout time, and retry times for the downstream of the plug-in chain to process.\",\"** Notice **\",\"The divide plug-in itself is only responsible for selecting the server instance to be distributed according to the selector, rules, and load balancing strategy, and does not directly initiate an HTTP request to the back-end service.\"]},\"173\":{\"h\":\"Host probe\",\"t\":[\"As mentioned above, divide needs to obtain the list of services. Take a look at the obtained implementation (UpstreamCacheManager # findUpstreamListBySelectorId):\",\"public List<DivideUpstream> findUpstreamListBySelectorId(final String selectorId) { return UPSTREAM_MAP_TEMP.get(selectorId); } \",\"The list of surviving services is obtained internally through the UPSTREAM _ MAP _ TEMP.\",\"Two hash tables are maintained within the Upstream Cache Manager:\",\"UPSTREAM_MAP：\",\"The full service hash table is responsible for storing full upstream service information, where key is the selector ID, and value is the list of services using the same selector.\",\"UPSTREAM_MAP_TEMP：\",\"The temporary service hash table is responsible for storing the upstream service information of the activity, the key is the selector ID, and the value is the service list using the same selector.\",\"In the previous chapters, we mentioned that the submit method updates the UPSTREAM _ MAP and UPSTREAM _ MAP _ TEMP at the same time during data synchronization, but how to maintain the UPSTREAM _ MAP _ TEMP when the subsequent service is offline? Everything has to start with IP exploration.\"]},\"174\":{\"h\":\"3.1 Opportunity of exploration\",\"t\":[\"The time to explore is from the initialization of the Upstream Cache Manager:\",\"private UpstreamCacheManager() { // Health check switch check boolean check = Boolean.parseBoolean(System.getProperty(\\\"soul.upstream.check\\\", \\\"false\\\")); if (check) { // Start scheduled health check task new ScheduledThreadPoolExecutor(1, SoulThreadFactory.create(\\\"scheduled-upstream-task\\\", false)) .scheduleWithFixedDelay(this::scheduled, 30, Integer.parseInt(System.getProperty(\\\"soul.upstream.scheduledTime\\\", \\\"30\\\")), TimeUnit.SECONDS); } } \",\"When the Upstream Cache Manager is initialized, if the probe switch is turned on, the timed probe task will be created. Here, it is executed once every 30 seconds by default.\",\"There are two configuration parameters involved here:\",\"Soul. Upstream. Check detection switch: default value is true, and if set to false, it means no detection\",\"Soul. Upstream. ScheduledTime detection interval, 10 seconds by default\"]},\"175\":{\"h\":\"3.2. Exploration mission\",\"t\":[\"Next, let's look at the implementation of the probe task (Upstream Cache Manager # scheduled):\",\"private void scheduled() { if (UPSTREAM_MAP.size() > 0) { UPSTREAM_MAP.forEach((k, v) -> { // Perform health check List<DivideUpstream> result = check(v); if (result.size() > 0) { UPSTREAM_MAP_TEMP.put(k, result); } else { UPSTREAM_MAP_TEMP.remove(k); } }); } } \",\"The task is responsible for traversing and registering the full service hash table one by one and checking the service activity:\",\"If the survival number is greater than 0, the survival service hash table is updated\",\"Otherwise, removing the corresponding content of the survival service hash table\",\"Continue to see the service list liveness check process (Upstream Cache Manager # check):\",\"private List<DivideUpstream> check(final List<DivideUpstream> upstreamList) { List<DivideUpstream> resultList = Lists.newArrayListWithCapacity(upstreamList.size()); for (DivideUpstream divideUpstream : upstreamList) { // Check service liveness final boolean pass = UpstreamCheckUtils.checkUrl(divideUpstream.getUpstreamUrl()); if (pass) { // Update service status if (!divideUpstream.isStatus()) { divideUpstream.setTimestamp(System.currentTimeMillis()); divideUpstream.setStatus(true); ... } // Record surviving services resultList.add(divideUpstream); } else { // Update service status divideUpstream.setStatus(false); ... } } return resultList; } \",\"It is responsible for traversing the service list, checking the activity of each service according to the URL and registering the surviving services.\"]},\"176\":{\"h\":\"3.3 Activity check\",\"t\":[\"Service liveness check implementation (Upstream CheckUtils # checkUrl):\",\"public static boolean checkUrl(final String url) { ... // Check if the URL is in IP + port format if (checkIP(url)) { // Process IP and port String[] hostPort; if (url.startsWith(HTTP)) { final String[] http = StringUtils.split(url, \\\"\\\\\\\\/\\\\\\\\/\\\"); hostPort = StringUtils.split(http[1], Constants.COLONS); } else { hostPort = StringUtils.split(url, Constants.COLONS); } // Test if the host can be connected return isHostConnector(hostPort[0], Integer.parseInt(hostPort[1])); } else { // Test if the host is reachable return isHostReachable(url); } } \",\"Check if the URL is in IP + port format:\",\"If it is in IP + port format, test whether the host can be connected\",\"Otherwise, test whether the host is reachable\",\"Test whether the host is connectable (Upstream CheckUtils # isHostConnector):\",\"private static boolean isHostConnector(final String host, final int port) { try (Socket socket = new Socket()) { socket.connect(new InetSocketAddress(host, port)); } catch (IOException e) { return false; } return true; } \",\"Test IP connectivity through socket connection.\",\"Test whether the host is reachable (UpstreamCheckUtils # isHostReachable):\",\"private static boolean isHostReachable(final String host) { try { return InetAddress.getByName(host).isReachable(1000); } catch (IOException ignored) { } return false; } \",\"Non IP + port format URL Try to use domain name format to test if the host is reachable.\",\"On the whole, the server information that the divide plug-in gets from the cache comes from data synchronization and is updated regularly and actively by the probe task.\"]},\"177\":{\"h\":\"Load balancing\",\"t\":[\"As mentioned above, divide selects the service IP for final distribution through the load balancing algorithm. Let's take a look at the implementation of load balancing (LoadBalan ceUtils # selector):\",\"public static DivideUpstream selector(final List<DivideUpstream> upstreamList, final String algorithm, final String ip) { LoadBalance loadBalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getJoin(algorithm); return loadBalance.select(upstreamList, ip); } \",\"Internally, the Extension Loader is used to implement the SPI mechanism, and then the corresponding load balancing algorithm is loaded through the algorithm name to execute the load balancing calculation and finally distribute to the service IP.\",\"The soul gateway supports three load balancing strategies by default\",\"HASH (needs to be calculated, and there may be imbalance)\",\"RANDOM (simplest and fastest, almost average under a large number of requests)\",\"ROUND _ ROBIN (need to record the status, which has a certain impact, and there is not much difference in the results between random and polling under large data volume)\",\"The default is RANDOM random algorithm, and the algorithm processing is as follows (RandomLoadBalance # doSelect):\",\"public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final String ip) { int totalWeight = calculateTotalWeight(upstreamList); boolean sameWeight = isAllUpStreamSameWeight(upstreamList); // If weights are inconsistent, randomize based on total weight if (totalWeight > 0 && !sameWeight) { return random(totalWeight, upstreamList); } // Randomize based on the number of services return random(upstreamList); } \",\"Judging whether the weights of the services in the service list are consistent:\",\"If the weights are not consistent, they will be randomized according to the total weight\",\"Otherwise, random by number of services\",\"Randomize details by total weight (RandomLoadBalance # random):\",\"private DivideUpstream random(final int totalWeight, final List<DivideUpstream> upstreamList) { // Generate a random number based on the total weight int offset = RANDOM.nextInt(totalWeight); // Determine which segment the random value falls into for (DivideUpstream divideUpstream : upstreamList) { offset -= getWeight(divideUpstream); if (offset < 0) { return divideUpstream; } } return upstreamList.get(0); } \"]},\"178\":{\"h\":\"Sum up\",\"t\":[\"Processing flow of divide plug-in:\",\"Get a list of available services\",\"The list of services originally came from soul-admin data synchronization\",\"By default, the list of available services is actively updated every 30 seconds.\",\"Load balancing\",\"Load balancing algorithm for loading target by extension loader\",\"Execute a specific balancing strategy\",\"Returns a final selection of service information\",\"Set the URL information of the final service\",\"To be processed downstream of the plug-in chain\"]},\"179\":{\"h\":\"Soul Gateway Learning Http Request Adventure\",\"t\":[\"In the Soul Request Processing Overview article, we learned that Soul handles requests in ** Excute of Default SoulPluginChain ** a library, where it executes a plug-in chain pattern to complete the request processing.\",\"We have generally combed the injected ** plugins ** plug-ins, but even so, we still can't see the whole picture. For this reason, we have specially combed the classes involved in the soul plug-ins. The overall results are shown in the following figure.\",\"As you can see in the teasing article, the core classes are ** SoulPlugin、PluginEnum、PluginDataHandler、MetaDataSubscriber **. In the teasing request related article, we only need to focus on the SoulPlugin and PluginEnum classes at present.\",\"Now that we have some understanding of the SoulPlugin class, what is the main purpose of the PluginEnum enumeration class?\",\"PluginEnum: An enumeration class for plug-ins\",\"Property\",\"Action\",\"code\",\"The smaller the order of plug-in execution, the earlier the execution.\",\"role\",\"The role has not found a physical reference address at this time\",\"name\",\"Plug-in name\",\"In fact, it is not difficult to find that the current ** Plugins for Default SoulPluginChain ** plug-in has a fixed order of execution, so where is the order of execution of this plug-in defined?\",\"Finally, it can be traced back to the ** SoulConfiguration ** class.\",\" public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { // ... final List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); return new SoulWebHandler(soulPlugins); } \",\"Sort out the related references of the entire PluginEnum class, and sort out the following table. It is not difficult to see the order relationship between plug-ins.\",\"Level\",\"Action\",\"Level 1\",\"Only GlobalPlugin Global Plugin\",\"Level 2 to 8\",\"It can be understood as a pre-processing plug-in before the request is initiated\",\"Level 9 to 11\",\"It can be understood as different call processing for the way of the caller.\",\"Level 12\",\"Only MonitorPlugin monitor plug-in\",\"Level 13\",\"It is a response-related plug-in for processing the results returned by each caller.\",\"In the previous review, we have already understood the general process of soul processing requests.\",\"1.GloBalPlugin performs global initialization\",\"2.Some plug-ins process the request according to rules such as authentication, current limiting, and fusing\",\"3.Select the calling mode suitable for you to assemble the parameters and initiate the call.\",\"4.Monitor\",\"5.Process the result of the call\",\"The following demo code screenshot is from the HTTP demo under soul-examples, and the interface address called is the http://127.0.0.1:9195/http/test/findByUserId?userId=10.\",\"Bury the point in the ** Excute of Default SoulPluginChain ** method to see what classes an HTTP request call goes through?\",\"public Mono<Void> execute(final ServerWebExchange exchange) { return Mono.defer(() -> { if (this.index < plugins.size()) { SoulPlugin plugin = plugins.get(this.index++); Boolean skip = plugin.skip(exchange); if (skip) { System.out.println(\\\"Skipped plugin: \\\"+plugin.getClass().getName().replace(\\\"org.dromara.soul.plugin.\\\",\\\"\\\")); return this.execute(exchange); } System.out.println(\\\"Not skipped plugin: \\\"+plugin.getClass().getName().replace(\\\"org.dromara.soul.plugin.\\\",\\\"\\\")); return plugin.execute(exchange, this); } return Mono.empty(); }); } \",\"The unskipped plug-ins for the final output are as follows:\",\"Plug-ins that are not skipped are global. Global Plugin. Plug-ins that are not skipped are sign. SignPlugin. Plug-ins that are not skipped are WAF. WafPlugin. Plug-ins that are not skipped are ratelimiter. Rate LimiterPlugin. Plug-ins that are not skipped are hystrix. Hystrix Plugin. The plug-in that was not skipped was resilience4j.Resilience4JPlugin Plug-ins that are not skipped are divide. DividePlugin. Plug-ins that are not skipped are HTTP client. Web ClientPlugin. Plug-ins that are not skipped are Alibaba. Dubbo. Param. Body ParamPlugin. Plug-ins that are not skipped are monitor. MonitorPlugin. Plug-ins that are not skipped are HTTP client. Response. Web ClientResponsePlugin. \",\"Here is a little puzzle, why this Alibaba. Dubbo. Param. BodyParamPlugin plug-in will be executed, temporarily ignored, and tracked later.\",\"We found that the general flow of the plug-in executed by a gateway call for an HTTP request was consistent with our guess. For now, let's just pick the key points, namely ** GlobalPlugin、DividePlugin、WebClientPlugin、WebClientResponsePlugin **.\",\"Initiate a Debug call to track the actions of each of the four plug-ins in turn.\"]},\"180\":{\"h\":\"Global Plugin SoulContext Object Wrapper\",\"t\":[\"The plug-in's excute method for GlobalPlugin looks like this\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { final ServerHttpRequest request = exchange.getRequest(); final HttpHeaders headers = request.getHeaders(); final String upgrade = headers.getFirst(\\\"Upgrade\\\"); SoulContext soulContext; if (StringUtils.isBlank(upgrade) || !\\\"websocket\\\".equals(upgrade)) { soulContext = builder.build(exchange); } else { final MultiValueMap<String, String> queryParams = request.getQueryParams(); soulContext = transformMap(queryParams); } exchange.getAttributes().put(Constants.CONTEXT, soulContext); return chain.execute(exchange); } \",\"It is not difficult to see that the main purpose of the excute method of GlobalPlugin is to encapsulate an ** The SoulContext object ** exchange object and put it into the exchange (the exchange object is a shared object on the entire plug-in chain, and after a plug-in is executed, it is passed to the next plug-in. I understand it as a ThreadLocal-like object.\",\"So what are the properties of the SoulContext object?\",\"property\",\"Meaning\",\"module\",\"Each RPCType has a different value for the preceding address of the gateway call when HTTP is called.\",\"method\",\"Method name after cutting (when RpcType is HTTP)\",\"rpcType\",\"RPC call types include Http, dubbo, sofa, and so on\",\"httpMethod\",\"Http calls currently only support get, post,\",\"sign\",\"Currently, we do not know the specific function of the authentication related attributes, which may be related to the SignPlugin plug-in.\",\"timestamp\",\"Timestamp\",\"appKey\",\"Currently, we do not know the specific function of the authentication related attributes, which may be related to the SignPlugin plug-in.\",\"path\",\"Path refers to the full path of the call to the soul Gateway (when RpcType is HTTP)\",\"contextPath\",\"Consistent with module value (when RPCType is HTTP)\",\"realUrl\",\"Consistent with the value of method (when RpcType is HTTP)\",\"dubboParams\",\"Parameters for dubbo?\",\"startDateTime\",\"The start time is suspected to be combined with the monitoring plug-in and the statistical indicator module.\",\"After executing the Global Plugin, the final encapsulated SoulContext object looks like this. \",\"The parameter encapsulation of SoulContext of other RPCTypes can be traced by viewing the ** DefaultSoulContext Builder build ** method. Since this article mainly traces HTTP calls, it is not redundant to discuss here.\"]},\"181\":{\"h\":\"DividePlugin Routing Plugin\",\"t\":[\"After the GlobalPlugin plug-in is executed, it is finally packaged into one ** The SoulContext object ** and placed in ** ServerWebExchange ** for use by the downstream call chain.\",\"Next, let's take a look ** Divide Plugin ** at what kind of role it plays in the whole chain call process?\"]},\"182\":{\"h\":\"AbstractSoulPlugin\",\"t\":[\"By tracing back to the source code ** The DividePlugin plug-in inherits from the AbstractSoulPlugin class, which implements the SoulPlugin interface **.\",\"So ** AbstractSoulPlugin ** what extensions have been made? Let's tease out the methods of this class.\",\"method\",\"Action\",\"excute\",\"Implemented in the SoulPlugin interface, plays a role ** The role of the template approach ** in AbstractSoulPlugin\",\"doexcute\",\"Implemented ** Abstract method ** by various subclasses\",\"matchSelector\",\"Match selector\",\"filterSelector\",\"Filter selector\",\"matchRule\",\"Matching rules\",\"filterRule\",\"Filter rules\",\"handleSelectorIsNull\",\"Handle null selector case\",\"handleRuleIsNull\",\"Handle null rule case\",\"selectorLog\",\"Selector log printing\",\"ruleLog\",\"Rule log printing\",\"Look at ** excute ** the specific function of the method.\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { String pluginName = named(); // Obtain corresponding plugin final PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); // Check if the plugin is enabled if (pluginData != null && pluginData.getEnabled()) { // Obtain all selectors under the plugin final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); if (CollectionUtils.isEmpty(selectors)) { return handleSelectorIsNull(pluginName, exchange, chain); } // Match selector final SelectorData selectorData = matchSelector(exchange, selectors); if (Objects.isNull(selectorData)) { return handleSelectorIsNull(pluginName, exchange, chain); } // Log selector selectorLog(selectorData, pluginName); final List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); if (CollectionUtils.isEmpty(rules)) { return handleRuleIsNull(pluginName, exchange, chain); } RuleData rule; if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) { rule = rules.get(rules.size() - 1); } else { // Match rule rule = matchRule(exchange, rules); } if (Objects.isNull(rule)) { return handleRu![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f523f655f0014d288b7a4502cc6a08d1~tplv-k3u1fbpfcp-watermark.image)leIsNull(pluginName, exchange, chain); } // Log rule ruleLog(rule, pluginName); // Execute subclass-specific implementation return doExecute(exchange, chain, selectorData, rule); } return chain.execute(exchange); } \",\"The final flow chart is as follows: \",\"PS: In the above flow chart, there is no specific method-level processing.\",\"However, there are still several points that need to be explained:\",\"1.The plug-in data, selector data, and rule data are all obtained from ** BaseDataCache **. This class is the class that will be affected in the data synchronization process.\",\"2.Selector type. When the SpringMvc project is used to register an interface, an isFull option will be set to true to represent the global proxy. In the global proxy mode, only one selector \\\\ rule (referring to all interfaces of the proxy) will be registered, so the corresponding processing here is rule. Size () -1.\",\"3.For the selection of selector and rule, the actual processing is much more complicated. Considering that it is to introduce the general logic of a request process, it will not be elaborated here. If you are interested, you can check it ** Match Strategy, AbstractMatchStrategy and their related implementation classes ** (a separate article will be explained later). The corresponding page here is as follows: \",\"To sort out ** Exeute method of AbstractSoulPlugin ** the function, after the guidance of the above flow chart, we already know that the function of this method is to select the plug-in -- > select the selector -- > select the rule, and finally hand over to the method of the ** doexcute ** subclass.\",\"Next, let's take a ** The doexcute of DividePlugin ** look at what the method does.\"]},\"183\":{\"h\":\"DividePlugin\",\"t\":[\"protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // Obtain rule handling data final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class); // Obtain injected addresses under this selector final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId()); if (CollectionUtils.isEmpty(upstreamList)) { log.error(\\\"divide upstream configuration error： {}\\\", rule.toString()); Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress(); // Choose an address based on the load balancing strategy corresponding to the rule DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); if (Objects.isNull(divideUpstream)) { log.error(\\\"divide has no upstream\\\"); Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // set the http url String domain = buildDomain(divideUpstream); // Assemble the real calling address String realURL = buildRealURL(domain, soulContext, exchange); exchange.getAttributes().put(Constants.HTTP_URL, realURL); // Set timeout and retry count exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout()); exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry()); return chain.execute(exchange); } \",\"After the above code is sorted out, the general logic is as follows:\",\"1.Obtain the registration address corresponding to the selector, and the corresponding page data is as follows \",\"2.Obtain the load balancing policy according to the handle field of the rule, and select the real call address (** LoadBalanceUtils **), retry times and timeout time. The corresponding page data is as follows. \",\"3.The real call address, timeout, and number of retries are passed to ** ServerWebExchange ** for use by the downstream call chain. Demo of debug: PS: We don't see where the parameters are in the above theme logic? Where is this parameter encapsulated? The answer ** In the build RealURL method ** is obtained from ** exchange ** the context.\"]},\"184\":{\"h\":\"Web ClientPlugin Http request calling plug-in\",\"t\":[\"Next, let's look at how Soul initiates the request call.\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // Obtain the real address String urlPath = exchange.getAttribute(Constants.HTTP_URL); if (StringUtils.isEmpty(urlPath)) { Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // Obtain the timeout period long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L); // Obtain the retry count int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0); log.info(\\\"The request urlPath is {}, retryTimes is {}\\\", urlPath, retryTimes); HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue()); WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath); return handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain); } \",\"In the web Client ** excute ** method, three things are done\",\"1.Take out the properties you put into exchange from the Divide plugin. ** Real address of the call, timeout, number of retries **.\",\"2.Encapsulates an ** RequestBodySpec ** object (something that doesn't recognize responsive programming)\",\"3.A ** handleRequestBody ** method was called\",\"Know ** handleRequestBody ** the method first\",\"private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBodySpec, final ServerWebExchange exchange, final long timeout, final int retryTimes, final SoulPluginChain chain) { return requestBodySpec.headers(httpHeaders -> { httpHeaders.addAll(exchange.getRequest().getHeaders()); httpHeaders.remove(HttpHeaders.HOST); }) .contentType(buildMediaType(exchange)) .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody())) .exchange() // Log on failure .doOnError(e -> log.error(e.getMessage())) // Set timeout .timeout(Duration.ofMillis(timeout)) // Set request retry strategy .retryWhen(Retry.onlyIf(x -> x.exception() instanceof ConnectTimeoutException) .retryMax(retryTimes) .backoff(Backoff.exponential(Duration.ofMillis(200), Duration.ofSeconds(20), 2, true))) // Handle after request completes .flatMap(e -> doNext(e, exchange, chain)); } \",\"In this method, it can be generally understood as\",\"The request header from exchange is placed in the request header for this call.\",\"Set the contentType\",\"Set the timeout\",\"Set the failure response\",\"Set the retry scenario and retry times\",\"Processing of final results. Need to see another one ** The doNext method ** in the process\",\"The general logic is to determine whether the request is successful or not, and put the result of the request into exchange for the downstream plug-in to process.\",\"private Mono<Void> doNext(final ClientResponse res, final ServerWebExchange exchange, final SoulPluginChain chain) { if (res.statusCode().is2xxSuccessful()) { exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName()); } else { exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName()); } exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res); return chain.execute(exchange); } \",\"PS: Although we don't understand responsive programming, it doesn't affect us to read the code.\"]},\"185\":{\"h\":\"Web ClientResponsePlugin Http Result Processing Plug-in\",\"t\":[\"The excute method of this implementation has no core logic, which is to judge the status code of the request and return different data formats to the front end according to the status code.\",\"public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { ServerHttpResponse response = exchange.getResponse(); ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR); if (Objects.isNull(clientResponse) || response.getStatusCode() == HttpStatus.BAD_GATEWAY || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } response.setStatusCode(clientResponse.statusCode()); response.getCookies().putAll(clientResponse.cookies()); response.getHeaders().putAll(clientResponse.headers().asHttpHeaders()); return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())); })); } \",\"At this point, an Http request call based on the Soul gateway is largely over.\",\"Combing HTTP request call flow\",\"Global Plugin encapsulates the Soul Context object\",\"The front plug-in handles operations such as fusing and current-limiting authentication.\",\"The Divide plug-in selects the real address of the corresponding call, the number of retries, and the timeout period.\",\"The Web Client plug-in makes the actual Http call\",\"The Web ClientResponse plug-in processes the corresponding result and returns to the foreground.\",\"Based on the general flow of Http calls, we can roughly guess that the flow based on other RPC calls is to replace the plug-in that initiates the request and the plug-in that returns the result processing.\",\"In the above, we also mentioned the selection ** LoadBalanceUtils ** of routing rules, selectors and the processing ** MatchStrategy ** of rules.\",\"After that, a new chapter will be opened to unveil the mystery of RPC generalization call, routing, selector and rule matching step by step.\"]},\"186\":{\"h\":\"Soul Gateway Learning RateLimiter Plugin\"},\"187\":{\"h\":\"Review\",\"t\":[\"In the previous article on HTTP requests, the processing flow of Soul plug-ins was generally combed, and the specific functions of DividePlugin, GlobalPlugin, WebClientPlugin and WebCilent ResponsePlugin plug-ins were also learned. In the process of sorting out, it is found that there ** Order of precedence ** are Soul plug-ins, and many pre-plug-in operations have been done before the DividePlugin plug-in, which includes the topics ** Rate LimiterPlugin ** we analyzed in this chapter (one of them).\"]},\"188\":{\"h\":\"Learn to use\"},\"189\":{\"h\":\"Read the official documents to have a general understanding of it.\",\"t\":[\"The rate Limiter plug-in\",\"Through the reading of official documents, we know the ** RateLimiterPlugin ** two core points ** Speed, capacity **.\",\"The following explanation comes from the official document.\",\"Capacity: is the maximum number of requests a user is allowed to execute in one second. This is the number of tokens the token bucket can hold.\",\"Rate: This is how many requests per second you allow the user to execute and any requests that are dropped. This is the fill rate of the token bucket.\",\"It can be seen that ** RateLimiterPlugin ** the core of current limiting lies in ** Token bucket algorithm ** its implementation.\",\"PS: There are four common implementations ** Token bucket algorithm ** of the current limiting algorithm, ** Funnel algorithm **, ** Counter (fixed window) algorithm **, ** Sliding window algorithm **. See the corresponding blog introduction for details.\"]},\"190\":{\"h\":\"Initial use\"},\"191\":{\"h\":\"Enable the corresponding plug-in\",\"t\":[\"At the Soul gateway ** System Management-Plug-in Management **, change the status to the enabled status. Note that redis related configuration needs to be filled in here. The Soul token bucket is based on redis.\",\"Why is Soul's token bucket algorithm based on redis?\",\"In the case of cluster deployment, the token bucket algorithm of a single machine can not meet the current limiting function in the cluster state.\"]},\"192\":{\"h\":\"Add current limit selectors, rules,\",\"t\":[\"At the Soul Gateway ** List of plug-ins **, select rate _ limiter to add the rule and selector configuration. If you don't know how to add it, you can read the matching logic of the selector \\\\ rule first. The capacity and rate added here are both 1, mainly to verify whether the plug-in is enabled.\"]},\"193\":{\"h\":\"Interface corresponding access\",\"t\":[\"Call http://127.0.0.1:9195/http/test/findByUserId?userId=10 to access. When the rate is higher than 1, the following interface returns the result, which means the plug-in is successfully used.\",\"{ \\\"code\\\": 429, \\\"message\\\": \\\"You have been restricted, please try again later!\\\", \\\"data\\\": null } \"]},\"194\":{\"h\":\"Source Code Reading Read the source code with questions\"},\"195\":{\"h\":\"How to ensure that the redis configuration takes effect immediately after the page is modified, and the corresponding redis connection in the background is changed immediately.\",\"t\":[\"The answer is that natural data synchronization is closely related.\",\"When modifying the configuration of the plug-in, an event notification of plug-in data change is also issued. When combing the overall process of Soul Gateway synchronization data, it has been known that the modified plug-in data not only changes the data in the JVM cache, but also distributes the corresponding plug-in. As shown in the following figure , for ** RateLimiterPlugin ** the interface that is mainly implemented ** handlePlugin **, what exactly does this corresponding implementation do?\",\"The specific method is as follows ** Rate LimiterPluginData Handler handlerPlugin **.\",\"public void handlerPlugin(final PluginData pluginData) { if (Objects.nonNull(pluginData) && pluginData.getEnabled()) { // Load rate limiting plugin configuration RateLimiterConfig rateLimiterConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), RateLimiterConfig.class); // Check if Redis connection value needs to be reloaded if (Objects.isNull(Singleton.INST.get(ReactiveRedisTemplate.class)) || Objects.isNull(Singleton.INST.get(RateLimiterConfig.class)) || !rateLimiterConfig.equals(Singleton.INST.get(RateLimiterConfig.class))) { LettuceConnectionFactory lettuceConnectionFactory = createLettuceConnectionFactory(rateLimiterConfig); lettuceConnectionFactory.afterPropertiesSet(); RedisSerializer<String> serializer = new StringRedisSerializer(); RedisSerializationContext<String, String> serializationContext = RedisSerializationContext.<String, String>newSerializationContext().key(serializer).value(serializer).hashKey(serializer).hashValue(serializer).build(); ReactiveRedisTemplate<String, String> reactiveRedisTemplate = new ReactiveRedisTemplate<>(lettuceConnectionFactory, serializationContext); Singleton.INST.single(ReactiveRedisTemplate.class, reactiveRedisTemplate); Singleton.INST.single(RateLimiterConfig.class, rateLimiterConfig); } } } \",\"There are several key points in the above code:\",\"In the above code, the configuration of the current limiting plug-in and the corresponding redisTemplate instance are put into the corresponding map of the Singleton. INST.\",\"When the plug-in data is received, judging whether a redis connection instance and a current limiting configuration instance exist, judging whether the current current limiting configuration instance is consistent with the transmitted current limiting instance, if not, considering that the configuration is changed, and re-initializing the current limiting instance and the connection pool instance to be put into the map of the Singleton. INST, Hot deployment of changes to the redis configuration is thus guaranteed.\",\"The code in the if judgment is encapsulated into a corresponding redis connection pool based on SpringDataRedis.\",\"The PS: Singleton. INST is a singleton pattern implemented by enumeration.\"]},\"196\":{\"h\":\"How is the current limiting plug-in implemented at the bottom?\"},\"197\":{\"h\":\"Debug call chain\",\"t\":[\"** RateLimiterPlugin ** Because of the need to limit the flow of specific rules, it is still implemented ** AbstractSoulPlugin **, and the methods and functions that have been ** An excute of AbstractSoulPlugin ** combed before are still used, so I will not repeat the explanation here. You can watch the Http call process . Deepen the impression of this class.\",\"The focus of this section is to see what specific ** doexcute ** methods have done.\",\" protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final String handle = rule.getHandle(); final RateLimiterHandle limiterHandle = GsonUtils.getInstance().fromJson(handle, RateLimiterHandle.class); return redisRateLimiter.isAllowed(rule.getId(), limiterHandle.getReplenishRate(), limiterHandle.getBurstCapacity()) .flatMap(response -> { if (!response.isAllowed()) { // Return error message with 429 error code exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); Object error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } return chain.execute(exchange); }); } \",\"In the above code, it can be seen that whether the token is successfully obtained is judged by ** redisRateLimiter.isAllowed **. The method is as follows\",\" public Mono<RateLimiterResponse> isAllowed(final String id, final double replenishRate, final double burstCapacity) { if (!this.initialized.get()) { throw new IllegalStateException(\\\"RedisRateLimiter is not initialized\\\"); } // Get the Redis key List<String> keys = getKeys(id); //The parameters required for encapsulating the execution of a Lua script. The first parameter is the rate, the second parameter is the capacity, the third parameter is the current 10-digit timestamp, and the fourth parameter is a fixed value of 1, which represents the number of tokens requested. List<String> scriptArgs = Arrays.asList(replenishRate + \\\"\\\", burstCapacity + \\\"\\\", Instant.now().getEpochSecond() + \\\"\\\", \\\"1\\\"); //Execute the Lua script Flux<List<Long>> resultFlux = Singleton.INST.get(ReactiveRedisTemplate.class).execute(this.script, keys, scriptArgs); return resultFlux.onErrorResume(throwable -> Flux.just(Arrays.asList(1L, -1L))) .reduce(new ArrayList<Long>(), (longs, l) -> { longs.addAll(l); return longs; }).map(results -> { //'allowed' indicates the execution result (1 for success) boolean allowed = results.get(0) == 1L; Long tokensLeft = results.get(1); RateLimiterResponse rateLimiterResponse = new RateLimiterResponse(allowed, tokensLeft); log.info(\\\"RateLimiter response:{}\\\", rateLimiterResponse.toString()); return rateLimiterResponse; }).doOnError(throwable -> log.error(\\\"Error determining if user allowed from redis:{}\\\", throwable.getMessage())); } \"]},\"198\":{\"h\":\"Method get Keys (ID)\",\"t\":[\"This method is to obtain the keys that redis needs to operate. Two types of keys are obtained in the following format:\",\"The particularly long number in the middle is ** Rule ID **, because the smallest granularity of the current limit is the rule.\",\"The first timestamp record I ** Timestamp of the last call **\",\"The second token records that ** The number of tokens remaining after the last call was completed **\"]},\"199\":{\"h\":\"execute(this.script, keys, scriptArgs）\",\"t\":[\"Executing the Lua script keys passes the return value of getKeys (ID), and scriptArgs passes the required parameters\",\"By reading the above code, we know that the specific implementation of the current limit rule is handed over to the specific Lua script.\",\"PS: It needs to be reminded here that the current limiting algorithm is a token bucket algorithm. There are two general implementations of the token bucket algorithm. One is that a thread continuously generates tokens. When a request comes in, it first obtains tokens from the corresponding queue. However, this token generation method will consume a lot of performance when the threshold is set to be particularly large. Therefore, there is a second token bucket algorithm, The number of tokens is calculated in real time as they are acquired, and soul is based on the second implementation.\"]},\"200\":{\"h\":\"Analysis of Lua Current Limiting Algorithm\",\"t\":[\"-- Key to store the remaining token count for the current rule local tokens_key = KEYS[1] -- Key for the timestamp of the last call for the current rule local timestamp_key = KEYS[2] -- Rate local rate = tonumber(ARGV[1]) -- Capacity local capacity = tonumber(ARGV[2]) -- Current timestamp local now = tonumber(ARGV[3]) -- Value is 1 local requested = tonumber(ARGV[4]) -- Calculate fill time by dividing capacity by rate local fill_time = capacity/rate -- Calculate TTL by rounding down fill time * 2 local ttl = math.floor(fill_time*2) -- Get the current token count local last_tokens = tonumber(redis.call(\\\"get\\\", tokens_key)) if last_tokens == nil then -- Set token count to the configured capacity if it's not present last_tokens = capacity end -- Get the timestamp of the last call local last_refreshed = tonumber(redis.call(\\\"get\\\", timestamp_key)) if last_refreshed == nil then last_refreshed = 0 end -- Calculate the time difference between the last call and the current call local delta = math.max(0, now-last_refreshed) -- Calculate the current remaining token count local filled_tokens = math.min(capacity, last_tokens+(delta*rate)) -- Check if there are enough tokens (at least 1) available local allowed = filled_tokens >= requested local new_tokens = filled_tokens local allowed_num = 0 if allowed then -- Consume one token new_tokens = filled_tokens - requested allowed_num = 1 end -- Use setex to set the key's TTL and new value redis.call(\\\"setex\\\", tokens_key, ttl, new_tokens) redis.call(\\\"setex\\\", timestamp_key, ttl, now) return { allowed_num, new_tokens } \",\"It is recommended to understand the role of Lua ** KEYS ARGS ** and the understanding of keys [1] and argv [1] in redis Lua.\",\"The overall logic of the Lua code is still very clear, and I can't explain it in detail here. The code comments have been completed.\",\"I have two doubts here.\",\"Is the calculation of the ** ttl ** parameter multiplied by 2 for fear that it is not an integer? , so the \\\\ * 2 take the minimum operation?\",\"Is last _ tokens + (* Rate), where the delta parameter is the subtraction of two ten-bit timestamps, but the rate is generated in seconds, shouldn't it be last _ tokens + ( (delta/1000)? * deltarate) the core code for the calculation of ** filled_tokens ** parameters?\"]},\"201\":{\"h\":\"Soul Gateway Learning Redirect Plugin\",\"t\":[\"When the Soul gateway makes a proxy call to the target service, it can use redirect the plug-in to redirect the request. There are two scenarios: one is to redirectUrl configure it as a third-party URL address and directly use 308 it to forward and jump, and the other is redirectUrl to forward the configuration beginning with / to the gateway itself.\"]},\"202\":{\"h\":\"Plug-in configuration\",\"t\":[\"In soul-admin – > Plug-in Management – > redirect, set to on.\",\"Dependencies added redirectmaven in soul-bootstrap the project's pom.xml files.\",\"Set the selector rule in the soul- admin background. Only the matching request will be forwarded and redirected. Please see for details: Selector and Rule Configuration.\"]},\"203\":{\"h\":\"Maven dependency\",\"t\":[\"Add the plug-in dependency in the soul-bootstrap project pom.xml file.\",\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-redirect</artifactId> <version>${last.version}</version> </dependency> \"]},\"204\":{\"h\":\"Scenes\",\"t\":[\"As the name implies, redirect a plug-in is uri a redirection and redirection of.\"]},\"205\":{\"h\":\"Redirect\",\"t\":[\"When we Rule configure the custom path, it should be a reachable service path.\",\"When the request is matched, the service jump will be performed 308 according to the user-defined path Soul gateway.\",\"Redirect configuration\"]},\"206\":{\"h\":\"Gateway self-interface forwarding\",\"t\":[\"When the matching rules are met, the service internally forwards using DispatcherHandler the internal interface.\",\"To realize the gateway's own interface forwarding, we need to start with the prefix in the configuration path /. The specific configuration is shown in the following figure.\",\"Self-interface forwarding\"]},\"207\":{\"h\":\"Source Code Parsing\",\"t\":[\"Before parsing redirect the redirect source code, it's important to understand that the Soul Gateway is based on the SpringBoot WebFlux implementation, where WebFlux requests are handled by default DispatcherHandler if nothing is configured by default. This is the responsive MVC processing core. Take a look at the initialization:\",\"protected void initStrategies(ApplicationContext context) { Map<String, HandlerMapping> mappingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false); ArrayList<HandlerMapping> mappings = new ArrayList(mappingBeans.values()); AnnotationAwareOrderComparator.sort(mappings); // handlerMapping related this.handlerMappings = Collections.unmodifiableList(mappings); Map<String, HandlerAdapter> adapterBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false); // handlerAdapter related this.handlerAdapters = new ArrayList(adapterBeans.values()); AnnotationAwareOrderComparator.sort(this.handlerAdapters); Map<String, HandlerResultHandler> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerResultHandler.class, true, false); // resultHandler related this.resultHandlers = new ArrayList(beans.values()); AnnotationAwareOrderComparator.sort(this.resultHandlers); } \",\"After that, we are familiar with the MVC core processing DispatcherHandler#handle method.\",\"public Mono<Void> handle(ServerWebExchange exchange) { return this.handlerMappings == null ? this.createNotFoundError() : Flux.fromIterable(this.handlerMappings).concatMap((mapping) -> { return mapping.getHandler(exchange); }).next().switchIfEmpty(this.createNotFoundError()).flatMap((handler) -> { return this.invokeHandler(exchange, handler); }).flatMap((result) -> { return this.handleResult(exchange, result); }); } \",\"To figure out how to handle it by default DispatcherHandler, let's talk about Soul Gateway, SoulWebHandler which implements the WebHandler interface. And then BeanName replace that previously DispatcherHandler registered default proces handler with the declaration webHandler.\",\"@Bean(\\\"webHandler\\\") public SoulWebHandler soulWebHandler(final ObjectProvider<List<SoulPlugin>> plugins) { List<SoulPlugin> pluginList = plugins.getIfAvailable(Collections::emptyList); List<SoulPlugin> soulPlugins = pluginList.stream() .sorted(Comparator.comparingInt(SoulPlugin::getOrder)).collect(Collectors.toList()); soulPlugins.forEach(soulPlugin -> log.info(\\\"load plugin:[{}] [{}]\\\", soulPlugin.named(), soulPlugin.getClass().getName())); return new SoulWebHandler(soulPlugins); } \",\"So far, we understand that the default request has been SoulWebHandler#handle processed. What if we need to forward it to the gateway itself MVC? The following is DispatcherHandler injected during initialization RedirectPlugin, and then DispatcherHandler distributed according to the specific request. The specific core code is as follows:\",\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final String handle = rule.getHandle(); final RedirectHandle redirectHandle = GsonUtils.getInstance().fromJson(handle, RedirectHandle.class); if (Objects.isNull(redirectHandle) || StringUtils.isBlank(redirectHandle.getRedirectURI())) { log.error(\\\"uri redirect rule can not configuration: {}\\\", handle); return chain.execute(exchange); } // Handle self-forwarding paths starting with \\\"/\\\" if (redirectHandle.getRedirectURI().startsWith(ROOT_PATH_PREFIX)) { ServerHttpRequest request = exchange.getRequest().mutate() .uri(Objects.requireNonNull(UriUtils.createUri(redirectHandle.getRedirectURI()))).build(); ServerWebExchange mutated = exchange.mutate().request(request).build(); return dispatcherHandler.handle(mutated); } else { // Perform a 308 redirect ServerHttpResponse response = exchange.getResponse(); response.setStatusCode(HttpStatus.PERMANENT_REDIRECT); response.getHeaders().add(HttpHeaders.LOCATION, redirectHandle.getRedirectURI()); return response.setComplete(); } } \"]},\"208\":{\"h\":\"Reference link:\",\"t\":[\" Design of Spring Web Flux and Analysis of Its Operation Principle \",\" Spring Web Flux operation principle \"]},\"209\":{\"h\":\"Soul Gateway Learning Sentinel Plugin\",\"t\":[\"Fuse and flow control are very necessary functions in the service gateway. The soul uses different mature components to implement this part of the function, and users can choose according to their preferences. This article will introduce how to use the Sentinel component of Ali to realize the fuse and flow control functions in soul. This article will first introduce the scenario and significance of fuse and flow control. It then describes how to configure the use of the sentinel plug-in for flow control and fusing on the soul. Finally, it briefly analyzes how soul uses the Sentinel component from the source code level.\"]},\"210\":{\"h\":\"Scene description\",\"t\":[\"As the entrance of the traffic, the service gateway has the responsibility to protect the subsequent services. The following two scenarios that are seriously harmful to services are often encountered in production, and they are also issues that business gateways must pay attention to. One situation is that during large-scale promotions such as Double 11 or Double 12, the request volume of the interface is several times higher than usual. If the capacity is not well evaluated, this surge of requests can easily lead to the complete unavailability of the entire service. This kind of downtime is often caused not by loopholes in business logic, but by too many requests and insufficient resources. Another situation is that there are some core services in the whole service system, and multiple business processes depend on this service. However, all services have unstable processing or service damage, resulting in long request processing time or frequent exceptions. Excluding the case of business BUG, it may be a sudden and very random block. Generally, it will be automatically repaired if the request volume is slowed down, but if it is not protected, there will be a domino effect that causes the entire service to be unavailable. This scenario is slightly different from the first scenario, in which the actual traffic does have an unmanageable peak, while the second scenario mainly considers the chain reaction caused by the inevitable and unpredictable jitter of the service itself.\"]},\"211\":{\"h\":\"Flow control\",\"t\":[\"For the first scenario, our usual practice is to carry out flow control. The core idea is that the service gateway ensures that the number of requests to the back is the amount that the service can bear. The redundant requests are directly rejected or added to the waiting queue to ensure that the service will not be suspended, and most of the requests can still be processed normally. When considering the strategy of flow control, we should mainly consider the following questions:\",\"By what angle is the flow controlled?\",\"What is the threshold?\",\"What is the flow control strategy?\",\"For the first problem, the normal idea is to monitor traffic through QPS, that is, flow control when the number of requests per second exceeds a certain limit. But in fact, there is another way to monitor traffic from the number of concurrency. This control scenario is also very meaningful. For example, when the downstream application causes service instability and response delay increase for some reason, it means that the throughput of the gateway decreases and more threads are occupied. In extreme cases, it even leads to the exhaustion of the thread pool. In a sense, flow control through concurrency can protect the gateway service itself to a certain extent. For the second question, the threshold is easy to understand, which is the boundary of triggering flow control. If we consider from QPS, it is how many times per second to start flow control. If we consider from the number of concurrency, it is how many times the number of threads requesting context exceeds. For the third problem, we generally have the following three solutions:\",\"Reject directly. This strategy is well understood as rejecting the service directly when the QPS is above the threshold without transmitting the request to a subsequent service.\",\"This strategy is aimed at the scenario that when the system is in a low water level for a long time, there may be a sudden increase in flow, and directly pulling the system to a high water level may instantly crush the system. The way to start preheating is to slowly increase the threshold, gradually increase the threshold within a certain period of time until it reaches the setting, and give the cold system a preheating time to avoid the cold system being crushed. Requests that exceed the threshold are also rejected.\",\"Queuing at a constant speed. The core idea of this strategy is to let requests pass at fixed intervals. When a request comes, if the time interval between the current request and the last passed request is not less than a preset value, the current request is passed; Otherwise, the expected passing time of the current request is calculated. If the expected passing time of the request is less than the timeout time preset by the rule, the request will wait until the preset time comes (queuing for processing). If the expected passage time exceeds the maximum queuing time, the request will be rejected directly.\"]},\"212\":{\"h\":\"Fuse\",\"t\":[\"For the second scenario, the usual way to deal with it is to set the service fuse. Simply put, when a service we detect is abnormal, we will not access it so as not to cause more pressure on it by more requests. After a period of time, if the service is detected to be restored, the traffic will be sent back. We first need to determine whether the service is unstable or jittery. Then think about what we should do if we find a service that is shaking. How to judge whether the service is back to normal. We can generally judge whether the service is unstable in the following three ways.\",\"Slow call proportion: when the number of requests in the unit statistical time is greater than the set minimum number of requests, and the request exceeding the maximum tolerance time is greater than the threshold, it is judged that the service is abnormal, and the fuse is triggered;\",\"Abnormal proportion: when the proportion of abnormal requests in the unit statistical time is greater than the threshold, we determine that the service is abnormal and trigger the fuse;\",\"Abnormal number: when the number of abnormal requests in unit time reaches the threshold, it is determined that the service is abnormal, and the fuse is triggered;\",\"When we judge that the service is abnormal through the above three indicators and fuse the service, we can choose to report an error directly for the request within a certain period of time (within the fuse duration), without blocking the upstream service, and let the requester decide how to deal with it. Or directly trigger service degradation. Service degradation can be roughly understood as requesting a simplified version of this business, which omits many non-core processes and only ultimately ensures that the process is processed (ultimately consistent). Like a real circuit breaker, a service circuit breaker will automatically recover. Generally, after the fuse is triggered, the service is in the fuse state for a period of time and does not provide services, and then it enters the half-open state. If the following small number of requests do not report errors and the response time is reasonable, the service is restored. If it is still abnormal, it continues to fuse.\",\"Sentinel is Alibaba's open source traffic control component for distributed service architecture, which mainly takes traffic as the starting point to help you ensure the stability of microservices from multiple dimensions such as traffic control, fuse degradation, and system adaptive protection. Soul, as an excellent open source gateway in China, integrates Sentinel into its own system as a plug-in, so that users can use the flow control and service fuse functions provided by Sentinel through simple configuration. The following is a brief description of how to configure the use of the sentinel plug-in in soul.\",\"First, log in to the soul management platform and configure the plug-in in the \\\"plug-in list\\\" -- > \\\"sentinel\\\". The configuration of \\\"Selector\\\" is not the focus of this article and will not be introduced. Click \\\"Add Rules\\\" to make specific settings, as shown in the following figure.\",\"In this configuration page, \\\"Name\\\", \\\"Matching Mode\\\", \\\"Condition\\\", \\\"Log Printing\\\", and \\\"Whether to Enable\\\" and \\\"Execution Order\\\" are general configurations of the soul plug-in and will not be described here. What we need to focus on is the configuration items in \\\"processing\\\". These configuration items can be divided into two groups. The first four options are about fuse configuration, and the last four options are about flow control configuration. In soul, we can set the flow control and fuse policy for a group of requests at the same time. Next, we will focus on how to use each configuration item.\"]},\"213\":{\"h\":\"Fuse\",\"t\":[\"First of all, let's look at the configuration related to the fuse. It has four configuration items: \\\"fuse threshold\\\", \\\"whether to open the fuse\\\", \\\"fuse window size\\\" and the unnamed service exception judgment method. Fuse switch indicates whether to open the fuse (1 open \\\\ 0 not open). The fuse window size refers to the number of seconds after triggering the fuse to enter the half-open state. In the half-open state, if the request is normal, it will enter the normal state. If the request is still abnormal, it will continue to fuse. The fusing judgment mode and fusing threshold need to be combined. In soul, three service exception determination methods of sentinel are used. They are:\",\"Slow call percentage. In this mode, the threshold is the number of milliseconds that are determined to be slow calls. The ratio of slow call is 1 by default and cannot be changed, that is, the fuse will be triggered if the threshold is exceeded within the unit statistical time. This mode is the default mode for sentinel.\",\"Exception proportion, in this mode, the threshold refers to the upper limit of the proportion of exception requests in the unit statistical time, and a number of [0.0, 1.0] needs to be filled in, indicating 0% -100%\",\"Exception number policy. In this mode, the threshold refers to the upper limit of the number of exception requests per unit of statistical time.\",\"It should be noted that soul uses the default parameters of sentinel for the unit statistics duration (statIntervalMs) and the minimum number of fusing requests (minRequestAmount). One second and five times respectively. The unit duration specifies the exception judgment, with 1 second as the statistical range, and the next second starts counting again. The minimum number of requests means that if the number of requests is less than 5 in 1 second, the fuse will not be triggered even if the threshold is reached.\",\"The configuration as shown in the figure above means that the fuse configuration is turned on. If 5 requests of this service are abnormal within 1 second, the fuse will be turned on for 10 seconds. After 10 seconds, the service will enter the half-open state. If the requests are normal, the service will become normal. If the requests are still abnormal, the fuse will continue to be turned on. If the service is requested during the fuse period, the soul gateway will directly return the request error, and the protection back-end service will not receive the request again.\"]},\"214\":{\"h\":\"Flow control\",\"t\":[\"There are five configurations related to flow control, which are \\\"flow control effect\\\", \\\"current limit threshold\\\", \\\"flow control switch\\\" and \\\"current limit threshold type\\\" from top to bottom and from left to right. The first is the type of throttling. We can choose \\\"QPS\\\" or \\\"Number of concurrent threads\\\". This parameter specifies from which angle we set the threshold of throttling. The threshold is the upper limit of the QPS or the number of threads, and the throttling policy is initiated when this threshold is reached. The specific current limiting strategy is configured in \\\"flow control effect\\\". In the flow control strategy, we can select \\\"direct rejection\\\", \\\"warm up\\\", \\\"uniform queuing\\\" and \\\"warm up + uniform queuing\\\". Direct rejection is better understood, that is, after the number of QPS or threads reaches the threshold, redundant requests are returned directly with errors. Warm-up means that the threshold gradually increases to the specified threshold within 10 seconds, that is, the threshold for the first 2-3 seconds is lower than the set threshold, but the threshold is gradually increased and reaches the specified threshold after 10 seconds, so that the system can have a warm-up process. If the request exceeds the threshold, the soul gateway will report an error and return directly. The uniform queue mode will strictly control the time interval of each request. If the flow control type is QPS and the threshold is 10, soul will control to transmit one request to the back-end service every 100ms. The extra requests will enter the waiting queue first, and each request will wait for 500ms at most. If the estimated waiting time of the request exceeds 500ms, it will report an error and return directly. It should be noted that if the flow limit type is the number of concurrent threads, then the flow control effect can only be \\\"direct rejection\\\". As shown in the figure below, this configuration indicates that the soul gateway will ensure that the QPS of this service does not exceed 10, and redundant requests will report errors directly.\",\"It should be noted that the Sentinel component runs independently in each gateway of the soul. If the gateway is a cluster, the amount actually transmitted to the following services needs to be multiplied by the number of soul gateway services during flow control. That is, if our soul gateway deploys three nodes, all requests are evenly distributed to each node through nginx. The flow control configured for one interface is 10 qps, so the actual QPS to be processed by the backward service is 10 \\\\ * 3. Fuse also needs to consider this situation, only when a service on three nodes triggers a fuse, then the service will not receive any more requests.\",\"The source code of Sentinel plug-in in soul mainly includes three parts, \\\"Sentinel Rule Handle\\\" is responsible for processing the processing logic when the Sentinel rule is synchronized from the management node, and \\\"Sentine lPlugin\\\" the processing logic of the plug-in \\\". \\\"SentinelFallback Handler\\\" for the processing logic that triggered the flow control or fuse. \\\". Let me take a look at them one by one. First is \\\"Sentine lRuleHandle\\\" \\\", the source code is as follows:\",\"public class SentinelRuleHandle implements PluginDataHandler { @Override public void handlerRule(final RuleData ruleData) { // Process new sentinel configuration SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class); sentinelHandle.checkData(sentinelHandle); // Get all existing flow control configurations and delete configurations with the same resourceName as the new configuration List<FlowRule> flowRules = FlowRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList()); if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) { // If flow control is enabled // Set sentinel flow control rules based on the configuration FlowRule rule = new FlowRule(getResourceName(ruleData)); // Set threshold rule.setCount(sentinelHandle.getFlowRuleCount()); // Flow control mode: QPS or thread rule.setGrade(sentinelHandle.getFlowRuleGrade()); // Flow control behavior: 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior()); flowRules.add(rule); } // Update all flow control configurations FlowRuleManager.loadRules(flowRules); // Get all existing circuit breaker configurations and delete configurations with the same resourceName as the new configuration List<DegradeRule> degradeRules = DegradeRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList()); if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) { // If circuit breaker is enabled // Set sentinel circuit breaker rules based on the configuration DegradeRule rule = new DegradeRule(getResourceName(ruleData)); // Set circuit breaker threshold rule.setCount(sentinelHandle.getDegradeRuleCount()); // Basis for circuit breaker judgment 0: average RT, 1: exception ratio, 2: exception count rule.setGrade(sentinelHandle.getDegradeRuleGrade()); // Circuit breaker time window rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow()); degradeRules.add(rule); } // Update all circuit breaker configurations DegradeRuleManager.loadRules(degradeRules); } @Override public void removeRule(final RuleData ruleData) { // Remove specified rule FlowRuleManager.loadRules(FlowRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList())); DegradeRuleManager.loadRules(DegradeRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(getResourceName(ruleData))) .collect(Collectors.toList())); } @Override public String pluginNamed() { return PluginEnum.SENTINEL.getName(); } /** * return sentinel resource name. * * @param ruleData ruleData * @return string string */ public static String getResourceName(final RuleData ruleData) { return ruleData.getSelectorId() + \\\"_\\\" + ruleData.getName(); } } \",\"The Sentine lPlugin \\\"of the plug-in execution logic code is as follow\",\"public class SentinelPlugin extends AbstractSoulPlugin { // Handler for exception handling private final SentinelFallbackHandler sentinelFallbackHandler; public SentinelPlugin(final SentinelFallbackHandler sentinelFallbackHandler) { this.sentinelFallbackHandler = sentinelFallbackHandler; } @Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // Generate sentinel resource name from plugin configuration, which corresponds to one flow control or circuit breaker strategy String resourceName = SentinelRuleHandle.getResourceName(rule); // Verify sentinel plugin's configuration information SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class); sentinelHandle.checkData(sentinelHandle); // Introduce Sentinel's official Transformer and delegate the request to Sentinel for handling return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)) .doOnSuccess(v -> { HttpStatus status = exchange.getResponse().getStatusCode(); if (status == null || !status.is2xxSuccessful()) { exchange.getResponse().setStatusCode(null); throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }) //If Sentinel triggers flow control or circuit breaker and causes an error, call sentinelFallbackHandler to return an error message .onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable)); } // Plugin name: sentinel @Override public String named() { return PluginEnum.SENTINEL.getName(); } // Order: 45 @Override public int getOrder() { return PluginEnum.SENTINEL.getCode(); } public static class SentinelFallbackException extends HttpStatusCodeException { public SentinelFallbackException(final HttpStatus statusCode) { super(statusCode); } } } \",\"Exception handling is Sentine lFallbackHandler \\\". In the soul, whether it is the processing of the request after the fuse or the request under flow control, the soul will directly return an error\",\"public class SentinelFallbackHandler implements FallbackHandler { @Override public Mono<Void> generateError(final ServerWebExchange exchange, final Throwable throwable) { Object error; if (throwable instanceof DegradeException) { // Circuit breaker triggered // Set HTTP status to 500 exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); // Set request body error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); } else if (throwable instanceof FlowException) { // Flow control error, indicating that the client should retry // Set HTTP status to 429 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); // Set request body error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null); } else if (throwable instanceof BlockException) { // Parent class of FlowException, indicating that the service is blocked // Set HTTP status to 429 exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS); // Set request body error = SoulResultWrap.error(SoulResultEnum.SENTINEL_BLOCK_ERROR.getCode(), SoulResultEnum.SENTINEL_BLOCK_ERROR.getMsg(), null); } else { return Mono.error(throwable); } return WebFluxResultUtils.result(exchange, error); } } \",\"The soul gateway encapsulates an excellent flow control component, sentinel, which provides users with easy-to-use flow control and fuse functions. It should be noted that when soul uses sentinel, some parameters are configured by default. If there is a need to modify, you need to adjust the source code by yourself. Secondly, the soul gateway can be deployed in a distributed manner, but distributed flow control is not used when sentinel is used, and the flow control of each soul gateway node for the same resource is independent but identical.\"]},\"215\":{\"h\":\"Soul Gateway Learning Resilience4j Plugin\"},\"216\":{\"h\":\"Aim\",\"t\":[\"What is Resilience4J?\",\"Resilience 4j experience with soul \",\"Current-limiting\",\"Fuse\",\"Interpretation of Resilience4J Plug-in Source Code\"]},\"217\":{\"h\":\"What is Resilience4j?\",\"t\":[\"Resilience4J is the recommended fault tolerance scheme of Spring Cloud Gateway. It is a lightweight fault tolerance library.\",\"It borrows from Hystrix and uses JDK8 functional programming, namely lambda expressions.\",\"In contrast, Netflix Hystrix has a compilation dependency on Archaius. Resilience4j You don't need to reference all the dependencies. You can reference the relevant modules according to the functions you need. Hystrix will not be updated. Spring offers an alternative to Netflix Hystrix, namely Resilence4J\",\"Resilience4J provides a range of usability features that enhance microservices:\",\"Circuit Breaker\",\"Rate Limiter\",\"Isolation based on semaphore\",\"Cache\",\"Time limiter\",\"Request to restart Retry\",\"Official Dependency Package\",\" <dependency> <groupId>io.github.resilience4j</groupId> <artifactId>resilience4j-circuitbreaker</artifactId> <version>${resilience.version}</version> </dependency> \"]},\"218\":{\"h\":\"Resilience 4j experience with soul\",\"t\":[\"First, open Resilience4j in the soul-admin console plug-in management.\",\"Add dependency in soul gateway\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-ratelimiter</artifactId> <version>${project.version}</version> </dependency> \",\"Start three services, a soul-admin, a soul-bootstrap, and a soul-examples-http\",\"Find Resilience4j in the plug-in list on the soul-admin console and customize the configuration, as shown in the following figure. \",\" Introduction to the configuration of soul official website \",\"* Resilience4j Processing in Detail: * timeoutDurationRate：Timeout for waiting to acquire tokens, in milliseconds, default value: 5000. * limitRefreshPeriod：Time interval for refreshing tokens, in milliseconds, default value: 500. * limitForPeriod：Number of tokens refreshed each time, default value: 50. * circuitEnable：Whether to enable circuit breaker, 0: off, 1: on, default value: 0. * timeoutDuration：Timeout for circuit breaker, in milliseconds, default value: 30000. * fallbackUri：URI for fallback handling. * slidingWindowSize：Size of the sliding window, default value: 100. * slidingWindowType：Type of the sliding window, 0: based on count, 1: based on time, default value: 0. * minimumNumberOfCalls：Minimum number of requests to trigger circuit breaker, circuit breaker statistics will be calculated only if this threshold is exceeded, default value: 100. * waitIntervalFunctionInOpenState：Duration for which the circuit breaker remains open, in milliseconds, default value: 10. * permittedNumberOfCallsInHalfOpenState：Size of the circular buffer in the half-open state, circuit breaker calculation will be performed only if this number is reached, default value: 10. * failureRateThreshold：Percentage of error rate, circuit breaker will only open if this threshold is reached, default value: 50. * automaticTransitionFromOpenToHalfOpenEnabled：Whether to automatically transition from open state to half-open state, true: yes, false: no, default value: false. \"]},\"219\":{\"h\":\"Current-limiting\",\"t\":[\"The parameter configuration is checked as follows. If the parameter value is less than the default value, the default value will be directly assigned, so it is convenient to directly modify the configuration of the source code for testing the effect: the number of tokens refreshed each time is 2, the time interval for refreshing tokens is 1 s, and the timeout time is 1 s.\",\" /** * check filed default value. * * @param resilience4JHandle {@linkplain Resilience4JHandle} * @return {@linkplain Resilience4JHandle} */ public Resilience4JHandle checkData(final Resilience4JHandle resilience4JHandle) { resilience4JHandle.setTimeoutDurationRate(Math.max(resilience4JHandle.getTimeoutDurationRate(), Constants.TIMEOUT_DURATION_RATE)); //resilience4JHandle.setLimitRefreshPeriod(Math.max(resilience4JHandle.getLimitRefreshPeriod(), Constants.LIMIT_REFRESH_PERIOD)); //resilience4JHandle.setLimitForPeriod(Math.max(resilience4JHandle.getLimitForPeriod(), Constants.LIMIT_FOR_PERIOD)); // Set the number of tokens refreshed each time to 2, and the time interval for refreshing tokens to 1 second resilience4JHandle.setLimitRefreshPeriod(1000); resilience4JHandle.setLimitForPeriod(2); resilience4JHandle.setTimeoutDuration(1000); resilience4JHandle.setCircuitEnable(Math.max(resilience4JHandle.getCircuitEnable(), Constants.CIRCUIT_ENABLE)); //resilience4JHandle.setTimeoutDuration(Math.max(resilience4JHandle.getTimeoutDuration(), Constants.TIMEOUT_DURATION)); resilience4JHandle.setFallbackUri(!\\\"0\\\".equals(resilience4JHandle.getFallbackUri()) ? resilience4JHandle.getFallbackUri() : \\\"\\\"); resilience4JHandle.setSlidingWindowSize(Math.max(resilience4JHandle.getSlidingWindowSize(), Constants.SLIDING_WINDOW_SIZE)); resilience4JHandle.setSlidingWindowType(Math.max(resilience4JHandle.getSlidingWindowType(), Constants.SLIDING_WINDOW_TYPE)); resilience4JHandle.setMinimumNumberOfCalls(Math.max(resilience4JHandle.getMinimumNumberOfCalls(), Constants.MINIMUM_NUMBER_OF_CALLS)); resilience4JHandle.setWaitIntervalFunctionInOpenState(Math.max(resilience4JHandle.getWaitIntervalFunctionInOpenState(), Constants.WAIT_INTERVAL_FUNCTION_IN_OPEN_STATE)); resilience4JHandle.setPermittedNumberOfCallsInHalfOpenState(Math.max(resilience4JHandle.getPermittedNumberOfCallsInHalfOpenState(), Constants.PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE)); resilience4JHandle.setFailureRateThreshold(Math.max(resilience4JHandle.getFailureRateThreshold(), Constants.FAILURE_RATE_THRESHOLD)); return resilience4JHandle; } \",\"Use SuperBenchmarker tool, 4 threads, execute 10s\",\"C:\\\\Users\\\\v-yanb07>sb -u http://localhost:9195/http/test/findByUserId?userId=1 -c 4 -N 10 Starting at 2021-03-14 15:46:28 [Press C to stop the test] 23 (RPS: 1) ---------------Finished!---------------- Finished at 2021-03-14 15:46:51 (took 00:00:23.0477097) 24 (RPS: 1) Status 200: 25 RPS: 2.2 (requests/second) Max: 2020ms Min: 472ms Avg: 1677ms 50% below 1994ms 60% below 1997ms 70% below 1999ms 80% below 1999ms 90% below 2001ms 95% below 2019ms 98% below 2020ms 99% below 2020ms 99.9% below 2020ms \",\"Output log\",\"2021-03-14 12:16:35.252 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:36.249 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:36.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:37.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:37.250 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:38.250 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:38.250 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:39.252 INFO 379336 --- [ctor-http-nio-7] o.d.s.e.h.controller.HttpTestController : Current limiting test 2021-03-14 12:16:39.252 INFO 379336 --- [ctor-http-nio-4] o.d.s.e.h.controller.HttpTestController : Current limiting test \",\"The console log outputs two lines per second to verify that the throttling is in effect\"]},\"220\":{\"h\":\"Fuse\",\"t\":[\"From the configuration information, we know that the fuse is off by default, and we need to open it.\",\"Soul-examples-http Add sleep time at call interface\",\" @GetMapping(\\\"/findByUserId\\\") public UserDTO findByUserId(@RequestParam(\\\"userId\\\") final String userId) throws Exception{ UserDTO userDTO = new UserDTO(); userDTO.setUserId(userId); userDTO.setUserName(\\\"hello world\\\"); log.info(\\\"Current limiting test\\\"); int i = RandomUtils.nextInt(1,3); if(i %2==0){ //throw new Exception(\\\"Exception thrown\\\"); Thread.currentThread().sleep(2000); } return userDTO; } \",\"Resilience4JHandle # checkData Manually set the timeout to 1s\",\" resilience4JHandle.setTimeoutDuration(1000); \",\"The pos interface calls \",\"http://localhost:9195/http/test/findByUserId?userId=1\",\"In case of multiple requests, some requests return normal data, and some requests return the following data, indicating that the timeout fuse is effective.\",\"{ \\\"code\\\": 500, \\\"message\\\": \\\"Internal Server Error\\\", \\\"data\\\": \\\"404 NOT_FOUND\\\" } \"]},\"221\":{\"h\":\"Interpretation of Resilience4J Plug-in Source Code\",\"t\":[\"The soul gateway Resilience4j plug-in source code uses a reactive programming lot of methods. First, you need to understand responsive programming.\",\"Resilience4J Plug-in Directory Structure\",\"└─resilience4j │ Resilience4JPlugin.java // Plugin processing, core class │ ├─build │ Resilience4JBuilder.java // Build Resilience4JConf object │ ├─conf │ Resilience4JConf.java │ ├─executor │ CombinedExecutor.java // Limiter and circuit breaker executor │ Executor.java │ RateLimiterExecutor.java // Limiter executor │ ├─factory │ Resilience4JRegistryFactory.java // Build limiter and circuit breaker objects │ └─handler Resilience4JHandler.java \",\"Resilience4JPlugn # doExecuteResilience4JPlugn inherits AbstractSoulPlugin like other soul plug-ins. As long as it is enabled, it will go to the core method doExecute through the chain mechanism.\",\" @Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // Get configuration information object Resilience4JHandle resilience4JHandle = GsonUtils.getGson().fromJson(rule.getHandle(), Resilience4JHandle.class); // Check configuration information, assign default values if they're less than defaults resilience4JHandle = resilience4JHandle.checkData(resilience4JHandle); // circuitEnable configuration: 1 enables circuit breaker component, otherwise use limiter component if (resilience4JHandle.getCircuitEnable() == 1) { return combined(exchange, chain, rule); } return rateLimiter(exchange, chain, rule); } \",\"Current Limiting Resilience4JPlugin # rateLimiter\",\" private Mono<Void> rateLimiter(final ServerWebExchange exchange, final SoulPluginChain chain, final RuleData rule) { return ratelimiterExecutor.run( // chain.execute(exchange) calls subsequent plugins chain.execute(exchange), fallback(ratelimiterExecutor, exchange, null), Resilience4JBuilder.build(rule)) .onErrorResume(throwable -> ratelimiterExecutor.withoutFallback(exchange, throwable)) // Called by ratelimiterExecutor.run @Override public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) { // Limiter component RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig()); // Limiting execution Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter)); if (fallback != null) { // Execute fallback return to.onErrorResume(fallback); } return to; } // to.onErrorResume(fallback); default Mono<Void> fallback(ServerWebExchange exchange, String uri, Throwable t) { if (StringUtils.isBlank(uri)) { return withoutFallback(exchange, t); } DispatcherHandler dispatcherHandler = SpringBeanUtils.getInstance().getBean(DispatcherHandler.class); ServerHttpRequest request = exchange.getRequest().mutate().uri(Objects.requireNonNull(UriUtils.createUri(uri))).build(); ServerWebExchange mutated = exchange.mutate().request(request).build(); // Execute the fallback return dispatcherHandler.handle(mutated); } \",\"Fuse Resilience 4JPlugin # combined\",\" private Mono<Void> combined(final ServerWebExchange exchange, final SoulPluginChain chain, final RuleData rule) { Resilience4JConf conf = Resilience4JBuilder.build(rule); return combinedExecutor.run( chain.execute(exchange).doOnSuccess(v -> { HttpStatus status = exchange.getResponse().getStatusCode(); if (status == null || !status.is2xxSuccessful()) { exchange.getResponse().setStatusCode(null); throw new CircuitBreakerStatusCodeException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }), fallback(combinedExecutor, exchange, conf.getFallBackUri()), conf); } // Executed in combinedExecutor#run public <T> Mono<T> run(final Mono<T> run, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf resilience4JConf) { RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(resilience4JConf.getId(), resilience4JConf.getRateLimiterConfig()); CircuitBreaker circuitBreaker = Resilience4JRegistryFactory.circuitBreaker(resilience4JConf.getId(), resilience4JConf.getCircuitBreakerConfig()); //Circuit breaker operation Mono<T> to = run.transformDeferred(CircuitBreakerOperator.of(circuitBreaker)) // Limiting operation .transformDeferred(RateLimiterOperator.of(rateLimiter)) // Set timeout .timeout(resilience4JConf.getTimeLimiterConfig().getTimeoutDuration()) // Throw timeout exception if timeout occurs .doOnError(TimeoutException.class, t -> circuitBreaker.onError( resilience4JConf.getTimeLimiterConfig().getTimeoutDuration().toMillis(), TimeUnit.MILLISECONDS, t)); if (fallback != null) { to = to.onErrorResume(fallback); } return to; } \"]},\"222\":{\"h\":\"Sum up\",\"t\":[\"The soul gateway provides current limiting and fusing, and the fusing is off by default\",\"If the parameter value is less than the default value, the default value will be used directly\"]},\"223\":{\"h\":\"Soul Gateway Learning Apache Dubbo Plugin\"},\"224\":{\"h\":\"Aim\",\"t\":[\"Introduction to the Apache Dubbo Plugin \",\"Introduction to metadata\",\"Apache Dubbo Plugin Configuration \",\"Bootstrap POM configuration\",\"Soul-admin Configuration\",\"Dubbo service POM configuration\",\"Introduction to Apache Dubbo Generalization Calls \",\"Using Generalization Calls via the API\",\"Using generalized calls with spring\",\"Generalization call implementation flow\",\"Soul Dubbo Plugin Call Resolution \",\"ApachDubboPlugin Generalization Call Preparation\",\"ApacheDubboProxySerivce\",\"DubboResponsePlugin\",\"Web FluxResultUtils returns results\",\"Introduction to Dubbo Generalization Calls\",\"Sum up\",\"Reference\"]},\"225\":{\"h\":\"Introduction to the Apache Dubbo Plugin\",\"t\":[\"Apache Dubbo is a high-performance and lightweight open source Java service framework, which mainly provides six core capabilities: high-performance RPC invocation for interface agents, intelligent fault tolerance and load balancing, automatic service registration and discovery, high scalability, run-time traffic scheduling, and visual service governance and operation and maintenance. The Dubbo plug-in in the gateway is mainly used to convert Http requests to Dubbo protocol, and it is also the key for the gateway to implement Dubbo generalization calls. Dubbo plug-ins need to cooperate metadata to implement Dubbo calls.\"]},\"226\":{\"h\":\"Introduction to metadata\",\"t\":[\"The function of metadata is to get the real request path and methodNameparameterTypes prepare for the generalization call during the protocol conversion.\",\"In the database, we have a separate table to store Dubbo meta information. Through the data synchronization scheme, the data of this table will be synchronized to the JVM memory of the gateway\",\"The table is structured as follows\",\"CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'id', `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Application Name', `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Path, should be unique', `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'Path description', `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'RPC type', `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Service Name', `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Method Name', `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'Parameter Types, comma-separated', `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'RPC extension information in JSON format', `date_created` datetime(0) NOT NULL COMMENT 'Creation Time', `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT 'Update Time', `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT 'Enable State', PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; \",\"The path field is mainly used to match a piece of data according to your path field when requesting the gateway, and then carry out the subsequent processing process.\",\"rpc_ext Field If the proxy interface is a Dubbo service interface of type and the field is set groupversion, the information will be stored rpc_ext in\",\"Each Dubbo interface method will deal with a piece of metadata. Compared with Spring Cloud and HTTP, only one piece of/contextPath/\\\\ ** is stored and none is stored respectively.\"]},\"227\":{\"h\":\"Apache Dubbo Plugin Configuration\"},\"228\":{\"h\":\"Soul-bootstrap POM configuration\",\"t\":[\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-apache-dubbo</artifactId> <version>${project.version}</version> </dependency> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo</artifactId> <version>2.7.5</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-client</artifactId> <version>${curator.version}</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>${curator.version}</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>${curator.version}</version> </dependency> \"]},\"229\":{\"h\":\"Soul-admin Configuration\",\"t\":[\"Log in to soul-admin background, open the switch of Dubbo configuration option on the plug-in management page, and fill in the connection address of the registry.\"]},\"230\":{\"h\":\"Dubbo service POM configuration\",\"t\":[\"<dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-client-apache-dubbo</artifactId> <version>${soul.version}</version> </dependency> \",\"@SoulDubboClient(path = \\\"/insert\\\", desc = \\\"Insert a row of data\\\") public DubboTest insert(final DubboTest dubboTest) { dubboTest.setName(\\\"hello world Soul Apache Dubbo: \\\" + dubboTest.getName()); return dubboTest; } \",\"The proxied service uses the soul-spring-boot-starter-client-apache-dubbo provided client dependencies and @SoulDubboClient annotations to register the interface name, parameter type, and parameter content to the soul-admin end at startup, and then the backend admin synchronizes the data to the bootstrap end.\"]},\"231\":{\"h\":\"Introduction to Apache Dubbo Generalization Calls\",\"t\":[\"The generalized interface calling mode is mainly used when the client does not have an API interface and a model class element. All POJOs in the parameters and return values are represented by Map. It is usually used for framework integration and can be implemented by calling all services through GenericS.\"]},\"232\":{\"h\":\"Using generalized calls through the API (the way the gateway is currently used)\",\"t\":[\"ReferenceConfig<GenericService> reference = new ReferenceConfig<>(); reference.setGeneric(true); reference.setApplication(applicationConfig); reference.setRegistry(registryConfig); reference.setInterface(metaData.getServiceName()); reference.setProtocol(\\\"dubbo\\\"); \",\"The gateway uses the generic call through API declaration and registration.\"]},\"233\":{\"h\":\"Using Generalization Calls with Spring\",\"t\":[\"<dubbo:reference id=\\\"barService\\\" interface=\\\"com.foo.BarService\\\" generic=\\\"true\\\" /> \"]},\"234\":{\"h\":\"Generalization call implementation flow\",\"t\":[\"+-------------------------------------------+ +-------------------------------------------+ | consumer 端 | | provider 端 | | | | | | | | | | | | | | | | | | +------------------+ | | +--------------+ | | |GenericImplFilter | | Invocation | |GenericFilter | | | +----> | +-------------------------> | | | | | +------------------+ | | +--------------+ | | +-----------+ | | | +-----------+ | | | | | | | | | | | |Client | | | +--> | Service | | | | | | | | | | | +-----------+ | | +-------+---+ | | | | | | | ^ +------------------+ | | +--------------+ | | | | |GenericImplFilter | | | |GenericFilter | <----------+ | | +-------------+ | <-------------------------+ | | | +------------------+ | | +--------------+ | | | | | | | | | | | | | | | | | +-------------------------------------------+ +-------------------------------------------+ \",\"GenericService This interface is very similar to Java's reflection call. You only need to provide the name of the method called, the type of the parameter, and the value of the parameter to call the corresponding method directly.\",\"Generic Filter: responsible for the conversion of provider-side parameters \",\"Converts the parameters of the hashMap structure to the corresponding Pojo when called\",\"The return result is to convert Pojo to hashMap.\",\"GenericImpl Filter: It is responsible for the conversion of consumer side parameters and converting Pojo to hashMap interface.\",\"/** * Generic service interface * * @export */ public interface GenericService { /** * Generic invocation * * @param method Method name, e.g., findPerson. If there are overloaded methods, include the parameter list, e.g., findPerson(java.lang.String) * @param parameterTypes Parameter types * @param args Parameter list * @return invocation result * @throws GenericException Exception thrown by the method */ Object $invoke(String method, String[] parameterTypes, Object[] args) throws GenericException; default CompletableFuture<Object> $invokeAsync(String method, String[] parameterTypes, Object[] args) throws GenericException { Object object = $invoke(method, parameterTypes, args); if (object instanceof CompletableFuture) { return (CompletableFuture<Object>) object; } return CompletableFuture.completedFuture(object); } } \"]},\"235\":{\"h\":\"Soul Dubbo Plugin Call Resolution\",\"t\":[\"When a service request is initiated, the method of the Handle class is entered SoulWebHandler first (as to why it becomes the request entry to query by itself, this article will not explain). The following is the plugins plug-in chain call from DefaultSoulPluginChain the class.\",\"@Override public Mono<Void> handle(@NonNull final ServerWebExchange exchange) { return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler); } \",\"@Override public Mono<Void> execute(final ServerWebExchange exchange) { // Reactive programming return Mono.defer(() -> { // Check if the current index is less than the number of plugins if (this.index < plugins.size()) { // Get a plugin from plugins one by one SoulPlugin plugin = plugins.get(this.index++); // Check if this plugin should be skipped Boolean skip = plugin.skip(exchange); if (skip) { return this.execute(exchange); } return plugin.execute(exchange, this); } return Mono.empty(); }); } \",\"This chapter focuses only on Apache Dubbo, so we'll focus on the invocation of the Dubbo plug-in. Through the Debug gateway program, we know that it is actually judged and called one by one according to the above order. Let's focus on ApacheDubboPlugin\"]},\"236\":{\"h\":\"ApachDubboPlugin Generalization Call Preparation\",\"t\":[\"@Override protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) { // Get dubbo_params data String body = exchange.getAttribute(Constants.DUBBO_PARAMS); // Get attribute value from exchange context SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT); assert soulContext != null; // Get attribute value from exchange metaData MetaData metaData = exchange.getAttribute(Constants.META_DATA); // Check if metaData is incorrect, if so, return an error response if (!checkMetaData(metaData)) { assert metaData != null; log.error(\\\" path is :{}, meta data have error.... {}\\\", soulContext.getPath(), metaData.toString()); exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // Check if parameterTypes and body in metaData are empty, if so, return a body error response if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) { exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR); Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } // Perform asynchronous call to Dubbo GenericsService with exchange, body, and metaData final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange); return result.then(chain.execute(exchange)); } \",\"First, check the parameters required by the generalization call.\"]},\"237\":{\"h\":\"ApacheDubboProxyService\",\"t\":[\"public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException { // issue(https://github.com/dromara/soul/issues/471), add dubbo tag route String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE); if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) { RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders); } // Get reference based on metaData path ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath()); if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) { ApplicationConfigCache.getInstance().invalidate(metaData.getPath()); reference = ApplicationConfigCache.getInstance().initRef(metaData); } // et the instance of GenericService for generic invocation based on reference GenericService genericService = reference.get(); Pair<String[], Object[]> pair; if (ParamCheckUtils.dubboBodyIsEmpty(body)) { pair = new ImmutablePair<>(new String[]{}, new Object[]{}); } else { // Organize parameter types and values for Dubbo generic invocation based on body and parameterTypes pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes()); } // Perform asynchronous call using the default $invokeAsync method of GenericService CompletableFuture<Object> future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight()); return Mono.fromFuture(future.thenApply(ret -> { if (Objects.isNull(ret)) { ret = Constants.DUBBO_RPC_RESULT_EMPTY; } // After successful invocation, copy the result and type to attributes of the exchange exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret); exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName()); return ret; })).onErrorMap(exception -> exception instanceof GenericException ? new SoulException(((GenericException) exception).getExceptionMessage()) : new SoulException(exception)); } \"]},\"238\":{\"h\":\"DubboResponsePlugin\",\"t\":[\"@Override public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChain chain) { return chain.execute(exchange).then(Mono.defer(() -> { final Object result = exchange.getAttribute(Constants.DUBBO_RPC_RESULT); if (Objects.isNull(result)) { Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null); return WebFluxResultUtils.result(exchange, error); } Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result)); return WebFluxResultUtils.result(exchange, success); })); } \"]},\"239\":{\"h\":\"Web FluxResultUtils returns results\"},\"240\":{\"h\":\"Introduction to Dubbo Generalization Calls\",\"t\":[\"Dubbo generalized invocation is mainly divided into two parts, namely, how to use GenericImplFilter the consumer side to intercept the generalized invocation, and how to use GenericFilter the service provider side to serialize the generalized parameters after intercepting the request and then request the specific service.\"]},\"241\":{\"h\":\"How does the service consumer org. Apache. Dubbo. RPC. Filter. GenericImplFilter intercept generalized calls?\",\"t\":[\"@Activate(group = CommonConstants.CONSUMER, value = GENERIC_KEY, order = 20000) public class GenericImplFilter implements Filter, Filter.Listener { @Override public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException { // ... Omitted non-core code // Check if it's a generic call if (isMakingGenericCall(generic, invocation)) { // Get the generic parameters Object[] args = (Object[]) invocation.getArguments()[2]; // If it's nativeJava mode if (ProtocolUtils.isJavaGenericSerialization(generic)) { for (Object arg : args) { if (!(byte[].class == arg.getClass())) { error(generic, byte[].class.getName(), arg.getClass().getName()); } } // If it's bean mode } else if (ProtocolUtils.isBeanGenericSerialization(generic)) { for (Object arg : args) { if (!(arg instanceof JavaBeanDescriptor)) { error(generic, JavaBeanDescriptor.class.getName(), arg.getClass().getName()); } } } // Set attachment for server-side invocation invocation.setAttachment( GENERIC_KEY, invoker.getUrl().getParameter(GENERIC_KEY)); } // Perform remote invocation return invoker.invoke(invocation); } private boolean isMakingGenericCall(String generic, Invocation invocation) { return (invocation.getMethodName().equals($INVOKE) || invocation.getMethodName().equals($INVOKE_ASYNC)) && invocation.getArguments() != null && invocation.getArguments().length == 3 && ProtocolUtils.isGeneric(generic); } } \",\"GenericImpl Filter implements the interface Filter (I will not introduce the Filter in Dubbo) and then executes the Invoke method. The invoke method mainly does the following things:\",\"Parameter validation to check whether the call is a generalized call\",\"Get the generalization parameters\",\"Determine the generalization calling mode: traverse each parameter, and then determine whether the generalization mode of the parameter is native Java or bean in turn\",\"Initiates a remote call\"]},\"242\":{\"h\":\"The service provider intercepts the generalization request through Generic Filter.\",\"t\":[\"@Activate(group = CommonConstants.PROVIDER, order = -20000) public class GenericFilter implements Filter, Filter.Listener { @Override public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException { // Parameter validation if ((inv.getMethodName().equals($INVOKE) || inv.getMethodName().equals($INVOKE_ASYNC)) && inv.getArguments() != null && inv.getArguments().length == 3 && !GenericService.class.isAssignableFrom(invoker.getInterface())) { // Get parameter name, type, and value String name = ((String) inv.getArguments()[0]).trim(); String[] types = (String[]) inv.getArguments()[1]; Object[] args = (Object[]) inv.getArguments()[2]; try { // Get the called method using reflection Method method = ReflectUtils.findMethodByMethodSignature(invoker.getInterface(), name, types); Class<?>[] params = method.getParameterTypes(); if (args == null) { args = new Object[params.length]; } // Get the generic type used for the generic reference, true or bean or nativejava String generic = inv.getAttachment(GENERIC_KEY); if (StringUtils.isBlank(generic)) { generic = RpcContext.getContext().getAttachment(GENERIC_KEY); } // If generic=true, deserialize parameters using the true method if (StringUtils.isEmpty(generic) || ProtocolUtils.isDefaultGenericSerialization(generic) || ProtocolUtils.isGenericReturnRawResult(generic)) { args = PojoUtils.realize(args, params, method.getGenericParameterTypes()); // If generic=nativejava, deserialize parameters using the nativejava method } else if (ProtocolUtils.isJavaGenericSerialization(generic)) { for (int i = 0; i < args.length; i++) { if (byte[].class == args[i].getClass()) { try (UnsafeByteArrayInputStream is = new UnsafeByteArrayInputStream((byte[]) args[i])) { args[i] = ExtensionLoader.getExtensionLoader(Serialization.class) .getExtension(GENERIC_SERIALIZATION_NATIVE_JAVA) .deserialize(null, is).readObject(); } catch (Exception e) { throw new RpcException(\\\"Deserialize argument [\\\" + (i + 1) + \\\"] failed.\\\", e); } } else { throw new RpcException(...); } } // If generic=bean, deserialize parameters using the bean method } else if (ProtocolUtils.isBeanGenericSerialization(generic)) { for (int i = 0; i < args.length; i++) { if (args[i] instanceof JavaBeanDescriptor) { args[i] = JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor) args[i]); } else { throw new RpcException(...); } } } ... // Pass the current request to the next Filter in the FilterChain and return the result RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args, inv.getAttachments(), inv.getAttributes()); rpcInvocation.setInvoker(inv.getInvoker()); rpcInvocation.setTargetServiceUniqueName(inv.getTargetServiceUniqueName()); return invoker.invoke(rpcInvocation); } catch (NoSuchMethodException e) { throw new RpcException(e.getMessage(), e); } catch (ClassNotFoundException e) { throw new RpcException(e.getMessage(), e); } } // If it's not a generic call, pass the request directly to the next Filter in the FilterChain return invoker.invoke(inv); } } \",\"The above is the general process of how the Dubbo service provider intercepts the generalization request and processes it:\",\"Parameter check to determine whether the request is a generalized call\",\"Get the parameter name, parameter type, parameter value,\",\"Use reflection to get the method called, and the generalization used true or or\",\"Deserialize the generalization parameters based on the generalization method\",\"Pass the request, including the called method, parameters and context information, to the next Filter in the FilterChain, and return the Result\",\"According to the generalization method, deserialize the Result and return it to the service consumer\"]},\"243\":{\"h\":\"Sum up\",\"t\":[\"The above is the analysis of how to configure the Dubbo plug-in to the entire call process, and then respectively introduce the details of how the service consumer and service provider intercept the generalized call process and serialize the parameters. I hope it will be helpful to you.\"]},\"244\":{\"h\":\"Reference\",\"t\":[\"https://my.oschina.net/u/4564034/blog/4409382\",\"https://qsli.github.io/2018/05/02/dubbo-generic-invoke/\"]},\"245\":{\"h\":\"Project Donation\"},\"246\":{\"h\":\"Basic Conditions\",\"t\":[\"Dromara open source community organization has the following basic requirements for donated projects:\",\"Projects must be original and cannot be Fork versions.\",\"Projects must be complete application solutions.\",\"Projects must have good code comments and continuously improved documentation.\",\"Projects must be hosted on the Gitee platform with Stars exceeding 100.\",\"Projects must have valid code submission records in the past 2 months.\",\"Projects must be approved by the dromara community organization's jury.\",\"Preference is given to Gitee recommended projects or those that have obtained GVP. (GVP projects need to contact Gitee official staff to cancel GVP before transferring to the organization, and restore GVP after a successful transfer)\",\"Priority is given to projects in the fields of container tools, microservice frameworks and tools, distributed transactions, distributed middleware, big data processing, artificial intelligence, IoT, and development/testing/operations related tool chains.\"]},\"247\":{\"h\":\"Source Repository Impact\",\"t\":[\"Currently, donated projects are handled by transferring to the dromara organization repository. After the project is transferred, the following impacts will occur:\",\"gitee ：https://gitee.com/dromara/repository-name\",\"github：https://github.com/dromara/repository-name\",\"If there are absolute path references (images, files, etc.) in the project source code, they need to be changed to relative paths.\"]},\"248\":{\"h\":\"Repository Permissions\",\"t\":[\"The head of the dromara organization will set super admin permissions for the new project leader.\",\"Project PMC/Committers will be invited to join the dromara organization and set relevant read and write permissions. The project is independently submitted and operated.\",\"Project PMC/Committers will be assigned emails with the suffix @dromara.org.\"]},\"249\":{\"h\":\"Repository Documentation\",\"t\":[\"In principle, you need to contact the person in charge of the dromara official website and update the transfer document at https://dromara.org.\"]},\"250\":{\"h\":\"Version Release\",\"t\":[\"In principle, the next version is required to change the package name prefix to org.dromara and be published to the MAVEN repository.\"]},\"251\":{\"h\":\"Organization/Community\",\"t\":[\"The head or secretary of the dromara open source organization invites you to join the dromara community group and makes an announcement to all members.\",\"The dromara open source community's official account releases a welcome article and synchronizes it to the technical community.\",\"The original repository community group adds the dromara-xxx prefix.\"]},\"252\":{\"h\":\"Donation Project Exit Matters (Preliminary Version)\",\"t\":[\"The dromara community organization always has a positive, open and tolerant attitude. If the author of the donated project cannot identify with the development philosophy of the organization after joining the dromara organization or wants to transfer to another organization/person, they can apply to the dromara jury for exit. Exit application process:\",\"The project author needs to write the reason for the project exit in writing or email and email it to pmc@dromara.org.\",\"After the dromara jury receives the application, they will communicate with the project author as soon as possible to confirm the exit intention. If the author insists on exiting, it will be approved for processing.\",\"Please note that if the project applying for exit is a GVP project, you need to contact the Gitee official staff to cancel the GVP and then transfer it back to your personal name. After a successful transfer, contact the Gitee official staff to restore it. Non-GVP projects can be operated directly.\",\"After the project exits, the dromara organization will push announcements on major platforms and community groups to inform, and archive the project's historical records.\",\"Finally, we hope that project authors can communicate with us before considering exiting the dromara organization, point out where the dromara organization is doing poorly, so that we can improve and develop together.\"]},\"253\":{\"h\":\"Rights and Organizational Form\",\"t\":[\"Each sub-project team within the community shares all open source resources, including but not limited to the organizational brand, community official account, official community, exclusive accounts and channels of mainstream technical websites and media.\",\"In principle, each project is self-governing, and the organizational committee is composed of the main person in charge of each project.\",\"Relevant decision-making matters of the dromara organization (designating and modifying rules, joining or exiting projects, etc.) need to be voted on by the organizational committee before execution. Daily affairs are handled by the organization's permanent head.\",\"After making a decision at the organizational level, each project's management team must unconditionally obey the organization, or cooperate with the work and tasks of other projects, so that the entire organization is consistent in terms of publicity activities, task assignments, etc.\",\"The dromara open source organization entered a trial operation from March 2021 to March 2022. This principle is the trial operation guide for the organization. Each sub-project has complete autonomy and management rights during this period, as well as the copyright and actual ownership of the sub-brand of the project, without violating the law, moral principles, plagiarism infringement, and harm to the organization and not having a bad impact on the community and users.\",\"During the trial run, the community will establish a formal committee. For the subsequent development of the community, the management and authority constraints of the sub-projects will be officially launched and will\"]},\"254\":{\"h\":\"The dromara committee has the final interpretation right for the above regulations.\"},\"255\":{\"h\":\"Members\"},\"256\":{\"h\":\"News\"},\"257\":{\"h\":\"Fast Request 2023.2.1-Release\",\"t\":[\"Restful Fast Request是一个类似于 Postman 的 IDEA 插件。它是一个强大的 restful api 工具包插件，可以根据已有的方法帮助您快速、自动生成 url 和 params。 Restful Fast Request = API 调试工具 + API 管理工具 + API 搜索工具。 它有一个漂亮的界面来完成请求、检查服务器响应、存储你的 api 请求和导出 api 请求。插件帮助你在 IDEA 界面内更快更高效得调试你的 API。\",\"Restful Fast Request 为简化 API 调试而生，3 秒调完 Spring 接口不是梦，所以少年，赶紧上号吧\",\"倾听用户的声音，不断提升自我，本次Restful Fast Request更新主要内容如下：\",\"新功能、优化项、修复项\",\"最新域名\",\"UI 简化\",\"api 文档支持保存和打开\",\"bilibili 视频教程直达\",\"自动域名优化\",\"Map 解析优化\",\"show apis 放入到右键菜单\",\"统计页面加入了版本号\",\"url 和 curl 拷贝有 environment 变量的时候 url 没替换变量\",\"curl 以 form-urlencoded 和-d 形式导入解析错乱\",\"申请了域名，叫api buddy，翻译过来是API 伴侣，也挺好记。原老版本功能文档将不再服务！\",\"api-buddy.cn -> 中文站，映射到 gitee pages\",\"api-buddy.com -> 英文站，映射到 github pages\"]},\"258\":{\"h\":\"1.UI 简化\",\"t\":[\"将老版本横向的 3 个组件(method 下拉框,url 输入框,响应下拉框)简化为 1 个,并且移除响应下拉框.增加简捷度\",\"urlInputWithMethod\"]},\"259\":{\"h\":\"2.api 文档支持保存和打开\",\"t\":[\"openDoc\"]},\"260\":{\"h\":\"3.apis 放入到右键菜单\",\"t\":[\"前一个版本在 Controller 中任意位置右键唤起Generate，选择Show apis即可展示当前控制器中的所有 API ，现在直接放入右键减少层级\",\"showApis\"]},\"261\":{\"h\":\"4.统计页面加入了版本号\",\"t\":[\"pluginVersion\",\"还有非常多的细节优化不再一一描述，赶紧升级吧！\",\"请点击 ------------->这里\",\"看完还不赶紧上号？\"]},\"262\":{\"h\":\"Hmily released 2.0.2-Release\"},\"263\":{\"h\":\"Hmily released 2.0.2-Release\",\"t\":[\"Resolved the issue of SpringCloud using Hystrix to configure thread pool.\",\"New issue with SpringCloud embedded transaction calls.\",\"Added Hmily load balancing strategy.\",\"Other bug fixes and code optimizations.\",\"Remove unnecessary third-party JAR packages.\",\"Introduction of zero intrusion mode.\"]},\"264\":{\"h\":\"Hmily's support for the popular RPC framework and Spring.\",\"t\":[\"Dubbo 2.7.0 for all versions below.\",\"SpringCloud Dalston and above, including support for Finchley and Greenwich\",\"All versions of Motan.\",\"All Spring versions up to 3.0.\"]},\"265\":{\"h\":\"Hmily has a load-balancing policy for user RPC clusters in version 2.0.2.\",\"t\":[\"Hmily provides its own implementation of the load-balancing strategy, only for interfaces with @Hmily added\",\"Dubbo cluster configuration with loadbalance=\\\"hmily\\\"\",\" <dubbo:reference timeout=\\\"50000\\\" interface=\\\"org.dromara.hmily.demo.dubbo.account.api.service.AccountService\\\" id=\\\"accountService\\\" retries=\\\"0\\\" check=\\\"false\\\" actives=\\\"20\\\" loadbalance=\\\"hmily\\\"/> \",\"Spring Cloud added to the caller's YML configuration file:\",\"hmily ： ribbon: rule enabled : true \"]},\"266\":{\"h\":\"Documents\",\"t\":[\"Official document: https://dromara.org/website/zh-cn/docs/hmily/index.html\",\"Github: https://github.com/yu199195/hmily\",\"Gitee: https://gitee.com/dromara/hmily\",\"Welcome to Star Fork, provide excellent code and suggestions.\"]},\"267\":{\"h\":\"One year later, the dromara team released version 2.1.1 of the new architecture Hmily distributed transaction framework\",\"t\":[\"Thank you guys for your support all the way, and keep everyone waiting. In this version, our team refactored the entire project, reasonably divided functional modules, added configuration centers, adjusted the underlying storage structure, solved difficult bugs, and supported other new features, and absorbed more outstanding open source community members to join in.\"]},\"268\":{\"h\":\"Architecture\"},\"269\":{\"h\":\"Features\",\"t\":[\"High availability·: Supports abnormal transaction rollback and overtime transaction recovery in distributed scenarios to prevent transaction suspension.\",\"Ease of use: Provide zero-invasive Spring-Boot, Spring-Namespace to quickly integrate with business systems.\",\"High performance: Decentralized design, fully integrated with business systems, naturally supports cluster deployment.\",\"Observability: Performance monitoring of multiple metrics by Metrics, as well as admin management UI .\",\"Multiple RPCs: support Dubbo, SpringCloud, Motan, Sofa-rpc and other well-known RPC frameworks.\",\"Log storage: Support Mysql, Oracle, Mongodb, Redis, Zookeeper, etc.\",\"Complex scenarios: Support RPC nested call transactions.\"]},\"270\":{\"h\":\"Refactoring part\",\"t\":[\"Module division:\",\"Extract the SPI custom module and It's open-the-box.\",\"SPI module that defines multiple storage methods for transaction logs.\",\"SPI module that defines multiple serialization methods for transaction logs.\",\"Add configuration center, support various mainstream configuration centers (Nacos, Apollo, Zookeeper, etc.), and support dynamic refresh of configuration.\",\"Add metrics module to monitor various information at runtime.\",\"Remove the core transaction execution module.\",\"Extract multiple RPC support modules.\",\"Extract the Spring and Spring Boot support modules.\",\"On the dependent package version:\",\"Guava upgraded to 2.9.0.\",\"Curator upgraded to 5.1.0.\",\"Code quality:\",\"Strict check-style code inspection, adhering to the principle of elegance and simplicity (talk is cheap, show you code).\",\"openness :\",\"The community pursues the basic principles of simplicity, happiness, and harmony.\",\"Goal:\",\"Create a high-availability, high-performance, easy-to-use financial-level distributed transaction solution.\"]},\"271\":{\"h\":\"Solve bugs:\",\"t\":[\"The Dubbo framework does not support the use of annotations (spring-boot-starter-dubbo).\",\"The Motan framework does not support the use of annotations.\",\"If Spring Cloud users use Feign and Hystrix to integrate Hmily, the thread switching problem occurs.\",\"In extreme cases, the transaction log serialization is abnormal.\",\"If timeout happen in try , It will cause the transaction suspension bug.\",\"When the confirm and cancel phases are abnormal, the transaction fails to rollback.\",\"In the transaction log storage, two modes of synchronous and asynchronous are supported for users to choose.\"]},\"272\":{\"h\":\"User guide\",\"t\":[\"For Hmily users, it only takes three steps to achieve the BASE transaction between RPC service calls\",\"Add the maven dependencies supported by Hmily for various RPC.\",\"Add Hmily configuration.\",\"Add @Hmily annotation to RPC interface method.\"]},\"273\":{\"h\":\"Dependency changes\",\"t\":[\"There is no change to the dependencies, only the version needs to be upgraded to 2.1.0. Here are examples of Dubbo microservices.\"]},\"274\":{\"h\":\"Dubbo RPC microservices\",\"t\":[\"Dubbo interface service dependency.\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-annotation</artifactId> <version>2.1.0</version> </dependency> \",\"Dubbo service provider depends on version<2.7.\",\" <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-dubbo</artifactId> <version>2.1.0</version> </dependency> or <dependency> <groupId>org.dromara</groupId> <artifactId>hmily-spring-boot-starter-dubbo</artifactId> <version>2.1.0</version> </dependency> \"]},\"275\":{\"h\":\"Hmily configuration changes\",\"t\":[\"In the new version 2.1.0, the hmily-config module has been added to support local and registry modes. The user first needs to create a new file named hmily.yml under the project resouce file. The default path is the project's resource directory, it can also be specified with -Dhmily.conf, or the configuration can be placed in the user.dir directory. Priority level -Dhmily.conf> user.dir> resource. The file format is as follows (The local mode of configuration):\",\" server: configMode: local appName: account-dubbo config: appName: account-dubbo serializer: kryo contextTransmittalMode: threadLocal scheduledThreadMax: 16 scheduledRecoveryDelay: 60 scheduledCleanDelay: 60 scheduledPhyDeletedDelay: 600 scheduledInitDelay: 30 recoverDelayTime: 60 cleanDelayTime: 180 limit: 200 retryMax: 10 bufferSize: 8192 consumerThreads: 16 asyncRepository: true autoSql: true phyDeleted: true storeDays: 3 repository: mysql repository: database: driverClassName: com.mysql.jdbc.Driver url : jdbc:mysql://127.0.0.1:3306/hmily?useUnicode=true&characterEncoding=utf8 username: root password: maxActive: 20 minIdle: 10 connectionTimeout: 30000 idleTimeout: 600000 maxLifetime: 1800000 \",\"If you want to use Nacos as configuration center:\",\"hmily: server: configMode: nacos appName: xxxxx remote: nacos: server: 192.168.3.22:8848 dataId: hmily.properties group: DEFAULT_GROUP timeoutMs: 6000 fileExtension: yml passive: true \",\"If you want use Apollo as configuration center：\",\"hmily: server: configMode: apollo appName: xxxx remote: apollo: appId: hmily-xxxxx configService: http://192.168.3.22:8080 namespace: byin_hmily secret: fileExtension: yml passive: true env: dev meta: http://192.168.3.22:808 \",\"If you want to know more configuration methods and detailed explanations of configuration content, please refer to: https://dromara.org/zh-cn/docs/hmily/config.html .\",\"Changes in the use of annotation methods\",\"In the previous version, RPC interface and implementation only need to add @Hmily annotation, but now It need to be changed, you need to add @Hmily in the RPC interface method, which is used to identify this is a Hmily distributed transaction interface method , besides, you need to add @HmilyTCC to the implementation of the interface, and then specify the method names of confirm and cancel.\",\"Example (say method in Dubbo needs to participate in distributed transactions):\",\"public interface HelloService { @Hmily void say(String hello); } public class HelloServiceImpl implements HelloService { @HmilyTCC(confirmMethod = \\\"sayConfrim\\\", cancelMethod = \\\"sayCancel\\\") public void say(String hello) { System.out.println(\\\"hello world\\\"); } public void sayConfrim(String hello) { System.out.println(\\\" confirm hello world\\\"); } public void sayCancel(String hello) { System.out.println(\\\" cancel hello world\\\"); } } \",\"Example (say method in springcloud needs to participate in distributed transactions):\",\"Spring-cloud service caller FeignClient.\",\"@FeignClient(value = \\\"helle-service\\\") public interface HelloService { @Hmily @RequestMapping(\\\"/helle-service/sayHello\\\") void say(String hello); } \",\"Spring-cloud provider.\",\"@RestController public class HelloController { private final HelloService helloService ; @Autowired public AccountController(HelloService helloService) { this.helloService= helloService; } @RequestMapping(\\\"/sayHello\\\") public void payment(String hello) { return helloService.say(hello); } } public interface HelloService { void say(String hello); } public class HelloServiceImpl implements HelloService { @HmilyTCC(confirmMethod = \\\"sayConfrim\\\", cancelMethod = \\\"sayCancel\\\") public void say(String hello) { System.out.println(\\\"hello world\\\"); } public void sayConfrim(String hello) { System.out.println(\\\" confirm hello world\\\"); } public void sayCancel(String hello) { System.out.println(\\\" cancel hello world\\\"); } } \",\"Changes in transaction log storage structure\",\"Users don't need to care about using or upgrading, the framework will be initialized by default.\"]},\"276\":{\"h\":\"Next version\",\"t\":[\"Because of the adjustment of the architecture, it will be easier to support other modes. In the next version, TAC mode (try-auto-cancel) will be released, which will greatly simplify the use of the framework. You need only to care about the development of confirm and cancel methods, and It's provide better compatibility with the transformation of the old system. Don't worry about additional development tasks, just leave everything to Hmily!\",\"It will support Brpc.\",\"It will support Tars-rpc.\"]},\"277\":{\"h\":\"Community\",\"t\":[\"We uphold the principle of harmony and happiness. If you have ideas and want to contribute to community, come and join us!\",\"Github: https://github.com/dromara/hmily\",\"Gitee: https://gitee.com/dromara/hmily\",\"QQ group: 162614487\"]},\"278\":{\"h\":\"Hmily distributed transaction restart monthly report\",\"t\":[\"Hmily is a flexible distributed transaction architecture with high performance, high avalibility and ease to use. At present, it provides support for Dubbo, Spring-Cloud, Motan, GRPC and other RPC frameworks. In terms of ease of use, it provides zero-intrusive rapid integration of Spring-Boot and Spring-Namespace, with the goal of building a distributed transaction solution of financial level.\"]},\"279\":{\"h\":\"Adjust Hmily architecture with more reasonable module partition\",\"t\":[\"Architecture:\",\"全景图\",\"Architecture adjustment:\",\"Pull out the core execution module, support a variety of transaction mode and mixed use of TCC mode, TAC mode.\",\"The core module removes dependencies on Spring.\",\"Define implementations of various SPI interfaces.\",\"New hmily-rpc : aggregates support for various RPC frameworks.\",\"Added hmily-spi : Hmily framework custom SPI mechanism implementation.\",\"New hmily-bom : resolves version dependency management conflicts.\",\"Added hmily-metrics: monitoring JVM, thread, transaction health, time, etc.\",\"New hmily-TCC : Core implementation of TCC pattern.\",\"Added hmily-TCC : Core implementation of TAC mode.\",\"**SPI module partition: **\",\"Added hmily-repository: transaction log storage module with support (MySQL, Oracle, PostgreSQL, SQL Server, ZooKeeper, Redis, MongoDB, File).\",\"Added hmily-serializer: transaction log serializer module, support (Hessian, JDK, Kryo, Protobuf)\",\"Added hmily-config: config module to support (local mode, Zookeeper, Nacos, Apollo, Etcd).\",\"Added hmily-tac-SQLParser: SQL parsing module under TAC mode\"]},\"280\":{\"h\":\"Gather the Hmily Community Issue and solve bugs.\",\"t\":[\"hmily-bug\",\"For example, in the community, it is gather the problems reported by the community, as well as to cooperate with the community for developing new version.\",\"**Solve bug: **\",\"Dubbo framework does not support annotation (spring-boot-starter-dubbo)\",\"The Motan framework does not support the use of annotations\",\"Exceptions in Spring-Cloud users when integrating Hmily with Hystrix using Feign.\",\"Transaction log serialization exception.\",\"Timeout exception transaction suspension bug.\",\"Transaction timing recovers bugs.\",\"**Added function: **\",\"build: Added travis-ci feature\",\"Transaction log support: Oracle, PostgreSQL, Sqlsever, Mongo, Zookeeper, File, Redis.\",\"Configuration module: new configuration center support for Apollo, ETCD, and Nacos\",\"Demo: Added Motan-RPC to use Hmily distributed transaction.\"]},\"281\":{\"h\":\"Community building\",\"t\":[\"The community adheres to the principles of simplicity, pleasure, elegance, and harmony.\",\"Code guidelines: The code follows the HMILY-CHECKSTYLE standard, and there is plenty of room for flexibility. Talk is cheap,show you code.\",\"Open rule: I hope everyone here can offer good ideas, we can discuss together, review code repeatedly, think about solving bugs, grow happily.\"]},\"282\":{\"h\":\"Recently\",\"t\":[\"Hmily-2.1.0 of the latest architecture will be released (TCC mode only will be supported).\",\"Configuration module\",\"Configuration dynamic refresh function, support all configuration centers.\",\"TAC mode:\",\"sql-parser: accessing Apache-Shardingsphere, Apache-Calcite.\",\"SQL-revert: Under development.\"]},\"283\":{\"h\":\"At last\",\"t\":[\"Good to be here for the season, at this point in time, Hmily-2.2.0 will be released, which will fully support TAC, TCC modes. TAC(Transaction Auto Rollback): With this mode, users no longer have to worry about writing reverse cancel methods like TCC. Greatly reduce the use cost and learning cost. TCC : Stability, reliability has been greatly strengthened, completely solve the problem of transaction suspension.\",\"More RPC framework support: BRPC and more.\",\"Support XA mode.\",\"Github: https://github.com/dromara/hmily\",\"Gitee: https://github.com/shuaiqiyu/hmily\",\"QQ group: 162614487\"]},\"284\":{\"h\":\"Hutool-5.8.0.M1 released, attempting milestone release\",\"t\":[\"Hutool is a small but complete Java utility class library that provides elegant, efficient and convenient tool methods.\"]},\"285\":{\"h\":\"What is Hutool\",\"t\":[\"! [architecture panorama] (/ assets/img/architecture/hutool - framework. PNG)\",\"Originally, this version should have been 5.7.23, but the user raised some issues, which must be resolved by modifying the original code structure:\",\"For example, when the MongoDB client is packaged, the packaged tool class has to be modified due to incompatible modifications to its driver.\",\"The part of the code involved in Bean copy (BeanCopier), due to a parameter failure, thought it was just a simple bug, and later found that there was a problem with the whole design... You can imagine the extent of the crash, liver spent two nights refactoring this part of the code.\",\"When I modified the code, I found that there were many design problems in many parts, and I made small refactoring by the way.\",\"In order to solve the possible impact of each major version upgrade on old users, this version is released in a milestone way, the version is M1 (feel to send a CPU to the user), and it is also to solve the problem of each \\\"radical\\\" upgrade of Hutool (after all, old age, to be stable).\",\"Purchase instead of donation, if you want to support Hutool, you can go to the Hutool home page and click -> click into the surrounding stores to buy Hutool peripheral to support Hutool. Oh, this is more affordable than donation (after all, I do not know how to thank the donor, it is a moral burden...)\",\"Thank you to the Hutool members who discussed and solved a lot of issues together in this release: @阿超 @Cherryrum @Husky\"]},\"286\":{\"h\":\"5.8.0.M1\"},\"287\":{\"h\":\"❌ Incompatible feature\",\"t\":[\"• 【db 】 【 Not backward compatible 】 Added MongoDB4.x support Return MongoClient change (pr#568@Gitee) • 【json】【Possible compatibility issues】 Modify JSONObject structure, inherited from MapWrapper • 【core】【Possible compatibility issues】 Rebuild BeanCopier, create XXXCopier, and delete XXXValueProvider • 【core】【Possible compatibility issues】URLEncoder is deprecated, URLEncoderUtil uses RFC3986 • 【core】【Possible compatibility issues】 Base32 separate encoding and decoding in order to reduce data load, support Hex mode • 【core】【Possible compatibility issues】 Base58 separate encoding and decoding • 【core】【Possible compatibility issues】 Base62 separate encoding and decoding, added inverted mode support • 【core】【compatibility issues】 PunyCode parameter changed from String to Charsequence • 【cron 】 【 Possible compatibility issues 】SimpleValueParser was renamed AbsValueParser and changed to abstract • 【poi 】 【 Possible compatibility problem 】ExcelUtil.getBigWriter Change the return value to BigExcelWriter • 【core】【Possible compatibility issues】 Opt.ofEmptyAble argument changed from List to Collection subclass (pr#580@Gitee) • 【json】【Possible compatibility issues】 When converting JSON to Bean, use JSON's own Settings instead of the default (issue#2212@Github) • 【json】【Possible compatibility issues】isOrder is discarded in JSONConfig, and is all ordered by default\"]},\"288\":{\"h\":\"🐣 New features\",\"t\":[\"• 【http 】 HttpRequest.form is in TableMap mode (issue#I4W427@Gitee) • 【core 】 AnnotationUtil adds getAnnotationAlias (pr#554@Gitee) • 【core 】 FileUtil.extName added special handling for tar.gz (issue#I4W5FS@Gitee) • 【crypto 】 Add XXTEA implementation (issue#I4WH2X@Gitee) • 【core 】 Add Table implementation (issue#2179@Github) • 【core 】 Add UniqueKeySet (issue#I4WUWR@Gitee) • 【core 】 Extension of conversion from Arabic numerals to Chinese to par value of invoice (pr#570@Gitee) • [core] ArrayUtil adds replace method (pr#570@Gitee) • 【core 】 CsvReadConfig Add the custom title line number (issue#2180@Github) • 【core 】 FileAppender Optimizes initial List size (pr#2197@Github) • 【core 】 Base32 adds pad support (pr#2195@Github) • 【core 】 Adds setFields methods to Dict (pr#578@Gitee) • 【db 】 New index related interface to db.meta (pr#563@Gitee) • 【db 】 The length of Column#typeName is removed from the column of Oracle (pr#563@Gitee). • 【poi 】 Optimize ExcelReader for read-only mode (pr#2204@Gitee) • 【poi 】 Optimizes ExcelBase and puts alias in • 【core 】 Improved StrUtil#startWith and endWith performance • 【cron 】 Add CronPatternParser and MatcherTable • 【http 】 GlobalHeaders add system attributes allowUnsafeServerCertChange、allowUnsafeRenegotiation • 【http 】 UserAgentUtil parsing, add MiUI/XiaoMi browser judgment logic (pr#581@Gitee) • 【core 】 FileAppender Add lock structure (pr#2211@Github) • 【poi 】 ExcelReader added construction (pr#2213@Github) • 【core 】 MapUtil provides change function, EnumUtil provides getBy function, enumeration field mapping through lambda (pr#583@Gitee) • 【core 】 CompareUtil adds comparingIndexed (pr#585@Gitee). • 【db 】 DruidDataSource build with custom parameters (issue#I4ZKCW@Gitee) • 【poi 】 ExcelWriter adds addImg overload (issue#2218@Github) • 【bloomFilter】 Added FuncFilter • 【http 】 Added GlobalInterceptor（issue#2217）\"]},\"289\":{\"h\":\"🐞Bug fixed\",\"t\":[\"• 【core 】 Fix ObjectUtil.hasNull passing null returns true (pr#555@Gitee) • 【core 】 Fix NumberConverter number conversion issue (issue#I4WPF4@Gitee) • 【core 】 Fixing problems with ReflectUtil.getMethods Obtaining interface methods (issue#I4WUWR@Gitee) • 【core 】 Fix uppercase conversion issue in NamingCase (pr#572@Gitee) • 【http 】 Fix to GET parameter carrying issue (issue#2189@Github) • 【core 】 Fix the parent path error of FileUtil and FileCopier relative paths (pr#2188@Github) • 【core 】 Fixed invalid fieldNameEditor in CopyOptions (issue#2202@Github) • 【json 】 Fix JSON parsing of Map.Entry • 【core 】 Fix MapConverter map and map conversion compatibility issues • 【poi 】 Solves POI-5.2.x compatibility issues when sax reads • 【core 】 Fixed the intersection problem of judging two time intervals (pr#2210@Github) • 【http 】 Fix tag deletion issue (issue#I4Z7BV@Gitee) • 【core 】 Fix file name with * in Win (pr#584@Gitee) • 【core 】 FileUtil.getMimeType added rar and 7z support (issue#I4ZBN0@Gitee) • 【json 】 JSON fixed invalid transient Settings (issue#2212@Github) • 【core 】 Fix IterUtil.getElementType getting null (issue#2222@Github) • 【core 】 Fix lunar calendar to Gregorian calendar in leap month error (issue#I4ZSGJ@Gitee)\"]},\"290\":{\"h\":\"Community co-construction\",\"t\":[\"We uphold the principle of harmony and happiness, code first, if you have ideas, are willing to grow with us, contribute together, come and join us!\",\"github:https://github.com/dromara/hutool\",\"gitee:https://gitee.com/dromara/hutool\"]},\"291\":{\"h\":\"Soul Gateway released version 1.0.4-RELEASE\"},\"292\":{\"h\":\"Soul Gateway released version 1.0.4-RELEASE\",\"t\":[\"Fix the bug that appeared in the Soul-admin of version 1.0.3.\",\"The serialization method supports custom extensions. The default serialization method has been changed from Kroy to Java serialization method.\",\"Dubbo support.\"]},\"293\":{\"h\":\"Changes Dubbo usage\",\"t\":[\"In the previous version (1.0.2 or 1.0.3), the parameters of Dubbo are passed through the header, and in the 1.0.4 version it is passed through the body.\",\"Relevant document information has been updated.\"]},\"294\":{\"h\":\"Recommendations on using version 1.0.4\",\"t\":[\"Version 1.0.4 supports user-defined plug-in, and supports regular expression matching.\",\"The change of Dubbo parameter transfer and it would be more friendly to use.\"]},\"295\":{\"h\":\"If you used version 1.0.2 before and want to update to version 1.0.4.\",\"t\":[\"Add role field in the plug-in table.\",\"Restart the Soul-admin of version 1.0.4.\",\"Perform synchronization of all plug-ins (because of serialization changes)\",\"Start the soul-web service of version 1.0.4.\"]},\"296\":{\"h\":\"For more information\",\"t\":[\"QQ group: 429951241\",\"Official website document: https://dromara.org/website/zh-cn/docs/soul/soul.html\",\"Github: https://github.com/Dromara/soul\",\"Gitee: https://gitee.com/dromara/soul\"]},\"297\":{\"h\":\"How convenient is the 2.1.X version of Soul Gateway?\",\"t\":[\"It has been a year since I open sourced Soul gateway in October last year, and received many suggestions from you guys in community. It has provided very rich functions after optimization, many of functions are highly cusmized, visualized, and highly extensible, now let's make a summary.\"]},\"298\":{\"h\":\"Plugin\",\"t\":[\"Provides various plug-ins, such as signature, monitoring, rate limiting, circuit breaker, Http proxy, Dubbo proxy, Websocket, etc.\",\"Support users to quickly develop plug-ins.\",\"All plug-in data and switch state support dynamic changes.\"]},\"299\":{\"h\":\"Data Synchronization\",\"t\":[\"Provides three different data synchronization strategies: Http long polling, Zookeeper, and Websocket, allowing users to choose freely.\",\"It is recommended to use Websocket, which is the lightest and more efficient in a cluster environment.\"]},\"300\":{\"h\":\"For Users\",\"t\":[\"First of all, we provide a client package that is convenient for users to access. Users can quickly register their projects to the Soul gateway.\",\"By default, users don't need to care about Soul Gateway's selectors, rules and other configurations.\",\"The user's previous interface is completely zero intrusion, It is only need to change to the domain name of the Soul gateway.\",\"For Dubbo users, the conversion from Http protocol to Dubbo protocol is almost completed by Http.\",\"Soul gataway uses the Http protocol, so it is destined to be cross-language, It is feasible for .Net programmers, PHP programmers to interact with Java program.\",\"For example, if you have a Dubbo interface, the parameter definition is a java bean,\",\"public void insert(final DubboTest dubboTest) { } public class DubboTest implements Serializable { private String id; private String name; } \",\"If you use the Soul gateway to call this method, your Http parameter is to pass a json string in the body, which is no different from a normal http call.\",\"{ \\\"id\\\": \\\"123\\\", \\\"name\\\": \\\"xiaoyu\\\" } \"]},\"301\":{\"h\":\"For Developers\",\"t\":[\"With more and more users, the situation of each company is different. Soul gateway in 2.1.X version are more extensible, making it convenient for developers .\",\"For example, there are may things could be extensible, such as Plug-ins, Filters, Dubbo parameter parser, iphost parser, return results, etc. We know that the default return result of the soul gateway is:\",\"{ \\\"code\\\": 200, \\\"message \\\": \\\"成功!\\\", \\\"data\\\": \\\"helloWorld!\\\" } \",\"However, when using the Soul gateway to call your business system, your business system may define the result that is not confirm the above structure. Maybe your field is called msg, which will cause a different structure and bring confusion to the front-end processing. We have noticed this thing: https://github.com/Dromara/soul/issues/109, now it has been optimized, users can customize the return results to define, the specifics depend on the Soul document.\"]},\"302\":{\"h\":\"What scenarios of Soul gateway are suitable, and what should you pay attention to?\",\"t\":[\"First of all, I think we should follow pragmatism, when you need to use it , then you have monmentum to know it. Thus, where are you need Soul?\"]},\"303\":{\"h\":\"Scenario1: Adimistration back-end\",\"t\":[\"First of all, as rising popularity of microservices, our back-end is divided into many micro-services. I believe that your companies has a back-end management system. I guess they generally have the following architecture.\",\"soul-rpc\",\"It may cause some troubles as follows:\",\"The developers of every microservice are developing based on this, which will become more and more cumbersome.\",\"How to publish without downtime? If you want to publish the commodity module, all other modules will not be able to work at this time.\",\"If a certain module interface requires a lot of requests (multiple deployments are required), and another module does not need it, how can you split it?\",\"Some people may say I can disassemble them into a few web projects. But this will bring new troubles, where to do load balance? Where to do unified certification?\",\"Soul gateway solves all the above problems very well, just register your microservice to Soul gateway. You can do whatever you want. For example, the order module has 2 nodes, and you want to release a new version, you can send request to one of them in the gateway, and update the version in the other node. When the update complete, let the request go though both two nodes. So Java programmer can also do the jod of system operation engineer.\",\"If you need unified authentication, you only need to add an authentication plug-in suitable for your business to the gateway.\",\"soul-admin\"]},\"304\":{\"h\":\"Scenario2: Company entrance gateway (open platform)\",\"t\":[\"If a company wants to do open-platform or an entrance gateway， authentication, rate limiting, circuit breaker, monitoring are indispensable.\",\"If your company is in Dubbo system, when developers have written the Dubbo service, there is no need to add a new web project to provide an interface.\",\"If an interface attacked by a large amount of request, how do you deal with it?\",\"Soul is here to solve the trouble above, this is the purpose of the design. Let’s take a look at the overall architecture diagram.\",\"soul-framework\",\"Soul gateway is implemented using reactive programming. Just look at the weather vane Spring, responsive programming is definitely an important direction in the future. When I was in 2014, I wrote for loop every day. The leader told me to use lambda expressions, which would be the trend of the future. Nowadays, if you are a java programmer but don't know lambda expression, you are out.\",\"soul-framework\"]},\"305\":{\"h\":\"There are many other functions\",\"t\":[\"Support websocket proxy.\",\"Support file upload and download.\",\"You can customize your plug-in development.\"]},\"306\":{\"h\":\"At last\",\"t\":[\"Github: https://github.com/Dromara/soul\",\"Gitee: https://gitee.com/dromara/soul\",\"Document: https://dromara.org/zh-cn/docs/soul/soul.html\",\"QQ group: 429951241\",\"Finally, Soul3.0 has been open sourced, which has been verified in the double 11 concurrency scene for 2 years. I hope It will help you guys.\"]},\"307\":{\"h\":\"【Soul gateway version2.2.0 release】Make high-performance gateways so easy!\",\"t\":[\"Let's take a look at the new features first, and then I would like to share my story.\",\"Completely pluggable architecture design, plug-in hot swap.\",\"Fully supports all versions of Dubbo, Alibaba-Dubbo, Apache-Dubbo.\",\"Support Dubbo generalization call, multi-parameter, complex parameter interface.\",\"Enhance the monitor plug-in and remove the Influxdb, add metrics such as memory, CPU, QPS, TPS, response delay, and support access to Prometheus.\",\"The SpringCloud plugin supports Eureka and Nacos two registration centers.\",\"The waf plugin is enhanced to support black or white lists and mixed modes.\",\"Remove the Hystrix circuit breaker to be an independent plug-in.\",\"Fix the Zookeeper data synchronization bug, and add the data synchronization method implemented by Nacos.\",\"Support multiple kinds of soul-client, such as traditional Spring and Springboot.\",\"Optimize the soul-admin user interface.\",\"Fix load balancing algorithm bug.\",\"Fix uploading large files bug.\",\"etc.\"]},\"308\":{\"h\":\"Experience the new architecture and get a high-availability and high-performance gateway in 10 minutes!\"},\"309\":{\"h\":\"Bootstrap soul-admin\",\"t\":[\"Please download soul-admin.jar, and bootstrap it.\",\"Please access http://localhost:9095/index.html , and the default user name is admin, password is 123456。\",\"> wget https://yu199195.github.io/jar/soul-admin.jar > java -jar soul-admin.jar --spring.datasource.url=\\\"jdbc:mysql://你的url:3306/soul?useUnicode=true&characterEncoding=utf-8&useSSL=false\\\" --spring.datasource.username='you username' --spring.datasource.password='you password' \"]},\"310\":{\"h\":\"Build your own gateway\",\"t\":[\"Firstly, you should create an empty Springboot project, please refer to soul-bootstrap. You can also visit the Spring official website :[https://spring.io/quickstart]\",\"Secondly, please add Maven dependency like follows：\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-webflux</artifactId> <version>2.2.2-RELEASE</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> <version>2.2.2-RELEASE</version> </dependency> <!--soul gateway start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-gateway</artifactId> <version>2.2.0</version> </dependency> <!--soul data sync start use websocket--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-sync-data-websocket</artifactId> <version>2.2.0</version> </dependency> \",\"Please add the following configuration to your application.yaml:\",\"spring: main: allow-bean-definition-overriding: true management: health: defaults: enabled: false soul : sync: websocket : urls: ws://localhost:9095/websocket //Set to youe soul-admin address. \"]},\"311\":{\"h\":\"Experience plug-in hot swap under the new architecture\",\"t\":[\"Q: If I want to use circuit breaker, what should I do?\",\"A: You can add the following dependencies in pom.xml, please access https://dromara.org/zh-cn/docs/soul/soul.html for details.\",\" <!-- soul hystrix plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-hystrix</artifactId> <version>2.2.0</version> </dependency> <!-- soul hystrix plugin end--> \",\"Q: How can I use Dubbo service?\",\"A: If you are using Alibaba-Dubbo, then you should add the following dependencies in pom.xml.\",\" <!--soul alibaba dubbo plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-alibaba-dubbo</artifactId> <version>2.2.0</version> </dependency> <!-- soul alibaba dubbo plugin end--> \",\"If you are using Apache-Dubbo, then you should add the following dependencies in pom.xml.\",\" <!--soul apache dubbo plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-apache-dubbo</artifactId> <version>2.2.0</version> </dependency> <!-- soul apache dubbo plugin end--> \",\"For your inference: https://dromara.org/zh-cn/docs/soul/user-dubbo.html.\",\"Q: What if I want to use the rate limiter function?\",\"A: You can add the following dependencies, for your inference: https://dromara.org/zh-cn/docs/soul/plugin-rateLimiter.html\",\" <!-- soul ratelimiter plugin start--> <dependency> <groupId>org.dromara</groupId> <artifactId>soul-spring-boot-starter-plugin-ratelimiter</artifactId> <version>2.2.0</version> </dependency> <!-- soul ratelimiter plugin end--> \",\"Q: What should I do if I don’t want to use some plug-ins?\",\"A: You can disable or enable the plug-in in the soul-admin. That is hot pluggable.\",\"All in all, If you want to use some plug-ins, then you can add the Maven dependency in pom.xml, but this is not called hot pluggable.\"]},\"312\":{\"h\":\"Features of Soul Gateway\",\"t\":[\"I think the biggest feature is traffic screening and control. No matter how complex the request is, traffic can be filtered, and processed according to various selectors, rules, and matching methods. This process is completely visualized, customized and effective immediately, without any changes to the program.\",\"Configurations is configured in the soul-admin and will be synchronized to the JVM memory of each Soul gateway node. This is also one of the keypoints to the high performance of the Soul gateway cluster. By the way, Http long polling, websocket, and Zookeeper are used to implement cache synchronization between Soul admin and Soul gateway.\",\"Soul gateway uses Reactor code to achieve the independent thread scheduling with low consumption. When we open 10 plug-ins, the delay of all traffic passing through the gateway is 1~2ms.\",\"The plug-in mechanism provides functions such as rate limiting, circuit breaker, black and white list, authentication, etc.\",\"Soul gateway supports A/B test, blue and green release (because all traffic is controlled, this is easy to do).\"]},\"313\":{\"h\":\"What scenarios of Soul gateway are suitable, and what should you pay attention to?\",\"t\":[\"First of all, I think we should follow pragmatism, when you need to use it , then you have monmentum to know it. Thus, where are you need Soul?\"]},\"314\":{\"h\":\"Scenario1: Adimistration back-end\",\"t\":[\"First of all, as rising popularity of microservices, our back-end is divided into many micro-services. I believe that your companies has a back-end management system. I guess they generally have the following architecture.\",\"soul-admin\",\"It may cause some troubles as follows:\",\"The developers of every microservice are developing based on this, which will become more and more cumbersome.\",\"How to publish without downtime? If you want to publish the commodity module, all other modules will not be able to work at this time.\",\"If a certain module interface requires a lot of requests (multiple deployments are required), and another module does not need it, how can you split it?\",\"Some people may say I can disassemble them into a few web projects. But this will bring new troubles, where to do load balance? Where to do unified certification?\",\"Soul gateway solves all the above problems very well, just register your microservice to Soul gateway. You can do whatever you want. For example, the order module has 2 nodes, and you want to release a new version, you can send request to one of them in the gateway, and update the version in the other node. When the update complete, let the request go though both two nodes. So Java programmer can also do the jod of system operation engineer.\",\"If you need unified authentication, you only need to add an authentication plug-in suitable for your business to the gateway.\"]},\"315\":{\"h\":\"Scenario2: Company entrance gateway (open platform)\",\"t\":[\"If a company wants to do open-platform or an entrance gateway， authentication, rate limiting, circuit breaker, monitoring are indispensable.\",\"If your company is in Dubbo system, when developers have written the Dubbo service, there is no need to add a new web project to provide an interface.\",\"If an interface attacked by a large amount of request, how do you deal with it?\",\"Soul is here to solve the trouble above, this is the purpose of the design. Let’s take a look at the overall architecture diagram.\",\"soul-framework\",\"Soul gateway is implemented using reactive programming. Just look at the weather vane Spring, responsive programming is definitely an important direction in the future. When I was in 2014, I wrote for loop every day. The leader told me to use lambda expressions, which would be the trend of the future. Nowadays, if you are a java programmer but don't know lambda expression, you are out.\"]},\"316\":{\"h\":\"My open source story\",\"t\":[\"I started writing open source projects when I was in 2017. At first, I discussed distributed transactions \\\"LCN\\\" with Wang Liang. Later, I wrote distributed transaction middleware such as Hmily, Raincat, Myth, etc., and then wrote the Soul gateway, I have encountered many interesting things along the way, but also suffered from many novice users. The general feeling is that high extensiable, and pluggable design are really important for a good open source project. Here are some cases.\",\"Case 1: Soul gateway only supports Zookeeper at the beginning of data synchronization. Some users have reported that we do not have Zookeeper, What should we do?\",\"Case 2: Soul gateway supports Dubbo, but some users are Alibaba-Dubbo and some users are Apache-Dubbo, What should we do?\",\"Case 3: The clients provided by soul at the beginning are all based on Springboot. Some users are traditional Spring. What should we do?\",\"So plug-in design and SPI pluggable design is imperative.\",\"SPI VS pluggability\",\"It is true that the SPI expansion is the cornerstone of pluggability, but they are not completely equivalent. Give an example: If we store a piece of data first, then you have set the SPI interface, and there are many ways to achieve it, such as Mysql, Mongodb, Elasticseach, Zookeeper, etc. Now you have to consider whether to combine it in the project or put it in different Projects, packaged and loaded on demand? These are all things to be considered, so the SPI method cannot be a sure card.\",\"checkStyle\",\"Strict code specification is not only a respect for framework users in source code learning but alos an open source attitude.\",\"Strict code specifications make people look comfortable and make it easier for people to understand the entire code.\",\"I do hope that when you submit a PR, the local installation should be successful.\",\"Participate in open source\",\"At present, I mainly focus on Apache ShardingSphere, which is the first top-level project on database sub-database and sub-table organized by Chinese in Apache. Welcome everyone to participate. https://github.com/apache/shardingsphere.\",\"The Chinese people lag far behind in terms of open source and technology as large as chips and as small as MATLAB. I also hope that everyone has an open source mentality, participates in open source, learns technology, propagates ideas, and continues to learn for the future!\"]},\"317\":{\"h\":\"Projects\"}},\"dirtCount\":0,\"index\":[[\"你的url\",{\"1\":{\"309\":1}}],[\"成功\",{\"1\":{\"301\":1}}],[\"🐞bug\",{\"0\":{\"289\":1}}],[\"🐣\",{\"0\":{\"288\":1}}],[\"❌\",{\"0\":{\"287\":1}}],[\"阿超\",{\"1\":{\"285\":1}}],[\"全景图\",{\"1\":{\"279\":1}}],[\"全调用\",{\"1\":{\"104\":1}}],[\"看完还不赶紧上号\",{\"1\":{\"261\":1}}],[\"请点击\",{\"1\":{\"261\":1}}],[\"请求\",{\"1\":{\"257\":1}}],[\"请求和导出\",{\"1\":{\"257\":1}}],[\"赶紧升级吧\",{\"1\":{\"261\":1}}],[\"赶紧上号吧\",{\"1\":{\"257\":1}}],[\"还有非常多的细节优化不再一一描述\",{\"1\":{\"261\":1}}],[\"还没有注册过\",{\"1\":{\"79\":1,\"81\":1}}],[\"现在直接放入右键减少层级\",{\"1\":{\"260\":1}}],[\"选择show\",{\"1\":{\"260\":1}}],[\"前一个版本在\",{\"1\":{\"260\":1}}],[\"增加简捷度\",{\"1\":{\"258\":1}}],[\"并且移除响应下拉框\",{\"1\":{\"258\":1}}],[\"并判断是否与接口符合\",{\"1\":{\"123\":1}}],[\"个\",{\"1\":{\"258\":1}}],[\"个组件\",{\"1\":{\"258\":1}}],[\"响应下拉框\",{\"1\":{\"258\":1}}],[\"输入框\",{\"1\":{\"258\":1}}],[\"下拉框\",{\"1\":{\"258\":1}}],[\"英文站\",{\"1\":{\"257\":1}}],[\"映射到\",{\"1\":{\"257\":2}}],[\"原老版本功能文档将不再服务\",{\"1\":{\"257\":1}}],[\"也挺好记\",{\"1\":{\"257\":1}}],[\"伴侣\",{\"1\":{\"257\":1}}],[\"翻译过来是api\",{\"1\":{\"257\":1}}],[\"叫api\",{\"1\":{\"257\":1}}],[\"申请了域名\",{\"1\":{\"257\":1}}],[\"形式导入解析错乱\",{\"1\":{\"257\":1}}],[\"以\",{\"1\":{\"257\":1}}],[\"以及加载器\",{\"1\":{\"123\":1}}],[\"没替换变量\",{\"1\":{\"257\":1}}],[\"没有甄别作用\",{\"1\":{\"127\":1}}],[\"变量的时候\",{\"1\":{\"257\":1}}],[\"拷贝有\",{\"1\":{\"257\":1}}],[\"统计页面加入了版本号\",{\"0\":{\"261\":1},\"1\":{\"257\":1}}],[\"放入到右键菜单\",{\"0\":{\"260\":1},\"1\":{\"257\":1}}],[\"自动域名优化\",{\"1\":{\"257\":1}}],[\"自动生成\",{\"1\":{\"257\":1}}],[\"视频教程直达\",{\"1\":{\"257\":1}}],[\"文档支持保存和打开\",{\"0\":{\"259\":1},\"1\":{\"257\":1}}],[\"文章内部有报错\",{\"0\":{\"75\":1},\"1\":{\"54\":1,\"56\":3,\"57\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":2,\"66\":2,\"75\":1,\"88\":3,\"169\":1}}],[\"简化为\",{\"1\":{\"258\":1}}],[\"简化\",{\"0\":{\"258\":1},\"1\":{\"257\":1}}],[\"修复项\",{\"1\":{\"257\":1}}],[\"优化项\",{\"1\":{\"257\":1}}],[\"新功能\",{\"1\":{\"257\":1}}],[\"本次restful\",{\"1\":{\"257\":1}}],[\"不断提升自我\",{\"1\":{\"257\":1}}],[\"不匹配此\",{\"1\":{\"127\":1}}],[\"倾听用户的声音\",{\"1\":{\"257\":1}}],[\"所以少年\",{\"1\":{\"257\":1}}],[\"所有数据类型的\",{\"1\":{\"104\":1}}],[\"接口不是梦\",{\"1\":{\"257\":1}}],[\"秒调完\",{\"1\":{\"257\":1}}],[\"为简化\",{\"1\":{\"257\":1}}],[\"界面内更快更高效得调试你的\",{\"1\":{\"257\":1}}],[\"存储你的\",{\"1\":{\"257\":1}}],[\"检查服务器响应\",{\"1\":{\"257\":1}}],[\"它有一个漂亮的界面来完成请求\",{\"1\":{\"257\":1}}],[\"它是一个强大的\",{\"1\":{\"257\":1}}],[\"搜索工具\",{\"1\":{\"257\":1}}],[\"管理工具\",{\"1\":{\"257\":1}}],[\"管理器中\",{\"1\":{\"126\":1}}],[\"调试而生\",{\"1\":{\"257\":1}}],[\"调试工具\",{\"1\":{\"257\":1}}],[\"调用构造器初始化对象\",{\"1\":{\"123\":1}}],[\"调用自定义的\",{\"1\":{\"120\":1}}],[\"调用\",{\"1\":{\"104\":1,\"126\":1}}],[\"和\",{\"1\":{\"257\":3}}],[\"可以根据已有的方法帮助您快速\",{\"1\":{\"257\":1}}],[\"可能存在多台机器需要负载均衡的场景\",{\"1\":{\"81\":1}}],[\"工具包插件\",{\"1\":{\"257\":1}}],[\"插件帮助你在\",{\"1\":{\"257\":1}}],[\"插件\",{\"1\":{\"257\":1}}],[\"$invokeasync\",{\"1\":{\"234\":1,\"237\":2}}],[\"$invoke\",{\"1\":{\"234\":2,\"241\":2,\"242\":2}}],[\"^\",{\"1\":{\"234\":1}}],[\"端\",{\"1\":{\"234\":2}}],[\"`enabled`\",{\"1\":{\"226\":1}}],[\"`date\",{\"1\":{\"226\":2}}],[\"`parameter\",{\"1\":{\"226\":1}}],[\"`path\",{\"1\":{\"226\":1}}],[\"`path`\",{\"1\":{\"226\":1}}],[\"`method\",{\"1\":{\"226\":1}}],[\"`meta\",{\"1\":{\"226\":1}}],[\"`service\",{\"1\":{\"226\":1}}],[\"`rpc\",{\"1\":{\"226\":2}}],[\"`app\",{\"1\":{\"226\":1}}],[\"`id`\",{\"1\":{\"226\":2}}],[\"└─handler\",{\"1\":{\"221\":1}}],[\"└─resilience4j\",{\"1\":{\"221\":1}}],[\"├─factory\",{\"1\":{\"221\":1}}],[\"├─executor\",{\"1\":{\"221\":1}}],[\"├─conf\",{\"1\":{\"221\":1}}],[\"├─build\",{\"1\":{\"221\":1}}],[\"│\",{\"1\":{\"221\":12}}],[\"~\",{\"1\":{\"164\":13}}],[\"外层调用会包装到\",{\"1\":{\"136\":1}}],[\"结构并组装成\",{\"1\":{\"136\":1}}],[\"读出\",{\"1\":{\"136\":1}}],[\"解析优化\",{\"1\":{\"257\":1}}],[\"解析资源文件\",{\"1\":{\"136\":1}}],[\"解析出资源文件中写入的实现类类名\",{\"1\":{\"123\":1}}],[\"二层缓存之一\",{\"1\":{\"134\":2}}],[\"一层缓存\",{\"1\":{\"134\":1}}],[\"向\",{\"1\":{\"129\":1}}],[\"该类加载时会在静态块中\",{\"1\":{\"129\":1}}],[\"反射\",{\"1\":{\"129\":1}}],[\"反射得到\",{\"1\":{\"123\":1}}],[\"最新域名\",{\"1\":{\"257\":1}}],[\"最外层会继续尝试下个\",{\"1\":{\"127\":1}}],[\"最关键的点在这行\",{\"1\":{\"127\":1}}],[\"通过匹配路径头做筛选\",{\"1\":{\"127\":1}}],[\"约定大于配置\",{\"1\":{\"127\":1}}],[\"筛选\",{\"1\":{\"127\":1}}],[\"筛选工作其实在实现类自身的\",{\"1\":{\"127\":1}}],[\"方法中\",{\"1\":{\"127\":1}}],[\"仅是通过\",{\"1\":{\"127\":1}}],[\"注册\",{\"1\":{\"129\":1}}],[\"注册到变量中\",{\"1\":{\"126\":1}}],[\"注入各类型订阅器到\",{\"1\":{\"104\":1}}],[\"实现类\",{\"1\":{\"126\":1}}],[\"实现类注册到\",{\"1\":{\"126\":1}}],[\"缓存\",{\"1\":{\"126\":1}}],[\"将老版本横向的\",{\"1\":{\"258\":1}}],[\"将此\",{\"1\":{\"126\":1}}],[\"将初始化的对象放入hash缓存\",{\"1\":{\"123\":1}}],[\"的路径则返回null\",{\"1\":{\"127\":1}}],[\"的思想\",{\"1\":{\"127\":1}}],[\"的连接方式\",{\"1\":{\"127\":1}}],[\"的\",{\"1\":{\"126\":1,\"257\":1}}],[\"的注册方法\",{\"1\":{\"126\":1}}],[\"的实现\",{\"1\":{\"126\":1}}],[\"初始化\",{\"1\":{\"127\":1}}],[\"初始化实现类\",{\"1\":{\"126\":1}}],[\"初始化对象\",{\"1\":{\"123\":1}}],[\"迭代时实际会\",{\"1\":{\"126\":1}}],[\"复用\",{\"1\":{\"123\":1}}],[\"关键步骤\",{\"1\":{\"123\":1}}],[\"获取一个类名\",{\"1\":{\"123\":1}}],[\"获取当前的类加载器\",{\"1\":{\"123\":1}}],[\"加载资源文件\",{\"1\":{\"123\":1}}],[\"传入关键的接口\",{\"1\":{\"123\":1}}],[\"创建懒加载迭代器\",{\"1\":{\"123\":1}}],[\"上面都是将信息放入对象实例属性中\",{\"1\":{\"123\":1}}],[\"对象并放入缓存\",{\"1\":{\"132\":1}}],[\"对象\",{\"1\":{\"123\":2}}],[\"说明每次调用都使用新的\",{\"1\":{\"123\":1}}],[\"我们自己的通常是弟中弟\",{\"1\":{\"123\":1}}],[\"马在跑\",{\"1\":{\"122\":1}}],[\"狗在跑\",{\"1\":{\"122\":1}}],[\"框架的原理与实现\",{\"1\":{\"121\":1}}],[\"章\",{\"1\":{\"121\":1}}],[\"第\",{\"1\":{\"121\":1}}],[\"得到一个子类\",{\"1\":{\"120\":1}}],[\"长轮询篇\",{\"1\":{\"105\":1}}],[\"后台与网关数据同步\",{\"1\":{\"105\":1}}],[\"中任意位置右键唤起generate\",{\"1\":{\"260\":1}}],[\"中文站\",{\"1\":{\"257\":1}}],[\"中\",{\"1\":{\"104\":1}}],[\"|client\",{\"1\":{\"234\":1}}],[\"|genericfilter\",{\"1\":{\"234\":2}}],[\"|genericimplfilter\",{\"1\":{\"234\":2}}],[\"||\",{\"1\":{\"93\":2,\"123\":1,\"151\":2,\"180\":1,\"185\":2,\"195\":2,\"207\":1,\"214\":1,\"221\":1,\"237\":1,\"241\":1,\"242\":3}}],[\"|\",{\"1\":{\"82\":1,\"139\":1,\"234\":114}}],[\"数据格式\",{\"1\":{\"81\":1}}],[\"更新数据库\",{\"1\":{\"81\":1}}],[\"字段中\",{\"1\":{\"81\":1}}],[\"字段存储这个接口真实节点信息\",{\"1\":{\"81\":1}}],[\"把新节点加入到\",{\"1\":{\"81\":1}}],[\"如果没有则新建\",{\"1\":{\"132\":1}}],[\"如果\",{\"1\":{\"127\":1}}],[\"如果不是同一个节点\",{\"1\":{\"81\":1}}],[\"如果相同直接返回\",{\"1\":{\"81\":1}}],[\"如果已经至少有1个服务器节点已接入\",{\"1\":{\"81\":1}}],[\"区分\",{\"1\":{\"81\":1}}],[\"使用\",{\"1\":{\"81\":1}}],[\"判断是否是同一个节点\",{\"1\":{\"81\":1}}],[\"会匹配\",{\"1\":{\"127\":1}}],[\"会根据传入的\",{\"1\":{\"127\":1}}],[\"会进到这里\",{\"1\":{\"81\":1}}],[\"会到这里\",{\"1\":{\"81\":1}}],[\"时会进来\",{\"1\":{\"81\":1}}],[\"但第1个服务器节点接入\",{\"1\":{\"81\":1}}],[\"这里就是采用\",{\"1\":{\"127\":1}}],[\"这里就是\",{\"1\":{\"126\":1}}],[\"这里在\",{\"1\":{\"80\":1,\"82\":1}}],[\"这行才是关键调用\",{\"1\":{\"123\":1}}],[\"这个接口虽然之前注册过\",{\"1\":{\"81\":1}}],[\"或新节点启动\",{\"1\":{\"81\":1}}],[\"已接入的业务系统重启\",{\"1\":{\"81\":1}}],[\"已经注册过\",{\"1\":{\"79\":1}}],[\"是否符合其所在\",{\"1\":{\"127\":1}}],[\"是否已经注册过\",{\"1\":{\"79\":1,\"81\":1}}],[\"是不是可以考虑挪出去一次性批量插入\",{\"1\":{\"80\":1,\"82\":1}}],[\"层插入数据\",{\"1\":{\"80\":1,\"82\":1}}],[\"循环里调用\",{\"1\":{\"80\":1,\"82\":1}}],[\"业务系统重启了会到这里\",{\"1\":{\"79\":1}}],[\"到数据库里查询\",{\"1\":{\"79\":1,\"81\":1}}],[\"根据加载类对象取出缓存中数据\",{\"1\":{\"132\":1}}],[\"根据\",{\"1\":{\"79\":1,\"81\":1}}],[\"✗\",{\"1\":{\"65\":2}}],[\"➜\",{\"1\":{\"65\":2}}],[\"待补\",{\"0\":{\"75\":1},\"1\":{\"54\":1,\"56\":3,\"57\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":2,\"66\":2,\"75\":1,\"88\":3,\"169\":1}}],[\"7z\",{\"1\":{\"289\":1}}],[\"798\",{\"1\":{\"164\":2}}],[\"7\",{\"1\":{\"155\":1,\"219\":5,\"228\":1,\"264\":1,\"274\":1,\"285\":1}}],[\"764\",{\"1\":{\"164\":1}}],[\"761\",{\"1\":{\"155\":4}}],[\"762\",{\"1\":{\"57\":1}}],[\"70\",{\"1\":{\"219\":1}}],[\"70mb\",{\"1\":{\"65\":1}}],[\"70bad5ebb1cf6e3fc55278eef2df42f3\",{\"1\":{\"48\":2}}],[\"70b269257d47f0f6404ae7b7e976d8f1\",{\"1\":{\"48\":2}}],[\"74\",{\"1\":{\"65\":2}}],[\"758\",{\"1\":{\"164\":1}}],[\"75f487d20c6c\",{\"1\":{\"164\":4}}],[\"752\",{\"1\":{\"155\":1}}],[\"756\",{\"1\":{\"64\":2}}],[\"755\",{\"1\":{\"64\":1}}],[\"73\",{\"1\":{\"33\":1,\"46\":1}}],[\"q\",{\"1\":{\"311\":4}}],[\"qsli\",{\"1\":{\"244\":1}}],[\"qps\",{\"1\":{\"211\":3,\"214\":8,\"307\":1}}],[\"qq\",{\"1\":{\"46\":1,\"277\":1,\"283\":1,\"296\":1,\"306\":1}}],[\"quality\",{\"1\":{\"270\":1}}],[\"quite\",{\"1\":{\"37\":1,\"164\":1}}],[\"quickstart\",{\"1\":{\"310\":1}}],[\"quick\",{\"1\":{\"28\":1,\"92\":1}}],[\"quickly\",{\"1\":{\"19\":1,\"269\":1,\"298\":1,\"300\":1}}],[\"queuing\",{\"1\":{\"211\":3,\"214\":2}}],[\"queue\",{\"1\":{\"35\":1,\"48\":1,\"100\":1,\"101\":3,\"199\":1,\"211\":1,\"214\":2}}],[\"queryparams\",{\"1\":{\"180\":2}}],[\"query\",{\"1\":{\"48\":2,\"70\":2,\"235\":1}}],[\"queries\",{\"1\":{\"40\":1}}],[\"question\",{\"0\":{\"37\":1,\"38\":1},\"1\":{\"48\":1,\"112\":1,\"122\":1,\"127\":1,\"211\":1}}],[\"questions\",{\"0\":{\"194\":1},\"1\":{\"28\":1,\"101\":1,\"124\":1,\"211\":1}}],[\"xa\",{\"1\":{\"283\":1}}],[\"x\",{\"0\":{\"297\":1},\"1\":{\"123\":5,\"184\":2,\"287\":1,\"289\":1,\"301\":1}}],[\"xxtea\",{\"1\":{\"288\":1}}],[\"xxxvalueprovider\",{\"1\":{\"287\":1}}],[\"xxxcopier\",{\"1\":{\"287\":1}}],[\"xxxx\",{\"1\":{\"275\":1}}],[\"xxxxx\",{\"1\":{\"275\":2}}],[\"xxx\",{\"1\":{\"118\":1,\"251\":1}}],[\"xx\",{\"1\":{\"86\":3}}],[\"xml\",{\"0\":{\"144\":1},\"1\":{\"43\":1,\"58\":1,\"59\":1,\"86\":1,\"154\":1,\"164\":2,\"202\":1,\"203\":1,\"311\":4}}],[\"xiaomi\",{\"1\":{\"288\":1}}],[\"xiaobai\",{\"1\":{\"164\":1}}],[\"xiaoyu\",{\"1\":{\"7\":1,\"11\":1,\"14\":1,\"20\":1,\"25\":1,\"33\":1,\"35\":1,\"36\":1,\"40\":1,\"43\":1,\"46\":1,\"110\":1,\"112\":1,\"156\":2,\"300\":1}}],[\"xiangjun\",{\"1\":{\"14\":1}}],[\"xia\",{\"1\":{\"14\":1}}],[\"+plugin\",{\"1\":{\"179\":2}}],[\"+8\",{\"1\":{\"147\":2}}],[\"+=\",{\"1\":{\"90\":1,\"91\":1}}],[\"+\",{\"1\":{\"35\":1,\"65\":2,\"77\":1,\"80\":1,\"89\":3,\"92\":4,\"97\":1,\"104\":3,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"123\":7,\"139\":1,\"156\":1,\"165\":1,\"176\":4,\"197\":3,\"200\":2,\"214\":4,\"230\":1,\"234\":40,\"242\":3,\"257\":2}}],[\"==\",{\"1\":{\"85\":1,\"91\":2,\"93\":3,\"98\":1,\"114\":1,\"123\":6,\"127\":1,\"137\":1,\"139\":8,\"172\":1,\"182\":1,\"185\":3,\"197\":1,\"200\":2,\"207\":1,\"214\":4,\"221\":3,\"241\":2,\"242\":3}}],[\"=1\",{\"1\":{\"65\":2}}],[\"=\",{\"1\":{\"35\":11,\"36\":7,\"39\":2,\"40\":4,\"43\":9,\"48\":5,\"70\":1,\"77\":3,\"78\":2,\"79\":11,\"80\":6,\"81\":11,\"82\":10,\"85\":8,\"86\":5,\"87\":6,\"89\":5,\"90\":9,\"91\":20,\"92\":5,\"93\":4,\"97\":6,\"98\":4,\"100\":10,\"104\":22,\"105\":13,\"109\":6,\"111\":3,\"112\":12,\"113\":5,\"114\":4,\"116\":3,\"117\":8,\"118\":2,\"120\":2,\"121\":1,\"122\":3,\"123\":20,\"126\":4,\"127\":7,\"129\":8,\"132\":4,\"134\":3,\"135\":3,\"136\":2,\"137\":3,\"139\":29,\"147\":4,\"151\":5,\"155\":4,\"156\":13,\"161\":7,\"162\":2,\"165\":6,\"166\":5,\"172\":14,\"174\":1,\"175\":3,\"176\":4,\"177\":5,\"179\":3,\"180\":6,\"182\":8,\"183\":10,\"184\":8,\"185\":4,\"195\":5,\"197\":9,\"200\":19,\"207\":14,\"214\":14,\"220\":2,\"221\":17,\"226\":4,\"230\":2,\"232\":1,\"234\":1,\"235\":2,\"236\":8,\"237\":8,\"238\":3,\"241\":5,\"242\":18,\"257\":1,\"275\":5}}],[\"90\",{\"1\":{\"219\":1}}],[\"9095\",{\"1\":{\"48\":1,\"56\":1,\"59\":1,\"68\":1,\"96\":2,\"108\":1,\"309\":1,\"310\":1}}],[\"95\",{\"1\":{\"164\":1,\"219\":1}}],[\"9\",{\"1\":{\"164\":1,\"179\":1,\"219\":1,\"270\":1}}],[\"99\",{\"1\":{\"219\":2}}],[\"990\",{\"1\":{\"164\":1}}],[\"996\",{\"1\":{\"155\":1}}],[\"977\",{\"1\":{\"64\":1}}],[\"976\",{\"1\":{\"64\":2}}],[\"93\",{\"1\":{\"33\":2,\"46\":1,\"65\":1}}],[\"924\",{\"1\":{\"57\":1}}],[\"92\",{\"1\":{\"33\":2,\"46\":2}}],[\"9195\",{\"1\":{\"57\":1,\"61\":1,\"64\":1,\"65\":2,\"68\":1,\"73\":1,\"164\":1,\"179\":1,\"193\":1,\"219\":1,\"220\":1}}],[\"91\",{\"1\":{\"33\":2,\"46\":1}}],[\"98kb\",{\"1\":{\"65\":1}}],[\"98\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"65\":1,\"219\":1}}],[\"<dubbo\",{\"1\":{\"233\":1,\"265\":1}}],[\"<dependency>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"<string\",{\"1\":{\"195\":1}}],[\"<s>\",{\"1\":{\"123\":2}}],[\"<generated>\",{\"1\":{\"164\":3}}],[\"<groupid>io\",{\"1\":{\"217\":1}}],[\"<groupid>org\",{\"1\":{\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":1,\"203\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"<groupid>com\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"164\":1}}],[\"<init>\",{\"1\":{\"164\":1}}],[\"<=\",{\"1\":{\"105\":1}}],[\"<二>\",{\"1\":{\"105\":1}}],[\"<t>\",{\"1\":{\"97\":1,\"132\":1,\"221\":2}}],[\"<context\",{\"1\":{\"43\":1}}],[\"<artifactid>spring\",{\"1\":{\"310\":2}}],[\"<artifactid>soul\",{\"1\":{\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":1,\"203\":1,\"218\":1,\"228\":1,\"230\":1,\"310\":2,\"311\":4}}],[\"<artifactid>curator\",{\"1\":{\"228\":3}}],[\"<artifactid>dubbo<\",{\"1\":{\"228\":1}}],[\"<artifactid>resilience4j\",{\"1\":{\"217\":1}}],[\"<artifactid>nacos\",{\"1\":{\"164\":1}}],[\"<artifactid>hmily\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"274\":3}}],[\"<aop\",{\"1\":{\"43\":1}}],[\"<version>2\",{\"1\":{\"228\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"<version>$\",{\"1\":{\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":4,\"230\":1}}],[\"<version>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1}}],[\"<<高可用可伸缩微服务架构>>\",{\"1\":{\"121\":1}}],[\"<<\",{\"1\":{\"36\":1,\"43\":2}}],[\"<\",{\"1\":{\"33\":13,\"35\":2,\"43\":10,\"44\":2,\"45\":2,\"46\":6,\"59\":2,\"86\":3,\"89\":1,\"90\":2,\"104\":1,\"105\":1,\"122\":1,\"123\":1,\"144\":4,\"154\":3,\"161\":2,\"164\":4,\"177\":1,\"179\":1,\"203\":2,\"217\":2,\"218\":2,\"228\":9,\"230\":2,\"234\":2,\"235\":1,\"242\":2,\"274\":3,\"310\":6,\"311\":12}}],[\"<property\",{\"1\":{\"33\":43,\"43\":11}}],[\"<bean\",{\"1\":{\"33\":7,\"43\":2}}],[\">这里\",{\"1\":{\"261\":1}}],[\">>>\",{\"1\":{\"134\":1,\"136\":1}}],[\">>\",{\"1\":{\"132\":1,\"136\":1,\"139\":7}}],[\">=\",{\"1\":{\"104\":1,\"200\":1}}],[\">\",{\"1\":{\"33\":62,\"35\":1,\"36\":2,\"39\":2,\"40\":1,\"43\":18,\"48\":2,\"80\":1,\"82\":2,\"86\":4,\"90\":2,\"91\":3,\"92\":4,\"93\":1,\"100\":2,\"104\":2,\"105\":1,\"118\":3,\"123\":1,\"127\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":1,\"137\":2,\"139\":4,\"144\":2,\"147\":1,\"151\":1,\"154\":1,\"160\":1,\"161\":4,\"162\":4,\"165\":4,\"166\":3,\"175\":3,\"177\":1,\"179\":1,\"182\":2,\"184\":4,\"185\":1,\"197\":5,\"202\":2,\"207\":4,\"212\":1,\"214\":6,\"221\":3,\"233\":1,\"234\":3,\"235\":1,\"237\":3,\"238\":1,\"241\":1,\"242\":2,\"257\":2,\"265\":1,\"285\":1,\"309\":2,\"310\":2,\"311\":8}}],[\"4409382\",{\"1\":{\"244\":1}}],[\"442\",{\"1\":{\"65\":1}}],[\"471\",{\"1\":{\"237\":1}}],[\"472ms\",{\"1\":{\"219\":1}}],[\"46\",{\"1\":{\"219\":2}}],[\"460\",{\"1\":{\"64\":3}}],[\"4jplugin\",{\"1\":{\"221\":1}}],[\"4j\",{\"0\":{\"218\":1},\"1\":{\"216\":1}}],[\"4564034\",{\"1\":{\"244\":1}}],[\"45\",{\"1\":{\"214\":1}}],[\"459\",{\"1\":{\"65\":1}}],[\"43b9\",{\"1\":{\"164\":4}}],[\"49\",{\"1\":{\"164\":2}}],[\"49mb\",{\"1\":{\"65\":1}}],[\"493\",{\"1\":{\"65\":1}}],[\"41\",{\"1\":{\"65\":1}}],[\"486269\",{\"1\":{\"65\":1}}],[\"48\",{\"1\":{\"64\":18,\"155\":9}}],[\"429951241\",{\"1\":{\"296\":1,\"306\":1}}],[\"429\",{\"1\":{\"193\":1,\"197\":1,\"214\":2}}],[\"42\",{\"1\":{\"61\":3}}],[\"4\",{\"0\":{\"32\":1,\"40\":1,\"54\":1,\"66\":1,\"110\":1,\"261\":1,\"291\":1,\"292\":1,\"294\":1,\"295\":1},\"1\":{\"33\":1,\"35\":1,\"43\":1,\"48\":1,\"91\":1,\"106\":1,\"114\":1,\"166\":1,\"179\":1,\"200\":1,\"219\":6,\"226\":1,\"293\":1,\"294\":1,\"295\":2}}],[\"404\",{\"1\":{\"220\":1}}],[\"401\",{\"1\":{\"164\":1}}],[\"4094\",{\"1\":{\"35\":1}}],[\"4096\",{\"1\":{\"33\":1,\"43\":1}}],[\"40\",{\"1\":{\"11\":2,\"14\":2,\"64\":6,\"65\":2}}],[\"36\",{\"1\":{\"219\":2}}],[\"363\",{\"1\":{\"164\":1}}],[\"3639\",{\"1\":{\"65\":1}}],[\"379336\",{\"1\":{\"219\":9}}],[\"37\",{\"1\":{\"164\":1,\"219\":2}}],[\"37ms\",{\"1\":{\"65\":1}}],[\"31\",{\"1\":{\"82\":2,\"155\":1}}],[\"317\",{\"1\":{\"64\":3}}],[\"38\",{\"1\":{\"64\":3,\"219\":2}}],[\"35\",{\"1\":{\"64\":3,\"155\":7,\"219\":1}}],[\"34\",{\"1\":{\"64\":3,\"155\":9}}],[\"390\",{\"1\":{\"65\":1}}],[\"39\",{\"1\":{\"48\":1,\"64\":3,\"82\":2,\"219\":2}}],[\"33\",{\"1\":{\"48\":1}}],[\"3306\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"275\":1,\"309\":1}}],[\"32\",{\"1\":{\"33\":2}}],[\"3\",{\"0\":{\"31\":1,\"39\":1,\"53\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":2,\"66\":1,\"83\":1,\"109\":1,\"162\":1,\"174\":1,\"175\":1,\"176\":2,\"260\":1},\"1\":{\"33\":3,\"43\":2,\"46\":1,\"114\":1,\"121\":1,\"164\":1,\"179\":1,\"182\":1,\"183\":1,\"184\":1,\"200\":1,\"214\":3,\"220\":1,\"241\":1,\"242\":1,\"257\":1,\"258\":1,\"264\":1,\"275\":4,\"292\":1,\"293\":1,\"316\":1}}],[\"308\",{\"1\":{\"201\":1,\"205\":1,\"207\":1}}],[\"30000\",{\"1\":{\"218\":1,\"275\":1}}],[\"3000l\",{\"1\":{\"184\":1}}],[\"3000\",{\"1\":{\"82\":1}}],[\"30s\",{\"1\":{\"65\":2,\"104\":1,\"105\":1}}],[\"30\",{\"1\":{\"11\":1,\"14\":1,\"48\":1,\"65\":2,\"104\":1,\"174\":3,\"178\":1,\"275\":1}}],[\"vs\",{\"1\":{\"316\":1}}],[\"v\",{\"1\":{\"133\":1,\"136\":1,\"139\":8,\"175\":2,\"214\":1,\"219\":1,\"221\":1}}],[\"violating\",{\"1\":{\"253\":1}}],[\"visualized\",{\"1\":{\"297\":1,\"312\":1}}],[\"visual\",{\"1\":{\"225\":1}}],[\"visit\",{\"1\":{\"56\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":2,\"310\":1}}],[\"viewing\",{\"1\":{\"180\":1}}],[\"view\",{\"1\":{\"155\":1}}],[\"vivid\",{\"1\":{\"121\":1}}],[\"virtual\",{\"1\":{\"89\":2}}],[\"via\",{\"1\":{\"31\":1,\"65\":1,\"164\":1,\"224\":1}}],[\"vendor=oracle\",{\"1\":{\"155\":1}}],[\"verified\",{\"1\":{\"306\":1}}],[\"verification\",{\"1\":{\"151\":1}}],[\"verify\",{\"1\":{\"106\":1,\"151\":3,\"192\":1,\"214\":1,\"219\":1}}],[\"very\",{\"1\":{\"72\":1,\"91\":1,\"97\":1,\"121\":1,\"124\":2,\"126\":1,\"164\":2,\"169\":1,\"200\":1,\"209\":1,\"210\":1,\"211\":1,\"234\":1,\"297\":1,\"303\":1,\"314\":1}}],[\"version2\",{\"0\":{\"307\":1}}],[\"version<2\",{\"1\":{\"274\":1}}],[\"versions\",{\"1\":{\"246\":1,\"264\":3,\"307\":1}}],[\"version=1\",{\"1\":{\"155\":1}}],[\"version=3\",{\"1\":{\"155\":1}}],[\"version>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"version\",{\"0\":{\"250\":1,\"252\":1,\"265\":1,\"267\":1,\"276\":1,\"291\":1,\"292\":1,\"294\":1,\"295\":2,\"297\":1},\"1\":{\"21\":1,\"23\":1,\"31\":1,\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"132\":1,\"144\":1,\"147\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"212\":1,\"217\":1,\"218\":1,\"228\":4,\"230\":1,\"250\":1,\"267\":1,\"270\":1,\"273\":1,\"275\":2,\"276\":1,\"279\":1,\"280\":1,\"285\":4,\"292\":1,\"293\":2,\"294\":1,\"295\":2,\"301\":1,\"303\":2,\"314\":2}}],[\"ve\",{\"1\":{\"37\":1}}],[\"volume\",{\"1\":{\"177\":1,\"210\":2}}],[\"void\",{\"1\":{\"35\":3,\"39\":1,\"40\":2,\"48\":1,\"82\":2,\"97\":10,\"98\":2,\"100\":7,\"104\":4,\"105\":2,\"111\":2,\"112\":5,\"113\":6,\"114\":5,\"117\":2,\"118\":5,\"122\":6,\"123\":3,\"126\":4,\"129\":2,\"136\":1,\"139\":3,\"156\":3,\"161\":2,\"162\":4,\"165\":5,\"166\":3,\"175\":1,\"195\":1,\"207\":1,\"214\":2,\"275\":10,\"300\":1}}],[\"voted\",{\"1\":{\"253\":1}}],[\"vote\",{\"1\":{\"28\":1}}],[\"vane\",{\"1\":{\"304\":1,\"315\":1}}],[\"varchar\",{\"1\":{\"226\":9}}],[\"variables\",{\"1\":{\"126\":1}}],[\"variety\",{\"1\":{\"120\":1,\"279\":1}}],[\"various\",{\"1\":{\"34\":1,\"69\":1,\"74\":1,\"88\":1,\"93\":1,\"105\":1,\"116\":1,\"117\":2,\"182\":1,\"270\":2,\"272\":1,\"279\":2,\"298\":1,\"312\":1}}],[\"valuable\",{\"1\":{\"46\":1}}],[\"valueof\",{\"1\":{\"79\":1,\"81\":1,\"89\":1,\"92\":1,\"105\":1,\"147\":2,\"184\":1}}],[\"values\",{\"1\":{\"70\":1,\"104\":2,\"105\":1,\"111\":1,\"151\":2,\"156\":1,\"165\":1,\"207\":3,\"221\":1,\"231\":1,\"237\":1}}],[\"value\",{\"1\":{\"35\":1,\"66\":1,\"70\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"97\":1,\"100\":1,\"105\":3,\"111\":1,\"112\":1,\"113\":1,\"133\":1,\"135\":3,\"139\":13,\"147\":1,\"156\":1,\"165\":1,\"173\":2,\"174\":1,\"177\":1,\"180\":3,\"195\":2,\"197\":1,\"199\":1,\"200\":2,\"211\":1,\"218\":12,\"219\":4,\"222\":3,\"234\":1,\"236\":2,\"241\":1,\"242\":2,\"275\":1,\"287\":1,\"288\":1}}],[\"value=\",{\"1\":{\"33\":37,\"43\":10}}],[\"validation\",{\"1\":{\"241\":1,\"242\":1}}],[\"validate\",{\"1\":{\"77\":1}}],[\"validateutils\",{\"1\":{\"77\":1}}],[\"valid\",{\"1\":{\"23\":1,\"246\":1}}],[\"kroy\",{\"1\":{\"292\":1}}],[\"kryo\",{\"1\":{\"33\":5,\"34\":1,\"43\":2,\"46\":1,\"275\":1,\"279\":1}}],[\"k3u1fbpfcp\",{\"1\":{\"182\":2}}],[\"k\",{\"1\":{\"133\":1,\"136\":1,\"139\":8,\"175\":3}}],[\"known\",{\"1\":{\"81\":1,\"113\":1,\"195\":1,\"269\":1}}],[\"know\",{\"1\":{\"78\":1,\"85\":1,\"99\":2,\"101\":5,\"106\":1,\"164\":1,\"180\":2,\"182\":1,\"184\":1,\"189\":1,\"192\":1,\"199\":1,\"220\":1,\"235\":1,\"275\":1,\"285\":1,\"301\":1,\"302\":1,\"304\":1,\"313\":1,\"315\":1}}],[\"kept\",{\"1\":{\"91\":1}}],[\"keypoints\",{\"1\":{\"312\":1}}],[\"keys\",{\"0\":{\"198\":1,\"199\":1},\"1\":{\"197\":2,\"198\":2,\"199\":1,\"200\":4}}],[\"keyset\",{\"1\":{\"147\":1,\"165\":2}}],[\"key\",{\"1\":{\"40\":16,\"68\":1,\"84\":1,\"87\":1,\"91\":8,\"92\":1,\"96\":1,\"97\":1,\"100\":4,\"109\":1,\"114\":3,\"120\":1,\"123\":2,\"126\":1,\"131\":1,\"133\":1,\"135\":1,\"139\":1,\"142\":5,\"147\":3,\"151\":2,\"173\":2,\"179\":1,\"195\":2,\"197\":1,\"200\":9,\"225\":1,\"226\":1,\"237\":1,\"241\":3,\"242\":2}}],[\"keeping\",{\"1\":{\"92\":1}}],[\"keep\",{\"1\":{\"19\":1,\"32\":1,\"87\":1,\"98\":1,\"126\":1,\"267\":1}}],[\"kind\",{\"1\":{\"181\":1,\"210\":1}}],[\"kinds\",{\"1\":{\"104\":1,\"307\":1}}],[\"killing\",{\"1\":{\"32\":1}}],[\"kimming\",{\"1\":{\"7\":1,\"11\":1,\"14\":1}}],[\"项目介绍\",{\"1\":{\"19\":1}}],[\"gz\",{\"1\":{\"288\":1}}],[\"gvp\",{\"1\":{\"246\":4,\"252\":3}}],[\"gmt\",{\"1\":{\"155\":1}}],[\"gson\",{\"1\":{\"104\":1,\"105\":2}}],[\"gsonutils\",{\"1\":{\"79\":3,\"80\":2,\"81\":3,\"87\":1,\"97\":1,\"98\":1,\"113\":5,\"117\":2,\"165\":2,\"172\":1,\"183\":1,\"195\":1,\"197\":1,\"207\":1,\"214\":2,\"221\":1}}],[\"globalinterceptor\",{\"1\":{\"288\":1}}],[\"globalheaders\",{\"1\":{\"288\":1}}],[\"globalplugin\",{\"1\":{\"179\":3,\"180\":2,\"181\":1,\"187\":1}}],[\"global\",{\"0\":{\"180\":1},\"1\":{\"87\":2,\"126\":1,\"151\":1,\"179\":4,\"180\":1,\"182\":2,\"185\":1}}],[\"globally\",{\"1\":{\"78\":1}}],[\"g\",{\"1\":{\"82\":1,\"234\":2}}],[\"given\",{\"1\":{\"82\":1,\"246\":2}}],[\"give\",{\"1\":{\"70\":1,\"211\":1,\"316\":1}}],[\"git\",{\"1\":{\"52\":2,\"65\":2}}],[\"gitee\",{\"1\":{\"28\":2,\"246\":3,\"247\":2,\"252\":2,\"257\":1,\"266\":2,\"277\":2,\"283\":1,\"287\":2,\"288\":15,\"289\":8,\"290\":2,\"296\":2,\"306\":2}}],[\"github\",{\"0\":{\"42\":1,\"51\":1},\"1\":{\"28\":2,\"46\":3,\"49\":2,\"52\":1,\"130\":1,\"217\":1,\"237\":1,\"244\":1,\"247\":2,\"257\":1,\"266\":2,\"277\":2,\"283\":3,\"287\":1,\"288\":7,\"289\":6,\"290\":2,\"296\":2,\"301\":1,\"306\":2,\"309\":1,\"316\":1}}],[\"gataway\",{\"1\":{\"300\":1}}],[\"gather\",{\"0\":{\"280\":1},\"1\":{\"280\":1}}],[\"gateway<\",{\"1\":{\"310\":1}}],[\"gateways\",{\"0\":{\"307\":1},\"1\":{\"98\":1,\"210\":1}}],[\"gateway\",{\"0\":{\"47\":1,\"73\":1,\"76\":1,\"80\":1,\"81\":1,\"84\":1,\"94\":1,\"95\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"115\":1,\"117\":1,\"118\":1,\"120\":1,\"140\":1,\"148\":1,\"152\":1,\"153\":1,\"156\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"170\":1,\"179\":1,\"186\":1,\"201\":1,\"206\":1,\"209\":1,\"215\":1,\"223\":1,\"232\":1,\"291\":1,\"292\":1,\"297\":1,\"302\":1,\"304\":1,\"307\":1,\"308\":1,\"310\":1,\"312\":1,\"313\":1,\"315\":1},\"1\":{\"48\":4,\"49\":1,\"56\":1,\"65\":1,\"68\":1,\"69\":8,\"73\":3,\"77\":2,\"81\":3,\"82\":1,\"83\":8,\"86\":2,\"88\":1,\"93\":2,\"96\":4,\"98\":4,\"99\":2,\"100\":3,\"101\":4,\"103\":2,\"104\":3,\"105\":7,\"106\":3,\"117\":2,\"154\":1,\"155\":3,\"157\":2,\"159\":4,\"160\":1,\"164\":8,\"165\":2,\"166\":4,\"177\":1,\"179\":1,\"180\":2,\"185\":3,\"191\":1,\"192\":1,\"195\":1,\"201\":2,\"205\":1,\"206\":1,\"207\":3,\"209\":1,\"210\":1,\"211\":3,\"212\":1,\"213\":1,\"214\":9,\"217\":1,\"218\":1,\"221\":1,\"222\":1,\"225\":2,\"226\":2,\"232\":1,\"235\":1,\"297\":1,\"300\":4,\"301\":3,\"303\":4,\"304\":2,\"310\":1,\"312\":6,\"314\":4,\"315\":2,\"316\":3}}],[\"gain\",{\"1\":{\"48\":1}}],[\"gave\",{\"1\":{\"43\":1}}],[\"guys\",{\"1\":{\"267\":1,\"297\":1,\"306\":1}}],[\"guaranteed\",{\"1\":{\"195\":1}}],[\"guava\",{\"0\":{\"40\":1},\"1\":{\"40\":5,\"270\":1}}],[\"guide\",{\"0\":{\"272\":1},\"1\":{\"253\":1}}],[\"guidelines\",{\"1\":{\"22\":2,\"281\":1}}],[\"guidance\",{\"1\":{\"182\":1}}],[\"guesses\",{\"1\":{\"81\":1}}],[\"guess\",{\"1\":{\"69\":2,\"100\":1,\"122\":1,\"123\":1,\"179\":1,\"185\":1,\"303\":1,\"314\":1}}],[\"gc\",{\"0\":{\"35\":1}}],[\"grpc\",{\"1\":{\"278\":1}}],[\"green\",{\"1\":{\"312\":1}}],[\"greenwich\",{\"1\":{\"264\":1}}],[\"gregorian\",{\"1\":{\"289\":1}}],[\"greatly\",{\"1\":{\"276\":1,\"283\":2}}],[\"great\",{\"1\":{\"91\":1}}],[\"greater\",{\"0\":{\"127\":1},\"1\":{\"33\":2,\"89\":1,\"90\":1,\"175\":1,\"212\":3}}],[\"grow\",{\"1\":{\"281\":1,\"290\":1}}],[\"growth\",{\"1\":{\"91\":1}}],[\"groupversion\",{\"1\":{\"226\":1}}],[\"groupparentpath\",{\"1\":{\"162\":1}}],[\"groupenum\",{\"1\":{\"117\":2}}],[\"groupjson\",{\"1\":{\"105\":4}}],[\"groups\",{\"1\":{\"104\":4,\"212\":1,\"252\":1}}],[\"groupkeys\",{\"1\":{\"104\":1}}],[\"groupkey\",{\"1\":{\"100\":2,\"104\":2}}],[\"group=\",{\"1\":{\"48\":10,\"100\":1}}],[\"group\",{\"1\":{\"46\":2,\"97\":3,\"100\":1,\"105\":4,\"110\":1,\"164\":1,\"165\":1,\"166\":1,\"212\":1,\"241\":1,\"242\":1,\"251\":2,\"275\":2,\"277\":1,\"283\":1,\"296\":1,\"306\":1}}],[\"groupid>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"gradually\",{\"1\":{\"211\":1,\"214\":2}}],[\"grade\",{\"1\":{\"19\":1}}],[\"granularity\",{\"1\":{\"198\":1}}],[\"grained\",{\"1\":{\"71\":1}}],[\"governing\",{\"1\":{\"253\":1}}],[\"governance\",{\"1\":{\"225\":1}}],[\"go\",{\"1\":{\"46\":1,\"48\":3,\"70\":1,\"78\":1,\"81\":3,\"82\":1,\"85\":1,\"92\":2,\"100\":1,\"106\":1,\"164\":4,\"221\":1,\"285\":1,\"303\":1,\"314\":1}}],[\"google\",{\"1\":{\"40\":5}}],[\"good\",{\"1\":{\"23\":1,\"46\":1,\"98\":1,\"99\":1,\"101\":1,\"246\":1,\"281\":1,\"283\":1,\"316\":1}}],[\"goes\",{\"1\":{\"31\":1,\"33\":2,\"93\":1,\"105\":1,\"179\":1}}],[\"goal\",{\"0\":{\"4\":1},\"1\":{\"270\":1,\"278\":1}}],[\"genericfilter\",{\"1\":{\"240\":1,\"242\":1}}],[\"genericinvoker\",{\"1\":{\"236\":1,\"237\":1}}],[\"genericimplfilter\",{\"0\":{\"241\":1},\"1\":{\"240\":1,\"241\":1}}],[\"genericimpl\",{\"1\":{\"234\":1,\"241\":1}}],[\"genericexception\",{\"1\":{\"234\":3,\"237\":2}}],[\"generic=bean\",{\"1\":{\"242\":1}}],[\"generic=nativejava\",{\"1\":{\"242\":1}}],[\"generic=true\",{\"1\":{\"242\":1}}],[\"generic=\",{\"1\":{\"233\":1}}],[\"generic\",{\"0\":{\"242\":1},\"1\":{\"232\":1,\"234\":3,\"237\":2,\"241\":12,\"242\":14,\"244\":1}}],[\"genericsservice\",{\"1\":{\"236\":1}}],[\"genericservice\",{\"1\":{\"234\":2,\"237\":5,\"242\":1}}],[\"generics\",{\"1\":{\"231\":1}}],[\"generation\",{\"1\":{\"100\":1,\"199\":1}}],[\"generateerror\",{\"1\":{\"214\":1}}],[\"generate\",{\"1\":{\"105\":1,\"124\":1,\"177\":1,\"214\":1}}],[\"generateresponse\",{\"1\":{\"100\":1}}],[\"generated\",{\"1\":{\"48\":1,\"200\":1}}],[\"generatesign\",{\"1\":{\"151\":1}}],[\"generates\",{\"1\":{\"48\":1,\"199\":1}}],[\"generalized\",{\"0\":{\"232\":1,\"241\":1},\"1\":{\"224\":1,\"231\":1,\"240\":3,\"241\":1,\"242\":1,\"243\":1}}],[\"generalization\",{\"0\":{\"231\":1,\"233\":1,\"234\":1,\"236\":1,\"240\":1,\"242\":1},\"1\":{\"185\":1,\"224\":5,\"225\":1,\"226\":1,\"236\":1,\"241\":3,\"242\":5,\"307\":1}}],[\"general\",{\"0\":{\"189\":1},\"1\":{\"87\":1,\"172\":1,\"179\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"199\":1,\"212\":1,\"242\":1,\"316\":1}}],[\"generally\",{\"1\":{\"72\":1,\"179\":1,\"184\":1,\"187\":1,\"210\":1,\"211\":1,\"212\":2,\"303\":1,\"314\":1}}],[\"getgenericparametertypes\",{\"1\":{\"242\":1}}],[\"getgson\",{\"1\":{\"221\":1}}],[\"getgrouptype\",{\"1\":{\"117\":1}}],[\"getgroup\",{\"1\":{\"97\":1}}],[\"getgroupkey\",{\"1\":{\"97\":2,\"111\":2,\"113\":2,\"156\":2,\"165\":2}}],[\"getwaitintervalfunctioninopenstate\",{\"1\":{\"219\":1}}],[\"getweight\",{\"1\":{\"90\":3,\"91\":2,\"177\":1}}],[\"getdegraderuletimewindow\",{\"1\":{\"214\":1}}],[\"getdegraderulegrade\",{\"1\":{\"214\":1}}],[\"getdegraderulecount\",{\"1\":{\"214\":1}}],[\"getdegraderuleenable\",{\"1\":{\"214\":1}}],[\"getdata\",{\"1\":{\"104\":1,\"117\":1}}],[\"getkeys\",{\"1\":{\"197\":1,\"199\":1}}],[\"getqueryparams\",{\"1\":{\"180\":1}}],[\"getfailureratethreshold\",{\"1\":{\"219\":1}}],[\"getfallbackuri\",{\"1\":{\"214\":1,\"219\":2,\"221\":1}}],[\"getflowrulecontrolbehavior\",{\"1\":{\"214\":1}}],[\"getflowrulecount\",{\"1\":{\"214\":1}}],[\"getflowrulegrade\",{\"1\":{\"214\":1}}],[\"getflowruleenable\",{\"1\":{\"214\":1}}],[\"getfirst\",{\"1\":{\"180\":1,\"237\":1}}],[\"getforobject\",{\"1\":{\"104\":1}}],[\"geturl\",{\"1\":{\"156\":1,\"161\":1,\"241\":1}}],[\"getupstreamurl\",{\"1\":{\"79\":2,\"81\":2,\"89\":1,\"91\":2,\"175\":1}}],[\"getjoin\",{\"0\":{\"133\":1},\"1\":{\"120\":2,\"131\":1,\"133\":1,\"135\":2,\"139\":1,\"177\":1}}],[\"getelementtype\",{\"1\":{\"289\":1}}],[\"getexceptionmessage\",{\"1\":{\"237\":1}}],[\"getextension\",{\"1\":{\"242\":1}}],[\"getextensionclasses\",{\"1\":{\"137\":1,\"139\":2}}],[\"getextensionloader\",{\"1\":{\"120\":2,\"132\":1,\"177\":1,\"242\":1}}],[\"getepochsecond\",{\"1\":{\"197\":1}}],[\"geteventtype\",{\"1\":{\"97\":5,\"111\":5,\"113\":5,\"117\":1,\"156\":1,\"165\":1}}],[\"getenabled\",{\"1\":{\"85\":2,\"151\":1,\"172\":1,\"182\":1,\"195\":1}}],[\"getmimetype\",{\"1\":{\"289\":1}}],[\"getminimumnumberofcalls\",{\"1\":{\"219\":1}}],[\"getmapping\",{\"1\":{\"147\":1,\"220\":1}}],[\"getmd5\",{\"1\":{\"105\":1}}],[\"getmsg\",{\"1\":{\"93\":2,\"151\":1,\"183\":2,\"184\":1,\"185\":2,\"197\":1,\"214\":3,\"236\":2,\"238\":2}}],[\"getmethods\",{\"1\":{\"289\":1}}],[\"getmethodname\",{\"1\":{\"237\":1,\"241\":2,\"242\":2}}],[\"getmethodvalue\",{\"1\":{\"92\":1,\"184\":1}}],[\"getmessage\",{\"1\":{\"82\":1,\"92\":1,\"104\":1,\"105\":2,\"184\":1,\"197\":1,\"242\":2}}],[\"getbigwriter\",{\"1\":{\"287\":1}}],[\"getburstcapacity\",{\"1\":{\"197\":1}}],[\"getby\",{\"1\":{\"288\":1}}],[\"getbyname\",{\"1\":{\"176\":1}}],[\"getbytes\",{\"1\":{\"147\":1}}],[\"getbasicremote\",{\"1\":{\"114\":2}}],[\"getbody\",{\"1\":{\"92\":1,\"105\":1,\"184\":1}}],[\"getbeansoftype\",{\"1\":{\"111\":1,\"156\":1,\"165\":1}}],[\"getbean\",{\"1\":{\"40\":1,\"114\":1,\"221\":1}}],[\"getleft\",{\"1\":{\"237\":1}}],[\"getlimitforperiod\",{\"1\":{\"219\":1}}],[\"getlimitrefreshperiod\",{\"1\":{\"219\":1}}],[\"getlastmodifytime\",{\"1\":{\"105\":1}}],[\"getlastupdate\",{\"1\":{\"91\":1}}],[\"getloadbalance\",{\"1\":{\"87\":1,\"120\":1,\"172\":1,\"183\":1}}],[\"getloged\",{\"1\":{\"85\":2}}],[\"getvalue\",{\"1\":{\"89\":1,\"91\":1,\"135\":1,\"139\":4}}],[\"getorder\",{\"1\":{\"86\":1,\"179\":1,\"207\":1,\"214\":1}}],[\"getordefault\",{\"1\":{\"82\":1,\"165\":1,\"166\":1}}],[\"getname\",{\"1\":{\"80\":11,\"82\":1,\"85\":4,\"86\":1,\"98\":3,\"118\":1,\"123\":1,\"139\":1,\"179\":2,\"184\":2,\"207\":1,\"214\":3,\"230\":1,\"237\":1,\"241\":4,\"242\":1}}],[\"getheaders\",{\"1\":{\"92\":1,\"93\":1,\"180\":1,\"184\":1,\"185\":1,\"207\":1,\"237\":1}}],[\"gethandler\",{\"1\":{\"207\":1}}],[\"gethandle\",{\"1\":{\"79\":1,\"81\":1,\"87\":1,\"172\":1,\"183\":1,\"197\":1,\"207\":1,\"214\":2,\"221\":1}}],[\"gethostaddress\",{\"1\":{\"172\":1,\"183\":1}}],[\"gethost\",{\"1\":{\"79\":1,\"81\":1}}],[\"getparameter\",{\"1\":{\"241\":1}}],[\"getparametertypes\",{\"1\":{\"236\":1,\"237\":1,\"242\":1}}],[\"getpath\",{\"1\":{\"78\":1,\"82\":1,\"236\":1,\"237\":2}}],[\"getpermittednumberofcallsinhalfopenstate\",{\"1\":{\"219\":1}}],[\"getproperty\",{\"1\":{\"174\":2}}],[\"getpluginname\",{\"1\":{\"118\":2}}],[\"getpluginid\",{\"1\":{\"80\":5}}],[\"getport\",{\"1\":{\"79\":1,\"81\":1}}],[\"getattachments\",{\"1\":{\"242\":1}}],[\"getattachment\",{\"1\":{\"242\":2}}],[\"getattributes\",{\"1\":{\"87\":1,\"172\":3,\"180\":1,\"183\":3,\"184\":3,\"237\":2,\"242\":1}}],[\"getattribute\",{\"1\":{\"87\":1,\"92\":1,\"93\":1,\"151\":1,\"183\":1,\"184\":4,\"185\":1,\"214\":1,\"221\":1,\"236\":3,\"238\":1}}],[\"getarguments\",{\"1\":{\"241\":3,\"242\":5}}],[\"getaddress\",{\"1\":{\"172\":1,\"183\":1}}],[\"getadminurl\",{\"1\":{\"77\":1}}],[\"getappsecret\",{\"1\":{\"151\":1}}],[\"getappkey\",{\"1\":{\"151\":2}}],[\"getappname\",{\"1\":{\"79\":1,\"81\":1}}],[\"getannotationalias\",{\"1\":{\"288\":1}}],[\"getannotation\",{\"1\":{\"139\":2}}],[\"getandincrement\",{\"1\":{\"35\":1}}],[\"getasjsonarray\",{\"1\":{\"105\":1}}],[\"getasjsonobject\",{\"1\":{\"104\":1}}],[\"getalias\",{\"1\":{\"80\":1,\"82\":2}}],[\"getinvoker\",{\"1\":{\"242\":1}}],[\"getinterface\",{\"1\":{\"237\":1,\"242\":3}}],[\"getint\",{\"1\":{\"129\":2}}],[\"getinstance\",{\"1\":{\"39\":1,\"40\":2,\"79\":3,\"80\":2,\"81\":3,\"85\":3,\"86\":1,\"87\":2,\"97\":1,\"98\":1,\"113\":5,\"114\":1,\"117\":2,\"118\":3,\"151\":1,\"165\":2,\"172\":5,\"182\":3,\"183\":2,\"195\":1,\"197\":1,\"207\":1,\"214\":2,\"221\":1,\"237\":3}}],[\"getifavailable\",{\"1\":{\"86\":1,\"117\":4,\"161\":4,\"166\":4,\"207\":1}}],[\"getid\",{\"1\":{\"48\":4,\"79\":1,\"80\":3,\"81\":1,\"82\":3,\"85\":1,\"87\":1,\"109\":1,\"165\":1,\"172\":2,\"182\":1,\"183\":1,\"197\":1,\"221\":3}}],[\"getslidingwindowtype\",{\"1\":{\"219\":1}}],[\"getslidingwindowsize\",{\"1\":{\"219\":1}}],[\"getsystemresources\",{\"1\":{\"123\":1,\"139\":1}}],[\"getsystemclassloader\",{\"1\":{\"123\":1}}],[\"getservicename\",{\"1\":{\"232\":1}}],[\"getselectorid\",{\"1\":{\"165\":3,\"214\":1}}],[\"getselectorconditions\",{\"1\":{\"48\":1,\"80\":1}}],[\"getsessiontimeout\",{\"1\":{\"156\":1,\"161\":1}}],[\"getsecuritymanager\",{\"1\":{\"123\":1}}],[\"getsource\",{\"1\":{\"97\":5,\"111\":5,\"113\":5,\"156\":1,\"165\":1}}],[\"getstatuscode\",{\"1\":{\"93\":3,\"185\":3,\"214\":1,\"221\":1}}],[\"gets\",{\"1\":{\"85\":1,\"93\":1,\"159\":1,\"176\":1}}],[\"getsign\",{\"1\":{\"151\":1}}],[\"getsimplename\",{\"1\":{\"82\":1}}],[\"getsize\",{\"1\":{\"40\":2}}],[\"get\",{\"0\":{\"161\":1,\"198\":1,\"308\":1},\"1\":{\"40\":1,\"48\":1,\"82\":3,\"85\":3,\"86\":1,\"87\":3,\"89\":1,\"90\":3,\"91\":6,\"92\":1,\"104\":4,\"105\":2,\"114\":1,\"117\":2,\"118\":3,\"121\":1,\"122\":2,\"123\":1,\"127\":1,\"132\":2,\"135\":3,\"137\":3,\"139\":8,\"147\":1,\"151\":1,\"162\":1,\"164\":2,\"172\":4,\"173\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"182\":1,\"195\":3,\"197\":5,\"200\":4,\"214\":2,\"221\":1,\"226\":1,\"235\":2,\"236\":3,\"237\":3,\"241\":2,\"242\":5,\"289\":1}}],[\"getting\",{\"1\":{\"289\":1}}],[\"gettimelimiterconfig\",{\"1\":{\"221\":2}}],[\"gettimeoutduration\",{\"1\":{\"219\":1,\"221\":2}}],[\"gettimeoutdurationrate\",{\"1\":{\"219\":1}}],[\"gettimeout\",{\"1\":{\"172\":1,\"183\":1}}],[\"gettimestamp\",{\"1\":{\"151\":1}}],[\"gettargetserviceuniquename\",{\"1\":{\"242\":1}}],[\"gettype\",{\"1\":{\"85\":1,\"172\":1,\"182\":1}}],[\"gettcctransaction\",{\"1\":{\"40\":1}}],[\"gettransid\",{\"1\":{\"39\":1,\"40\":1}}],[\"getcircuitbreakerconfig\",{\"1\":{\"221\":1}}],[\"getcircuitenable\",{\"1\":{\"219\":1,\"221\":1}}],[\"getcallerclass\",{\"1\":{\"127\":1}}],[\"getclassloader\",{\"1\":{\"139\":1}}],[\"getclass\",{\"1\":{\"86\":1,\"179\":2,\"207\":1,\"241\":3,\"242\":1}}],[\"getconfigandsignlistener\",{\"1\":{\"166\":3}}],[\"getconfig\",{\"1\":{\"165\":1,\"195\":1}}],[\"getconnectiontimeout\",{\"1\":{\"156\":1,\"161\":1}}],[\"getconnection\",{\"1\":{\"127\":5,\"129\":3}}],[\"getcontextclassloader\",{\"1\":{\"123\":1}}],[\"getcontext\",{\"1\":{\"79\":1,\"81\":1,\"123\":1,\"237\":1,\"242\":1}}],[\"getcookies\",{\"1\":{\"93\":1,\"185\":1}}],[\"getcode\",{\"1\":{\"36\":1,\"39\":4,\"80\":2,\"82\":1,\"85\":1,\"93\":2,\"172\":1,\"182\":1,\"183\":2,\"184\":1,\"185\":2,\"197\":1,\"214\":4,\"236\":2,\"238\":2}}],[\"getcurrenttransaction\",{\"1\":{\"36\":2,\"39\":1}}],[\"getright\",{\"1\":{\"237\":1}}],[\"getringbuffer\",{\"1\":{\"35\":1}}],[\"getratelimiterconfig\",{\"1\":{\"221\":2}}],[\"getredirecturi\",{\"1\":{\"207\":4}}],[\"getreplenishrate\",{\"1\":{\"197\":1}}],[\"getretry\",{\"1\":{\"172\":1,\"183\":1}}],[\"getremoteaddress\",{\"1\":{\"172\":1,\"183\":1}}],[\"getresourcename\",{\"1\":{\"214\":8}}],[\"getresource\",{\"1\":{\"214\":4}}],[\"getresources\",{\"1\":{\"123\":1,\"139\":1}}],[\"getresponse\",{\"1\":{\"93\":1,\"100\":1,\"185\":1,\"197\":1,\"207\":1,\"214\":5,\"221\":2,\"236\":2}}],[\"getrequest\",{\"1\":{\"92\":3,\"100\":2,\"172\":1,\"180\":1,\"183\":1,\"184\":3,\"207\":1,\"221\":1,\"237\":1}}],[\"getrules\",{\"1\":{\"214\":4}}],[\"getruleconditions\",{\"1\":{\"82\":1}}],[\"getrulename\",{\"1\":{\"82\":2}}],[\"getruntime\",{\"1\":{\"36\":1,\"43\":2}}],[\"getrpctype\",{\"1\":{\"79\":1,\"81\":1,\"82\":1}}],[\"ge\",{\"1\":{\"14\":1}}],[\"jmx\",{\"1\":{\"155\":1}}],[\"jsonconfig\",{\"1\":{\"287\":1}}],[\"jsonutils\",{\"1\":{\"238\":1}}],[\"jsonarray\",{\"1\":{\"105\":1}}],[\"jsonobject\",{\"1\":{\"104\":11,\"105\":1,\"165\":2,\"287\":1}}],[\"json\",{\"1\":{\"81\":1,\"97\":3,\"104\":6,\"105\":2,\"117\":4,\"118\":2,\"226\":1,\"287\":5,\"289\":4,\"300\":1}}],[\"jury\",{\"1\":{\"246\":1,\"252\":2}}],[\"juejin\",{\"1\":{\"182\":1}}],[\"judgment\",{\"1\":{\"195\":1,\"213\":3,\"214\":1,\"288\":1}}],[\"judging\",{\"1\":{\"177\":1,\"195\":2,\"289\":1}}],[\"judged\",{\"1\":{\"151\":1,\"197\":1,\"212\":1,\"235\":1}}],[\"judge\",{\"1\":{\"151\":3,\"185\":1,\"212\":3}}],[\"juncture\",{\"1\":{\"98\":1}}],[\"jumps\",{\"1\":{\"48\":1}}],[\"jump\",{\"1\":{\"48\":2,\"56\":1,\"201\":1,\"205\":1}}],[\"just\",{\"0\":{\"46\":1},\"1\":{\"29\":1,\"37\":1,\"46\":1,\"48\":1,\"72\":1,\"74\":1,\"81\":1,\"87\":5,\"100\":1,\"105\":1,\"106\":1,\"123\":1,\"132\":1,\"179\":1,\"197\":1,\"276\":1,\"285\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"jdbc\",{\"0\":{\"125\":1,\"128\":1,\"129\":1},\"1\":{\"33\":2,\"43\":2,\"46\":2,\"125\":1,\"126\":4,\"127\":4,\"128\":3,\"129\":1,\"131\":1,\"275\":2,\"309\":1}}],[\"jdk8\",{\"1\":{\"217\":1}}],[\"jdk\",{\"1\":{\"33\":4,\"121\":1,\"126\":1,\"279\":1}}],[\"jvm\",{\"1\":{\"32\":2,\"57\":1,\"68\":1,\"164\":1,\"195\":1,\"226\":1,\"279\":1,\"312\":1}}],[\"jod\",{\"1\":{\"303\":1,\"314\":1}}],[\"jo\",{\"1\":{\"165\":1}}],[\"job\",{\"1\":{\"99\":1}}],[\"joining\",{\"1\":{\"147\":1,\"252\":1,\"253\":1}}],[\"joininstances\",{\"0\":{\"137\":1},\"1\":{\"134\":1,\"137\":4,\"139\":4}}],[\"join\",{\"0\":{\"20\":1},\"1\":{\"20\":1,\"46\":1,\"79\":1,\"81\":1,\"105\":1,\"139\":3,\"147\":1,\"248\":1,\"251\":1,\"267\":1,\"277\":1,\"290\":1}}],[\"joy\",{\"1\":{\"16\":1}}],[\"jittery\",{\"1\":{\"212\":1}}],[\"jitter\",{\"1\":{\"210\":1}}],[\"jinpeng\",{\"1\":{\"106\":1}}],[\"jinze\",{\"1\":{\"14\":1}}],[\"jiangwenbo\",{\"1\":{\"11\":1}}],[\"jar\",{\"0\":{\"46\":1},\"1\":{\"164\":5,\"263\":1,\"309\":5}}],[\"january\",{\"1\":{\"13\":1,\"48\":3}}],[\"javabeanserializeutil\",{\"1\":{\"242\":1}}],[\"javabeandescriptor\",{\"1\":{\"241\":2,\"242\":2}}],[\"javadoc\",{\"1\":{\"54\":1}}],[\"java\",{\"0\":{\"121\":1,\"124\":1,\"131\":1,\"151\":1},\"1\":{\"11\":1,\"19\":2,\"35\":5,\"36\":4,\"40\":2,\"49\":1,\"77\":1,\"78\":2,\"79\":1,\"80\":2,\"81\":1,\"82\":4,\"109\":2,\"111\":1,\"112\":1,\"113\":2,\"114\":1,\"120\":1,\"123\":1,\"124\":2,\"126\":4,\"127\":4,\"128\":1,\"129\":2,\"130\":2,\"131\":1,\"155\":3,\"164\":14,\"221\":8,\"225\":1,\"234\":2,\"241\":1,\"242\":1,\"284\":1,\"292\":1,\"300\":2,\"303\":1,\"304\":1,\"309\":1,\"314\":1,\"315\":1}}],[\"5<\",{\"1\":{\"228\":1}}],[\"54\",{\"1\":{\"164\":3}}],[\"563\",{\"1\":{\"288\":2}}],[\"568\",{\"1\":{\"287\":1}}],[\"56\",{\"1\":{\"164\":6}}],[\"5273\",{\"1\":{\"164\":1}}],[\"59\",{\"1\":{\"155\":6,\"164\":3}}],[\"584\",{\"1\":{\"289\":1}}],[\"585\",{\"1\":{\"288\":1}}],[\"583\",{\"1\":{\"288\":1}}],[\"581\",{\"1\":{\"288\":1}}],[\"5811b56257e31109621976d39fc226aa\",{\"1\":{\"48\":2}}],[\"580\",{\"1\":{\"287\":1}}],[\"58\",{\"1\":{\"155\":1,\"164\":1}}],[\"58214\",{\"1\":{\"155\":1}}],[\"5min\",{\"1\":{\"149\":1}}],[\"51\",{\"1\":{\"65\":1,\"219\":1}}],[\"572\",{\"1\":{\"289\":1}}],[\"578\",{\"1\":{\"288\":1}}],[\"570\",{\"1\":{\"288\":2}}],[\"57\",{\"1\":{\"61\":3}}],[\"5f79d821e3b601330631a2d53294fb34\",{\"1\":{\"48\":2}}],[\"5\",{\"0\":{\"111\":1,\"112\":1,\"113\":1,\"284\":1,\"286\":1},\"1\":{\"48\":3,\"57\":1,\"89\":1,\"105\":3,\"108\":1,\"155\":1,\"156\":1,\"164\":10,\"179\":1,\"213\":2,\"270\":1,\"285\":1,\"289\":1}}],[\"555\",{\"1\":{\"289\":1}}],[\"554\",{\"1\":{\"288\":1}}],[\"55\",{\"1\":{\"11\":2,\"14\":2}}],[\"508\",{\"1\":{\"57\":1}}],[\"50\",{\"1\":{\"11\":2,\"14\":2,\"81\":1,\"218\":2,\"219\":1}}],[\"500ms\",{\"1\":{\"214\":2}}],[\"50000\",{\"1\":{\"265\":1}}],[\"5000\",{\"1\":{\"154\":2,\"155\":2,\"218\":1}}],[\"500\",{\"1\":{\"5\":1,\"214\":1,\"218\":1,\"220\":1}}],[\"rfc3986\",{\"1\":{\"287\":1}}],[\"rps\",{\"1\":{\"219\":3}}],[\"rpcs\",{\"1\":{\"269\":1}}],[\"rpcinvocation\",{\"1\":{\"242\":6}}],[\"rpcexception\",{\"1\":{\"241\":1,\"242\":6}}],[\"rpccontext\",{\"1\":{\"237\":1,\"242\":1}}],[\"rpctypes\",{\"1\":{\"180\":1}}],[\"rpctypeenum\",{\"1\":{\"80\":4,\"82\":5}}],[\"rpctype\",{\"1\":{\"80\":5,\"82\":9,\"171\":1,\"180\":6}}],[\"rpc\",{\"0\":{\"30\":1,\"46\":1,\"241\":1,\"264\":1,\"265\":1,\"274\":1},\"1\":{\"14\":1,\"19\":1,\"29\":3,\"30\":2,\"33\":2,\"34\":1,\"39\":1,\"40\":1,\"43\":1,\"82\":8,\"180\":1,\"185\":2,\"225\":1,\"226\":4,\"237\":2,\"238\":1,\"269\":3,\"270\":1,\"272\":3,\"275\":2,\"276\":1,\"278\":1,\"279\":2,\"280\":1,\"283\":1,\"303\":1}}],[\"rt\",{\"1\":{\"214\":1}}],[\"rs\",{\"1\":{\"129\":6}}],[\"rkey\",{\"1\":{\"91\":3}}],[\"runs\",{\"1\":{\"214\":1}}],[\"runner\",{\"1\":{\"156\":2}}],[\"runnable\",{\"1\":{\"100\":5,\"105\":1}}],[\"running\",{\"1\":{\"57\":1,\"65\":2,\"72\":1,\"104\":1,\"105\":1,\"164\":1}}],[\"run\",{\"1\":{\"48\":1,\"56\":1,\"62\":1,\"72\":1,\"100\":6,\"105\":2,\"122\":7,\"123\":1,\"126\":1,\"156\":3,\"164\":2,\"221\":8,\"225\":1,\"253\":1}}],[\"runtimeexception\",{\"1\":{\"126\":1}}],[\"runtime\",{\"1\":{\"36\":1,\"38\":1,\"43\":2,\"121\":1,\"270\":1}}],[\"rulelog\",{\"1\":{\"182\":2}}],[\"rulemap\",{\"1\":{\"165\":1}}],[\"rulemapper\",{\"1\":{\"82\":2}}],[\"ruler\",{\"1\":{\"146\":1}}],[\"ruleparentpath\",{\"1\":{\"98\":2}}],[\"ruleconditiondo\",{\"1\":{\"82\":1}}],[\"ruleconditiondto\",{\"1\":{\"82\":9}}],[\"ruleconditionmapper\",{\"1\":{\"82\":1}}],[\"ruleconditions\",{\"1\":{\"82\":3}}],[\"ruledatahandler\",{\"1\":{\"117\":1,\"118\":1}}],[\"ruledatalist\",{\"1\":{\"113\":2,\"156\":2}}],[\"ruledatarefresh\",{\"1\":{\"104\":1}}],[\"ruledata\",{\"1\":{\"82\":1,\"85\":1,\"87\":1,\"118\":5,\"162\":4,\"172\":2,\"182\":1,\"183\":1,\"197\":1,\"207\":1,\"214\":18,\"221\":3,\"236\":1}}],[\"ruledto\",{\"1\":{\"82\":11}}],[\"ruledo\",{\"1\":{\"82\":10}}],[\"rulehandle>\",{\"1\":{\"82\":2}}],[\"rulehandle>>\",{\"1\":{\"82\":1}}],[\"rulehandlefactory\",{\"1\":{\"82\":3}}],[\"rulehandle\",{\"1\":{\"82\":12,\"87\":2,\"120\":1,\"172\":4,\"183\":4}}],[\"rulename\",{\"1\":{\"82\":2}}],[\"rule\",{\"0\":{\"71\":1,\"82\":1},\"1\":{\"48\":4,\"69\":3,\"72\":1,\"74\":1,\"82\":14,\"83\":3,\"85\":13,\"87\":2,\"90\":1,\"97\":1,\"104\":2,\"110\":2,\"111\":1,\"112\":2,\"113\":2,\"117\":1,\"118\":2,\"156\":1,\"157\":1,\"159\":1,\"162\":1,\"165\":17,\"166\":1,\"171\":1,\"172\":10,\"182\":15,\"183\":6,\"185\":1,\"192\":2,\"197\":3,\"198\":2,\"199\":1,\"200\":2,\"202\":2,\"205\":1,\"207\":3,\"211\":1,\"214\":18,\"221\":8,\"236\":1,\"265\":1,\"281\":1}}],[\"ruleserviceimpl\",{\"1\":{\"82\":1}}],[\"ruleservice\",{\"1\":{\"82\":1,\"156\":1}}],[\"rules\",{\"0\":{\"192\":1},\"1\":{\"48\":2,\"69\":2,\"71\":1,\"82\":1,\"85\":6,\"162\":1,\"171\":1,\"172\":5,\"179\":1,\"182\":7,\"185\":2,\"197\":1,\"206\":1,\"212\":1,\"214\":2,\"253\":1,\"300\":1,\"312\":1}}],[\"r\",{\"1\":{\"35\":2,\"214\":8}}],[\"rising\",{\"1\":{\"303\":1,\"314\":1}}],[\"ribbon\",{\"1\":{\"265\":1}}],[\"rich\",{\"1\":{\"169\":1,\"297\":1}}],[\"ringbuffer<hmilytransactionevent>\",{\"1\":{\"35\":1}}],[\"ringbuffer\",{\"1\":{\"35\":3}}],[\"right\",{\"0\":{\"254\":1},\"1\":{\"32\":1,\"214\":1}}],[\"rights\",{\"0\":{\"253\":1},\"1\":{\"22\":1,\"253\":1}}],[\"raincat\",{\"1\":{\"316\":1}}],[\"raised\",{\"1\":{\"285\":1}}],[\"rar\",{\"1\":{\"289\":1}}],[\"rare\",{\"1\":{\"32\":1,\"37\":1,\"38\":1}}],[\"rarely\",{\"1\":{\"31\":1}}],[\"radical\",{\"1\":{\"285\":1}}],[\"rapid\",{\"1\":{\"278\":1}}],[\"ratio\",{\"1\":{\"213\":1,\"214\":1}}],[\"rate\",{\"1\":{\"179\":1,\"187\":1,\"189\":3,\"192\":2,\"193\":1,\"195\":2,\"197\":1,\"200\":7,\"214\":2,\"217\":1,\"218\":1,\"219\":2,\"298\":1,\"304\":1,\"311\":1,\"312\":1,\"315\":1}}],[\"ratelimiteroperator\",{\"1\":{\"221\":2}}],[\"ratelimiterexecutor\",{\"1\":{\"221\":5}}],[\"ratelimiter<\",{\"1\":{\"218\":1,\"311\":1}}],[\"ratelimiterresponse\",{\"1\":{\"197\":5}}],[\"ratelimiterhandle\",{\"1\":{\"197\":2}}],[\"ratelimiterconfig\",{\"1\":{\"195\":9}}],[\"ratelimiterplugin\",{\"1\":{\"189\":2,\"195\":1,\"197\":1}}],[\"ratelimiter\",{\"0\":{\"186\":1},\"1\":{\"87\":2,\"179\":1,\"197\":1,\"221\":11,\"311\":3}}],[\"range\",{\"1\":{\"213\":1,\"217\":1}}],[\"randomutils\",{\"1\":{\"220\":1}}],[\"randomized\",{\"1\":{\"177\":1}}],[\"randomize\",{\"1\":{\"90\":1,\"177\":3}}],[\"randomly\",{\"1\":{\"90\":1}}],[\"randomloadbalance\",{\"0\":{\"90\":1},\"1\":{\"120\":1,\"177\":2}}],[\"random\",{\"1\":{\"82\":1,\"88\":1,\"90\":6,\"135\":1,\"136\":1,\"137\":1,\"177\":12,\"210\":1}}],[\"ranked\",{\"1\":{\"33\":2}}],[\"room\",{\"1\":{\"281\":1}}],[\"rootpath\",{\"1\":{\"33\":1,\"46\":1}}],[\"root\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"207\":1,\"275\":1}}],[\"robin\",{\"1\":{\"177\":1}}],[\"role\",{\"1\":{\"129\":1,\"156\":2,\"179\":2,\"181\":1,\"182\":2,\"200\":1,\"295\":1}}],[\"rollbackfor\",{\"1\":{\"109\":1,\"165\":1}}],[\"rollback\",{\"1\":{\"30\":5,\"269\":1,\"271\":1,\"283\":1}}],[\"roughly\",{\"1\":{\"185\":1,\"212\":1}}],[\"rounding\",{\"1\":{\"200\":1}}],[\"round\",{\"1\":{\"177\":1}}],[\"roundrobinloadbalance\",{\"0\":{\"91\":1},\"1\":{\"120\":1}}],[\"router\",{\"1\":{\"156\":1}}],[\"route\",{\"1\":{\"69\":1,\"237\":2}}],[\"routing\",{\"0\":{\"73\":1,\"181\":1},\"1\":{\"69\":1,\"185\":2}}],[\"rows\",{\"1\":{\"109\":1,\"165\":1}}],[\"row\",{\"1\":{\"28\":1,\"82\":2,\"226\":1,\"230\":1}}],[\"rwby\",{\"1\":{\"11\":1}}],[\"renamed\",{\"1\":{\"287\":1}}],[\"rebuild\",{\"1\":{\"287\":1}}],[\"rejection\",{\"1\":{\"214\":3}}],[\"rejecting\",{\"1\":{\"211\":1}}],[\"reject\",{\"1\":{\"211\":1,\"214\":1}}],[\"rejected\",{\"1\":{\"211\":3}}],[\"reused\",{\"1\":{\"124\":1}}],[\"rewritable\",{\"1\":{\"97\":1}}],[\"rewrites\",{\"1\":{\"98\":2}}],[\"rewrite\",{\"1\":{\"87\":2}}],[\"reward\",{\"1\":{\"91\":1}}],[\"rewards\",{\"1\":{\"91\":1}}],[\"regulations\",{\"0\":{\"254\":1}}],[\"regulators\",{\"0\":{\"146\":1}}],[\"regularly\",{\"1\":{\"176\":1}}],[\"regular\",{\"1\":{\"70\":2,\"81\":1,\"294\":1}}],[\"registryconfig\",{\"1\":{\"232\":1}}],[\"registry\",{\"1\":{\"229\":1,\"275\":1}}],[\"registration\",{\"0\":{\"77\":1},\"1\":{\"83\":1,\"106\":1,\"126\":1,\"155\":1,\"183\":1,\"225\":1,\"232\":1,\"307\":1}}],[\"registerdriver\",{\"1\":{\"126\":4}}],[\"registering\",{\"1\":{\"87\":2,\"175\":2}}],[\"registerrule\",{\"1\":{\"82\":2}}],[\"registerselector\",{\"1\":{\"79\":1,\"80\":2,\"81\":1}}],[\"registerspringmvc\",{\"1\":{\"78\":3}}],[\"register\",{\"0\":{\"78\":1},\"1\":{\"77\":2,\"78\":5,\"80\":3,\"82\":4,\"83\":1,\"86\":1,\"106\":1,\"126\":1,\"156\":2,\"161\":1,\"182\":1,\"230\":1,\"300\":1,\"303\":1,\"314\":1}}],[\"registereddrivers\",{\"1\":{\"126\":2,\"127\":1}}],[\"registered\",{\"1\":{\"72\":1,\"82\":1,\"117\":2,\"118\":1,\"127\":1,\"182\":1,\"207\":1}}],[\"registerparticipant\",{\"1\":{\"39\":1}}],[\"regex\",{\"1\":{\"70\":1}}],[\"req\",{\"1\":{\"65\":2}}],[\"requiring\",{\"1\":{\"48\":1}}],[\"requirenonnull\",{\"1\":{\"109\":1,\"123\":1,\"172\":1,\"183\":1,\"207\":1,\"221\":1}}],[\"requires\",{\"1\":{\"48\":1,\"303\":1,\"314\":1}}],[\"requiredargsconstructor\",{\"1\":{\"118\":1}}],[\"required\",{\"1\":{\"38\":1,\"123\":1,\"164\":2,\"197\":1,\"199\":1,\"236\":1,\"250\":1,\"303\":1,\"314\":1}}],[\"requirements\",{\"1\":{\"23\":1,\"35\":1,\"246\":1}}],[\"request更新主要内容如下\",{\"1\":{\"257\":1}}],[\"request是一个类似于\",{\"1\":{\"257\":1}}],[\"requestparam\",{\"1\":{\"220\":1}}],[\"requester\",{\"1\":{\"212\":1}}],[\"requested\",{\"0\":{\"149\":1},\"1\":{\"48\":3,\"99\":1,\"104\":1,\"197\":1,\"200\":3,\"213\":1}}],[\"requesting\",{\"1\":{\"211\":1,\"212\":1,\"226\":1}}],[\"requestmapping\",{\"1\":{\"100\":1,\"109\":1,\"275\":2}}],[\"requestbodyspec\",{\"1\":{\"92\":6,\"184\":7}}],[\"requestbody\",{\"1\":{\"78\":1,\"109\":1}}],[\"requests\",{\"1\":{\"28\":1,\"48\":2,\"65\":4,\"69\":3,\"72\":1,\"84\":1,\"87\":2,\"100\":1,\"101\":3,\"141\":1,\"171\":1,\"177\":1,\"179\":2,\"187\":1,\"189\":3,\"197\":3,\"207\":1,\"210\":2,\"211\":6,\"212\":7,\"213\":8,\"214\":9,\"218\":1,\"219\":1,\"220\":3,\"225\":1,\"303\":1,\"314\":1}}],[\"request\",{\"0\":{\"61\":1,\"179\":1,\"184\":1,\"242\":1,\"257\":1},\"1\":{\"11\":1,\"61\":2,\"64\":6,\"70\":4,\"81\":1,\"85\":4,\"87\":1,\"92\":9,\"99\":2,\"100\":11,\"101\":5,\"104\":3,\"105\":6,\"108\":1,\"151\":3,\"155\":2,\"171\":2,\"172\":2,\"179\":7,\"180\":3,\"182\":1,\"184\":8,\"185\":4,\"199\":1,\"201\":1,\"202\":1,\"205\":1,\"207\":5,\"210\":3,\"211\":9,\"212\":2,\"213\":4,\"214\":11,\"217\":1,\"221\":3,\"226\":1,\"235\":2,\"240\":2,\"242\":5,\"257\":2,\"303\":2,\"304\":1,\"312\":1,\"314\":2,\"315\":1}}],[\"reverse\",{\"1\":{\"283\":1}}],[\"revert\",{\"1\":{\"282\":1}}],[\"revealed\",{\"1\":{\"48\":1}}],[\"review\",{\"0\":{\"187\":1},\"1\":{\"21\":1,\"172\":1,\"179\":1,\"281\":1}}],[\"redirecthandle\",{\"1\":{\"207\":8}}],[\"redirectplugin\",{\"1\":{\"207\":1}}],[\"redirection\",{\"1\":{\"204\":2}}],[\"redirect<\",{\"1\":{\"203\":1}}],[\"redirected\",{\"1\":{\"202\":1}}],[\"redirectmaven\",{\"1\":{\"202\":1}}],[\"redirecturl\",{\"1\":{\"201\":2}}],[\"redirect\",{\"0\":{\"201\":1,\"205\":1},\"1\":{\"201\":2,\"202\":1,\"204\":1,\"205\":1,\"207\":5}}],[\"redisratelimiter\",{\"1\":{\"197\":3}}],[\"redistemplate\",{\"1\":{\"195\":1}}],[\"redisserializationcontext\",{\"1\":{\"195\":1}}],[\"redisserializationcontext<string\",{\"1\":{\"195\":1}}],[\"redisserializer<string>\",{\"1\":{\"195\":1}}],[\"redis\",{\"0\":{\"195\":2},\"1\":{\"33\":9,\"34\":1,\"43\":1,\"46\":1,\"191\":3,\"195\":4,\"197\":2,\"198\":1,\"200\":5,\"269\":1,\"279\":1,\"280\":1}}],[\"redundant\",{\"1\":{\"180\":1,\"211\":1,\"214\":2}}],[\"reduces\",{\"1\":{\"91\":1}}],[\"reduce\",{\"1\":{\"91\":1,\"197\":1,\"283\":1,\"287\":1}}],[\"reducing\",{\"1\":{\"91\":1}}],[\"red\",{\"1\":{\"48\":1}}],[\"refactoring\",{\"0\":{\"270\":1},\"1\":{\"285\":2}}],[\"refactored\",{\"1\":{\"267\":1}}],[\"reflectutil\",{\"1\":{\"289\":1}}],[\"reflectutils\",{\"1\":{\"242\":1}}],[\"reflect\",{\"1\":{\"139\":1}}],[\"reflections\",{\"1\":{\"124\":1}}],[\"reflection\",{\"1\":{\"122\":1,\"123\":2,\"124\":2,\"127\":1,\"234\":1,\"242\":2}}],[\"reflected\",{\"1\":{\"48\":1,\"131\":1}}],[\"refreshed\",{\"1\":{\"200\":4,\"218\":1,\"219\":2}}],[\"refreshplugindataall\",{\"1\":{\"104\":2}}],[\"refresh\",{\"1\":{\"48\":3,\"104\":12,\"110\":3,\"117\":1,\"118\":2,\"156\":2,\"219\":1,\"270\":1,\"282\":1}}],[\"refreshlocalcache\",{\"1\":{\"48\":2}}],[\"refreshing\",{\"1\":{\"48\":2,\"218\":1,\"219\":2}}],[\"referring\",{\"1\":{\"131\":1,\"182\":1}}],[\"referenceconfig<>\",{\"1\":{\"232\":1}}],[\"referenceconfig<genericservice>\",{\"1\":{\"232\":1,\"237\":1}}],[\"references\",{\"1\":{\"179\":1,\"247\":1}}],[\"reference\",{\"0\":{\"208\":1,\"244\":1},\"1\":{\"130\":1,\"179\":1,\"217\":2,\"224\":1,\"232\":6,\"233\":1,\"237\":7,\"242\":1,\"265\":1}}],[\"refers\",{\"1\":{\"68\":1,\"70\":4,\"104\":1,\"118\":1,\"180\":1,\"213\":3}}],[\"refer\",{\"1\":{\"43\":1,\"164\":1,\"275\":1,\"310\":1}}],[\"rely\",{\"1\":{\"164\":1}}],[\"reliability\",{\"1\":{\"283\":1}}],[\"reliable\",{\"1\":{\"19\":1}}],[\"relies\",{\"1\":{\"134\":1,\"162\":1}}],[\"reloaded\",{\"1\":{\"195\":1}}],[\"reload\",{\"1\":{\"123\":2}}],[\"relative\",{\"1\":{\"247\":1,\"289\":1}}],[\"relationship\",{\"1\":{\"112\":1,\"165\":1,\"179\":1}}],[\"related\",{\"1\":{\"48\":7,\"104\":1,\"113\":1,\"126\":1,\"156\":2,\"179\":3,\"180\":4,\"182\":1,\"191\":1,\"195\":1,\"207\":3,\"213\":1,\"214\":1,\"246\":1,\"288\":1}}],[\"release<\",{\"1\":{\"310\":2}}],[\"release\",{\"0\":{\"250\":1,\"257\":1,\"262\":1,\"263\":1,\"284\":1,\"291\":1,\"292\":1,\"307\":1},\"1\":{\"101\":1,\"164\":10,\"285\":1,\"303\":1,\"312\":1,\"314\":1}}],[\"releases\",{\"1\":{\"100\":1,\"251\":1}}],[\"released\",{\"0\":{\"262\":1,\"263\":1,\"267\":1,\"284\":1,\"291\":1,\"292\":1},\"1\":{\"100\":1,\"101\":2,\"165\":1,\"276\":1,\"282\":1,\"283\":1,\"285\":1}}],[\"relevant\",{\"1\":{\"86\":1,\"109\":1,\"217\":1,\"248\":1,\"253\":1,\"293\":1}}],[\"reminded\",{\"1\":{\"199\":1}}],[\"remains\",{\"1\":{\"218\":1}}],[\"remaining\",{\"1\":{\"92\":1,\"198\":1,\"200\":2}}],[\"remain\",{\"1\":{\"89\":1}}],[\"removing\",{\"1\":{\"175\":1}}],[\"removes\",{\"1\":{\"279\":1}}],[\"removeclass\",{\"1\":{\"238\":1}}],[\"removerule\",{\"1\":{\"214\":1}}],[\"removeall\",{\"1\":{\"165\":1}}],[\"removeend\",{\"1\":{\"104\":1}}],[\"removed\",{\"1\":{\"101\":1,\"288\":1}}],[\"removeif\",{\"1\":{\"91\":1}}],[\"removebykey\",{\"1\":{\"40\":1}}],[\"remove\",{\"1\":{\"36\":1,\"40\":1,\"74\":1,\"92\":1,\"100\":6,\"114\":2,\"175\":1,\"184\":1,\"214\":1,\"263\":1,\"270\":1,\"307\":2}}],[\"remote\",{\"1\":{\"39\":1,\"48\":1,\"241\":2,\"275\":2}}],[\"remember\",{\"1\":{\"29\":1,\"100\":1}}],[\"repaired\",{\"1\":{\"210\":1}}],[\"repeat\",{\"1\":{\"197\":1}}],[\"repeatedly\",{\"1\":{\"104\":1,\"281\":1}}],[\"repeated\",{\"1\":{\"99\":1,\"101\":1}}],[\"represented\",{\"1\":{\"231\":1}}],[\"represent\",{\"1\":{\"182\":1}}],[\"representing\",{\"1\":{\"147\":1}}],[\"represents\",{\"1\":{\"43\":1,\"197\":1}}],[\"replenishrate\",{\"1\":{\"197\":2}}],[\"replace\",{\"1\":{\"179\":2,\"185\":1,\"207\":1,\"288\":1}}],[\"replacement\",{\"1\":{\"121\":1}}],[\"replication\",{\"1\":{\"127\":3}}],[\"report\",{\"0\":{\"278\":1},\"1\":{\"164\":1,\"212\":2,\"214\":3}}],[\"reported\",{\"1\":{\"86\":1,\"164\":1,\"280\":1,\"316\":1}}],[\"repositorysuffix\",{\"1\":{\"43\":1}}],[\"repositorysupportenum\",{\"1\":{\"43\":2}}],[\"repositorysupport\",{\"1\":{\"33\":6,\"43\":3,\"46\":5}}],[\"repository\",{\"0\":{\"51\":1,\"52\":1,\"247\":1,\"248\":1,\"249\":1},\"1\":{\"42\":2,\"46\":1,\"247\":3,\"250\":1,\"251\":1,\"275\":2,\"279\":1}}],[\"reputation\",{\"1\":{\"22\":1}}],[\"ret\",{\"1\":{\"237\":5}}],[\"retries=\",{\"1\":{\"265\":1}}],[\"retries\",{\"1\":{\"183\":1,\"184\":1,\"185\":1}}],[\"retrieve\",{\"1\":{\"105\":2,\"136\":1}}],[\"retrieves\",{\"1\":{\"91\":1}}],[\"retrieved\",{\"1\":{\"43\":1}}],[\"retrywhen\",{\"1\":{\"184\":1}}],[\"retrytimes\",{\"1\":{\"61\":1,\"64\":6,\"105\":3,\"184\":6}}],[\"retry\",{\"1\":{\"33\":2,\"43\":1,\"82\":1,\"172\":4,\"183\":3,\"184\":6,\"214\":1,\"217\":1}}],[\"retrymax\",{\"1\":{\"33\":5,\"43\":2,\"46\":1,\"184\":1,\"275\":1}}],[\"returned\",{\"1\":{\"123\":1,\"179\":1,\"214\":1}}],[\"returning\",{\"1\":{\"87\":1,\"120\":1}}],[\"returns\",{\"0\":{\"239\":1},\"1\":{\"48\":1,\"91\":1,\"132\":1,\"139\":1,\"178\":1,\"185\":2,\"193\":1,\"224\":1,\"289\":1}}],[\"returnvalue\",{\"1\":{\"36\":3}}],[\"return\",{\"1\":{\"35\":1,\"36\":1,\"39\":3,\"40\":9,\"48\":1,\"78\":3,\"79\":2,\"80\":2,\"81\":2,\"82\":4,\"85\":8,\"86\":7,\"87\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":5,\"93\":4,\"97\":2,\"99\":1,\"101\":1,\"104\":4,\"105\":1,\"109\":6,\"112\":7,\"114\":1,\"116\":1,\"117\":2,\"120\":1,\"121\":1,\"122\":1,\"123\":10,\"126\":1,\"127\":4,\"128\":2,\"132\":2,\"135\":1,\"137\":1,\"139\":4,\"147\":1,\"149\":5,\"151\":3,\"156\":7,\"161\":4,\"162\":1,\"165\":2,\"166\":4,\"172\":3,\"173\":1,\"175\":1,\"176\":6,\"177\":5,\"179\":5,\"180\":1,\"182\":6,\"183\":3,\"184\":4,\"185\":5,\"197\":7,\"199\":1,\"200\":1,\"207\":8,\"213\":1,\"214\":13,\"219\":2,\"220\":3,\"221\":9,\"230\":1,\"231\":1,\"234\":4,\"235\":5,\"236\":5,\"237\":2,\"238\":3,\"241\":2,\"242\":5,\"275\":1,\"287\":2,\"301\":3}}],[\"retain\",{\"1\":{\"22\":1}}],[\"re\",{\"1\":{\"32\":2,\"33\":4,\"46\":3,\"151\":2,\"164\":1,\"195\":1,\"221\":1}}],[\"recipes<\",{\"1\":{\"228\":1}}],[\"recycleperiod\",{\"1\":{\"91\":1}}],[\"recognize\",{\"1\":{\"184\":1}}],[\"reconnection\",{\"1\":{\"48\":1}}],[\"reconnect\",{\"1\":{\"48\":1}}],[\"recommendations\",{\"0\":{\"294\":1}}],[\"recommended\",{\"1\":{\"70\":2,\"200\":1,\"217\":1,\"246\":1,\"299\":1}}],[\"recommend\",{\"1\":{\"33\":4}}],[\"recover\",{\"1\":{\"212\":1}}],[\"recoverdelaytime\",{\"1\":{\"33\":3,\"43\":3,\"46\":1,\"275\":1}}],[\"recovers\",{\"1\":{\"31\":1,\"280\":1}}],[\"recovery\",{\"0\":{\"31\":1},\"1\":{\"31\":2,\"33\":4,\"34\":1,\"37\":1,\"43\":1,\"269\":1}}],[\"records\",{\"1\":{\"48\":1,\"198\":1,\"246\":1,\"252\":1}}],[\"record\",{\"1\":{\"23\":1,\"164\":2,\"175\":1,\"177\":1,\"198\":1}}],[\"receiving\",{\"1\":{\"117\":1}}],[\"receiveconfiginfo\",{\"1\":{\"166\":1}}],[\"receive\",{\"1\":{\"100\":1,\"213\":1,\"214\":1}}],[\"receives\",{\"1\":{\"92\":1,\"99\":1,\"116\":1,\"117\":1,\"118\":1,\"128\":1,\"252\":1}}],[\"received\",{\"1\":{\"24\":1,\"106\":1,\"112\":4,\"162\":1,\"195\":1,\"297\":1}}],[\"recently\",{\"0\":{\"282\":1}}],[\"recent\",{\"1\":{\"11\":1}}],[\"resilence4j\",{\"1\":{\"217\":1}}],[\"resilience\",{\"0\":{\"218\":1},\"1\":{\"216\":1,\"217\":1,\"221\":1}}],[\"resilience4jplugn\",{\"1\":{\"221\":1}}],[\"resilience4jplugin\",{\"1\":{\"179\":1,\"221\":2}}],[\"resilience4jregistryfactory\",{\"1\":{\"221\":4}}],[\"resilience4jconf\",{\"1\":{\"221\":12}}],[\"resilience4jbuilder\",{\"1\":{\"221\":3}}],[\"resilience4jhandler\",{\"1\":{\"221\":1}}],[\"resilience4jhandle\",{\"1\":{\"219\":35,\"220\":2,\"221\":7}}],[\"resilience4j<\",{\"1\":{\"217\":1}}],[\"resilience4j\",{\"0\":{\"215\":1,\"217\":1,\"221\":1},\"1\":{\"87\":2,\"179\":1,\"216\":2,\"217\":3,\"218\":3,\"221\":2}}],[\"res\",{\"1\":{\"92\":1,\"184\":3}}],[\"research\",{\"1\":{\"83\":1}}],[\"respect\",{\"1\":{\"316\":1}}],[\"respective\",{\"1\":{\"86\":1,\"118\":2,\"122\":1}}],[\"respectively\",{\"1\":{\"80\":1,\"82\":1,\"91\":1,\"112\":1,\"213\":1,\"226\":1,\"243\":1}}],[\"responsive\",{\"1\":{\"171\":1,\"184\":2,\"207\":1,\"221\":1,\"304\":1,\"315\":1}}],[\"responsible\",{\"1\":{\"21\":4,\"116\":1,\"128\":1,\"156\":1,\"160\":2,\"165\":1,\"166\":2,\"172\":1,\"173\":2,\"175\":2,\"214\":1,\"234\":2}}],[\"responsibility\",{\"0\":{\"21\":1},\"1\":{\"84\":1,\"210\":1}}],[\"responseplugin\",{\"1\":{\"187\":1}}],[\"response\",{\"1\":{\"92\":2,\"93\":11,\"100\":11,\"101\":3,\"104\":1,\"105\":1,\"164\":2,\"179\":2,\"184\":4,\"185\":9,\"197\":3,\"207\":4,\"211\":1,\"212\":1,\"236\":2,\"237\":1,\"307\":1}}],[\"responses\",{\"1\":{\"87\":1}}],[\"resulting\",{\"1\":{\"210\":1}}],[\"resulthandlers\",{\"1\":{\"207\":2}}],[\"resulthandler\",{\"1\":{\"207\":1}}],[\"resultflux\",{\"1\":{\"197\":2}}],[\"resultenum\",{\"1\":{\"184\":2,\"237\":1}}],[\"results\",{\"0\":{\"239\":1},\"1\":{\"177\":1,\"179\":2,\"184\":1,\"197\":3,\"224\":1,\"301\":2}}],[\"resultset\",{\"1\":{\"129\":2}}],[\"resultlist\",{\"1\":{\"175\":3}}],[\"result\",{\"0\":{\"149\":1,\"185\":1},\"1\":{\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"93\":4,\"104\":3,\"105\":1,\"109\":3,\"114\":2,\"117\":2,\"122\":1,\"175\":3,\"179\":1,\"183\":2,\"184\":4,\"185\":6,\"193\":1,\"197\":2,\"207\":2,\"214\":3,\"234\":2,\"236\":4,\"237\":4,\"238\":8,\"241\":1,\"242\":4,\"301\":2}}],[\"resouce\",{\"1\":{\"275\":1}}],[\"resourcename\",{\"1\":{\"214\":4}}],[\"resources\",{\"1\":{\"139\":1,\"154\":2,\"164\":2,\"210\":1,\"253\":1}}],[\"resource\",{\"1\":{\"43\":1,\"85\":1,\"121\":2,\"122\":1,\"123\":2,\"124\":3,\"126\":1,\"128\":1,\"132\":1,\"135\":2,\"136\":1,\"139\":3,\"164\":1,\"214\":3,\"275\":2}}],[\"resolves\",{\"1\":{\"279\":1}}],[\"resolved\",{\"1\":{\"29\":1,\"263\":1,\"285\":1}}],[\"resolution\",{\"0\":{\"235\":1},\"1\":{\"224\":1}}],[\"restore\",{\"1\":{\"246\":1,\"252\":1}}],[\"restored\",{\"1\":{\"212\":2}}],[\"restricted\",{\"1\":{\"193\":1}}],[\"restriction\",{\"1\":{\"74\":1}}],[\"restclientexception\",{\"1\":{\"104\":1,\"105\":1}}],[\"restcontroller\",{\"1\":{\"100\":1,\"109\":1,\"275\":1}}],[\"restful\",{\"1\":{\"70\":1,\"257\":4}}],[\"restarted\",{\"1\":{\"154\":1}}],[\"restarts\",{\"1\":{\"81\":1}}],[\"restart\",{\"0\":{\"278\":1},\"1\":{\"48\":2,\"154\":1,\"217\":1,\"295\":1}}],[\"rest\",{\"1\":{\"19\":1}}],[\"reactor\",{\"1\":{\"312\":1}}],[\"reaction\",{\"1\":{\"210\":1}}],[\"reactiveredistemplate<>\",{\"1\":{\"195\":1}}],[\"reactiveredistemplate<string\",{\"1\":{\"195\":1}}],[\"reactiveredistemplate\",{\"1\":{\"195\":4,\"197\":1}}],[\"reactive\",{\"1\":{\"11\":1,\"48\":3,\"92\":1,\"221\":1,\"235\":1,\"304\":1,\"315\":1}}],[\"reached\",{\"1\":{\"213\":1,\"214\":1,\"218\":2}}],[\"reaches\",{\"1\":{\"211\":1,\"212\":1,\"214\":2}}],[\"reachable\",{\"1\":{\"176\":4,\"205\":1}}],[\"reasonably\",{\"1\":{\"267\":1}}],[\"reasonable\",{\"0\":{\"279\":1},\"1\":{\"212\":1}}],[\"reason\",{\"1\":{\"123\":1,\"124\":1,\"134\":1,\"179\":1,\"211\":1,\"252\":1}}],[\"reasons\",{\"1\":{\"40\":1}}],[\"really\",{\"1\":{\"316\":1}}],[\"realpath\",{\"1\":{\"162\":3}}],[\"realize\",{\"1\":{\"133\":1,\"169\":1,\"206\":1,\"209\":1,\"242\":1}}],[\"realurl\",{\"1\":{\"87\":2,\"172\":2,\"180\":1,\"183\":3}}],[\"real\",{\"1\":{\"48\":2,\"70\":2,\"81\":1,\"87\":2,\"123\":1,\"183\":3,\"184\":2,\"185\":1,\"199\":1,\"212\":1,\"226\":1}}],[\"reads\",{\"1\":{\"289\":1}}],[\"readobject\",{\"1\":{\"242\":1}}],[\"readdata\",{\"1\":{\"161\":1,\"162\":1}}],[\"read\",{\"0\":{\"35\":1,\"189\":1,\"194\":1},\"1\":{\"5\":1,\"65\":2,\"124\":1,\"139\":1,\"156\":1,\"184\":1,\"192\":1,\"248\":1,\"288\":1}}],[\"reading\",{\"0\":{\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"194\":1},\"1\":{\"3\":1,\"5\":1,\"14\":1,\"161\":1,\"166\":1,\"189\":1,\"199\":1}}],[\"yaml\",{\"1\":{\"310\":1}}],[\"yanb07>sb\",{\"1\":{\"219\":1}}],[\"yangze\",{\"1\":{\"11\":1}}],[\"yncdata\",{\"1\":{\"104\":5,\"105\":1}}],[\"years\",{\"1\":{\"306\":1}}],[\"year\",{\"0\":{\"267\":1},\"1\":{\"297\":2}}],[\"yet\",{\"1\":{\"48\":2}}],[\"yes\",{\"1\":{\"48\":1,\"151\":1,\"218\":1}}],[\"yml\",{\"1\":{\"46\":1,\"48\":2,\"59\":1,\"154\":2,\"164\":2,\"265\":1,\"275\":3}}],[\"youe\",{\"1\":{\"310\":1}}],[\"yourself\",{\"1\":{\"38\":1,\"100\":1,\"214\":1}}],[\"your\",{\"0\":{\"46\":1,\"310\":1},\"1\":{\"28\":2,\"29\":2,\"30\":2,\"31\":3,\"33\":6,\"43\":3,\"46\":5,\"70\":2,\"83\":1,\"147\":1,\"164\":1,\"226\":1,\"252\":1,\"267\":1,\"300\":1,\"301\":3,\"303\":3,\"304\":1,\"305\":1,\"310\":1,\"311\":2,\"314\":3,\"315\":1}}],[\"you\",{\"0\":{\"46\":1,\"295\":1,\"302\":1,\"313\":1},\"1\":{\"20\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":3,\"33\":4,\"37\":1,\"38\":1,\"43\":3,\"44\":1,\"45\":1,\"46\":5,\"48\":3,\"54\":1,\"57\":1,\"59\":2,\"61\":1,\"64\":1,\"68\":1,\"70\":3,\"71\":1,\"72\":1,\"80\":3,\"82\":1,\"83\":3,\"86\":4,\"87\":1,\"97\":1,\"98\":1,\"99\":2,\"100\":2,\"101\":2,\"105\":1,\"106\":4,\"108\":1,\"110\":2,\"112\":3,\"113\":2,\"117\":1,\"121\":3,\"124\":1,\"128\":1,\"129\":3,\"130\":1,\"131\":2,\"155\":3,\"156\":1,\"161\":1,\"164\":3,\"166\":1,\"179\":2,\"182\":2,\"184\":1,\"189\":1,\"192\":2,\"193\":1,\"197\":1,\"212\":1,\"214\":1,\"217\":3,\"221\":1,\"234\":1,\"243\":1,\"249\":1,\"251\":1,\"252\":1,\"267\":1,\"270\":1,\"275\":5,\"276\":1,\"277\":1,\"281\":1,\"285\":4,\"290\":1,\"297\":1,\"300\":2,\"302\":3,\"303\":8,\"304\":3,\"305\":1,\"306\":1,\"309\":2,\"310\":2,\"311\":9,\"313\":3,\"314\":8,\"315\":3,\"316\":3}}],[\"yu199195\",{\"0\":{\"42\":1},\"1\":{\"28\":1,\"46\":1,\"266\":1,\"309\":1}}],[\"yuhang\",{\"1\":{\"14\":1}}],[\"yuan\",{\"1\":{\"5\":2}}],[\"z\",{\"1\":{\"155\":1}}],[\"zoo\",{\"1\":{\"155\":1}}],[\"zookeeperconfig\",{\"1\":{\"161\":6}}],[\"zookeeperconfiguration\",{\"1\":{\"112\":1,\"156\":4}}],[\"zookeepersyncdataservice\",{\"1\":{\"161\":3}}],[\"zookeepersyncdata\",{\"1\":{\"161\":2,\"162\":2}}],[\"zookeepersyncdataconfiguration\",{\"1\":{\"155\":1,\"161\":1}}],[\"zookeeperprop\",{\"1\":{\"156\":5}}],[\"zookeeperproperties\",{\"1\":{\"156\":2}}],[\"zookeeper<\",{\"1\":{\"154\":1,\"161\":1}}],[\"zookeeperlistener\",{\"1\":{\"112\":1,\"156\":1}}],[\"zookeeperdata\",{\"1\":{\"156\":2,\"160\":1}}],[\"zookeeperdatachangedlistener\",{\"1\":{\"48\":2,\"98\":1,\"112\":3,\"156\":3}}],[\"zookeeperdatainit\",{\"1\":{\"48\":1,\"112\":4,\"156\":8}}],[\"zookeeper\",{\"0\":{\"152\":1,\"153\":1,\"156\":1,\"158\":1,\"159\":1,\"161\":1},\"1\":{\"33\":4,\"43\":1,\"46\":1,\"48\":4,\"96\":1,\"98\":3,\"112\":4,\"116\":1,\"154\":3,\"155\":30,\"156\":16,\"157\":2,\"159\":4,\"160\":2,\"161\":8,\"162\":5,\"269\":1,\"270\":1,\"279\":2,\"280\":1,\"299\":1,\"307\":1,\"312\":1,\"316\":3}}],[\"zoneoffset\",{\"1\":{\"147\":2}}],[\"zh\",{\"1\":{\"49\":1,\"266\":1,\"275\":1,\"296\":1,\"306\":1,\"311\":3}}],[\"zhu\",{\"1\":{\"14\":1,\"114\":1}}],[\"zhuming\",{\"1\":{\"11\":1}}],[\"zkeventthread\",{\"1\":{\"155\":2}}],[\"zkserver\",{\"1\":{\"155\":1}}],[\"zkclientgetchildren\",{\"1\":{\"161\":1}}],[\"zkclient\",{\"1\":{\"112\":6,\"155\":10,\"156\":31,\"161\":23,\"162\":4}}],[\"zkpathconstants\",{\"1\":{\"98\":3,\"156\":3,\"161\":2}}],[\"zk\",{\"1\":{\"48\":1,\"156\":3,\"161\":2}}],[\"zknode\",{\"1\":{\"48\":1}}],[\"zero\",{\"1\":{\"34\":1,\"263\":1,\"269\":1,\"278\":1,\"300\":1}}],[\"ztzzz\",{\"1\":{\"11\":1}}],[\"崔\",{\"1\":{\"11\":1}}],[\"64\",{\"1\":{\"226\":1}}],[\"64583\",{\"1\":{\"155\":7}}],[\"64500\",{\"1\":{\"155\":9}}],[\"66\",{\"1\":{\"164\":1}}],[\"66ms\",{\"1\":{\"65\":1}}],[\"651\",{\"1\":{\"164\":1}}],[\"620\",{\"1\":{\"48\":1}}],[\"600\",{\"1\":{\"275\":1}}],[\"600000\",{\"1\":{\"275\":1}}],[\"6000\",{\"1\":{\"166\":1,\"275\":1}}],[\"60l\",{\"1\":{\"104\":1}}],[\"60s\",{\"1\":{\"100\":1}}],[\"609\",{\"1\":{\"64\":3}}],[\"60\",{\"1\":{\"43\":2,\"65\":1,\"101\":3,\"219\":1,\"275\":3}}],[\"6379\",{\"1\":{\"33\":1}}],[\"68\",{\"1\":{\"33\":2,\"46\":1,\"65\":1}}],[\"6\",{\"0\":{\"114\":1},\"1\":{\"10\":1,\"57\":1,\"65\":1,\"155\":1}}],[\"0<\",{\"1\":{\"274\":3,\"310\":2,\"311\":4}}],[\"0x1000b5e22f50002\",{\"1\":{\"155\":1}}],[\"0x1000b5e22f50001\",{\"1\":{\"155\":1}}],[\"09\",{\"1\":{\"138\":1}}],[\"09s\",{\"1\":{\"65\":1}}],[\"08\",{\"1\":{\"121\":1,\"155\":1}}],[\"0477097\",{\"1\":{\"219\":1}}],[\"04\",{\"1\":{\"105\":1}}],[\"03\",{\"1\":{\"105\":1,\"219\":11}}],[\"0l\",{\"1\":{\"77\":1,\"100\":1}}],[\"06\",{\"1\":{\"65\":1,\"117\":1,\"164\":1}}],[\"06ms\",{\"1\":{\"65\":1}}],[\"069\",{\"1\":{\"48\":1}}],[\"07\",{\"1\":{\"118\":1}}],[\"077\",{\"1\":{\"48\":2}}],[\"075\",{\"1\":{\"48\":1}}],[\"0\",{\"0\":{\"262\":1,\"263\":1,\"265\":1,\"284\":1,\"286\":1,\"291\":1,\"292\":1,\"294\":1,\"295\":2,\"307\":1},\"1\":{\"35\":3,\"36\":1,\"48\":2,\"61\":1,\"64\":6,\"81\":4,\"82\":3,\"89\":1,\"90\":8,\"91\":4,\"104\":3,\"122\":1,\"123\":1,\"147\":2,\"155\":31,\"175\":3,\"176\":1,\"177\":3,\"179\":2,\"184\":1,\"193\":2,\"197\":1,\"200\":3,\"213\":5,\"214\":2,\"218\":4,\"219\":1,\"226\":4,\"242\":3,\"264\":2,\"265\":1,\"270\":2,\"273\":1,\"275\":3,\"282\":1,\"283\":1,\"292\":1,\"293\":3,\"294\":1,\"295\":2,\"306\":1}}],[\"052\",{\"1\":{\"164\":1}}],[\"05s\",{\"1\":{\"65\":1}}],[\"05k\",{\"1\":{\"65\":1}}],[\"05\",{\"1\":{\"11\":2,\"14\":2,\"244\":1}}],[\"003\",{\"1\":{\"155\":1}}],[\"007\",{\"1\":{\"48\":1}}],[\"00\",{\"1\":{\"10\":2,\"11\":1,\"13\":2,\"14\":1,\"48\":8,\"82\":1,\"219\":2}}],[\"02\",{\"0\":{\"9\":1,\"102\":1,\"158\":1},\"1\":{\"104\":1,\"244\":1}}],[\"018\",{\"1\":{\"155\":1}}],[\"01k\",{\"1\":{\"65\":1}}],[\"01mb\",{\"1\":{\"65\":1}}],[\"012\",{\"1\":{\"48\":1,\"155\":2}}],[\"010\",{\"1\":{\"48\":1}}],[\"01\",{\"0\":{\"9\":1,\"12\":2,\"94\":1,\"152\":1},\"1\":{\"48\":15,\"57\":10,\"61\":3,\"64\":18,\"82\":2,\"155\":16,\"164\":7}}],[\"lcn\",{\"1\":{\"316\":1}}],[\"lunar\",{\"1\":{\"289\":1}}],[\"lua\",{\"0\":{\"200\":1},\"1\":{\"197\":2,\"199\":2,\"200\":3}}],[\"lfallbackhandler\",{\"1\":{\"214\":1}}],[\"lrulehandle\",{\"1\":{\"214\":1}}],[\"lplugin\",{\"1\":{\"214\":2}}],[\"ls\",{\"1\":{\"165\":3}}],[\"l\",{\"1\":{\"48\":8,\"197\":2}}],[\"lmax\",{\"1\":{\"35\":5}}],[\"ll\",{\"1\":{\"29\":1,\"235\":1}}],[\"less\",{\"1\":{\"211\":2,\"213\":1,\"219\":1,\"221\":1,\"222\":1,\"235\":1}}],[\"leisnull\",{\"1\":{\"182\":1}}],[\"left\",{\"1\":{\"48\":1,\"105\":1,\"106\":1,\"214\":1}}],[\"length\",{\"1\":{\"48\":1,\"90\":4,\"241\":1,\"242\":4,\"288\":1}}],[\"level\",{\"1\":{\"19\":2,\"139\":3,\"179\":6,\"182\":1,\"209\":1,\"211\":2,\"253\":1,\"270\":1,\"275\":1,\"278\":1,\"316\":1}}],[\"lettuceconnectionfactory\",{\"1\":{\"195\":4}}],[\"let\",{\"0\":{\"82\":1},\"1\":{\"16\":1,\"28\":2,\"30\":1,\"48\":5,\"72\":1,\"77\":1,\"82\":1,\"86\":1,\"87\":1,\"88\":1,\"91\":1,\"100\":2,\"110\":1,\"120\":1,\"122\":2,\"126\":1,\"129\":3,\"132\":1,\"133\":1,\"164\":1,\"175\":1,\"177\":1,\"179\":1,\"181\":1,\"182\":2,\"184\":1,\"207\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"235\":1,\"297\":1,\"303\":1,\"304\":1,\"307\":1,\"314\":1,\"315\":1}}],[\"leap\",{\"1\":{\"289\":1}}],[\"learned\",{\"1\":{\"179\":1,\"187\":1}}],[\"learns\",{\"0\":{\"94\":1,\"102\":1,\"106\":1,\"152\":1,\"158\":1,\"164\":1},\"1\":{\"316\":1}}],[\"learn\",{\"0\":{\"188\":1},\"1\":{\"83\":1,\"316\":1}}],[\"learning\",{\"0\":{\"47\":1,\"49\":1,\"67\":1,\"76\":1,\"84\":1,\"120\":1,\"140\":1,\"168\":1,\"170\":1,\"179\":1,\"186\":1,\"201\":1,\"209\":1,\"215\":1,\"223\":1},\"1\":{\"83\":1,\"283\":1,\"316\":1}}],[\"least\",{\"1\":{\"23\":1,\"200\":1}}],[\"leads\",{\"1\":{\"211\":1}}],[\"lead\",{\"1\":{\"91\":1,\"210\":1}}],[\"leading\",{\"1\":{\"19\":1}}],[\"leader\",{\"0\":{\"6\":1},\"1\":{\"248\":1,\"304\":1,\"315\":1}}],[\"leave\",{\"1\":{\"5\":1,\"276\":1}}],[\"liang\",{\"1\":{\"316\":1}}],[\"lightest\",{\"1\":{\"299\":1}}],[\"lightweight\",{\"1\":{\"19\":3,\"217\":1,\"225\":1}}],[\"liver\",{\"1\":{\"285\":1}}],[\"liveness\",{\"1\":{\"175\":2,\"176\":1}}],[\"liquan\",{\"1\":{\"155\":1}}],[\"lies\",{\"1\":{\"131\":1,\"189\":1}}],[\"liberation\",{\"1\":{\"91\":1}}],[\"library\",{\"1\":{\"19\":1,\"80\":1,\"179\":1,\"217\":1,\"284\":1}}],[\"little\",{\"1\":{\"86\":1,\"179\":1}}],[\"lists\",{\"1\":{\"105\":1,\"175\":1,\"307\":1}}],[\"listens\",{\"1\":{\"111\":1,\"165\":1,\"166\":1}}],[\"listening\",{\"0\":{\"113\":1},\"1\":{\"104\":1,\"105\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":6,\"166\":1}}],[\"listen\",{\"0\":{\"105\":1,\"111\":1},\"1\":{\"100\":2,\"104\":1,\"156\":2,\"162\":1}}],[\"listenerbeans\",{\"1\":{\"111\":2,\"156\":2,\"165\":2}}],[\"listenerurl\",{\"1\":{\"105\":3}}],[\"listeners\",{\"1\":{\"97\":2,\"111\":3,\"112\":2,\"113\":2,\"116\":1,\"156\":5,\"165\":2,\"166\":1}}],[\"listener\",{\"0\":{\"112\":1},\"1\":{\"48\":6,\"80\":1,\"81\":1,\"97\":6,\"100\":2,\"105\":3,\"111\":6,\"112\":4,\"113\":8,\"116\":1,\"156\":11,\"160\":2,\"165\":4,\"166\":8,\"241\":1,\"242\":1}}],[\"listall\",{\"1\":{\"97\":1,\"156\":3}}],[\"listing\",{\"1\":{\"87\":1}}],[\"list<flowrule>\",{\"1\":{\"214\":1}}],[\"list<authdatasubscriber>\",{\"1\":{\"104\":1,\"117\":1,\"161\":2}}],[\"list<appauthdata>\",{\"1\":{\"97\":2,\"111\":1,\"112\":1,\"113\":2,\"156\":1}}],[\"list<metadatasubscriber>\",{\"1\":{\"104\":1,\"117\":1,\"161\":2}}],[\"list<metadata>\",{\"1\":{\"97\":2,\"111\":1,\"112\":1,\"113\":2}}],[\"list<configgroupenum>\",{\"1\":{\"100\":3}}],[\"list<t>\",{\"1\":{\"97\":1,\"118\":1}}],[\"list<plugindata>\",{\"1\":{\"97\":4,\"98\":2,\"100\":1,\"104\":1,\"111\":1,\"112\":1,\"113\":2,\"118\":1,\"156\":1}}],[\"list<degraderule>\",{\"1\":{\"214\":1}}],[\"list<datachangedlistener>\",{\"1\":{\"97\":1,\"111\":1,\"156\":1}}],[\"list<divideupstream>\",{\"1\":{\"79\":1,\"81\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":1,\"120\":1,\"172\":1,\"173\":1,\"175\":4,\"177\":3,\"183\":1}}],[\"list<string>\",{\"1\":{\"147\":1,\"161\":1,\"162\":1,\"197\":2}}],[\"list<selectordata>\",{\"1\":{\"97\":2,\"111\":1,\"112\":1,\"113\":2,\"156\":1}}],[\"list<selectorconditiondto>\",{\"1\":{\"48\":1,\"80\":1}}],[\"list<soulplugin>\",{\"1\":{\"86\":4,\"179\":1,\"207\":2}}],[\"list<ruledata>\",{\"1\":{\"85\":1,\"97\":2,\"111\":1,\"112\":1,\"113\":2,\"156\":1,\"165\":3,\"172\":1,\"182\":1}}],[\"list<ruleconditiondto>\",{\"1\":{\"82\":1}}],[\"list\",{\"1\":{\"48\":1,\"69\":1,\"72\":1,\"86\":1,\"117\":1,\"172\":2,\"173\":4,\"175\":2,\"177\":1,\"178\":3,\"192\":1,\"212\":1,\"218\":1,\"234\":2,\"287\":1,\"288\":1,\"312\":1}}],[\"lines\",{\"1\":{\"33\":1,\"69\":1,\"219\":1}}],[\"line\",{\"1\":{\"32\":1,\"82\":1,\"100\":1,\"120\":2,\"121\":1,\"288\":1}}],[\"linkedmultivaluemap<>\",{\"1\":{\"105\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"35\":1,\"36\":1,\"77\":1,\"104\":1}}],[\"linkedblockingqueue\",{\"1\":{\"35\":1,\"36\":1}}],[\"linkplain\",{\"1\":{\"35\":2,\"39\":1,\"40\":2,\"43\":2,\"109\":2,\"156\":1,\"161\":1,\"165\":1,\"219\":2}}],[\"link\",{\"0\":{\"208\":1},\"1\":{\"28\":2,\"93\":1,\"106\":1}}],[\"likely\",{\"1\":{\"100\":2}}],[\"like\",{\"1\":{\"32\":2,\"70\":1,\"81\":2,\"100\":1,\"101\":1,\"120\":1,\"132\":1,\"180\":3,\"212\":1,\"221\":1,\"283\":1,\"307\":1,\"310\":1}}],[\"limitforperiod\",{\"1\":{\"218\":1}}],[\"limitrefreshperiod\",{\"1\":{\"218\":1}}],[\"limit\",{\"0\":{\"192\":1},\"1\":{\"197\":1,\"198\":1,\"199\":1,\"211\":1,\"213\":2,\"214\":4,\"219\":2,\"275\":1}}],[\"limiterhandle\",{\"1\":{\"197\":3}}],[\"limiter\",{\"1\":{\"189\":1,\"192\":1,\"214\":2,\"217\":2,\"221\":5,\"311\":1}}],[\"limiterplugindata\",{\"1\":{\"195\":1}}],[\"limiterplugin\",{\"1\":{\"179\":1,\"187\":1}}],[\"limited\",{\"1\":{\"24\":1,\"253\":1}}],[\"limiting\",{\"0\":{\"196\":1,\"200\":1,\"219\":1},\"1\":{\"11\":1,\"169\":1,\"179\":1,\"185\":1,\"189\":2,\"191\":1,\"195\":6,\"199\":1,\"214\":1,\"216\":1,\"219\":9,\"220\":1,\"221\":3,\"222\":1,\"298\":1,\"304\":1,\"312\":1,\"315\":1}}],[\"liupenghui\",{\"1\":{\"11\":1}}],[\"lot\",{\"1\":{\"120\":1,\"124\":1,\"199\":1,\"221\":1,\"285\":1,\"303\":1,\"314\":1}}],[\"lottery\",{\"1\":{\"38\":1}}],[\"loopholes\",{\"1\":{\"210\":1}}],[\"loop\",{\"1\":{\"91\":1,\"105\":1,\"114\":1,\"304\":1,\"315\":1}}],[\"looks\",{\"1\":{\"156\":1,\"164\":1,\"180\":2}}],[\"lookupiterator\",{\"1\":{\"123\":1}}],[\"looked\",{\"1\":{\"120\":1}}],[\"looking\",{\"1\":{\"73\":1,\"98\":2,\"113\":1,\"126\":1,\"133\":1}}],[\"look\",{\"0\":{\"79\":1,\"82\":1},\"1\":{\"48\":4,\"77\":1,\"82\":1,\"88\":1,\"92\":1,\"97\":1,\"100\":2,\"112\":1,\"120\":3,\"122\":1,\"123\":1,\"126\":1,\"129\":2,\"131\":1,\"132\":1,\"133\":1,\"172\":1,\"173\":1,\"175\":1,\"177\":1,\"181\":1,\"182\":2,\"184\":1,\"207\":1,\"213\":1,\"214\":1,\"304\":2,\"307\":1,\"315\":2,\"316\":1}}],[\"lombok\",{\"1\":{\"43\":1}}],[\"loadrules\",{\"1\":{\"214\":4}}],[\"loadresources\",{\"1\":{\"136\":2,\"139\":2}}],[\"loadbalan\",{\"1\":{\"177\":1}}],[\"loadbalance=\",{\"1\":{\"265\":2}}],[\"loadbalanceutils\",{\"1\":{\"87\":1,\"120\":2,\"172\":1,\"183\":2,\"185\":1}}],[\"loadbalance\",{\"1\":{\"82\":1,\"87\":1,\"120\":5,\"127\":3,\"177\":4}}],[\"loaddirectory\",{\"1\":{\"139\":2}}],[\"loadclass\",{\"1\":{\"136\":1,\"139\":2}}],[\"loads\",{\"1\":{\"128\":1}}],[\"loadinitialdrivers\",{\"1\":{\"126\":2}}],[\"loadingcache<string\",{\"1\":{\"40\":1}}],[\"loadingcache\",{\"1\":{\"40\":1}}],[\"loading\",{\"1\":{\"11\":1,\"40\":5,\"122\":1,\"123\":2,\"178\":1}}],[\"loadextensionclass\",{\"1\":{\"139\":2}}],[\"loaders\",{\"1\":{\"121\":2,\"132\":4}}],[\"loader\",{\"0\":{\"132\":1},\"1\":{\"86\":1,\"123\":9,\"131\":1,\"132\":2,\"133\":1,\"138\":1,\"177\":1,\"178\":1}}],[\"loadeddrivers\",{\"1\":{\"126\":2}}],[\"loaded\",{\"1\":{\"86\":2,\"112\":1,\"122\":1,\"138\":1,\"177\":1,\"316\":1}}],[\"load\",{\"0\":{\"62\":1,\"64\":1,\"74\":1,\"84\":1,\"88\":1,\"177\":1,\"265\":1},\"1\":{\"40\":2,\"64\":1,\"69\":1,\"72\":1,\"74\":1,\"86\":1,\"87\":3,\"88\":1,\"89\":1,\"120\":2,\"121\":1,\"122\":7,\"123\":11,\"124\":1,\"126\":1,\"129\":1,\"132\":1,\"135\":1,\"136\":1,\"139\":3,\"164\":2,\"171\":2,\"172\":4,\"177\":5,\"178\":2,\"183\":2,\"195\":1,\"207\":1,\"225\":1,\"263\":1,\"265\":1,\"287\":1,\"303\":1,\"307\":1,\"314\":1}}],[\"loadfactor\",{\"1\":{\"33\":1,\"43\":1}}],[\"loss\",{\"1\":{\"32\":1}}],[\"localdatetime\",{\"1\":{\"147\":2}}],[\"localhost\",{\"1\":{\"56\":1,\"59\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":4,\"73\":2,\"81\":1,\"96\":2,\"108\":1,\"154\":2,\"155\":10,\"164\":2,\"219\":1,\"220\":1,\"309\":1,\"310\":1}}],[\"local\",{\"1\":{\"43\":1,\"48\":2,\"154\":1,\"164\":1,\"200\":15,\"275\":3,\"279\":1,\"316\":1}}],[\"locating\",{\"1\":{\"123\":1}}],[\"location\",{\"1\":{\"10\":1,\"13\":1,\"48\":1,\"89\":1,\"132\":1,\"207\":1}}],[\"locate\",{\"1\":{\"19\":1,\"111\":1}}],[\"lock\",{\"0\":{\"35\":1},\"1\":{\"288\":1}}],[\"locking\",{\"1\":{\"29\":1,\"139\":1}}],[\"lovers\",{\"1\":{\"20\":1}}],[\"lower\",{\"1\":{\"48\":1,\"119\":2,\"214\":1}}],[\"low\",{\"1\":{\"19\":1,\"91\":1,\"211\":1,\"312\":1}}],[\"loged\",{\"1\":{\"80\":1,\"82\":2}}],[\"logics\",{\"1\":{\"85\":1,\"113\":1}}],[\"logical\",{\"1\":{\"83\":1}}],[\"logic\",{\"0\":{\"78\":1,\"113\":1},\"1\":{\"83\":1,\"84\":1,\"85\":1,\"100\":1,\"101\":1,\"110\":1,\"113\":1,\"182\":1,\"183\":2,\"184\":1,\"185\":1,\"192\":1,\"200\":1,\"210\":1,\"214\":4,\"288\":1}}],[\"login\",{\"1\":{\"56\":1}}],[\"log4j\",{\"1\":{\"57\":5}}],[\"loggerfactory\",{\"1\":{\"57\":1}}],[\"logger\",{\"1\":{\"39\":1,\"57\":2}}],[\"logging\",{\"0\":{\"32\":1},\"1\":{\"57\":1}}],[\"logutil\",{\"1\":{\"39\":1}}],[\"logs\",{\"0\":{\"32\":1,\"35\":1},\"1\":{\"29\":1,\"31\":1,\"32\":1,\"33\":2,\"34\":1,\"38\":1,\"48\":2,\"270\":2}}],[\"log\",{\"0\":{\"31\":1,\"38\":1},\"1\":{\"19\":1,\"21\":1,\"30\":1,\"31\":1,\"33\":4,\"34\":1,\"35\":1,\"38\":3,\"40\":1,\"43\":1,\"48\":4,\"56\":1,\"68\":1,\"70\":2,\"73\":1,\"85\":2,\"86\":1,\"92\":1,\"97\":1,\"100\":1,\"104\":7,\"105\":4,\"114\":4,\"117\":1,\"151\":2,\"161\":1,\"166\":1,\"182\":4,\"183\":2,\"184\":3,\"197\":2,\"207\":2,\"212\":2,\"219\":2,\"220\":1,\"229\":1,\"236\":1,\"269\":1,\"271\":2,\"275\":1,\"279\":2,\"280\":2}}],[\"longer\",{\"1\":{\"283\":1}}],[\"longs\",{\"1\":{\"197\":3}}],[\"longpollingtask\",{\"1\":{\"105\":1}}],[\"longpollinglistener\",{\"1\":{\"100\":1}}],[\"longpolling\",{\"1\":{\"100\":4,\"105\":2}}],[\"longpollingclient\",{\"1\":{\"100\":10,\"105\":1}}],[\"longpollingdata\",{\"0\":{\"100\":1},\"1\":{\"97\":1,\"100\":1}}],[\"long\",{\"0\":{\"94\":1,\"95\":1,\"99\":1,\"100\":1,\"102\":1,\"103\":1},\"1\":{\"14\":1,\"48\":9,\"81\":1,\"82\":1,\"89\":3,\"91\":6,\"92\":1,\"97\":1,\"98\":3,\"99\":2,\"100\":2,\"101\":1,\"103\":3,\"104\":2,\"105\":2,\"112\":2,\"116\":1,\"124\":1,\"164\":1,\"184\":3,\"197\":1,\"198\":1,\"210\":1,\"211\":1,\"221\":1,\"299\":1,\"312\":1}}],[\"lag\",{\"1\":{\"316\":1}}],[\"launched\",{\"1\":{\"253\":1}}],[\"law\",{\"1\":{\"253\":1}}],[\"lambda\",{\"1\":{\"217\":1,\"288\":1,\"304\":2,\"315\":2}}],[\"lack\",{\"1\":{\"164\":1}}],[\"lazyiterator\",{\"1\":{\"123\":4}}],[\"lazy\",{\"1\":{\"123\":2}}],[\"lazily\",{\"1\":{\"86\":1}}],[\"latter\",{\"1\":{\"120\":1}}],[\"latest\",{\"1\":{\"104\":1,\"282\":1}}],[\"latency\",{\"1\":{\"65\":2}}],[\"later\",{\"0\":{\"267\":1},\"1\":{\"48\":2,\"74\":1,\"80\":1,\"81\":1,\"91\":1,\"92\":1,\"113\":1,\"114\":1,\"151\":1,\"179\":1,\"182\":1,\"193\":1,\"285\":1,\"316\":1}}],[\"latecomers\",{\"1\":{\"5\":1}}],[\"largely\",{\"1\":{\"185\":1}}],[\"large\",{\"1\":{\"91\":1,\"105\":2,\"177\":2,\"199\":1,\"210\":1,\"304\":1,\"307\":1,\"315\":1,\"316\":1}}],[\"layers\",{\"1\":{\"81\":1,\"134\":1}}],[\"layer\",{\"0\":{\"136\":1},\"1\":{\"65\":1,\"78\":1,\"84\":1,\"101\":1,\"137\":2}}],[\"lang3\",{\"1\":{\"40\":1}}],[\"lang\",{\"1\":{\"36\":1,\"164\":3,\"234\":1}}],[\"language\",{\"1\":{\"4\":1,\"300\":1}}],[\"lastring\",{\"1\":{\"89\":4}}],[\"lastmodifytime=1611248302571\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248301607\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248299419\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248295740\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248419077\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248419075\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248419069\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248419012\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248419010\",{\"1\":{\"48\":1}}],[\"lastmodifytime=1611248118794\",{\"1\":{\"48\":1}}],[\"lastly\",{\"1\":{\"38\":1}}],[\"last\",{\"0\":{\"283\":1,\"306\":1},\"1\":{\"23\":1,\"99\":1,\"100\":2,\"101\":1,\"103\":1,\"131\":1,\"144\":1,\"172\":1,\"198\":2,\"200\":13,\"203\":1,\"211\":1,\"212\":1,\"297\":1}}],[\"wget\",{\"1\":{\"309\":1}}],[\"ws\",{\"1\":{\"96\":1,\"310\":1}}],[\"wrong\",{\"1\":{\"151\":1}}],[\"wrote\",{\"1\":{\"129\":1,\"304\":1,\"315\":1,\"316\":2}}],[\"wrapper\",{\"0\":{\"180\":1}}],[\"wrapping\",{\"1\":{\"100\":1}}],[\"wrap\",{\"1\":{\"121\":1}}],[\"wrk\",{\"1\":{\"65\":3}}],[\"writing\",{\"1\":{\"86\":1,\"129\":2,\"252\":1,\"283\":1,\"316\":1}}],[\"written\",{\"1\":{\"48\":1,\"80\":1,\"122\":1,\"304\":1,\"315\":1}}],[\"writewith\",{\"1\":{\"93\":1,\"185\":1}}],[\"write\",{\"0\":{\"35\":1},\"1\":{\"78\":1,\"80\":1,\"84\":1,\"112\":1,\"121\":1,\"123\":1,\"129\":1,\"248\":1,\"252\":1}}],[\"writes\",{\"1\":{\"5\":1}}],[\"w\",{\"1\":{\"57\":2,\"164\":2}}],[\"world\",{\"1\":{\"220\":1,\"230\":1,\"275\":6}}],[\"worth\",{\"1\":{\"101\":1}}],[\"word\",{\"1\":{\"69\":1}}],[\"works\",{\"1\":{\"92\":1}}],[\"work\",{\"1\":{\"61\":3,\"64\":18,\"74\":1,\"83\":1,\"97\":1,\"98\":1,\"120\":1,\"253\":1,\"303\":1,\"314\":1}}],[\"worry\",{\"1\":{\"37\":1,\"87\":1,\"122\":1,\"276\":1,\"283\":1}}],[\"would\",{\"1\":{\"48\":1,\"294\":1,\"304\":1,\"307\":1,\"315\":1}}],[\"won\",{\"1\":{\"30\":1,\"33\":1}}],[\"wang\",{\"1\":{\"316\":1}}],[\"wants\",{\"1\":{\"252\":1,\"304\":1,\"315\":1}}],[\"want\",{\"0\":{\"295\":1},\"1\":{\"112\":1,\"275\":3,\"277\":1,\"285\":1,\"303\":3,\"311\":4,\"314\":3}}],[\"water\",{\"1\":{\"211\":2}}],[\"watermark\",{\"1\":{\"182\":1}}],[\"watchmetadata\",{\"1\":{\"161\":1}}],[\"watchappauth\",{\"1\":{\"161\":1}}],[\"watcherplugin\",{\"1\":{\"161\":2}}],[\"watcherall\",{\"1\":{\"161\":3}}],[\"watcherdata\",{\"1\":{\"161\":3,\"164\":1,\"166\":5}}],[\"watcher=org\",{\"1\":{\"155\":1}}],[\"watch\",{\"1\":{\"86\":1,\"162\":1,\"197\":1}}],[\"waitintervalfunctioninopenstate\",{\"1\":{\"218\":1}}],[\"waiting\",{\"1\":{\"99\":1,\"101\":2,\"211\":1,\"214\":2,\"218\":1,\"267\":1}}],[\"waits\",{\"1\":{\"114\":1}}],[\"wait\",{\"1\":{\"92\":1,\"104\":1,\"105\":1,\"211\":1,\"214\":1,\"219\":1}}],[\"wafplugin\",{\"1\":{\"179\":1}}],[\"waf\",{\"1\":{\"85\":2,\"87\":2,\"179\":1,\"307\":1}}],[\"warm\",{\"1\":{\"214\":6}}],[\"warmup\",{\"1\":{\"81\":1}}],[\"warehousing\",{\"1\":{\"80\":1}}],[\"warn\",{\"1\":{\"57\":3,\"104\":2,\"105\":1}}],[\"was\",{\"1\":{\"29\":2,\"33\":2,\"43\":1,\"48\":4,\"73\":1,\"86\":1,\"104\":1,\"105\":1,\"112\":4,\"120\":2,\"124\":1,\"133\":1,\"179\":3,\"184\":1,\"187\":1,\"198\":1,\"285\":2,\"287\":1,\"304\":1,\"315\":1,\"316\":1}}],[\"ways\",{\"1\":{\"65\":1,\"118\":1,\"212\":1,\"316\":1}}],[\"way\",{\"0\":{\"232\":1},\"1\":{\"22\":1,\"43\":1,\"48\":1,\"70\":3,\"98\":1,\"101\":1,\"103\":1,\"105\":1,\"123\":1,\"129\":2,\"131\":1,\"132\":1,\"179\":1,\"211\":2,\"212\":1,\"267\":1,\"285\":2,\"312\":1,\"316\":1}}],[\"white\",{\"1\":{\"101\":1,\"307\":1,\"312\":1}}],[\"while\",{\"1\":{\"100\":1,\"105\":3,\"123\":2,\"126\":1,\"129\":2,\"130\":1,\"139\":1,\"151\":1,\"164\":1,\"210\":1}}],[\"which\",{\"0\":{\"82\":1},\"1\":{\"35\":1,\"40\":1,\"48\":4,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"80\":3,\"81\":2,\"82\":1,\"85\":2,\"90\":1,\"91\":1,\"92\":1,\"97\":2,\"98\":1,\"100\":4,\"101\":2,\"104\":3,\"108\":1,\"112\":1,\"113\":2,\"118\":1,\"119\":2,\"120\":1,\"121\":2,\"122\":1,\"127\":1,\"128\":2,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":2,\"142\":1,\"151\":1,\"156\":4,\"164\":2,\"166\":1,\"177\":2,\"180\":2,\"182\":1,\"185\":1,\"187\":1,\"193\":1,\"197\":1,\"207\":1,\"210\":1,\"211\":1,\"212\":2,\"214\":4,\"218\":1,\"225\":1,\"275\":1,\"276\":1,\"283\":1,\"285\":1,\"299\":1,\"300\":1,\"301\":1,\"303\":1,\"304\":1,\"306\":1,\"314\":1,\"315\":1,\"316\":1}}],[\"why\",{\"1\":{\"40\":1,\"48\":1,\"105\":1,\"123\":1,\"127\":1,\"179\":1,\"191\":1,\"235\":1}}],[\"whether\",{\"1\":{\"43\":1,\"70\":1,\"78\":1,\"85\":1,\"86\":2,\"90\":2,\"99\":2,\"101\":2,\"104\":2,\"114\":1,\"128\":1,\"151\":4,\"162\":1,\"164\":1,\"176\":4,\"177\":1,\"184\":1,\"192\":1,\"195\":2,\"197\":1,\"212\":4,\"213\":2,\"214\":1,\"218\":2,\"241\":2,\"242\":1,\"316\":1}}],[\"where\",{\"1\":{\"33\":2,\"48\":1,\"82\":1,\"86\":3,\"87\":1,\"99\":1,\"100\":3,\"101\":1,\"112\":2,\"123\":2,\"124\":1,\"139\":1,\"164\":1,\"173\":1,\"179\":2,\"183\":2,\"200\":1,\"207\":1,\"252\":1,\"302\":1,\"303\":2,\"313\":1,\"314\":2}}],[\"when\",{\"1\":{\"29\":1,\"30\":1,\"33\":2,\"36\":1,\"40\":2,\"43\":1,\"48\":2,\"56\":1,\"66\":1,\"69\":1,\"70\":3,\"77\":1,\"78\":1,\"86\":1,\"90\":1,\"97\":1,\"101\":2,\"104\":2,\"105\":1,\"112\":7,\"113\":2,\"114\":1,\"120\":1,\"123\":4,\"124\":2,\"128\":1,\"129\":1,\"131\":1,\"135\":2,\"138\":1,\"157\":1,\"164\":2,\"171\":1,\"173\":1,\"174\":1,\"180\":5,\"182\":1,\"193\":1,\"195\":3,\"199\":2,\"201\":1,\"205\":2,\"206\":1,\"211\":6,\"212\":5,\"214\":5,\"226\":1,\"231\":1,\"234\":1,\"235\":1,\"271\":1,\"280\":1,\"285\":2,\"287\":1,\"289\":1,\"301\":1,\"302\":1,\"303\":1,\"304\":2,\"312\":1,\"313\":1,\"314\":1,\"315\":2,\"316\":2}}],[\"whatever\",{\"1\":{\"303\":1,\"314\":1}}],[\"what\",{\"0\":{\"32\":1,\"37\":1,\"38\":1,\"98\":1,\"217\":1,\"285\":1,\"302\":2,\"313\":2},\"1\":{\"69\":2,\"77\":1,\"81\":1,\"83\":1,\"97\":2,\"98\":1,\"100\":2,\"101\":1,\"105\":1,\"126\":1,\"179\":2,\"180\":1,\"181\":1,\"182\":2,\"195\":1,\"197\":1,\"207\":1,\"211\":3,\"212\":2,\"216\":1,\"311\":3,\"316\":3}}],[\"whole\",{\"1\":{\"119\":1,\"176\":1,\"179\":1,\"181\":1,\"210\":1,\"285\":1}}],[\"whose\",{\"1\":{\"118\":1,\"156\":1}}],[\"who\",{\"1\":{\"5\":1,\"78\":1,\"285\":1}}],[\"win\",{\"1\":{\"289\":1}}],[\"window\",{\"1\":{\"189\":2,\"213\":2,\"214\":1,\"218\":2,\"219\":2}}],[\"within\",{\"1\":{\"173\":1,\"211\":1,\"212\":2,\"213\":2,\"214\":1,\"253\":1}}],[\"withjson\",{\"1\":{\"104\":1}}],[\"withoutfallback\",{\"1\":{\"221\":2}}],[\"without\",{\"1\":{\"48\":3,\"72\":1,\"73\":1,\"105\":1,\"121\":1,\"124\":1,\"134\":1,\"151\":1,\"211\":1,\"212\":1,\"253\":1,\"303\":1,\"312\":1,\"314\":1}}],[\"with\",{\"0\":{\"28\":1,\"29\":1,\"53\":1,\"122\":1,\"194\":1,\"218\":1,\"233\":1,\"279\":1},\"1\":{\"24\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"34\":2,\"38\":1,\"46\":1,\"48\":6,\"69\":1,\"70\":1,\"72\":2,\"78\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"91\":7,\"97\":1,\"99\":2,\"100\":1,\"101\":3,\"105\":1,\"112\":1,\"118\":1,\"119\":1,\"121\":2,\"123\":1,\"128\":1,\"135\":1,\"137\":1,\"139\":5,\"156\":4,\"164\":2,\"165\":1,\"173\":1,\"179\":1,\"180\":3,\"195\":1,\"197\":1,\"201\":1,\"206\":1,\"207\":3,\"212\":2,\"213\":1,\"214\":4,\"216\":1,\"224\":1,\"226\":2,\"236\":1,\"246\":1,\"248\":1,\"252\":3,\"253\":1,\"263\":1,\"265\":2,\"269\":2,\"275\":1,\"276\":1,\"278\":2,\"279\":1,\"280\":2,\"283\":1,\"285\":1,\"288\":1,\"289\":2,\"290\":1,\"300\":1,\"301\":1,\"304\":1,\"312\":1,\"315\":1,\"316\":1}}],[\"wizard\",{\"1\":{\"19\":1}}],[\"willing\",{\"1\":{\"290\":1}}],[\"will\",{\"1\":{\"5\":1,\"24\":1,\"33\":2,\"38\":1,\"40\":2,\"48\":14,\"70\":1,\"72\":1,\"77\":1,\"80\":2,\"81\":2,\"85\":3,\"86\":1,\"87\":1,\"89\":1,\"91\":6,\"92\":2,\"98\":1,\"99\":2,\"100\":4,\"101\":6,\"104\":12,\"105\":4,\"106\":3,\"108\":1,\"113\":4,\"114\":3,\"117\":1,\"120\":1,\"123\":5,\"124\":2,\"126\":1,\"127\":1,\"128\":2,\"129\":1,\"131\":1,\"137\":1,\"151\":2,\"155\":1,\"156\":5,\"157\":3,\"159\":3,\"160\":1,\"161\":2,\"162\":1,\"164\":5,\"165\":5,\"166\":2,\"171\":1,\"174\":1,\"177\":1,\"179\":1,\"182\":5,\"185\":1,\"197\":1,\"199\":1,\"202\":1,\"205\":1,\"209\":2,\"210\":2,\"211\":3,\"212\":6,\"213\":10,\"214\":10,\"217\":1,\"218\":3,\"219\":1,\"221\":1,\"222\":1,\"226\":3,\"235\":1,\"241\":1,\"243\":1,\"247\":1,\"248\":3,\"252\":3,\"253\":3,\"271\":1,\"275\":1,\"276\":5,\"282\":2,\"283\":2,\"301\":1,\"303\":3,\"306\":1,\"312\":1,\"314\":3}}],[\"weather\",{\"1\":{\"304\":1,\"315\":1}}],[\"were\",{\"1\":{\"110\":1,\"131\":1,\"187\":1,\"285\":1}}],[\"wechat\",{\"1\":{\"46\":1}}],[\"weightedroundrobin\",{\"1\":{\"91\":13}}],[\"weightedroundrobin>\",{\"1\":{\"91\":2}}],[\"weights\",{\"1\":{\"90\":5,\"91\":2,\"177\":3}}],[\"weight\",{\"1\":{\"81\":1,\"88\":1,\"89\":1,\"90\":9,\"91\":9,\"177\":4}}],[\"weigher<string\",{\"1\":{\"40\":1}}],[\"weigher\",{\"1\":{\"40\":2}}],[\"weikai\",{\"1\":{\"11\":1}}],[\"welcome\",{\"1\":{\"46\":1,\"83\":1,\"251\":1,\"266\":1,\"316\":1}}],[\"welcomes\",{\"1\":{\"20\":1}}],[\"well\",{\"1\":{\"38\":1,\"69\":1,\"210\":1,\"211\":1,\"253\":1,\"269\":2,\"280\":1,\"303\":1,\"314\":1}}],[\"wentao\",{\"1\":{\"14\":1}}],[\"webflux<\",{\"1\":{\"310\":1}}],[\"webflux\",{\"1\":{\"207\":2}}],[\"webfluxresultutils\",{\"1\":{\"93\":2,\"183\":2,\"184\":1,\"185\":2,\"197\":1,\"214\":1,\"236\":2,\"238\":2}}],[\"webcilent\",{\"1\":{\"187\":1}}],[\"webclientresponseclient\",{\"0\":{\"93\":1}}],[\"webclientresponseplugin\",{\"1\":{\"87\":1,\"164\":1,\"179\":1}}],[\"webclient\",{\"1\":{\"92\":4,\"184\":3}}],[\"webclientplugin\",{\"0\":{\"92\":1},\"1\":{\"61\":1,\"64\":6,\"87\":1,\"179\":1,\"187\":1}}],[\"webhandler\",{\"1\":{\"86\":2,\"207\":3}}],[\"websites\",{\"1\":{\"253\":1}}],[\"website\",{\"0\":{\"18\":1},\"1\":{\"18\":1,\"56\":1,\"106\":1,\"162\":1,\"164\":2,\"218\":1,\"249\":1,\"266\":1,\"296\":2,\"310\":1}}],[\"websocket<\",{\"1\":{\"310\":1}}],[\"websocketclient\",{\"1\":{\"117\":1}}],[\"websocketclientsoulwebsocketclient\",{\"1\":{\"117\":1}}],[\"websocketcontroller\",{\"1\":{\"113\":1}}],[\"websocketconfig\",{\"1\":{\"48\":1,\"117\":7}}],[\"websocketcollector\",{\"1\":{\"48\":1,\"98\":1,\"112\":4,\"113\":5,\"114\":2,\"116\":4}}],[\"websocketlistener\",{\"1\":{\"112\":2,\"116\":1}}],[\"websocketdatahandler\",{\"1\":{\"117\":5,\"118\":1}}],[\"websocketdata<metadata>\",{\"1\":{\"113\":1}}],[\"websocketdata<appauthdata>\",{\"1\":{\"113\":1}}],[\"websocketdata<ruledata>\",{\"1\":{\"113\":1}}],[\"websocketdata<selectordata>\",{\"1\":{\"113\":1}}],[\"websocketdata<>\",{\"1\":{\"98\":1,\"113\":5}}],[\"websocketdata<plugindata>\",{\"1\":{\"98\":1,\"113\":1}}],[\"websocketdata\",{\"1\":{\"98\":2,\"113\":4,\"117\":6}}],[\"websocketdatachangedlistener\",{\"1\":{\"48\":3,\"98\":1,\"112\":3,\"113\":2}}],[\"websocketsyncproperties\",{\"1\":{\"112\":1,\"116\":1}}],[\"websocketsyncdataservice\",{\"1\":{\"57\":1,\"117\":3}}],[\"websocketsyncdataconfiguration\",{\"1\":{\"57\":1,\"117\":1}}],[\"websockets\",{\"1\":{\"48\":1}}],[\"websocket\",{\"0\":{\"106\":1},\"1\":{\"14\":1,\"48\":13,\"57\":2,\"83\":3,\"96\":3,\"98\":2,\"112\":5,\"114\":5,\"116\":4,\"117\":8,\"118\":1,\"119\":2,\"180\":1,\"298\":1,\"299\":2,\"305\":1,\"310\":3,\"312\":1}}],[\"web\",{\"0\":{\"115\":1,\"116\":1,\"117\":1,\"184\":1,\"185\":1,\"239\":1},\"1\":{\"11\":1,\"57\":2,\"68\":1,\"81\":1,\"82\":1,\"86\":1,\"92\":3,\"93\":1,\"98\":1,\"106\":1,\"112\":4,\"113\":3,\"114\":6,\"116\":4,\"117\":3,\"164\":2,\"179\":2,\"184\":1,\"185\":2,\"208\":2,\"224\":1,\"295\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"we\",{\"1\":{\"5\":1,\"40\":2,\"48\":5,\"68\":3,\"69\":6,\"72\":5,\"73\":1,\"74\":3,\"77\":1,\"78\":1,\"80\":2,\"81\":1,\"83\":1,\"87\":3,\"96\":2,\"97\":1,\"100\":5,\"101\":5,\"106\":2,\"113\":2,\"120\":1,\"122\":1,\"123\":6,\"124\":1,\"127\":3,\"129\":2,\"130\":1,\"131\":1,\"132\":1,\"135\":4,\"164\":2,\"173\":1,\"179\":8,\"180\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":2,\"187\":1,\"189\":1,\"199\":1,\"205\":1,\"206\":1,\"207\":3,\"211\":4,\"212\":12,\"214\":3,\"220\":2,\"226\":1,\"235\":2,\"252\":2,\"277\":1,\"281\":1,\"290\":1,\"300\":1,\"301\":2,\"302\":1,\"312\":1,\"313\":1,\"316\":5}}],[\"1~2ms\",{\"1\":{\"312\":1}}],[\"1s\",{\"1\":{\"220\":1}}],[\"1l\",{\"1\":{\"197\":3}}],[\"1c10d748\",{\"1\":{\"164\":4}}],[\"13\",{\"1\":{\"179\":1}}],[\"1349650371302551552\",{\"1\":{\"82\":1}}],[\"1349650371868782592\",{\"1\":{\"82\":1}}],[\"139\",{\"1\":{\"65\":1}}],[\"1800000\",{\"1\":{\"275\":1}}],[\"180\",{\"1\":{\"275\":1}}],[\"185\",{\"1\":{\"164\":1}}],[\"18\",{\"1\":{\"65\":1,\"155\":1}}],[\"114a5e0\",{\"1\":{\"155\":1}}],[\"11ms\",{\"1\":{\"65\":1}}],[\"11\",{\"1\":{\"61\":3,\"65\":2,\"96\":1,\"179\":1,\"210\":1,\"306\":1}}],[\"113\",{\"1\":{\"57\":1}}],[\"11th\",{\"1\":{\"28\":1}}],[\"1999ms\",{\"1\":{\"219\":2}}],[\"1997ms\",{\"1\":{\"219\":1}}],[\"1994ms\",{\"1\":{\"219\":1}}],[\"19\",{\"1\":{\"48\":7,\"164\":1}}],[\"192\",{\"1\":{\"33\":10,\"43\":1,\"46\":5,\"275\":3}}],[\"147\",{\"1\":{\"64\":3}}],[\"14\",{\"1\":{\"57\":5,\"61\":3,\"64\":18,\"65\":1,\"82\":2,\"219\":11}}],[\"14276\",{\"1\":{\"48\":1}}],[\"140ms\",{\"1\":{\"30\":1}}],[\"1\",{\"0\":{\"29\":1,\"35\":1,\"43\":1,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"53\":1,\"54\":1,\"56\":1,\"59\":1,\"60\":2,\"61\":1,\"63\":1,\"77\":1,\"79\":1,\"80\":2,\"81\":1,\"107\":1,\"112\":1,\"135\":1,\"160\":1,\"174\":1,\"257\":1,\"258\":1,\"267\":2,\"291\":1,\"292\":1,\"294\":1,\"295\":2,\"297\":1},\"1\":{\"33\":10,\"35\":1,\"36\":1,\"43\":4,\"46\":6,\"48\":1,\"57\":1,\"64\":3,\"65\":2,\"77\":2,\"80\":1,\"82\":7,\"85\":1,\"90\":1,\"101\":1,\"104\":2,\"105\":1,\"129\":4,\"133\":1,\"147\":1,\"155\":5,\"164\":1,\"172\":1,\"174\":1,\"176\":2,\"179\":3,\"182\":3,\"183\":1,\"184\":1,\"192\":1,\"193\":2,\"197\":4,\"200\":7,\"213\":6,\"214\":2,\"218\":2,\"219\":5,\"220\":1,\"221\":2,\"242\":2,\"258\":1,\"270\":1,\"273\":1,\"274\":3,\"275\":2,\"282\":1,\"292\":1,\"293\":3,\"294\":1,\"295\":2,\"301\":1,\"316\":1}}],[\"162614487\",{\"1\":{\"277\":1,\"283\":1}}],[\"1677ms\",{\"1\":{\"219\":1}}],[\"167\",{\"1\":{\"164\":1}}],[\"16179\",{\"1\":{\"65\":1}}],[\"168\",{\"1\":{\"33\":10,\"43\":1,\"46\":6,\"275\":3}}],[\"16\",{\"1\":{\"14\":8,\"57\":1,\"91\":1,\"139\":1,\"164\":1,\"219\":9,\"275\":2}}],[\"172\",{\"1\":{\"61\":1,\"64\":6}}],[\"17943\",{\"1\":{\"57\":5}}],[\"17\",{\"1\":{\"13\":1,\"14\":5,\"57\":2,\"82\":2,\"155\":16,\"164\":6}}],[\"155\",{\"1\":{\"61\":1,\"64\":6}}],[\"154\",{\"1\":{\"57\":1,\"164\":1}}],[\"150\",{\"1\":{\"57\":1}}],[\"15\",{\"1\":{\"13\":1,\"14\":7,\"57\":7,\"219\":2}}],[\"109\",{\"1\":{\"301\":1}}],[\"109533\",{\"1\":{\"65\":1}}],[\"10s\",{\"1\":{\"219\":1}}],[\"102\",{\"1\":{\"91\":1}}],[\"1024\",{\"1\":{\"48\":1,\"226\":1}}],[\"10\",{\"0\":{\"308\":1},\"1\":{\"11\":4,\"14\":4,\"19\":1,\"46\":1,\"48\":1,\"81\":1,\"155\":1,\"174\":1,\"197\":1,\"213\":2,\"214\":6,\"218\":2,\"219\":1,\"275\":2,\"312\":1}}],[\"1000\",{\"1\":{\"176\":1,\"200\":1,\"219\":2,\"220\":1}}],[\"10000\",{\"1\":{\"40\":1}}],[\"100000\",{\"1\":{\"33\":1,\"46\":1}}],[\"10051\",{\"1\":{\"164\":6}}],[\"100ms\",{\"1\":{\"30\":1,\"214\":1}}],[\"100\",{\"1\":{\"5\":1,\"91\":2,\"213\":1,\"218\":2,\"246\":1}}],[\"127\",{\"1\":{\"155\":1,\"179\":1,\"193\":1,\"275\":1}}],[\"121\",{\"1\":{\"61\":1,\"64\":6,\"155\":1}}],[\"126\",{\"1\":{\"61\":1,\"155\":1}}],[\"125\",{\"1\":{\"61\":1}}],[\"123\",{\"1\":{\"61\":1,\"300\":1}}],[\"123456\",{\"1\":{\"33\":4,\"43\":1,\"46\":2,\"56\":1,\"309\":1}}],[\"128\",{\"1\":{\"46\":2,\"164\":1,\"226\":1}}],[\"120\",{\"1\":{\"33\":4,\"43\":2}}],[\"12\",{\"1\":{\"5\":1,\"81\":1,\"179\":1,\"210\":1,\"219\":9}}],[\"nights\",{\"1\":{\"285\":1}}],[\"nio\",{\"1\":{\"219\":9}}],[\"nil\",{\"1\":{\"200\":2}}],[\"nginx\",{\"1\":{\"214\":1}}],[\"n\",{\"1\":{\"164\":1,\"219\":1}}],[\"numerals\",{\"1\":{\"288\":1}}],[\"num\",{\"1\":{\"89\":2,\"200\":3}}],[\"numberconverter\",{\"1\":{\"289\":1}}],[\"number\",{\"1\":{\"33\":1,\"48\":1,\"90\":2,\"105\":2,\"175\":1,\"177\":4,\"183\":1,\"184\":1,\"185\":1,\"189\":2,\"197\":1,\"198\":2,\"199\":1,\"211\":5,\"212\":5,\"213\":8,\"214\":5,\"218\":3,\"219\":4,\"235\":1,\"288\":1,\"289\":1}}],[\"nullpointerexception\",{\"1\":{\"126\":1,\"164\":4}}],[\"null\",{\"1\":{\"35\":1,\"39\":1,\"82\":1,\"85\":5,\"91\":5,\"92\":1,\"93\":2,\"100\":1,\"104\":2,\"105\":2,\"114\":1,\"123\":12,\"126\":3,\"127\":4,\"128\":2,\"132\":1,\"137\":1,\"139\":11,\"151\":2,\"164\":2,\"172\":1,\"182\":3,\"183\":3,\"184\":2,\"185\":2,\"193\":1,\"197\":1,\"207\":1,\"214\":7,\"221\":7,\"226\":16,\"236\":4,\"238\":1,\"241\":1,\"242\":3,\"289\":2}}],[\"native\",{\"1\":{\"241\":1,\"242\":1}}],[\"nativejava\",{\"1\":{\"241\":1,\"242\":2}}],[\"natural\",{\"1\":{\"195\":1}}],[\"naturalorder\",{\"1\":{\"147\":1}}],[\"naturally\",{\"1\":{\"31\":1,\"87\":1,\"105\":1,\"269\":1}}],[\"na\",{\"1\":{\"164\":9}}],[\"nacosfactory\",{\"1\":{\"166\":1}}],[\"nacosdata\",{\"1\":{\"165\":5}}],[\"nacosdatachangedlistener\",{\"1\":{\"112\":3,\"165\":2}}],[\"nacosconfig\",{\"1\":{\"166\":5}}],[\"nacosconfigservice\",{\"1\":{\"166\":1}}],[\"nacosconfiguration\",{\"1\":{\"112\":1}}],[\"nacoscachehandler\",{\"1\":{\"164\":4}}],[\"nacossyncdata\",{\"1\":{\"166\":4}}],[\"nacossyncdataconfiguration$$enhancerbyspringcglib$$cce084b7$$fastclassbyspringcglib$$3830e886\",{\"1\":{\"164\":1}}],[\"nacossyncdataconfiguration$$enhancerbyspringcglib$$cce084b7\",{\"1\":{\"164\":2}}],[\"nacossyncdataconfiguration\",{\"1\":{\"164\":4,\"166\":5}}],[\"nacossyncdataservice\",{\"1\":{\"164\":9,\"166\":4}}],[\"nacos<\",{\"1\":{\"164\":2}}],[\"nacoslistener\",{\"1\":{\"112\":1}}],[\"nacos\",{\"0\":{\"164\":1},\"1\":{\"112\":3,\"116\":1,\"164\":27,\"165\":4,\"166\":13,\"270\":1,\"275\":3,\"279\":1,\"280\":1,\"307\":2}}],[\"namingcase\",{\"1\":{\"289\":1}}],[\"naming\",{\"1\":{\"42\":1,\"119\":1}}],[\"names\",{\"1\":{\"275\":1}}],[\"namespace\",{\"1\":{\"72\":1,\"164\":6,\"269\":1,\"275\":1,\"278\":1}}],[\"name`\",{\"1\":{\"226\":3}}],[\"namely\",{\"1\":{\"179\":1,\"217\":2,\"240\":1}}],[\"named\",{\"1\":{\"85\":1,\"86\":1,\"172\":1,\"182\":1,\"207\":1,\"214\":1,\"275\":1}}],[\"name=10\",{\"1\":{\"155\":1}}],[\"name=\",{\"1\":{\"33\":43,\"43\":11}}],[\"name\",{\"1\":{\"19\":1,\"48\":3,\"56\":2,\"61\":2,\"64\":12,\"69\":1,\"70\":2,\"80\":1,\"82\":5,\"85\":2,\"92\":1,\"97\":2,\"98\":2,\"104\":1,\"105\":1,\"112\":5,\"113\":10,\"114\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":3,\"121\":1,\"123\":1,\"135\":2,\"136\":2,\"137\":2,\"139\":15,\"156\":1,\"164\":1,\"166\":1,\"172\":1,\"176\":1,\"177\":1,\"179\":2,\"180\":1,\"204\":1,\"212\":1,\"214\":3,\"226\":3,\"230\":1,\"234\":2,\"242\":4,\"247\":2,\"250\":1,\"252\":1,\"289\":1,\"300\":3,\"309\":1}}],[\"novice\",{\"1\":{\"316\":1}}],[\"nosuchmethodexception\",{\"1\":{\"242\":1}}],[\"nosuchelementexception\",{\"1\":{\"123\":1}}],[\"normally\",{\"1\":{\"211\":1}}],[\"normal\",{\"1\":{\"99\":1,\"127\":1,\"211\":1,\"212\":1,\"213\":4,\"220\":1,\"300\":1}}],[\"noconfig\",{\"1\":{\"57\":1}}],[\"no\",{\"1\":{\"36\":1,\"37\":1,\"57\":1,\"80\":1,\"82\":1,\"86\":1,\"92\":1,\"101\":1,\"105\":3,\"106\":1,\"107\":1,\"121\":1,\"123\":1,\"129\":1,\"131\":1,\"164\":2,\"174\":1,\"182\":1,\"183\":1,\"185\":1,\"218\":1,\"273\":1,\"283\":1,\"300\":1,\"304\":1,\"312\":1,\"315\":1}}],[\"nodes\",{\"1\":{\"81\":1,\"87\":1,\"91\":7,\"120\":1,\"161\":1,\"162\":1,\"214\":2,\"303\":2,\"314\":2}}],[\"node\",{\"1\":{\"33\":1,\"48\":2,\"81\":5,\"87\":4,\"89\":7,\"90\":2,\"91\":7,\"92\":1,\"98\":3,\"120\":1,\"161\":1,\"162\":3,\"214\":3,\"303\":1,\"312\":1,\"314\":1}}],[\"nowadays\",{\"1\":{\"304\":1,\"315\":1}}],[\"now\",{\"1\":{\"28\":1,\"29\":2,\"87\":1,\"91\":3,\"98\":1,\"100\":1,\"101\":1,\"110\":1,\"147\":2,\"179\":2,\"197\":1,\"200\":3,\"275\":1,\"297\":1,\"301\":1,\"316\":1}}],[\"nonregisteringdriver\",{\"1\":{\"126\":1,\"127\":2}}],[\"none\",{\"1\":{\"86\":1,\"226\":1}}],[\"nonnull\",{\"1\":{\"86\":1,\"195\":1,\"235\":1}}],[\"non\",{\"1\":{\"19\":1,\"176\":1,\"212\":1,\"241\":1,\"252\":1}}],[\"notifies\",{\"1\":{\"104\":1,\"118\":1}}],[\"notified\",{\"1\":{\"104\":1,\"105\":1}}],[\"notifications\",{\"1\":{\"112\":1}}],[\"notification\",{\"1\":{\"98\":1,\"112\":1,\"118\":3,\"195\":1}}],[\"notifying\",{\"1\":{\"98\":1}}],[\"notify\",{\"1\":{\"97\":1,\"98\":1,\"105\":1,\"116\":1,\"117\":1,\"119\":1}}],[\"noticed\",{\"1\":{\"301\":1}}],[\"notice\",{\"1\":{\"72\":1,\"172\":1}}],[\"nothing\",{\"1\":{\"80\":1,\"126\":1,\"164\":1,\"207\":1}}],[\"noted\",{\"1\":{\"147\":1,\"213\":1,\"214\":3}}],[\"note\",{\"1\":{\"43\":1,\"46\":1,\"72\":1,\"74\":1,\"191\":1,\"252\":1}}],[\"not\",{\"1\":{\"5\":2,\"21\":1,\"22\":4,\"32\":2,\"38\":1,\"40\":1,\"43\":1,\"48\":6,\"70\":3,\"80\":1,\"81\":1,\"85\":1,\"86\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":3,\"92\":1,\"97\":1,\"99\":1,\"100\":2,\"101\":5,\"104\":2,\"110\":1,\"112\":1,\"113\":1,\"118\":1,\"122\":1,\"123\":5,\"124\":3,\"128\":1,\"129\":1,\"131\":2,\"139\":1,\"151\":2,\"155\":1,\"156\":1,\"164\":8,\"172\":1,\"177\":2,\"179\":15,\"180\":4,\"182\":1,\"184\":1,\"191\":1,\"195\":2,\"197\":2,\"200\":2,\"207\":1,\"210\":3,\"211\":2,\"212\":7,\"213\":3,\"214\":3,\"217\":1,\"220\":1,\"226\":9,\"231\":1,\"235\":1,\"241\":1,\"242\":1,\"253\":2,\"271\":2,\"280\":2,\"285\":1,\"287\":1,\"301\":1,\"303\":2,\"311\":1,\"314\":2,\"316\":3}}],[\"necessary\",{\"1\":{\"209\":1}}],[\"nested\",{\"1\":{\"164\":3,\"269\":1}}],[\"negotiated\",{\"1\":{\"155\":2}}],[\"net\",{\"1\":{\"244\":1,\"300\":1}}],[\"netflix\",{\"1\":{\"217\":2}}],[\"network\",{\"1\":{\"105\":1}}],[\"nettywebserver\",{\"1\":{\"57\":1,\"164\":1}}],[\"netty\",{\"1\":{\"57\":2,\"164\":2}}],[\"news\",{\"0\":{\"256\":1}}],[\"newly\",{\"1\":{\"162\":1}}],[\"newhashmapwithexpectedsize\",{\"1\":{\"147\":1}}],[\"newarraylistwithcapacity\",{\"1\":{\"175\":1}}],[\"newarraylist\",{\"1\":{\"105\":1}}],[\"newval\",{\"1\":{\"97\":4}}],[\"newmap\",{\"1\":{\"91\":3}}],[\"newinstance\",{\"1\":{\"82\":1,\"123\":1,\"137\":1,\"139\":1}}],[\"newbuilder\",{\"1\":{\"40\":1}}],[\"new\",{\"0\":{\"267\":1,\"288\":1,\"308\":1,\"311\":1},\"1\":{\"21\":2,\"35\":14,\"36\":3,\"39\":1,\"40\":5,\"48\":1,\"77\":3,\"79\":1,\"80\":2,\"81\":2,\"82\":2,\"86\":3,\"89\":1,\"91\":3,\"97\":4,\"98\":1,\"100\":3,\"101\":1,\"104\":12,\"105\":4,\"109\":1,\"111\":2,\"112\":7,\"113\":6,\"114\":1,\"116\":1,\"117\":9,\"121\":1,\"123\":5,\"126\":6,\"129\":1,\"132\":2,\"134\":3,\"135\":1,\"136\":2,\"137\":1,\"139\":5,\"147\":1,\"156\":9,\"161\":3,\"162\":1,\"165\":6,\"166\":5,\"174\":1,\"176\":2,\"179\":1,\"185\":1,\"195\":2,\"197\":3,\"200\":5,\"207\":4,\"214\":7,\"220\":2,\"221\":1,\"232\":1,\"235\":1,\"237\":5,\"242\":8,\"248\":1,\"263\":1,\"267\":1,\"275\":2,\"279\":3,\"280\":2,\"288\":1,\"303\":2,\"304\":1,\"307\":1,\"314\":2,\"315\":1}}],[\"neutrality\",{\"1\":{\"17\":1}}],[\"needs\",{\"1\":{\"74\":1,\"77\":1,\"83\":1,\"86\":1,\"106\":1,\"114\":1,\"126\":1,\"154\":1,\"156\":1,\"164\":2,\"173\":1,\"177\":1,\"191\":1,\"195\":1,\"198\":1,\"199\":1,\"213\":1,\"214\":2,\"252\":1,\"273\":1,\"275\":3}}],[\"needed\",{\"1\":{\"30\":1,\"124\":1,\"129\":1}}],[\"need\",{\"0\":{\"46\":1},\"1\":{\"5\":1,\"37\":1,\"42\":1,\"48\":1,\"59\":1,\"72\":1,\"83\":2,\"86\":3,\"87\":1,\"106\":1,\"107\":1,\"121\":3,\"124\":1,\"129\":2,\"131\":1,\"156\":1,\"177\":1,\"179\":1,\"182\":1,\"184\":1,\"197\":1,\"206\":1,\"207\":1,\"212\":2,\"213\":1,\"214\":2,\"217\":2,\"220\":1,\"221\":1,\"225\":1,\"234\":1,\"246\":1,\"247\":1,\"249\":1,\"252\":1,\"253\":1,\"275\":5,\"276\":1,\"300\":2,\"302\":2,\"303\":3,\"304\":1,\"313\":2,\"314\":3,\"315\":1}}],[\"nextservice\",{\"1\":{\"123\":2}}],[\"nextelement\",{\"1\":{\"123\":1,\"139\":1}}],[\"nextname\",{\"1\":{\"123\":5}}],[\"nextint\",{\"1\":{\"90\":2,\"177\":1,\"220\":1}}],[\"next\",{\"0\":{\"276\":1},\"1\":{\"5\":1,\"33\":2,\"46\":1,\"48\":1,\"81\":1,\"85\":4,\"86\":1,\"87\":1,\"96\":1,\"100\":1,\"101\":2,\"104\":2,\"105\":1,\"123\":3,\"126\":1,\"128\":1,\"129\":2,\"131\":1,\"175\":1,\"180\":1,\"181\":1,\"182\":1,\"184\":1,\"207\":1,\"212\":1,\"213\":1,\"242\":3,\"250\":1,\"276\":1}}],[\"808\",{\"1\":{\"275\":1}}],[\"8080\",{\"1\":{\"275\":1}}],[\"80\",{\"1\":{\"219\":1}}],[\"806\",{\"1\":{\"155\":1}}],[\"890\",{\"1\":{\"164\":1}}],[\"8848\",{\"1\":{\"164\":2,\"275\":1}}],[\"857\",{\"1\":{\"155\":1}}],[\"8265\",{\"1\":{\"164\":4}}],[\"826\",{\"1\":{\"155\":1}}],[\"82\",{\"1\":{\"65\":1}}],[\"84k\",{\"1\":{\"65\":1}}],[\"861\",{\"1\":{\"155\":1}}],[\"86\",{\"1\":{\"65\":1}}],[\"8192\",{\"1\":{\"275\":1}}],[\"81ms\",{\"1\":{\"65\":1}}],[\"8189\",{\"1\":{\"62\":1,\"63\":1,\"64\":2,\"65\":2,\"66\":1,\"74\":1}}],[\"8188\",{\"1\":{\"59\":1,\"60\":1,\"61\":1,\"64\":4,\"66\":1,\"72\":2,\"73\":2,\"81\":1}}],[\"832\",{\"1\":{\"57\":1}}],[\"8\",{\"0\":{\"284\":1,\"286\":1},\"1\":{\"5\":1,\"65\":2,\"105\":1,\"155\":1,\"164\":1,\"179\":1,\"309\":1}}],[\"ui\",{\"0\":{\"258\":1},\"1\":{\"257\":1,\"269\":1}}],[\"utf8mb4\",{\"1\":{\"226\":20}}],[\"utility\",{\"1\":{\"284\":1}}],[\"utilize\",{\"1\":{\"38\":1,\"131\":1}}],[\"util\",{\"1\":{\"35\":5,\"36\":4,\"40\":2,\"123\":1,\"127\":1}}],[\"u\",{\"1\":{\"219\":1,\"244\":1}}],[\"ultimately\",{\"1\":{\"212\":2}}],[\"uriutils\",{\"1\":{\"207\":1,\"214\":1,\"221\":1}}],[\"uri\",{\"1\":{\"70\":4,\"79\":3,\"80\":3,\"81\":3,\"82\":1,\"92\":2,\"184\":1,\"204\":1,\"207\":2,\"218\":1,\"221\":4}}],[\"url=\",{\"1\":{\"309\":1}}],[\"urlencoderutil\",{\"1\":{\"287\":1}}],[\"urlencoder\",{\"1\":{\"287\":1}}],[\"urlencoded\",{\"1\":{\"105\":1,\"257\":1}}],[\"urlinputwithmethod\",{\"1\":{\"258\":1}}],[\"urlpath\",{\"1\":{\"61\":1,\"64\":6,\"92\":2,\"184\":5}}],[\"urls\",{\"1\":{\"48\":1,\"96\":1,\"117\":1,\"139\":4,\"310\":1}}],[\"url\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"77\":1,\"87\":2,\"92\":2,\"96\":1,\"104\":4,\"112\":2,\"127\":23,\"128\":1,\"129\":2,\"136\":2,\"139\":6,\"154\":2,\"156\":1,\"164\":2,\"166\":1,\"172\":3,\"175\":1,\"176\":9,\"178\":1,\"183\":6,\"184\":3,\"201\":1,\"257\":3,\"258\":1,\"275\":1}}],[\"unnecessary\",{\"1\":{\"263\":1}}],[\"unnamed\",{\"1\":{\"213\":1}}],[\"unpredictable\",{\"1\":{\"210\":1}}],[\"unmanageable\",{\"1\":{\"210\":1}}],[\"unmodifiablelist\",{\"1\":{\"111\":1,\"156\":1,\"165\":1,\"207\":1}}],[\"unavailable\",{\"1\":{\"210\":1}}],[\"unavailability\",{\"1\":{\"210\":1}}],[\"unsafebytearrayinputstream\",{\"1\":{\"242\":2}}],[\"unstable\",{\"1\":{\"210\":1,\"212\":2}}],[\"unskipped\",{\"1\":{\"179\":1}}],[\"unveil\",{\"1\":{\"185\":1}}],[\"unconditionally\",{\"1\":{\"253\":1}}],[\"uncacheruledata\",{\"1\":{\"162\":1}}],[\"unchecked\",{\"1\":{\"111\":1,\"113\":1,\"156\":1,\"165\":1}}],[\"unchanged\",{\"1\":{\"89\":1}}],[\"unexpected\",{\"1\":{\"97\":1,\"111\":1,\"113\":1,\"156\":1,\"165\":1}}],[\"until\",{\"1\":{\"91\":1,\"211\":2}}],[\"unknown\",{\"1\":{\"89\":1,\"155\":1}}],[\"unicode\",{\"1\":{\"226\":10}}],[\"uniform\",{\"1\":{\"89\":1,\"214\":3}}],[\"unified\",{\"1\":{\"69\":1,\"128\":1,\"303\":2,\"314\":2}}],[\"uniquekeyset\",{\"1\":{\"288\":1}}],[\"unique\",{\"1\":{\"85\":2,\"87\":1,\"127\":1,\"226\":1}}],[\"unit\",{\"1\":{\"11\":1,\"43\":2,\"212\":3,\"213\":5}}],[\"unity\",{\"1\":{\"4\":1}}],[\"unless\",{\"1\":{\"31\":1}}],[\"unreasonable\",{\"1\":{\"29\":1}}],[\"underlying\",{\"1\":{\"267\":1}}],[\"understood\",{\"1\":{\"71\":1,\"100\":1,\"101\":1,\"139\":2,\"179\":3,\"184\":1,\"211\":1,\"212\":1,\"214\":1}}],[\"understanding\",{\"0\":{\"189\":1},\"1\":{\"97\":1,\"130\":1,\"179\":1,\"200\":1}}],[\"understand\",{\"1\":{\"32\":1,\"39\":1,\"48\":2,\"123\":1,\"128\":1,\"129\":1,\"133\":1,\"139\":1,\"180\":1,\"184\":1,\"200\":1,\"207\":2,\"211\":1,\"221\":1,\"316\":1}}],[\"undergo\",{\"1\":{\"31\":1}}],[\"under\",{\"0\":{\"311\":1},\"1\":{\"21\":1,\"29\":1,\"38\":1,\"72\":1,\"74\":1,\"78\":1,\"82\":1,\"118\":2,\"119\":3,\"177\":2,\"179\":1,\"182\":1,\"183\":1,\"214\":1,\"275\":1,\"279\":1,\"282\":1}}],[\"usability\",{\"1\":{\"217\":1}}],[\"usage\",{\"0\":{\"40\":1,\"125\":1,\"143\":1,\"293\":1},\"1\":{\"23\":1,\"124\":1}}],[\"usr\",{\"1\":{\"155\":1}}],[\"usually\",{\"1\":{\"231\":1}}],[\"usual\",{\"1\":{\"48\":1,\"210\":1,\"211\":1,\"212\":1}}],[\"using\",{\"0\":{\"35\":1,\"159\":1,\"232\":1,\"233\":1,\"294\":1},\"1\":{\"29\":1,\"33\":8,\"36\":1,\"46\":1,\"48\":4,\"65\":1,\"113\":1,\"122\":1,\"130\":1,\"155\":2,\"164\":1,\"173\":2,\"206\":1,\"224\":2,\"226\":1,\"237\":1,\"242\":4,\"263\":1,\"275\":1,\"280\":1,\"301\":1,\"304\":1,\"311\":2,\"315\":1}}],[\"useless\",{\"1\":{\"105\":2}}],[\"used\",{\"0\":{\"232\":1,\"295\":1},\"1\":{\"40\":1,\"48\":6,\"78\":1,\"85\":1,\"86\":2,\"90\":1,\"99\":1,\"100\":4,\"101\":2,\"104\":2,\"112\":3,\"113\":1,\"119\":2,\"123\":1,\"124\":2,\"129\":2,\"131\":1,\"139\":1,\"141\":1,\"142\":1,\"156\":2,\"177\":1,\"182\":1,\"193\":1,\"197\":1,\"213\":1,\"214\":2,\"222\":1,\"225\":1,\"226\":1,\"231\":2,\"242\":2,\"275\":1,\"312\":1}}],[\"useragentutil\",{\"1\":{\"288\":1}}],[\"userdto\",{\"1\":{\"220\":7}}],[\"userid\",{\"1\":{\"65\":2,\"220\":3}}],[\"userid=10\",{\"1\":{\"179\":1,\"193\":1}}],[\"userid=1\",{\"1\":{\"60\":1,\"61\":2,\"63\":1,\"64\":7,\"65\":2,\"219\":1,\"220\":1}}],[\"users\",{\"0\":{\"43\":1,\"44\":1,\"45\":1,\"300\":1},\"1\":{\"42\":1,\"46\":3,\"48\":1,\"155\":1,\"209\":1,\"212\":1,\"214\":1,\"219\":1,\"253\":1,\"271\":2,\"272\":1,\"275\":1,\"280\":1,\"283\":1,\"285\":1,\"298\":1,\"299\":1,\"300\":4,\"301\":2,\"316\":6}}],[\"user\",{\"0\":{\"265\":1,\"272\":1},\"1\":{\"35\":1,\"56\":2,\"77\":1,\"83\":1,\"106\":1,\"127\":2,\"129\":2,\"142\":1,\"155\":1,\"189\":2,\"197\":1,\"205\":1,\"275\":3,\"285\":2,\"294\":1,\"300\":1,\"307\":1,\"309\":1,\"311\":1}}],[\"username=\",{\"1\":{\"309\":1}}],[\"username\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"275\":1,\"309\":1}}],[\"useunicode=true\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"275\":1,\"309\":1}}],[\"usessl=false\",{\"1\":{\"309\":1}}],[\"uses\",{\"1\":{\"29\":1,\"84\":1,\"100\":1,\"112\":1,\"114\":1,\"169\":1,\"209\":2,\"213\":1,\"214\":1,\"217\":1,\"221\":1,\"230\":1,\"232\":1,\"287\":1,\"300\":1,\"312\":1}}],[\"use\",{\"0\":{\"39\":1,\"42\":1,\"67\":1,\"72\":1,\"153\":1,\"188\":1,\"190\":1},\"1\":{\"24\":1,\"40\":2,\"48\":2,\"56\":1,\"57\":1,\"65\":1,\"72\":1,\"78\":1,\"82\":1,\"83\":1,\"86\":2,\"89\":1,\"112\":1,\"116\":1,\"117\":2,\"120\":1,\"121\":2,\"122\":1,\"124\":1,\"127\":1,\"130\":1,\"131\":2,\"154\":1,\"155\":1,\"156\":2,\"161\":1,\"164\":1,\"166\":1,\"176\":1,\"181\":1,\"183\":1,\"200\":1,\"201\":2,\"209\":2,\"212\":3,\"214\":1,\"219\":1,\"221\":1,\"240\":2,\"242\":1,\"269\":1,\"270\":1,\"271\":3,\"275\":3,\"276\":1,\"278\":2,\"279\":1,\"280\":2,\"283\":1,\"287\":1,\"294\":1,\"299\":1,\"300\":1,\"302\":1,\"304\":1,\"310\":1,\"311\":5,\"313\":1,\"315\":1}}],[\"us\",{\"0\":{\"15\":1,\"25\":1},\"1\":{\"20\":1,\"28\":1,\"101\":1,\"110\":1,\"184\":1,\"252\":1,\"277\":1,\"290\":2}}],[\"uploading\",{\"1\":{\"307\":1}}],[\"upload\",{\"1\":{\"305\":1}}],[\"uploaded\",{\"1\":{\"42\":1}}],[\"uphold\",{\"1\":{\"277\":1,\"290\":1}}],[\"upgrading\",{\"1\":{\"275\":1}}],[\"upgraded\",{\"1\":{\"270\":2,\"273\":1}}],[\"upgrade\",{\"1\":{\"180\":4,\"285\":2}}],[\"uppercase\",{\"1\":{\"289\":1}}],[\"upper\",{\"1\":{\"84\":1,\"213\":2,\"214\":1}}],[\"upstreamcachemanager\",{\"1\":{\"87\":1,\"172\":1,\"173\":1,\"174\":1,\"183\":1}}],[\"upstreamcheckutils\",{\"1\":{\"175\":1,\"176\":1}}],[\"upstreamcheckservice\",{\"1\":{\"79\":1,\"80\":1,\"81\":2}}],[\"upstreamcheck\",{\"1\":{\"79\":1,\"81\":1}}],[\"upstreamlist\",{\"1\":{\"87\":2,\"89\":2,\"90\":6,\"91\":5,\"120\":3,\"172\":2,\"175\":3,\"177\":10,\"183\":3}}],[\"upstreamhost\",{\"1\":{\"81\":1}}],[\"upstreamurl\",{\"1\":{\"81\":2}}],[\"upstream\",{\"1\":{\"79\":3,\"81\":4,\"87\":1,\"91\":4,\"173\":10,\"174\":7,\"175\":6,\"176\":2,\"183\":2,\"212\":1}}],[\"updating\",{\"1\":{\"48\":2,\"99\":2,\"101\":1,\"104\":1}}],[\"updaterulemap\",{\"1\":{\"165\":3,\"166\":1}}],[\"updaterulecache\",{\"1\":{\"48\":1}}],[\"updatemetadatamap\",{\"1\":{\"164\":1}}],[\"updatemetadatacache\",{\"1\":{\"48\":1}}],[\"updatecacheifneed\",{\"1\":{\"104\":1}}],[\"updatecachewithjson\",{\"1\":{\"104\":2}}],[\"updatecache\",{\"1\":{\"97\":2}}],[\"updatelock\",{\"1\":{\"91\":3}}],[\"updatepluginmap\",{\"1\":{\"166\":2}}],[\"updateplugin\",{\"1\":{\"109\":1}}],[\"updateplugincache\",{\"1\":{\"48\":1,\"97\":2}}],[\"updateparticipant\",{\"1\":{\"39\":1}}],[\"updateappauthcache\",{\"1\":{\"48\":1}}],[\"updates\",{\"1\":{\"97\":1,\"104\":1,\"165\":1,\"173\":1}}],[\"updateselectorcache\",{\"1\":{\"48\":1}}],[\"updateselective\",{\"1\":{\"48\":1,\"79\":1,\"81\":1,\"109\":1}}],[\"updatestatus\",{\"1\":{\"36\":1}}],[\"updated`\",{\"1\":{\"226\":1}}],[\"updated\",{\"1\":{\"31\":1,\"32\":1,\"48\":8,\"82\":1,\"97\":1,\"99\":1,\"101\":1,\"104\":7,\"160\":1,\"165\":1,\"175\":1,\"176\":1,\"178\":1,\"217\":1,\"293\":1}}],[\"update\",{\"0\":{\"295\":1},\"1\":{\"21\":1,\"48\":6,\"79\":3,\"81\":5,\"97\":1,\"98\":1,\"99\":2,\"101\":1,\"104\":4,\"109\":4,\"110\":4,\"114\":1,\"117\":1,\"118\":2,\"119\":1,\"162\":3,\"165\":2,\"175\":2,\"214\":2,\"226\":2,\"249\":1,\"303\":2,\"314\":2}}],[\"up\",{\"0\":{\"83\":1,\"101\":1,\"117\":1,\"167\":1,\"178\":1,\"222\":1,\"243\":1},\"1\":{\"5\":1,\"28\":1,\"72\":1,\"83\":1,\"92\":1,\"214\":6,\"224\":1,\"264\":1}}],[\"f523f655f0014d288b7a4502cc6a08d1~tplv\",{\"1\":{\"182\":1}}],[\"f7\",{\"1\":{\"112\":1}}],[\"f12\",{\"1\":{\"108\":1}}],[\"flexibility\",{\"1\":{\"281\":1}}],[\"flexible\",{\"1\":{\"34\":1,\"278\":1}}],[\"floor\",{\"1\":{\"200\":1}}],[\"flowexception\",{\"1\":{\"214\":2}}],[\"flowrule\",{\"1\":{\"214\":2}}],[\"flowrulemanager\",{\"1\":{\"214\":4}}],[\"flowrules\",{\"1\":{\"214\":3}}],[\"flow\",{\"0\":{\"172\":1,\"211\":1,\"214\":1,\"234\":1},\"1\":{\"70\":5,\"80\":1,\"85\":1,\"103\":1,\"104\":1,\"138\":1,\"172\":2,\"178\":1,\"179\":1,\"182\":4,\"185\":3,\"187\":1,\"197\":1,\"209\":4,\"211\":9,\"212\":3,\"214\":26,\"224\":1}}],[\"flatmap\",{\"1\":{\"92\":1,\"184\":1,\"197\":1,\"207\":2}}],[\"fluxresultutils\",{\"0\":{\"239\":1},\"1\":{\"224\":1}}],[\"flux<list<long>>\",{\"1\":{\"197\":1}}],[\"flux\",{\"1\":{\"11\":1,\"197\":1,\"207\":1,\"208\":2}}],[\"fixing\",{\"1\":{\"289\":1}}],[\"fix\",{\"1\":{\"289\":11,\"292\":1,\"307\":3}}],[\"fixes\",{\"1\":{\"263\":1}}],[\"fixed\",{\"0\":{\"289\":1},\"1\":{\"179\":1,\"189\":1,\"197\":1,\"211\":1,\"289\":3}}],[\"firewall\",{\"1\":{\"169\":1}}],[\"firstly\",{\"1\":{\"310\":1}}],[\"firstentry\",{\"1\":{\"89\":1}}],[\"firstkey\",{\"1\":{\"89\":1}}],[\"first\",{\"0\":{\"10\":1,\"13\":1,\"80\":1},\"1\":{\"5\":2,\"32\":1,\"38\":1,\"40\":1,\"48\":5,\"69\":2,\"70\":1,\"73\":1,\"77\":1,\"78\":1,\"80\":1,\"82\":2,\"87\":1,\"91\":2,\"99\":1,\"104\":1,\"109\":1,\"112\":1,\"114\":1,\"122\":1,\"123\":1,\"124\":1,\"127\":1,\"132\":1,\"135\":3,\"139\":1,\"162\":1,\"164\":3,\"165\":1,\"172\":3,\"184\":1,\"192\":1,\"197\":1,\"198\":1,\"199\":1,\"209\":1,\"210\":1,\"211\":2,\"212\":3,\"213\":1,\"214\":4,\"218\":1,\"221\":1,\"235\":1,\"236\":1,\"275\":1,\"290\":1,\"300\":1,\"302\":1,\"303\":1,\"307\":1,\"313\":1,\"314\":1,\"316\":3}}],[\"five\",{\"1\":{\"48\":1,\"110\":1,\"112\":1,\"213\":1,\"214\":1}}],[\"figure\",{\"1\":{\"48\":1,\"72\":1,\"164\":1,\"165\":1,\"179\":1,\"195\":1,\"206\":1,\"207\":1,\"212\":1,\"213\":1,\"214\":1,\"218\":1}}],[\"films\",{\"0\":{\"144\":1}}],[\"filtered\",{\"1\":{\"312\":1}}],[\"filterchain\",{\"1\":{\"242\":3}}],[\"filterrule\",{\"1\":{\"182\":1}}],[\"filterselector\",{\"1\":{\"182\":1}}],[\"filters\",{\"1\":{\"128\":1,\"301\":1}}],[\"filtering\",{\"1\":{\"70\":4,\"127\":1,\"131\":1}}],[\"filter\",{\"0\":{\"127\":1,\"241\":1,\"242\":1},\"1\":{\"70\":1,\"124\":1,\"165\":1,\"182\":2,\"214\":4,\"234\":2,\"241\":5,\"242\":5}}],[\"filling\",{\"1\":{\"149\":1}}],[\"filled\",{\"1\":{\"43\":1,\"191\":1,\"200\":5,\"213\":1}}],[\"fill\",{\"1\":{\"43\":1,\"189\":1,\"200\":4,\"229\":1}}],[\"filecopier\",{\"1\":{\"289\":1}}],[\"fileappender\",{\"1\":{\"288\":2}}],[\"fileutil\",{\"1\":{\"288\":1,\"289\":2}}],[\"fileextension\",{\"1\":{\"275\":2}}],[\"filed\",{\"1\":{\"219\":1}}],[\"filename\",{\"1\":{\"139\":3}}],[\"files\",{\"1\":{\"107\":1,\"123\":2,\"202\":1,\"247\":1,\"307\":1}}],[\"file\",{\"1\":{\"33\":1,\"43\":1,\"46\":2,\"48\":4,\"68\":1,\"72\":1,\"112\":2,\"121\":3,\"122\":1,\"124\":3,\"126\":1,\"128\":1,\"132\":1,\"135\":2,\"136\":1,\"139\":4,\"156\":1,\"203\":1,\"265\":1,\"275\":3,\"279\":1,\"280\":1,\"289\":1,\"305\":1}}],[\"financial\",{\"1\":{\"270\":1,\"278\":1}}],[\"finally\",{\"1\":{\"36\":1,\"48\":1,\"80\":1,\"81\":1,\"85\":1,\"87\":1,\"91\":1,\"93\":1,\"100\":1,\"106\":1,\"114\":1,\"164\":2,\"171\":1,\"172\":1,\"177\":1,\"179\":1,\"181\":1,\"182\":1,\"209\":1,\"252\":1,\"306\":1}}],[\"final\",{\"0\":{\"254\":1},\"1\":{\"35\":8,\"36\":8,\"39\":3,\"40\":10,\"48\":1,\"69\":1,\"77\":1,\"78\":2,\"79\":1,\"80\":5,\"81\":1,\"82\":12,\"85\":6,\"86\":6,\"87\":7,\"89\":3,\"90\":2,\"91\":2,\"92\":9,\"93\":2,\"97\":9,\"98\":4,\"100\":10,\"104\":13,\"105\":1,\"109\":5,\"111\":2,\"112\":5,\"113\":11,\"114\":10,\"117\":14,\"118\":8,\"120\":3,\"121\":1,\"122\":2,\"123\":4,\"126\":1,\"127\":4,\"129\":6,\"132\":5,\"134\":3,\"135\":2,\"136\":3,\"137\":2,\"139\":8,\"147\":1,\"151\":1,\"156\":13,\"161\":15,\"162\":5,\"165\":7,\"166\":10,\"172\":14,\"173\":1,\"175\":2,\"176\":5,\"177\":8,\"178\":2,\"179\":4,\"180\":7,\"182\":7,\"183\":8,\"184\":12,\"185\":2,\"195\":1,\"197\":9,\"207\":7,\"214\":13,\"219\":1,\"220\":1,\"221\":17,\"230\":1,\"235\":2,\"236\":5,\"237\":3,\"238\":3,\"275\":1,\"300\":1}}],[\"finchley\",{\"1\":{\"264\":1}}],[\"fine\",{\"1\":{\"71\":1}}],[\"findmethodbymethodsignature\",{\"1\":{\"242\":1}}],[\"findperson\",{\"1\":{\"234\":2}}],[\"findall\",{\"0\":{\"143\":1},\"1\":{\"147\":1}}],[\"findupstreamlistbyselectorid\",{\"1\":{\"87\":1,\"172\":1,\"173\":2,\"183\":1}}],[\"findbyname\",{\"1\":{\"79\":1,\"81\":1,\"82\":1}}],[\"findbypath\",{\"1\":{\"78\":1}}],[\"findbyid\",{\"1\":{\"73\":2,\"82\":2}}],[\"findbyuserid\",{\"1\":{\"60\":1,\"61\":2,\"63\":1,\"64\":7,\"65\":4,\"179\":1,\"193\":1,\"219\":1,\"220\":3}}],[\"findbytransid\",{\"1\":{\"40\":2}}],[\"find\",{\"1\":{\"48\":1,\"72\":1,\"74\":2,\"78\":1,\"89\":1,\"96\":1,\"98\":1,\"100\":2,\"112\":1,\"123\":1,\"127\":1,\"132\":1,\"156\":1,\"179\":1,\"183\":4,\"184\":2,\"212\":1,\"218\":1}}],[\"finished\",{\"1\":{\"37\":1,\"83\":1,\"219\":2}}],[\"fieldnameeditor\",{\"1\":{\"289\":1}}],[\"fields\",{\"1\":{\"70\":1,\"246\":1}}],[\"field\",{\"1\":{\"31\":1,\"81\":1,\"83\":1,\"183\":1,\"226\":4,\"288\":1,\"295\":1,\"301\":1}}],[\"fast\",{\"0\":{\"257\":1},\"1\":{\"257\":4}}],[\"fastest\",{\"1\":{\"177\":1}}],[\"fan\",{\"1\":{\"106\":1}}],[\"far\",{\"1\":{\"91\":1,\"207\":1,\"316\":1}}],[\"fallbackuri\",{\"1\":{\"218\":1}}],[\"fallbackhandler\",{\"1\":{\"214\":1}}],[\"fallback\",{\"1\":{\"214\":1,\"218\":1,\"221\":12}}],[\"falls\",{\"1\":{\"90\":1,\"177\":1}}],[\"false\",{\"1\":{\"33\":3,\"35\":1,\"36\":1,\"59\":1,\"85\":1,\"90\":1,\"91\":2,\"96\":1,\"100\":1,\"104\":3,\"123\":2,\"151\":2,\"164\":2,\"174\":3,\"175\":1,\"176\":2,\"207\":3,\"218\":2,\"265\":1,\"310\":1}}],[\"faq\",{\"1\":{\"57\":1}}],[\"familiar\",{\"1\":{\"48\":2,\"78\":1,\"97\":1,\"207\":1}}],[\"fact\",{\"1\":{\"128\":1,\"179\":1,\"211\":1}}],[\"factory\",{\"1\":{\"35\":3,\"36\":1,\"104\":4,\"105\":1,\"116\":1,\"117\":1,\"121\":3,\"124\":2,\"164\":7}}],[\"facilitator\",{\"1\":{\"29\":1}}],[\"fail\",{\"1\":{\"40\":1,\"104\":2,\"105\":1,\"123\":4}}],[\"fails\",{\"1\":{\"38\":2,\"271\":1}}],[\"failed\",{\"1\":{\"30\":1,\"82\":1,\"105\":2,\"164\":4,\"242\":1}}],[\"failureratethreshold\",{\"1\":{\"218\":1}}],[\"failure\",{\"1\":{\"30\":1,\"184\":2,\"219\":1,\"285\":1}}],[\"fault\",{\"1\":{\"11\":1,\"217\":2,\"225\":1}}],[\"frequent\",{\"1\":{\"210\":1}}],[\"freely\",{\"1\":{\"117\":1,\"299\":1}}],[\"free\",{\"0\":{\"35\":2},\"1\":{\"28\":1}}],[\"front\",{\"1\":{\"185\":2,\"301\":1}}],[\"fromfuture\",{\"1\":{\"237\":1}}],[\"fromiterable\",{\"1\":{\"207\":1}}],[\"fromdatabuffers\",{\"1\":{\"92\":1,\"184\":1}}],[\"fromjson\",{\"1\":{\"87\":1,\"104\":2,\"105\":2,\"117\":1,\"165\":1,\"172\":1,\"183\":1,\"195\":1,\"197\":1,\"207\":1,\"214\":2,\"221\":1}}],[\"fromlist\",{\"1\":{\"79\":1,\"81\":1}}],[\"from\",{\"1\":{\"28\":1,\"48\":2,\"68\":2,\"81\":1,\"82\":1,\"86\":2,\"89\":1,\"91\":1,\"97\":2,\"100\":1,\"104\":3,\"105\":2,\"113\":1,\"117\":1,\"119\":1,\"127\":1,\"129\":2,\"139\":1,\"156\":1,\"161\":2,\"174\":1,\"176\":2,\"178\":1,\"179\":1,\"182\":2,\"183\":1,\"184\":2,\"189\":1,\"197\":1,\"199\":1,\"209\":1,\"210\":1,\"211\":3,\"212\":1,\"214\":5,\"217\":1,\"218\":1,\"220\":1,\"235\":2,\"236\":2,\"253\":1,\"287\":3,\"288\":2,\"292\":1,\"297\":1,\"300\":2,\"316\":1}}],[\"friendly\",{\"1\":{\"164\":2,\"294\":1}}],[\"friend\",{\"1\":{\"97\":1}}],[\"frames\",{\"1\":{\"164\":2}}],[\"framework<\",{\"1\":{\"228\":1}}],[\"frameworks\",{\"1\":{\"34\":1,\"246\":1,\"269\":1,\"278\":1,\"279\":1}}],[\"framework\",{\"0\":{\"34\":1,\"35\":1,\"41\":1,\"46\":1,\"264\":1,\"267\":1},\"1\":{\"19\":4,\"37\":1,\"38\":2,\"42\":1,\"43\":1,\"225\":1,\"231\":1,\"271\":2,\"275\":1,\"276\":1,\"279\":1,\"280\":2,\"283\":1,\"285\":1,\"304\":2,\"315\":1,\"316\":1}}],[\"fragment\",{\"1\":{\"90\":1}}],[\"foo\",{\"1\":{\"233\":1}}],[\"foobaredbbexone123\",{\"1\":{\"46\":1}}],[\"found\",{\"1\":{\"48\":3,\"57\":1,\"73\":1,\"80\":1,\"81\":1,\"105\":1,\"123\":3,\"124\":1,\"131\":1,\"179\":2,\"187\":1,\"220\":1,\"285\":2}}],[\"fourth\",{\"1\":{\"106\":1,\"110\":1,\"197\":1}}],[\"four\",{\"0\":{\"41\":1},\"1\":{\"112\":1,\"179\":1,\"189\":1,\"212\":2,\"213\":1}}],[\"focuses\",{\"1\":{\"235\":1}}],[\"focus\",{\"1\":{\"32\":1,\"104\":1,\"179\":1,\"197\":1,\"212\":3,\"235\":2,\"316\":1}}],[\"follows\",{\"1\":{\"30\":1,\"33\":6,\"54\":1,\"57\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"77\":1,\"83\":1,\"88\":1,\"105\":1,\"134\":1,\"138\":1,\"159\":1,\"177\":1,\"179\":1,\"182\":2,\"183\":3,\"195\":1,\"197\":1,\"207\":1,\"214\":1,\"219\":1,\"226\":1,\"275\":1,\"281\":1,\"303\":1,\"310\":1,\"314\":1}}],[\"follow\",{\"1\":{\"28\":1,\"70\":1,\"80\":1,\"83\":1,\"137\":1,\"214\":1,\"302\":1,\"313\":1}}],[\"following\",{\"1\":{\"23\":1,\"29\":1,\"33\":1,\"48\":3,\"61\":1,\"64\":1,\"70\":3,\"85\":1,\"86\":2,\"91\":1,\"100\":2,\"104\":2,\"105\":2,\"112\":2,\"114\":1,\"122\":1,\"123\":1,\"147\":1,\"164\":4,\"165\":1,\"179\":3,\"189\":1,\"193\":1,\"195\":1,\"198\":1,\"206\":1,\"207\":1,\"210\":1,\"211\":2,\"212\":4,\"214\":1,\"218\":1,\"220\":1,\"235\":1,\"241\":1,\"246\":1,\"247\":1,\"303\":1,\"310\":1,\"311\":4,\"314\":1}}],[\"forname\",{\"1\":{\"123\":1,\"126\":1,\"127\":1,\"129\":2,\"139\":1}}],[\"foreground\",{\"1\":{\"108\":2,\"185\":1}}],[\"foreach\",{\"1\":{\"48\":2,\"80\":1,\"82\":1,\"86\":1,\"104\":3,\"118\":1,\"136\":1,\"139\":1,\"162\":1,\"165\":1,\"175\":1,\"207\":1}}],[\"forwards\",{\"1\":{\"156\":1,\"206\":1}}],[\"forwarded\",{\"1\":{\"73\":1,\"202\":1}}],[\"forwarding\",{\"0\":{\"206\":1},\"1\":{\"65\":1,\"73\":2,\"85\":2,\"87\":1,\"206\":2,\"207\":1}}],[\"forward\",{\"0\":{\"61\":1},\"1\":{\"61\":1,\"69\":1,\"133\":1,\"171\":1,\"201\":2,\"207\":1}}],[\"fork\",{\"0\":{\"51\":1},\"1\":{\"23\":1,\"46\":1,\"246\":1,\"266\":1}}],[\"for\",{\"0\":{\"31\":1,\"33\":1,\"43\":1,\"105\":1,\"111\":1,\"254\":1,\"264\":1,\"265\":1,\"296\":1,\"300\":1,\"301\":1},\"1\":{\"5\":3,\"21\":4,\"22\":1,\"23\":2,\"28\":2,\"29\":1,\"30\":3,\"32\":1,\"33\":24,\"34\":1,\"35\":2,\"37\":1,\"39\":1,\"40\":2,\"43\":1,\"46\":5,\"48\":6,\"56\":1,\"57\":4,\"58\":1,\"69\":1,\"72\":1,\"79\":1,\"80\":3,\"81\":1,\"82\":1,\"84\":1,\"86\":3,\"89\":3,\"90\":2,\"91\":6,\"92\":1,\"97\":4,\"98\":2,\"99\":2,\"100\":5,\"101\":4,\"104\":7,\"105\":5,\"109\":1,\"111\":2,\"113\":2,\"114\":4,\"116\":1,\"117\":2,\"118\":3,\"120\":1,\"121\":2,\"122\":3,\"123\":2,\"127\":1,\"128\":2,\"129\":1,\"131\":1,\"135\":1,\"139\":1,\"154\":1,\"156\":4,\"160\":2,\"161\":2,\"164\":3,\"165\":3,\"166\":2,\"171\":1,\"172\":3,\"173\":2,\"175\":3,\"177\":2,\"178\":1,\"179\":9,\"180\":3,\"181\":1,\"182\":1,\"183\":1,\"184\":2,\"189\":1,\"195\":1,\"197\":2,\"200\":5,\"202\":1,\"209\":1,\"211\":8,\"212\":5,\"213\":3,\"214\":9,\"218\":5,\"219\":4,\"225\":2,\"226\":1,\"231\":1,\"234\":2,\"237\":2,\"241\":3,\"242\":3,\"246\":1,\"248\":1,\"252\":4,\"253\":2,\"264\":2,\"265\":1,\"267\":1,\"270\":2,\"271\":1,\"272\":2,\"278\":1,\"279\":1,\"280\":3,\"281\":1,\"283\":1,\"285\":1,\"288\":2,\"300\":4,\"301\":2,\"303\":2,\"304\":1,\"306\":1,\"311\":3,\"314\":2,\"315\":1,\"316\":4}}],[\"formal\",{\"1\":{\"253\":1}}],[\"formats\",{\"1\":{\"185\":1}}],[\"formation\",{\"1\":{\"86\":1}}],[\"format\",{\"1\":{\"82\":1,\"104\":1,\"105\":1,\"151\":1,\"176\":5,\"198\":1,\"226\":2,\"275\":1}}],[\"forms\",{\"1\":{\"120\":1}}],[\"form\",{\"0\":{\"253\":1},\"1\":{\"3\":1,\"39\":1,\"105\":1,\"133\":1,\"147\":2,\"257\":1,\"288\":1}}],[\"feignclient\",{\"1\":{\"275\":2}}],[\"feign\",{\"1\":{\"271\":1,\"280\":1}}],[\"feasible\",{\"1\":{\"300\":1}}],[\"fear\",{\"1\":{\"200\":1}}],[\"feature\",{\"0\":{\"287\":1},\"1\":{\"280\":1,\"312\":1}}],[\"features\",{\"0\":{\"269\":1,\"288\":1,\"312\":1},\"1\":{\"48\":1,\"217\":1,\"267\":1,\"307\":1}}],[\"featured\",{\"1\":{\"19\":1}}],[\"fetch\",{\"1\":{\"104\":5,\"105\":1}}],[\"fetchgroup\",{\"1\":{\"104\":1}}],[\"fetchgroupconfig\",{\"1\":{\"104\":2}}],[\"fewer\",{\"1\":{\"131\":1}}],[\"few\",{\"1\":{\"33\":1,\"85\":1,\"128\":1,\"303\":1,\"314\":1}}],[\"feeling\",{\"1\":{\"316\":1}}],[\"feel\",{\"1\":{\"28\":1,\"164\":1,\"285\":1}}],[\"february\",{\"1\":{\"10\":1}}],[\"future\",{\"1\":{\"237\":2,\"304\":2,\"315\":2,\"316\":1}}],[\"fuse\",{\"0\":{\"212\":1,\"213\":1,\"220\":1},\"1\":{\"169\":1,\"209\":3,\"212\":13,\"213\":15,\"214\":5,\"216\":1,\"220\":2,\"221\":1}}],[\"fusing\",{\"1\":{\"11\":1,\"179\":1,\"185\":1,\"209\":1,\"213\":3,\"222\":2}}],[\"fuzzy\",{\"1\":{\"70\":3}}],[\"further\",{\"1\":{\"48\":2,\"72\":1,\"83\":1}}],[\"funcfilter\",{\"1\":{\"288\":1}}],[\"function<throwable\",{\"1\":{\"221\":2}}],[\"functional\",{\"1\":{\"217\":1,\"267\":1}}],[\"functions\",{\"0\":{\"305\":1},\"1\":{\"87\":2,\"97\":1,\"187\":1,\"197\":1,\"209\":2,\"212\":1,\"214\":1,\"217\":1,\"297\":2,\"312\":1}}],[\"function\",{\"1\":{\"48\":1,\"87\":1,\"118\":1,\"120\":1,\"121\":1,\"126\":1,\"156\":3,\"180\":2,\"182\":3,\"191\":1,\"209\":1,\"219\":1,\"226\":1,\"280\":1,\"282\":1,\"288\":2,\"311\":1}}],[\"funnel\",{\"1\":{\"189\":1}}],[\"funds\",{\"1\":{\"24\":2}}],[\"fullname\",{\"1\":{\"123\":3}}],[\"full=false\",{\"1\":{\"59\":1}}],[\"fully\",{\"1\":{\"32\":1,\"269\":1,\"283\":1,\"307\":1}}],[\"full\",{\"1\":{\"19\":1,\"24\":1,\"59\":1,\"70\":3,\"85\":1,\"121\":1,\"172\":1,\"173\":2,\"175\":1,\"180\":1,\"182\":1}}],[\"husky\",{\"1\":{\"285\":1}}],[\"hutool\",{\"0\":{\"284\":1,\"285\":1},\"1\":{\"284\":1,\"285\":7,\"290\":2}}],[\"huangxiaofeng\",{\"1\":{\"110\":1,\"112\":1}}],[\"hystrix<\",{\"1\":{\"311\":1}}],[\"hystrix\",{\"1\":{\"87\":2,\"179\":2,\"217\":4,\"263\":1,\"271\":1,\"280\":1,\"307\":1,\"311\":2}}],[\"hits\",{\"1\":{\"139\":1}}],[\"hit\",{\"1\":{\"135\":1,\"139\":1}}],[\"hijacked\",{\"1\":{\"105\":1}}],[\"historical\",{\"1\":{\"252\":1}}],[\"histogramobserveduration\",{\"1\":{\"86\":1}}],[\"his\",{\"1\":{\"91\":1}}],[\"higher\",{\"1\":{\"193\":1,\"210\":1}}],[\"highest\",{\"1\":{\"91\":1}}],[\"highly\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"19\":1,\"297\":2}}],[\"high\",{\"0\":{\"33\":1,\"34\":1,\"41\":1,\"307\":1,\"308\":2},\"1\":{\"19\":3,\"33\":8,\"49\":1,\"68\":1,\"91\":2,\"211\":1,\"225\":3,\"269\":2,\"270\":2,\"278\":2,\"312\":1,\"316\":1}}],[\"html\",{\"1\":{\"49\":1,\"57\":1,\"266\":1,\"275\":1,\"296\":1,\"306\":1,\"309\":1,\"311\":3}}],[\"httprequest\",{\"1\":{\"288\":1}}],[\"httptestcontroller\",{\"1\":{\"219\":9}}],[\"httpentity\",{\"1\":{\"105\":4}}],[\"httpconstants\",{\"1\":{\"100\":2}}],[\"httpclient\",{\"1\":{\"61\":1,\"64\":6,\"87\":2,\"104\":1,\"105\":1,\"164\":1}}],[\"httplongpollingtask\",{\"1\":{\"104\":1}}],[\"httplongpollingdata\",{\"1\":{\"100\":2,\"101\":1}}],[\"httplongpollingdatachangedlistener\",{\"1\":{\"48\":2,\"97\":4,\"100\":2,\"112\":4}}],[\"httplongpollinglistener\",{\"1\":{\"97\":1,\"112\":1}}],[\"httpheaders\",{\"1\":{\"92\":4,\"105\":2,\"180\":1,\"184\":4,\"207\":1}}],[\"httpmethod\",{\"1\":{\"92\":3,\"180\":1,\"184\":2}}],[\"httpsyncdataservice\",{\"1\":{\"104\":2,\"105\":1}}],[\"httpsyncproperties\",{\"1\":{\"97\":4,\"112\":4}}],[\"httpservletresponse\",{\"1\":{\"100\":3}}],[\"httpservletrequest\",{\"1\":{\"100\":4}}],[\"httpstatuscodeexception\",{\"1\":{\"214\":1}}],[\"httpstatus\",{\"1\":{\"93\":3,\"185\":3,\"197\":1,\"207\":1,\"214\":6,\"221\":2,\"236\":2}}],[\"https\",{\"0\":{\"42\":1},\"1\":{\"18\":1,\"28\":2,\"46\":1,\"49\":2,\"52\":1,\"104\":5,\"105\":1,\"130\":1,\"182\":1,\"237\":1,\"244\":2,\"247\":2,\"249\":1,\"266\":3,\"275\":1,\"277\":2,\"283\":2,\"290\":2,\"296\":3,\"301\":1,\"306\":3,\"309\":1,\"310\":1,\"311\":3,\"316\":1}}],[\"http\",{\"0\":{\"59\":1,\"61\":1,\"62\":1,\"76\":1,\"94\":1,\"95\":1,\"100\":1,\"102\":1,\"103\":1,\"179\":1,\"184\":1,\"185\":1},\"1\":{\"14\":2,\"19\":1,\"48\":5,\"56\":1,\"57\":1,\"59\":7,\"60\":1,\"61\":6,\"62\":1,\"63\":1,\"64\":21,\"65\":6,\"66\":1,\"69\":3,\"72\":2,\"73\":3,\"74\":1,\"77\":1,\"81\":2,\"82\":5,\"83\":1,\"85\":1,\"87\":3,\"92\":4,\"96\":3,\"97\":3,\"98\":2,\"100\":3,\"104\":3,\"105\":5,\"106\":1,\"108\":1,\"112\":4,\"116\":1,\"118\":1,\"164\":2,\"171\":3,\"172\":5,\"176\":3,\"179\":7,\"180\":8,\"183\":4,\"184\":3,\"185\":4,\"187\":1,\"193\":2,\"197\":1,\"214\":3,\"218\":1,\"219\":11,\"220\":3,\"225\":1,\"226\":1,\"275\":2,\"288\":4,\"289\":2,\"298\":1,\"299\":1,\"300\":5,\"309\":1,\"312\":1}}],[\"h\",{\"1\":{\"48\":2,\"219\":9}}],[\"hex\",{\"1\":{\"287\":1}}],[\"helle\",{\"1\":{\"275\":2}}],[\"helloworld\",{\"1\":{\"301\":1}}],[\"hellocontroller\",{\"1\":{\"275\":1}}],[\"helloservice=\",{\"1\":{\"275\":1}}],[\"helloserviceimpl\",{\"1\":{\"275\":2}}],[\"helloservice\",{\"1\":{\"275\":11}}],[\"hello\",{\"1\":{\"220\":1,\"230\":1,\"275\":17}}],[\"held\",{\"1\":{\"100\":2,\"101\":3}}],[\"helpful\",{\"1\":{\"243\":1}}],[\"help\",{\"1\":{\"137\":1,\"212\":1,\"306\":1}}],[\"helper\",{\"1\":{\"40\":1}}],[\"helps\",{\"1\":{\"19\":1}}],[\"head\",{\"1\":{\"248\":1,\"251\":1,\"253\":1}}],[\"headers\",{\"1\":{\"92\":1,\"93\":1,\"105\":3,\"180\":2,\"184\":1,\"185\":1}}],[\"header\",{\"0\":{\"148\":1},\"1\":{\"70\":2,\"92\":1,\"128\":2,\"151\":1,\"171\":1,\"184\":2,\"293\":1}}],[\"health\",{\"1\":{\"174\":2,\"175\":1,\"279\":1,\"310\":1}}],[\"hear\",{\"1\":{\"98\":1}}],[\"heartbeat\",{\"1\":{\"48\":1}}],[\"here\",{\"1\":{\"33\":1,\"35\":2,\"40\":1,\"43\":1,\"48\":10,\"78\":1,\"80\":2,\"81\":2,\"82\":2,\"86\":4,\"87\":2,\"91\":2,\"92\":3,\"96\":1,\"97\":1,\"99\":1,\"100\":4,\"104\":3,\"108\":1,\"109\":1,\"110\":2,\"112\":1,\"113\":5,\"114\":1,\"123\":1,\"127\":2,\"128\":1,\"129\":1,\"156\":1,\"164\":1,\"165\":2,\"174\":2,\"179\":1,\"180\":1,\"182\":3,\"191\":1,\"192\":1,\"197\":1,\"199\":1,\"200\":2,\"212\":1,\"273\":1,\"281\":1,\"283\":1,\"304\":1,\"315\":1,\"316\":1}}],[\"hessian\",{\"1\":{\"33\":4,\"34\":1,\"279\":1}}],[\"hmilyconsumerdatahandler\",{\"1\":{\"35\":7}}],[\"hmilytcc\",{\"1\":{\"275\":3}}],[\"hmilytransactionexecutor\",{\"1\":{\"36\":14}}],[\"hmilytransactioneventpublisher\",{\"1\":{\"35\":2,\"39\":1}}],[\"hmilytransactioneventtranslator\",{\"1\":{\"35\":2}}],[\"hmilytransactioneventfactory\",{\"1\":{\"35\":2}}],[\"hmilytransactionevent\",{\"1\":{\"35\":1}}],[\"hmilytransactionhandler\",{\"1\":{\"36\":2}}],[\"hmilytransactionbootstrap\",{\"1\":{\"33\":2,\"43\":2}}],[\"hmilythreadfactory\",{\"1\":{\"35\":2,\"36\":2}}],[\"hmily\",{\"0\":{\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"41\":1,\"42\":3,\"46\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"267\":1,\"275\":1,\"278\":1,\"279\":1,\"280\":1},\"1\":{\"28\":5,\"29\":4,\"30\":1,\"31\":1,\"32\":1,\"33\":10,\"35\":11,\"36\":8,\"39\":1,\"40\":4,\"43\":9,\"44\":1,\"45\":1,\"46\":6,\"263\":1,\"265\":6,\"266\":3,\"271\":1,\"272\":4,\"275\":14,\"276\":1,\"277\":2,\"278\":1,\"279\":11,\"280\":3,\"281\":1,\"282\":1,\"283\":3,\"316\":1}}],[\"hope\",{\"1\":{\"243\":1,\"252\":1,\"281\":1,\"306\":1,\"316\":2}}],[\"hot\",{\"0\":{\"311\":1},\"1\":{\"169\":1,\"195\":1,\"307\":1,\"311\":2}}],[\"home\",{\"1\":{\"285\":1}}],[\"home=\",{\"1\":{\"155\":1}}],[\"homework\",{\"1\":{\"5\":2}}],[\"horse\",{\"1\":{\"122\":1}}],[\"horizons\",{\"1\":{\"4\":1}}],[\"hook\",{\"1\":{\"97\":1}}],[\"holder\",{\"1\":{\"135\":1,\"139\":2}}],[\"holder<object>\",{\"1\":{\"135\":1,\"139\":1}}],[\"holder<object>>\",{\"1\":{\"134\":1,\"135\":1}}],[\"holder<>\",{\"1\":{\"134\":1,\"136\":1,\"139\":1}}],[\"holder<map<string\",{\"1\":{\"134\":1,\"136\":1}}],[\"holding\",{\"1\":{\"98\":1,\"99\":1,\"101\":1}}],[\"hold\",{\"1\":{\"97\":1,\"99\":1,\"100\":3,\"189\":1}}],[\"holds\",{\"1\":{\"39\":1,\"99\":1,\"101\":1,\"135\":1,\"137\":1,\"139\":1,\"172\":1}}],[\"hole\",{\"1\":{\"86\":1}}],[\"hosted\",{\"1\":{\"246\":1}}],[\"hostport\",{\"1\":{\"176\":5}}],[\"host\",{\"0\":{\"173\":1},\"1\":{\"33\":1,\"46\":1,\"70\":2,\"92\":1,\"155\":1,\"176\":11,\"184\":1}}],[\"hostname\",{\"1\":{\"33\":1}}],[\"however\",{\"1\":{\"91\":1,\"182\":1,\"199\":1,\"210\":1,\"301\":1}}],[\"how\",{\"0\":{\"30\":1,\"42\":1,\"116\":1,\"117\":1,\"161\":2,\"162\":1,\"165\":1,\"166\":1,\"195\":1,\"196\":1,\"241\":1,\"297\":1},\"1\":{\"11\":2,\"29\":1,\"43\":1,\"48\":7,\"80\":1,\"81\":1,\"88\":1,\"98\":2,\"99\":4,\"100\":2,\"101\":4,\"106\":2,\"122\":1,\"123\":1,\"124\":2,\"126\":1,\"127\":1,\"129\":2,\"131\":1,\"136\":1,\"159\":2,\"173\":1,\"184\":1,\"189\":1,\"192\":1,\"207\":1,\"209\":3,\"211\":2,\"212\":4,\"240\":2,\"242\":1,\"243\":2,\"285\":1,\"303\":2,\"304\":1,\"311\":1,\"312\":1,\"314\":2,\"315\":1}}],[\"harm\",{\"1\":{\"253\":1}}],[\"harmful\",{\"1\":{\"210\":1}}],[\"harmony\",{\"1\":{\"4\":1,\"17\":1,\"270\":1,\"277\":1,\"281\":1,\"290\":1}}],[\"half\",{\"1\":{\"109\":2,\"212\":1,\"213\":3,\"218\":2,\"219\":1}}],[\"ha\",{\"1\":{\"78\":2}}],[\"happily\",{\"1\":{\"281\":1}}],[\"happiness\",{\"1\":{\"17\":1,\"270\":1,\"277\":1,\"290\":1}}],[\"happen\",{\"1\":{\"48\":1,\"123\":1,\"271\":1}}],[\"happylife\",{\"1\":{\"33\":1,\"46\":1}}],[\"havingvalue\",{\"1\":{\"97\":1,\"112\":2,\"116\":1}}],[\"having\",{\"1\":{\"32\":1,\"80\":1,\"112\":1,\"253\":1}}],[\"haven\",{\"1\":{\"32\":1,\"124\":1}}],[\"have\",{\"0\":{\"189\":1},\"1\":{\"5\":1,\"23\":1,\"31\":1,\"40\":1,\"46\":1,\"48\":2,\"69\":1,\"77\":1,\"78\":1,\"80\":1,\"83\":2,\"86\":1,\"87\":2,\"91\":1,\"96\":1,\"100\":2,\"101\":2,\"110\":1,\"118\":2,\"122\":1,\"124\":2,\"127\":1,\"129\":1,\"130\":1,\"131\":1,\"164\":3,\"179\":4,\"182\":1,\"187\":1,\"193\":1,\"197\":2,\"200\":2,\"210\":2,\"211\":1,\"214\":1,\"226\":1,\"231\":1,\"236\":3,\"246\":3,\"277\":1,\"283\":1,\"285\":1,\"290\":1,\"300\":1,\"301\":1,\"302\":1,\"303\":1,\"304\":1,\"313\":1,\"314\":1,\"315\":1,\"316\":5}}],[\"had\",{\"1\":{\"29\":1,\"48\":1}}],[\"hasmoreelements\",{\"1\":{\"123\":1,\"139\":1}}],[\"hashmap\",{\"1\":{\"234\":3}}],[\"hashmap<>\",{\"1\":{\"139\":1}}],[\"hashvalue\",{\"1\":{\"195\":1}}],[\"hashkey\",{\"1\":{\"195\":1}}],[\"hashset<>\",{\"1\":{\"165\":1}}],[\"hashloadbalance\",{\"1\":{\"120\":1}}],[\"hash\",{\"0\":{\"89\":1},\"1\":{\"89\":9,\"173\":3,\"175\":3,\"177\":1}}],[\"hasnull\",{\"1\":{\"289\":1}}],[\"hasnextservice\",{\"1\":{\"123\":3}}],[\"hasnext\",{\"1\":{\"100\":1,\"123\":4,\"126\":1}}],[\"hasn\",{\"1\":{\"42\":1,\"88\":1}}],[\"has\",{\"0\":{\"81\":1,\"254\":1,\"265\":1},\"1\":{\"23\":2,\"29\":1,\"30\":1,\"33\":1,\"37\":1,\"48\":2,\"57\":1,\"69\":1,\"81\":3,\"82\":1,\"83\":1,\"85\":1,\"87\":1,\"98\":1,\"99\":2,\"100\":2,\"101\":3,\"104\":3,\"105\":1,\"122\":1,\"124\":1,\"129\":1,\"131\":1,\"134\":1,\"162\":1,\"164\":3,\"173\":1,\"177\":1,\"179\":2,\"180\":1,\"183\":1,\"185\":1,\"195\":1,\"207\":1,\"210\":1,\"213\":1,\"217\":1,\"246\":1,\"252\":1,\"253\":1,\"275\":1,\"283\":1,\"285\":1,\"292\":1,\"293\":1,\"297\":2,\"301\":1,\"303\":2,\"306\":2,\"314\":2,\"316\":1}}],[\"handed\",{\"1\":{\"171\":1,\"199\":1}}],[\"handling\",{\"0\":{\"28\":1},\"1\":{\"117\":1,\"172\":1,\"183\":1,\"214\":3,\"218\":1,\"288\":1}}],[\"handled\",{\"1\":{\"207\":1,\"247\":1,\"253\":1}}],[\"handledatadeleted\",{\"1\":{\"162\":1}}],[\"handledatachange\",{\"1\":{\"162\":1}}],[\"handleplugin\",{\"1\":{\"195\":1}}],[\"handleadd\",{\"1\":{\"79\":5,\"81\":6}}],[\"handleeventswithworkerpool\",{\"1\":{\"35\":2}}],[\"handlerresulthandler\",{\"1\":{\"207\":1}}],[\"handlerresulthandler>\",{\"1\":{\"207\":1}}],[\"handlerrule\",{\"1\":{\"118\":1,\"214\":1}}],[\"handleradapters\",{\"1\":{\"207\":2}}],[\"handleradapter\",{\"1\":{\"207\":2}}],[\"handleradapter>\",{\"1\":{\"207\":1}}],[\"handleru\",{\"1\":{\"182\":1}}],[\"handleruleisnull\",{\"1\":{\"182\":2}}],[\"handlerplugin\",{\"1\":{\"118\":1,\"195\":2}}],[\"handlermappings\",{\"1\":{\"207\":3}}],[\"handlermapping\",{\"1\":{\"207\":2}}],[\"handlermapping>\",{\"1\":{\"207\":1}}],[\"handlermap\",{\"1\":{\"118\":4}}],[\"handlerselector\",{\"1\":{\"118\":1}}],[\"handlers\",{\"1\":{\"118\":2}}],[\"handlerspringmvcrule\",{\"0\":{\"82\":1},\"1\":{\"78\":1,\"82\":1}}],[\"handlerspringmvcselector\",{\"0\":{\"79\":1},\"1\":{\"78\":1,\"79\":1,\"81\":2}}],[\"handleresult\",{\"1\":{\"117\":1,\"207\":1}}],[\"handlerequestbody\",{\"1\":{\"92\":3,\"184\":4}}],[\"handler\",{\"1\":{\"35\":1,\"36\":2,\"80\":2,\"86\":1,\"87\":1,\"117\":1,\"118\":7,\"164\":2,\"195\":1,\"207\":3,\"214\":2}}],[\"handleselectorisnull\",{\"1\":{\"182\":3}}],[\"handles\",{\"0\":{\"82\":1},\"1\":{\"30\":2,\"165\":1,\"179\":1,\"185\":1}}],[\"handle\",{\"0\":{\"27\":1,\"30\":1,\"79\":1},\"1\":{\"33\":1,\"69\":1,\"79\":3,\"81\":7,\"82\":9,\"86\":2,\"97\":1,\"117\":1,\"118\":1,\"182\":2,\"183\":1,\"184\":1,\"197\":2,\"207\":9,\"214\":1,\"221\":1,\"235\":2}}],[\"hand\",{\"1\":{\"5\":1,\"182\":1}}],[\"m1\",{\"0\":{\"284\":1,\"286\":1},\"1\":{\"285\":1}}],[\"mxj\",{\"1\":{\"127\":3}}],[\"msg\",{\"1\":{\"109\":3,\"301\":1}}],[\"md5digestashex\",{\"1\":{\"147\":1}}],[\"md5\",{\"1\":{\"97\":1}}],[\"md5utils\",{\"1\":{\"97\":1}}],[\"md5=\",{\"1\":{\"48\":10}}],[\"mvc\",{\"0\":{\"78\":1},\"1\":{\"77\":1,\"78\":2,\"207\":3}}],[\"mvn\",{\"1\":{\"54\":1}}],[\"mystery\",{\"1\":{\"185\":1}}],[\"myself\",{\"1\":{\"99\":1,\"110\":3,\"114\":5,\"118\":1}}],[\"mysql>\",{\"1\":{\"82\":2}}],[\"mysql\",{\"0\":{\"126\":1,\"128\":1},\"1\":{\"33\":4,\"34\":1,\"43\":2,\"46\":2,\"56\":1,\"83\":2,\"126\":1,\"127\":5,\"128\":2,\"129\":2,\"131\":1,\"269\":1,\"275\":3,\"279\":1,\"309\":1,\"316\":1}}],[\"my\",{\"0\":{\"51\":1,\"316\":1},\"1\":{\"73\":1,\"74\":1,\"129\":1,\"244\":1,\"307\":1}}],[\"mymaster\",{\"1\":{\"46\":1}}],[\"myth\",{\"1\":{\"35\":1,\"156\":2,\"316\":1}}],[\"miui\",{\"1\":{\"288\":1}}],[\"milestone\",{\"0\":{\"284\":1},\"1\":{\"285\":1}}],[\"milliseconds\",{\"1\":{\"35\":1,\"36\":1,\"77\":1,\"100\":2,\"147\":2,\"213\":1,\"218\":4,\"221\":1}}],[\"mixed\",{\"1\":{\"279\":1,\"307\":1}}],[\"middleware\",{\"1\":{\"246\":1,\"316\":1}}],[\"middle\",{\"1\":{\"198\":1}}],[\"mission\",{\"0\":{\"175\":1}}],[\"missing\",{\"1\":{\"156\":1}}],[\"microservice\",{\"1\":{\"246\":1,\"303\":2,\"314\":2}}],[\"microservices\",{\"0\":{\"274\":1},\"1\":{\"212\":1,\"217\":1,\"273\":1,\"303\":1,\"314\":1}}],[\"micro\",{\"1\":{\"69\":2,\"303\":1,\"314\":1}}],[\"microkernel\",{\"1\":{\"14\":1}}],[\"might\",{\"0\":{\"37\":1,\"38\":1},\"1\":{\"69\":1}}],[\"minidle\",{\"1\":{\"275\":1}}],[\"minimumnumberofcalls\",{\"1\":{\"218\":1}}],[\"minimum\",{\"1\":{\"23\":1,\"200\":1,\"212\":1,\"213\":2,\"218\":1,\"219\":1}}],[\"minimalist\",{\"1\":{\"19\":1}}],[\"minrequestamount\",{\"1\":{\"213\":1}}],[\"min\",{\"1\":{\"91\":1,\"200\":1,\"219\":1}}],[\"minutes\",{\"0\":{\"308\":1},\"1\":{\"48\":3,\"105\":2}}],[\"mind\",{\"1\":{\"32\":1,\"156\":1}}],[\"ming\",{\"1\":{\"14\":1,\"114\":1}}],[\"moral\",{\"1\":{\"253\":1,\"285\":1}}],[\"moreover\",{\"1\":{\"37\":1,\"48\":1}}],[\"more\",{\"0\":{\"279\":1,\"296\":1},\"1\":{\"28\":1,\"57\":1,\"64\":2,\"71\":1,\"80\":1,\"89\":1,\"121\":1,\"131\":1,\"182\":1,\"211\":1,\"212\":2,\"214\":1,\"267\":1,\"275\":1,\"283\":2,\"285\":1,\"294\":1,\"299\":1,\"301\":3,\"303\":2,\"314\":2}}],[\"moment\",{\"1\":{\"91\":1}}],[\"moments\",{\"1\":{\"37\":1}}],[\"modules\",{\"1\":{\"68\":2,\"103\":1,\"131\":2,\"217\":1,\"267\":1,\"270\":2,\"303\":1,\"314\":1}}],[\"module\",{\"0\":{\"56\":1,\"57\":1,\"279\":1},\"1\":{\"58\":1,\"72\":2,\"78\":1,\"98\":1,\"104\":2,\"180\":3,\"270\":6,\"275\":1,\"279\":7,\"280\":1,\"282\":1,\"303\":4,\"314\":4}}],[\"modified\",{\"0\":{\"195\":1},\"1\":{\"81\":1,\"101\":1,\"107\":1,\"195\":1,\"285\":2}}],[\"modifies\",{\"1\":{\"81\":1}}],[\"modifications\",{\"1\":{\"285\":1}}],[\"modification\",{\"1\":{\"48\":1,\"81\":1,\"99\":1,\"101\":1,\"161\":1,\"162\":1}}],[\"modifying\",{\"1\":{\"121\":1,\"195\":1,\"253\":1,\"285\":1}}],[\"modify\",{\"1\":{\"48\":1,\"56\":1,\"66\":1,\"81\":1,\"83\":2,\"97\":1,\"98\":1,\"214\":1,\"219\":1,\"287\":1}}],[\"modes\",{\"1\":{\"271\":1,\"275\":1,\"276\":1,\"283\":1,\"307\":1}}],[\"model\",{\"1\":{\"231\":1}}],[\"mode\",{\"1\":{\"33\":2,\"70\":1,\"82\":1,\"96\":3,\"101\":1,\"116\":3,\"126\":2,\"133\":2,\"179\":1,\"182\":1,\"212\":1,\"213\":6,\"214\":2,\"231\":1,\"241\":4,\"263\":1,\"275\":1,\"276\":1,\"279\":6,\"282\":2,\"283\":2,\"287\":2,\"288\":2}}],[\"motan<\",{\"1\":{\"45\":1,\"46\":1}}],[\"motan\",{\"0\":{\"45\":1},\"1\":{\"34\":1,\"46\":1,\"264\":1,\"269\":1,\"271\":1,\"278\":1,\"280\":2}}],[\"motivation\",{\"1\":{\"4\":1}}],[\"monmentum\",{\"1\":{\"302\":1,\"313\":1}}],[\"month\",{\"1\":{\"289\":1}}],[\"monthly\",{\"0\":{\"278\":1}}],[\"months\",{\"1\":{\"23\":1,\"246\":1}}],[\"monitorplugin\",{\"1\":{\"164\":1,\"179\":2}}],[\"monitored\",{\"1\":{\"112\":1}}],[\"monitors\",{\"1\":{\"98\":1,\"116\":1,\"117\":1,\"161\":1,\"162\":1,\"165\":1}}],[\"monitor\",{\"1\":{\"87\":2,\"103\":1,\"164\":2,\"179\":3,\"211\":2,\"270\":1,\"307\":1}}],[\"monitoring\",{\"1\":{\"14\":1,\"19\":3,\"104\":1,\"105\":5,\"180\":1,\"269\":1,\"279\":1,\"298\":1,\"304\":1,\"315\":1}}],[\"mono<object>\",{\"1\":{\"236\":1,\"237\":1}}],[\"mono<t>>\",{\"1\":{\"221\":2}}],[\"mono<t>\",{\"1\":{\"221\":6}}],[\"mono<ratelimiterresponse>\",{\"1\":{\"197\":1}}],[\"mono<clientresponse>\",{\"1\":{\"92\":1}}],[\"mono<void>\",{\"1\":{\"85\":1,\"86\":2,\"87\":1,\"92\":3,\"93\":1,\"172\":2,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":3,\"185\":1,\"197\":1,\"207\":2,\"214\":2,\"221\":4,\"235\":2,\"236\":1,\"238\":1}}],[\"mono\",{\"1\":{\"86\":2,\"92\":1,\"93\":1,\"179\":2,\"185\":1,\"214\":1,\"235\":2,\"237\":1,\"238\":1}}],[\"mongoclient\",{\"1\":{\"287\":1}}],[\"mongo\",{\"1\":{\"43\":1,\"280\":1}}],[\"mongouserpwd\",{\"1\":{\"33\":1,\"46\":1}}],[\"mongousername\",{\"1\":{\"33\":1,\"46\":1}}],[\"mongodb4\",{\"1\":{\"287\":1}}],[\"mongodbname\",{\"1\":{\"33\":1,\"46\":1}}],[\"mongodburl\",{\"1\":{\"33\":1,\"46\":1}}],[\"mongodb\",{\"1\":{\"33\":7,\"34\":1,\"46\":1,\"269\":1,\"279\":1,\"285\":1,\"316\":1}}],[\"most\",{\"1\":{\"19\":1,\"33\":2,\"69\":1,\"74\":1,\"84\":1,\"101\":1,\"120\":1,\"123\":1,\"125\":1,\"129\":1,\"133\":1,\"211\":1,\"214\":1}}],[\"mutated\",{\"1\":{\"207\":2,\"221\":2}}],[\"mutate\",{\"1\":{\"207\":2,\"221\":2}}],[\"much\",{\"1\":{\"80\":1,\"177\":1,\"182\":1}}],[\"multiplied\",{\"1\":{\"200\":1,\"214\":1}}],[\"multiple\",{\"1\":{\"5\":1,\"34\":1,\"35\":1,\"48\":1,\"69\":3,\"70\":2,\"72\":1,\"81\":1,\"89\":1,\"104\":2,\"113\":1,\"120\":1,\"124\":2,\"127\":1,\"151\":1,\"210\":1,\"212\":1,\"220\":1,\"269\":2,\"270\":3,\"303\":1,\"307\":1,\"314\":1}}],[\"multivaluemap<string\",{\"1\":{\"105\":1,\"180\":1}}],[\"multi\",{\"0\":{\"134\":1},\"1\":{\"35\":1,\"307\":1}}],[\"must\",{\"1\":{\"21\":1,\"22\":1,\"23\":4,\"69\":2,\"70\":1,\"98\":1,\"100\":1,\"101\":2,\"123\":1,\"164\":2,\"210\":1,\"246\":6,\"253\":1,\"285\":1}}],[\"muou\",{\"1\":{\"11\":1}}],[\"march\",{\"1\":{\"253\":2}}],[\"marking\",{\"1\":{\"100\":1}}],[\"making\",{\"1\":{\"253\":2,\"301\":1}}],[\"makes\",{\"0\":{\"46\":1},\"1\":{\"105\":1,\"122\":1,\"185\":1,\"201\":1,\"251\":1}}],[\"make\",{\"0\":{\"41\":1,\"307\":1},\"1\":{\"4\":1,\"28\":1,\"29\":1,\"57\":1,\"89\":1,\"105\":1,\"123\":1,\"212\":1,\"297\":1,\"316\":2}}],[\"major\",{\"1\":{\"252\":1,\"285\":1}}],[\"matlab\",{\"1\":{\"316\":1}}],[\"matter\",{\"1\":{\"312\":1}}],[\"matters\",{\"0\":{\"252\":1},\"1\":{\"253\":1}}],[\"mature\",{\"1\":{\"209\":1}}],[\"math\",{\"1\":{\"200\":3,\"219\":11}}],[\"matchertable\",{\"1\":{\"288\":1}}],[\"matched\",{\"1\":{\"205\":1}}],[\"matches\",{\"1\":{\"70\":1,\"85\":1,\"118\":1,\"172\":1}}],[\"matchstrategy\",{\"1\":{\"185\":1}}],[\"matchselector\",{\"1\":{\"85\":1,\"172\":1,\"182\":2}}],[\"matchifmissing\",{\"1\":{\"112\":1,\"116\":1}}],[\"matching\",{\"1\":{\"70\":5,\"85\":3,\"128\":1,\"133\":1,\"182\":1,\"185\":1,\"192\":1,\"202\":1,\"206\":1,\"212\":1,\"294\":1,\"312\":1}}],[\"matchrule\",{\"1\":{\"85\":1,\"172\":1,\"182\":2}}],[\"matchmodeenum\",{\"1\":{\"80\":1,\"82\":1}}],[\"matchmode\",{\"1\":{\"80\":1,\"82\":1}}],[\"match\",{\"1\":{\"61\":2,\"64\":12,\"70\":8,\"80\":1,\"82\":2,\"85\":3,\"87\":1,\"112\":1,\"171\":1,\"172\":3,\"182\":4,\"226\":1}}],[\"mapconverter\",{\"1\":{\"289\":1}}],[\"maputil\",{\"1\":{\"288\":1}}],[\"mapwrapper\",{\"1\":{\"287\":1}}],[\"maps\",{\"1\":{\"139\":1,\"147\":1}}],[\"map<class<\",{\"1\":{\"132\":1,\"134\":1,\"137\":1}}],[\"map<string\",{\"1\":{\"118\":1,\"134\":1,\"135\":1,\"136\":1,\"139\":7,\"147\":1,\"207\":3}}],[\"map<rpctypeenum\",{\"1\":{\"82\":1}}],[\"maptodata\",{\"1\":{\"109\":1,\"165\":1}}],[\"map\",{\"1\":{\"81\":2,\"82\":1,\"91\":7,\"104\":8,\"117\":7,\"121\":2,\"133\":1,\"147\":7,\"151\":1,\"156\":1,\"162\":1,\"165\":6,\"173\":7,\"175\":4,\"195\":2,\"197\":1,\"231\":1,\"257\":1,\"289\":3}}],[\"mapped\",{\"1\":{\"72\":1}}],[\"mappings\",{\"1\":{\"207\":3}}],[\"mappingbeans\",{\"1\":{\"207\":2}}],[\"mapping\",{\"1\":{\"48\":1,\"136\":1,\"137\":1,\"139\":1,\"207\":2,\"288\":1}}],[\"made\",{\"1\":{\"48\":1,\"70\":1,\"133\":1,\"182\":1,\"285\":1}}],[\"machine\",{\"1\":{\"43\":1,\"191\":1}}],[\"machines\",{\"1\":{\"40\":1}}],[\"manner\",{\"1\":{\"214\":1}}],[\"manual\",{\"1\":{\"164\":3}}],[\"manually\",{\"1\":{\"48\":1,\"101\":1,\"129\":1,\"164\":4,\"220\":1}}],[\"many\",{\"0\":{\"305\":1},\"1\":{\"43\":2,\"48\":2,\"80\":2,\"91\":1,\"97\":1,\"104\":1,\"110\":1,\"164\":1,\"187\":1,\"189\":1,\"197\":3,\"210\":1,\"211\":2,\"212\":1,\"214\":4,\"285\":2,\"297\":2,\"303\":1,\"314\":1,\"316\":3}}],[\"managed\",{\"1\":{\"77\":1,\"100\":1,\"128\":1}}],[\"manage\",{\"1\":{\"69\":1}}],[\"manager\",{\"1\":{\"40\":2,\"87\":2,\"161\":1,\"173\":1,\"174\":2,\"175\":2}}],[\"management\",{\"1\":{\"19\":1,\"21\":1,\"56\":1,\"68\":1,\"69\":1,\"72\":1,\"74\":1,\"86\":1,\"88\":1,\"128\":1,\"191\":2,\"202\":1,\"212\":1,\"214\":1,\"218\":1,\"229\":1,\"253\":3,\"269\":1,\"279\":1,\"303\":1,\"310\":1,\"314\":1}}],[\"maven\",{\"0\":{\"203\":1},\"1\":{\"42\":1,\"250\":1,\"272\":1,\"310\":1,\"311\":1}}],[\"master\",{\"0\":{\"42\":1},\"1\":{\"65\":2,\"69\":1,\"130\":1}}],[\"mastername\",{\"1\":{\"33\":1,\"46\":1}}],[\"maybe\",{\"1\":{\"301\":1}}],[\"may\",{\"1\":{\"40\":1,\"122\":1,\"131\":1,\"177\":1,\"180\":2,\"210\":1,\"211\":2,\"301\":2,\"303\":2,\"314\":2}}],[\"maxlifetime\",{\"1\":{\"275\":1}}],[\"maxactive\",{\"1\":{\"275\":1}}],[\"maxcurrent\",{\"1\":{\"91\":3}}],[\"max\",{\"1\":{\"36\":3,\"40\":2,\"43\":1,\"65\":2,\"100\":2,\"200\":1,\"219\":12}}],[\"maximumweight\",{\"1\":{\"40\":1}}],[\"maximum\",{\"1\":{\"33\":4,\"101\":1,\"189\":1,\"211\":1,\"212\":1}}],[\"mainstream\",{\"1\":{\"253\":1,\"270\":1}}],[\"mainly\",{\"1\":{\"142\":1,\"162\":1,\"180\":1,\"192\":1,\"195\":1,\"210\":1,\"211\":1,\"212\":1,\"214\":1,\"225\":2,\"226\":1,\"231\":1,\"240\":1,\"241\":1,\"316\":1}}],[\"maintenance\",{\"1\":{\"19\":1,\"21\":1,\"225\":1}}],[\"maintained\",{\"1\":{\"48\":1,\"97\":1,\"173\":1}}],[\"maintain\",{\"1\":{\"17\":1,\"116\":1,\"173\":1}}],[\"main\",{\"0\":{\"6\":1,\"8\":1},\"1\":{\"57\":5,\"87\":1,\"118\":1,\"122\":1,\"123\":1,\"124\":1,\"129\":2,\"130\":1,\"154\":2,\"155\":8,\"164\":10,\"179\":1,\"180\":1,\"253\":1,\"310\":1}}],[\"mentality\",{\"1\":{\"316\":1}}],[\"mention\",{\"1\":{\"131\":1}}],[\"mentioned\",{\"1\":{\"48\":1,\"87\":3,\"164\":1,\"173\":2,\"177\":1,\"185\":1}}],[\"media\",{\"1\":{\"253\":1}}],[\"mediatype\",{\"1\":{\"105\":1}}],[\"meet\",{\"1\":{\"191\":1}}],[\"meeting\",{\"1\":{\"10\":1,\"13\":1}}],[\"measures\",{\"1\":{\"91\":1}}],[\"mean\",{\"1\":{\"105\":1}}],[\"means\",{\"1\":{\"48\":1,\"57\":1,\"61\":1,\"64\":1,\"69\":1,\"70\":4,\"86\":1,\"100\":1,\"119\":2,\"174\":1,\"193\":1,\"211\":1,\"213\":2,\"214\":1}}],[\"meaningful\",{\"1\":{\"211\":1}}],[\"meaning\",{\"0\":{\"4\":1},\"1\":{\"83\":1,\"119\":1,\"180\":1}}],[\"me\",{\"1\":{\"83\":1,\"91\":1,\"100\":1,\"122\":1,\"164\":1,\"214\":1,\"304\":1,\"315\":1}}],[\"message\",{\"1\":{\"81\":2,\"104\":3,\"105\":2,\"114\":11,\"193\":1,\"197\":1,\"214\":1,\"220\":1,\"301\":1}}],[\"messaging\",{\"1\":{\"19\":1}}],[\"memory\",{\"1\":{\"68\":1,\"101\":1,\"155\":1,\"161\":1,\"165\":3,\"166\":2,\"226\":1,\"307\":1,\"312\":1}}],[\"member\",{\"1\":{\"8\":1,\"22\":1}}],[\"members\",{\"0\":{\"255\":1},\"1\":{\"5\":1,\"21\":1,\"251\":1,\"267\":1,\"285\":1}}],[\"mechanism\",{\"1\":{\"29\":1,\"32\":1,\"120\":1,\"121\":1,\"131\":2,\"162\":1,\"177\":1,\"221\":1,\"279\":1,\"312\":1}}],[\"met\",{\"1\":{\"206\":1}}],[\"metasubscribers\",{\"1\":{\"117\":2,\"161\":4,\"166\":2}}],[\"metadataservice\",{\"1\":{\"156\":1}}],[\"metadatasubscriber\",{\"1\":{\"117\":1,\"179\":1}}],[\"metadatasubscribers\",{\"1\":{\"104\":3,\"117\":2,\"161\":5}}],[\"metadatapath\",{\"1\":{\"156\":2}}],[\"metadatahandler\",{\"1\":{\"117\":1}}],[\"metadatalist\",{\"1\":{\"113\":2}}],[\"metadatarefresh\",{\"1\":{\"104\":1}}],[\"metadata\",{\"0\":{\"226\":1},\"1\":{\"78\":2,\"112\":1,\"118\":7,\"119\":3,\"156\":1,\"157\":1,\"159\":1,\"164\":6,\"224\":1,\"225\":1,\"226\":2,\"232\":1,\"236\":11,\"237\":8}}],[\"metadatamapper\",{\"1\":{\"78\":1}}],[\"metadatado\",{\"1\":{\"78\":1}}],[\"meta\",{\"1\":{\"48\":3,\"97\":1,\"104\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":2,\"117\":1,\"123\":1,\"132\":1,\"156\":1,\"161\":2,\"164\":1,\"226\":1,\"236\":4,\"275\":1,\"288\":1}}],[\"methodnameparametertypes\",{\"1\":{\"226\":1}}],[\"methodproxy\",{\"1\":{\"164\":2}}],[\"methodweightmap\",{\"1\":{\"91\":4}}],[\"method\",{\"0\":{\"79\":1,\"82\":1,\"198\":1},\"1\":{\"30\":4,\"33\":2,\"36\":3,\"39\":1,\"48\":15,\"59\":1,\"80\":2,\"81\":2,\"82\":1,\"84\":4,\"85\":1,\"86\":1,\"87\":2,\"92\":5,\"97\":2,\"100\":4,\"104\":6,\"105\":2,\"112\":7,\"113\":2,\"114\":2,\"116\":1,\"118\":4,\"120\":3,\"121\":2,\"122\":1,\"123\":2,\"124\":1,\"126\":2,\"132\":3,\"133\":1,\"136\":1,\"137\":1,\"147\":1,\"151\":4,\"156\":9,\"162\":1,\"164\":3,\"165\":1,\"173\":1,\"179\":1,\"180\":6,\"182\":8,\"183\":1,\"184\":8,\"185\":1,\"195\":1,\"197\":1,\"198\":1,\"199\":1,\"207\":1,\"213\":1,\"221\":1,\"226\":2,\"234\":8,\"235\":1,\"237\":1,\"241\":2,\"242\":13,\"258\":1,\"272\":1,\"275\":5,\"288\":1,\"292\":3,\"300\":1,\"307\":1,\"316\":1}}],[\"methods\",{\"0\":{\"36\":1,\"37\":1},\"1\":{\"29\":1,\"33\":2,\"34\":2,\"46\":1,\"48\":8,\"70\":1,\"80\":1,\"85\":1,\"86\":1,\"92\":1,\"97\":1,\"98\":1,\"112\":2,\"113\":1,\"116\":1,\"118\":3,\"122\":1,\"132\":1,\"182\":1,\"197\":2,\"213\":1,\"221\":1,\"234\":1,\"270\":2,\"275\":2,\"276\":1,\"283\":1,\"284\":1,\"288\":1,\"289\":1,\"312\":1}}],[\"metricstrackerfacade\",{\"1\":{\"86\":1}}],[\"metrics\",{\"1\":{\"14\":1,\"269\":2,\"270\":1,\"279\":1,\"307\":1}}],[\"i4zsgj\",{\"1\":{\"289\":1}}],[\"i4zbn0\",{\"1\":{\"289\":1}}],[\"i4z7bv\",{\"1\":{\"289\":1}}],[\"i4zkcw\",{\"1\":{\"288\":1}}],[\"i4wpf4\",{\"1\":{\"289\":1}}],[\"i4wuwr\",{\"1\":{\"288\":1,\"289\":1}}],[\"i4wh2x\",{\"1\":{\"288\":1}}],[\"i4w5fs\",{\"1\":{\"288\":1}}],[\"i4w427\",{\"1\":{\"288\":1}}],[\"ignored\",{\"1\":{\"176\":1,\"179\":1}}],[\"ignoreexceptionhandler\",{\"1\":{\"35\":2}}],[\"izkdatalistener\",{\"1\":{\"162\":1}}],[\"iv\",{\"0\":{\"157\":1,\"163\":1}}],[\"i0itec\",{\"1\":{\"155\":5,\"156\":1}}],[\"iot\",{\"1\":{\"246\":1}}],[\"ioc\",{\"1\":{\"156\":2,\"161\":1}}],[\"ioexception\",{\"1\":{\"114\":2,\"123\":1,\"136\":1,\"139\":1,\"176\":2}}],[\"io\",{\"1\":{\"101\":1,\"105\":1,\"124\":1,\"244\":1,\"309\":1,\"310\":1}}],[\"iii\",{\"0\":{\"72\":1,\"156\":1}}],[\"ii\",{\"0\":{\"69\":1,\"155\":1}}],[\"iphost\",{\"1\":{\"301\":1}}],[\"ip=\",{\"1\":{\"100\":1}}],[\"ip\",{\"1\":{\"57\":1,\"70\":2,\"87\":1,\"89\":6,\"90\":1,\"91\":1,\"100\":1,\"120\":3,\"172\":4,\"173\":1,\"176\":6,\"177\":5,\"183\":2}}],[\"i++\",{\"1\":{\"35\":2,\"89\":1,\"90\":1,\"122\":1,\"123\":1,\"242\":2}}],[\"idletimeout\",{\"1\":{\"275\":1}}],[\"id\",{\"0\":{\"198\":1},\"1\":{\"82\":2,\"87\":1,\"109\":5,\"142\":2,\"165\":4,\"166\":1,\"173\":2,\"197\":2,\"198\":1,\"199\":1,\"226\":1,\"300\":2}}],[\"id=1\",{\"1\":{\"73\":2}}],[\"id=\",{\"1\":{\"33\":1,\"43\":1,\"233\":1,\"265\":1}}],[\"identify\",{\"1\":{\"252\":1,\"275\":1}}],[\"identifiers\",{\"1\":{\"139\":1}}],[\"identifier\",{\"1\":{\"137\":1,\"139\":7}}],[\"identified\",{\"1\":{\"48\":1,\"81\":1}}],[\"identical\",{\"1\":{\"214\":1}}],[\"identity\",{\"1\":{\"19\":1,\"135\":1,\"136\":1}}],[\"ideas\",{\"1\":{\"277\":1,\"281\":1,\"290\":1,\"316\":1}}],[\"ideal\",{\"1\":{\"32\":1}}],[\"idea\",{\"0\":{\"16\":1,\"53\":1},\"1\":{\"69\":2,\"74\":1,\"87\":1,\"130\":1,\"169\":1,\"211\":3,\"257\":2}}],[\"i\",{\"0\":{\"68\":1,\"154\":1,\"169\":1},\"1\":{\"29\":1,\"33\":5,\"35\":6,\"43\":1,\"48\":6,\"72\":1,\"74\":1,\"78\":2,\"85\":1,\"87\":1,\"89\":3,\"90\":5,\"99\":1,\"101\":3,\"113\":1,\"120\":1,\"122\":5,\"123\":2,\"124\":6,\"128\":1,\"129\":2,\"133\":2,\"139\":1,\"164\":2,\"180\":1,\"182\":1,\"197\":1,\"198\":1,\"200\":2,\"220\":2,\"241\":1,\"242\":11,\"243\":1,\"281\":1,\"285\":4,\"297\":1,\"302\":1,\"303\":3,\"304\":2,\"306\":1,\"307\":1,\"311\":6,\"312\":1,\"313\":1,\"314\":3,\"315\":2,\"316\":8}}],[\"iterutil\",{\"1\":{\"289\":1}}],[\"iterable<s>\",{\"1\":{\"123\":2}}],[\"iterating\",{\"1\":{\"134\":1}}],[\"iteration\",{\"1\":{\"123\":1,\"124\":1,\"133\":1}}],[\"iterator<driver>\",{\"1\":{\"126\":1}}],[\"iterator<s>\",{\"1\":{\"123\":1}}],[\"iterator<longpollingclient>\",{\"1\":{\"100\":1}}],[\"iterator\",{\"1\":{\"100\":1,\"123\":3,\"126\":1,\"133\":1}}],[\"iterates\",{\"1\":{\"114\":1,\"129\":1}}],[\"iterate\",{\"1\":{\"100\":1,\"131\":1}}],[\"iter\",{\"1\":{\"100\":4}}],[\"items\",{\"1\":{\"212\":2,\"213\":1}}],[\"item\",{\"1\":{\"91\":2,\"212\":1}}],[\"itself\",{\"1\":{\"91\":1,\"97\":1,\"98\":1,\"128\":2,\"129\":1,\"137\":1,\"172\":1,\"201\":1,\"207\":1,\"210\":1,\"211\":1,\"235\":1}}],[\"its\",{\"1\":{\"29\":1,\"30\":1,\"69\":1,\"84\":1,\"86\":2,\"87\":1,\"97\":1,\"100\":2,\"101\":1,\"112\":1,\"118\":2,\"120\":2,\"121\":1,\"122\":2,\"123\":1,\"124\":1,\"126\":2,\"128\":1,\"131\":1,\"132\":1,\"161\":1,\"162\":1,\"189\":1,\"208\":1,\"212\":1,\"265\":1,\"285\":1}}],[\"it\",{\"0\":{\"46\":1,\"161\":1,\"189\":1},\"1\":{\"28\":1,\"29\":3,\"30\":4,\"31\":1,\"32\":3,\"33\":2,\"39\":1,\"40\":3,\"42\":2,\"43\":2,\"48\":21,\"57\":1,\"61\":1,\"64\":1,\"69\":2,\"70\":1,\"73\":1,\"77\":1,\"78\":1,\"80\":2,\"81\":3,\"83\":1,\"85\":1,\"86\":4,\"87\":2,\"90\":1,\"91\":3,\"92\":1,\"97\":1,\"98\":1,\"99\":4,\"100\":7,\"101\":4,\"104\":10,\"105\":4,\"106\":2,\"109\":1,\"110\":4,\"112\":1,\"113\":3,\"114\":5,\"116\":2,\"117\":2,\"119\":1,\"120\":2,\"122\":5,\"123\":6,\"124\":6,\"128\":3,\"129\":1,\"131\":2,\"132\":3,\"133\":2,\"134\":1,\"135\":3,\"136\":2,\"137\":1,\"139\":3,\"156\":2,\"157\":1,\"159\":1,\"162\":1,\"164\":5,\"165\":2,\"169\":1,\"171\":1,\"174\":2,\"175\":1,\"176\":1,\"179\":7,\"180\":5,\"181\":2,\"182\":3,\"184\":2,\"187\":1,\"189\":1,\"192\":1,\"195\":1,\"197\":2,\"199\":2,\"200\":5,\"201\":3,\"205\":1,\"207\":3,\"209\":2,\"210\":3,\"211\":5,\"212\":9,\"213\":4,\"214\":5,\"217\":2,\"219\":1,\"220\":1,\"221\":2,\"225\":1,\"231\":1,\"234\":1,\"235\":2,\"241\":3,\"242\":3,\"243\":1,\"251\":1,\"252\":4,\"270\":1,\"271\":1,\"272\":1,\"275\":2,\"276\":4,\"278\":2,\"280\":1,\"285\":3,\"293\":1,\"294\":1,\"297\":2,\"299\":1,\"300\":3,\"301\":2,\"302\":2,\"303\":3,\"304\":1,\"306\":1,\"309\":1,\"313\":2,\"314\":3,\"315\":1,\"316\":5}}],[\"illegalargumentexception\",{\"1\":{\"139\":1}}],[\"illegalaccessexception\",{\"1\":{\"82\":1,\"139\":1}}],[\"illegalstateexception\",{\"1\":{\"97\":1,\"111\":1,\"113\":1,\"139\":1,\"156\":1,\"165\":1,\"197\":1}}],[\"illegal\",{\"1\":{\"21\":1,\"22\":3}}],[\"img\",{\"1\":{\"285\":1}}],[\"immutablepair<>\",{\"1\":{\"237\":1}}],[\"immediately\",{\"0\":{\"195\":2},\"1\":{\"48\":1,\"101\":3,\"312\":1}}],[\"imbalance\",{\"1\":{\"177\":1}}],[\"imagined\",{\"1\":{\"81\":1}}],[\"imagine\",{\"1\":{\"69\":1,\"285\":1}}],[\"images\",{\"1\":{\"247\":1}}],[\"image\",{\"1\":{\"19\":1,\"48\":8,\"118\":1,\"122\":4,\"123\":2,\"126\":1,\"132\":1,\"135\":1,\"148\":1,\"182\":1}}],[\"imperative\",{\"1\":{\"316\":1}}],[\"impacts\",{\"1\":{\"247\":1}}],[\"impact\",{\"0\":{\"247\":1},\"1\":{\"177\":1,\"253\":1,\"285\":1}}],[\"improperly\",{\"1\":{\"131\":1}}],[\"improved\",{\"1\":{\"246\":1,\"288\":1}}],[\"improvement\",{\"1\":{\"23\":1}}],[\"improve\",{\"1\":{\"3\":1,\"4\":1,\"5\":1,\"29\":1,\"123\":1,\"252\":1}}],[\"impression\",{\"1\":{\"110\":1,\"197\":1}}],[\"implement\",{\"1\":{\"122\":1,\"124\":3,\"126\":2,\"129\":1,\"156\":2,\"177\":1,\"209\":1,\"225\":2,\"312\":1}}],[\"implemented\",{\"0\":{\"196\":1},\"1\":{\"97\":2,\"105\":1,\"106\":1,\"117\":1,\"118\":1,\"123\":2,\"125\":1,\"127\":1,\"182\":2,\"195\":2,\"197\":1,\"231\":1,\"304\":1,\"307\":1,\"315\":1}}],[\"implementations\",{\"1\":{\"117\":1,\"120\":1,\"189\":1,\"199\":1,\"279\":1}}],[\"implementation\",{\"0\":{\"99\":1,\"100\":1,\"123\":1,\"130\":1,\"150\":1,\"168\":1,\"234\":1},\"1\":{\"78\":1,\"80\":1,\"84\":1,\"87\":2,\"88\":1,\"92\":1,\"99\":1,\"100\":3,\"103\":1,\"105\":1,\"109\":1,\"118\":3,\"120\":3,\"121\":3,\"122\":2,\"123\":3,\"124\":2,\"126\":3,\"128\":5,\"129\":4,\"130\":1,\"131\":4,\"132\":2,\"133\":3,\"135\":5,\"137\":1,\"138\":1,\"139\":3,\"156\":1,\"165\":2,\"173\":1,\"175\":1,\"176\":1,\"177\":1,\"182\":2,\"185\":1,\"189\":1,\"195\":1,\"199\":2,\"207\":1,\"224\":1,\"265\":1,\"275\":2,\"279\":3,\"288\":2}}],[\"implements\",{\"1\":{\"35\":1,\"36\":1,\"84\":1,\"86\":3,\"92\":3,\"97\":2,\"98\":2,\"100\":4,\"104\":1,\"111\":1,\"112\":1,\"113\":1,\"118\":3,\"122\":3,\"123\":3,\"126\":1,\"127\":1,\"156\":5,\"161\":1,\"182\":1,\"207\":1,\"214\":2,\"241\":2,\"242\":1,\"275\":2,\"300\":1}}],[\"implies\",{\"1\":{\"69\":1,\"204\":1}}],[\"import\",{\"0\":{\"46\":1},\"1\":{\"35\":21,\"36\":13,\"40\":10,\"43\":2,\"112\":2,\"156\":1}}],[\"important\",{\"1\":{\"33\":2,\"39\":1,\"72\":1,\"120\":1,\"124\":1,\"127\":1,\"129\":1,\"207\":1,\"304\":1,\"315\":1,\"316\":1}}],[\"iam\",{\"1\":{\"19\":1}}],[\"ifmissing\",{\"1\":{\"112\":1}}],[\"ifpresent\",{\"1\":{\"39\":1,\"86\":1,\"118\":3,\"162\":2}}],[\"if\",{\"0\":{\"32\":1,\"37\":1,\"38\":1,\"295\":1},\"1\":{\"5\":1,\"30\":1,\"31\":1,\"32\":2,\"33\":4,\"36\":2,\"37\":1,\"38\":2,\"39\":1,\"40\":1,\"43\":2,\"46\":1,\"48\":11,\"57\":1,\"59\":1,\"69\":1,\"78\":2,\"79\":3,\"80\":7,\"81\":4,\"82\":6,\"83\":1,\"85\":11,\"86\":5,\"89\":1,\"90\":7,\"91\":7,\"93\":2,\"97\":2,\"98\":1,\"99\":4,\"100\":1,\"101\":4,\"104\":9,\"105\":7,\"106\":1,\"109\":3,\"110\":1,\"112\":1,\"114\":4,\"118\":1,\"122\":2,\"123\":8,\"126\":2,\"127\":4,\"128\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"139\":14,\"151\":7,\"156\":4,\"161\":2,\"162\":1,\"164\":1,\"172\":3,\"174\":3,\"175\":5,\"176\":8,\"177\":4,\"179\":2,\"180\":1,\"182\":8,\"183\":2,\"184\":2,\"185\":2,\"192\":1,\"195\":5,\"197\":3,\"200\":5,\"207\":4,\"210\":3,\"211\":5,\"212\":4,\"213\":9,\"214\":16,\"218\":3,\"219\":1,\"220\":1,\"221\":7,\"222\":1,\"226\":2,\"234\":2,\"235\":4,\"236\":6,\"237\":4,\"238\":1,\"241\":8,\"242\":12,\"247\":1,\"252\":3,\"271\":2,\"275\":3,\"277\":1,\"285\":1,\"290\":1,\"300\":2,\"303\":3,\"304\":4,\"311\":6,\"314\":3,\"315\":4,\"316\":1}}],[\"isorder\",{\"1\":{\"287\":1}}],[\"isolation\",{\"1\":{\"217\":1}}],[\"isdefaultgenericserialization\",{\"1\":{\"242\":1}}],[\"isdriverallowed\",{\"1\":{\"127\":2}}],[\"isgenericreturnrawresult\",{\"1\":{\"242\":1}}],[\"isgeneric\",{\"1\":{\"241\":1}}],[\"isbeangenericserialization\",{\"1\":{\"241\":1,\"242\":1}}],[\"isblank\",{\"1\":{\"79\":1,\"81\":1,\"109\":1,\"151\":3,\"180\":1,\"207\":1,\"221\":1,\"236\":1,\"242\":1}}],[\"isjavagenericserialization\",{\"1\":{\"241\":1,\"242\":1}}],[\"ismakinggenericcall\",{\"1\":{\"241\":2}}],[\"is2xxsuccessful\",{\"1\":{\"184\":1,\"214\":1,\"221\":1}}],[\"isfull\",{\"1\":{\"182\":1}}],[\"isallowed\",{\"1\":{\"197\":4}}],[\"isallupstreamsameweight\",{\"1\":{\"177\":1}}],[\"isassignablefrom\",{\"1\":{\"123\":1,\"242\":1}}],[\"isreachable\",{\"1\":{\"176\":1}}],[\"isregister\",{\"1\":{\"78\":1}}],[\"isregistermetadata\",{\"1\":{\"78\":1}}],[\"ishostreachable\",{\"1\":{\"176\":3}}],[\"ishostconnector\",{\"1\":{\"176\":3}}],[\"isstatus\",{\"1\":{\"175\":1}}],[\"issued\",{\"1\":{\"160\":1,\"195\":1}}],[\"issue\",{\"0\":{\"280\":1},\"1\":{\"29\":1,\"31\":1,\"96\":1,\"237\":1,\"263\":2,\"287\":1,\"288\":9,\"289\":13}}],[\"issues\",{\"0\":{\"29\":1},\"1\":{\"42\":1,\"210\":1,\"237\":1,\"285\":2,\"287\":11,\"289\":2,\"301\":1}}],[\"isempty\",{\"1\":{\"48\":1,\"80\":1,\"82\":1,\"85\":2,\"89\":1,\"97\":1,\"104\":1,\"182\":2,\"183\":1,\"184\":1,\"237\":1,\"242\":1}}],[\"isnotblank\",{\"1\":{\"114\":1,\"139\":3,\"237\":1}}],[\"isnotempty\",{\"1\":{\"40\":1,\"105\":1,\"118\":1,\"161\":1,\"162\":1}}],[\"isnoneblank\",{\"1\":{\"109\":2,\"236\":1}}],[\"isnull\",{\"1\":{\"39\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":2,\"85\":2,\"93\":1,\"182\":2,\"183\":1,\"185\":1,\"195\":2,\"207\":1,\"237\":2,\"238\":1}}],[\"is\",{\"0\":{\"35\":1,\"127\":1,\"195\":2,\"196\":1,\"217\":1,\"232\":1,\"285\":1,\"297\":1},\"1\":{\"5\":3,\"11\":1,\"18\":1,\"22\":1,\"24\":1,\"28\":1,\"29\":2,\"30\":5,\"31\":2,\"32\":2,\"33\":6,\"35\":3,\"36\":4,\"37\":1,\"38\":2,\"39\":1,\"40\":1,\"43\":5,\"46\":1,\"48\":45,\"49\":1,\"56\":3,\"57\":3,\"61\":3,\"64\":13,\"66\":1,\"68\":1,\"69\":8,\"70\":5,\"71\":1,\"72\":4,\"78\":1,\"80\":4,\"81\":10,\"82\":3,\"83\":3,\"84\":1,\"85\":4,\"86\":9,\"87\":3,\"88\":1,\"89\":2,\"90\":7,\"91\":9,\"92\":5,\"96\":3,\"97\":2,\"98\":1,\"99\":5,\"100\":21,\"101\":11,\"103\":3,\"104\":9,\"105\":16,\"106\":3,\"109\":2,\"110\":5,\"112\":7,\"113\":6,\"114\":8,\"116\":1,\"117\":2,\"118\":5,\"119\":5,\"120\":4,\"121\":8,\"122\":3,\"123\":14,\"124\":3,\"125\":1,\"126\":6,\"127\":2,\"128\":4,\"129\":2,\"130\":1,\"131\":6,\"132\":2,\"134\":2,\"135\":3,\"136\":3,\"137\":1,\"138\":2,\"139\":2,\"141\":1,\"142\":2,\"151\":9,\"155\":4,\"156\":13,\"157\":1,\"159\":1,\"160\":3,\"161\":2,\"162\":1,\"164\":19,\"165\":6,\"166\":3,\"169\":1,\"171\":4,\"172\":2,\"173\":8,\"174\":5,\"175\":4,\"176\":9,\"177\":5,\"178\":1,\"179\":9,\"180\":12,\"181\":2,\"182\":10,\"183\":6,\"184\":5,\"185\":3,\"187\":1,\"189\":5,\"191\":2,\"192\":1,\"193\":2,\"195\":11,\"197\":10,\"198\":3,\"199\":7,\"200\":8,\"201\":2,\"204\":1,\"205\":1,\"206\":1,\"207\":5,\"210\":8,\"211\":24,\"212\":28,\"213\":11,\"214\":31,\"216\":1,\"217\":2,\"218\":3,\"219\":7,\"220\":2,\"221\":1,\"222\":2,\"225\":3,\"226\":7,\"231\":2,\"234\":3,\"235\":5,\"236\":2,\"240\":1,\"241\":2,\"242\":4,\"243\":1,\"246\":2,\"247\":1,\"248\":1,\"250\":1,\"252\":2,\"253\":4,\"270\":1,\"271\":1,\"273\":1,\"275\":4,\"278\":1,\"280\":1,\"281\":2,\"284\":1,\"285\":6,\"287\":3,\"288\":2,\"293\":1,\"299\":2,\"300\":9,\"301\":4,\"303\":1,\"304\":6,\"307\":1,\"309\":2,\"311\":2,\"312\":8,\"314\":1,\"315\":6,\"316\":6}}],[\"innodb\",{\"1\":{\"226\":1}}],[\"inner\",{\"1\":{\"86\":1}}],[\"inevitable\",{\"1\":{\"210\":1}}],[\"inetaddress\",{\"1\":{\"176\":1}}],[\"inetsocketaddress\",{\"1\":{\"176\":1}}],[\"inference\",{\"1\":{\"311\":2}}],[\"influxdb\",{\"1\":{\"307\":1}}],[\"infringement\",{\"1\":{\"253\":1}}],[\"inf\",{\"1\":{\"123\":1,\"132\":1}}],[\"inform\",{\"1\":{\"252\":1}}],[\"informing\",{\"1\":{\"156\":1}}],[\"informs\",{\"1\":{\"101\":1}}],[\"information\",{\"0\":{\"148\":1,\"296\":1},\"1\":{\"39\":1,\"61\":1,\"64\":1,\"77\":1,\"78\":1,\"81\":2,\"83\":2,\"87\":1,\"91\":1,\"93\":2,\"96\":2,\"98\":4,\"100\":3,\"101\":1,\"104\":5,\"105\":1,\"106\":2,\"109\":1,\"114\":1,\"116\":3,\"117\":3,\"118\":2,\"123\":1,\"125\":1,\"135\":1,\"136\":1,\"151\":1,\"155\":1,\"156\":1,\"164\":2,\"165\":1,\"173\":2,\"176\":1,\"178\":2,\"214\":1,\"220\":1,\"221\":2,\"226\":3,\"242\":1,\"270\":1,\"293\":1}}],[\"info\",{\"1\":{\"48\":8,\"57\":6,\"61\":3,\"64\":18,\"85\":2,\"86\":1,\"97\":1,\"100\":1,\"104\":5,\"105\":1,\"114\":1,\"117\":1,\"127\":5,\"155\":16,\"161\":1,\"164\":6,\"166\":1,\"184\":1,\"197\":1,\"207\":1,\"219\":9,\"220\":1}}],[\"inherited\",{\"1\":{\"287\":1}}],[\"inherits\",{\"1\":{\"119\":1,\"127\":1,\"182\":1,\"221\":1}}],[\"inheritance\",{\"1\":{\"112\":1,\"165\":1}}],[\"inherit\",{\"1\":{\"97\":1}}],[\"injects\",{\"1\":{\"161\":1}}],[\"injecting\",{\"1\":{\"156\":1}}],[\"injection\",{\"0\":{\"112\":1},\"1\":{\"156\":1}}],[\"injected\",{\"1\":{\"100\":1,\"112\":1,\"118\":1,\"179\":1,\"183\":1,\"207\":1}}],[\"inject\",{\"1\":{\"86\":1,\"92\":1,\"128\":1,\"156\":1,\"161\":2,\"166\":6}}],[\"initref\",{\"1\":{\"237\":1}}],[\"initrequestbuilder\",{\"1\":{\"92\":2}}],[\"initstrategies\",{\"1\":{\"207\":1}}],[\"init\",{\"1\":{\"82\":1,\"156\":4}}],[\"initiates\",{\"1\":{\"184\":1,\"185\":1,\"241\":1}}],[\"initiated\",{\"1\":{\"179\":1,\"214\":1,\"235\":1}}],[\"initiate\",{\"1\":{\"172\":1,\"179\":2}}],[\"initiating\",{\"1\":{\"155\":2}}],[\"initiation\",{\"0\":{\"68\":1}}],[\"initiator\",{\"1\":{\"33\":2,\"39\":1}}],[\"initializing\",{\"1\":{\"195\":1}}],[\"initializingbean\",{\"1\":{\"97\":2,\"111\":1,\"112\":1,\"156\":2}}],[\"initialized\",{\"1\":{\"128\":1,\"131\":1,\"139\":1,\"165\":1,\"174\":1,\"197\":2,\"275\":1}}],[\"initializes\",{\"1\":{\"128\":1}}],[\"initialize\",{\"1\":{\"57\":1,\"126\":1,\"133\":1,\"161\":1}}],[\"initialization\",{\"1\":{\"48\":1,\"97\":1,\"104\":1,\"116\":1,\"117\":1,\"123\":3,\"124\":1,\"126\":1,\"129\":1,\"137\":1,\"156\":5,\"166\":1,\"174\":1,\"179\":1,\"207\":2}}],[\"initial\",{\"0\":{\"190\":1},\"1\":{\"48\":1,\"288\":1}}],[\"inputstream\",{\"1\":{\"136\":1,\"139\":3}}],[\"input\",{\"1\":{\"56\":1,\"126\":1}}],[\"inspection\",{\"1\":{\"270\":1}}],[\"insufficient\",{\"1\":{\"210\":1}}],[\"inst\",{\"1\":{\"195\":8,\"197\":1}}],[\"instead\",{\"1\":{\"100\":1,\"285\":1,\"287\":1}}],[\"instability\",{\"1\":{\"211\":1}}],[\"instantly\",{\"1\":{\"211\":1}}],[\"instant\",{\"1\":{\"197\":1}}],[\"instantiation\",{\"1\":{\"156\":1,\"164\":1}}],[\"instantiationexception\",{\"1\":{\"82\":1,\"139\":1}}],[\"instantiate\",{\"1\":{\"164\":5}}],[\"instantiated\",{\"1\":{\"112\":1,\"123\":1,\"156\":1}}],[\"instantiates\",{\"1\":{\"48\":1,\"77\":1,\"156\":1,\"161\":1}}],[\"instanceof\",{\"1\":{\"184\":1,\"214\":3,\"234\":1,\"237\":1,\"241\":1,\"242\":1}}],[\"instance\",{\"1\":{\"72\":1,\"74\":1,\"109\":1,\"113\":1,\"123\":1,\"131\":1,\"137\":1,\"165\":1,\"172\":3,\"195\":7,\"237\":1}}],[\"instances\",{\"1\":{\"72\":1,\"123\":1,\"137\":1,\"139\":1}}],[\"installation\",{\"1\":{\"316\":1}}],[\"install\",{\"1\":{\"54\":1}}],[\"ins\",{\"1\":{\"69\":2,\"84\":1,\"85\":3,\"86\":4,\"87\":1,\"169\":1,\"179\":17,\"187\":3,\"192\":1,\"221\":1,\"225\":1,\"295\":1,\"298\":2,\"301\":1,\"311\":2,\"312\":1}}],[\"insists\",{\"1\":{\"252\":1}}],[\"inside\",{\"1\":{\"48\":2}}],[\"insights\",{\"1\":{\"14\":1,\"48\":1}}],[\"insertzknode\",{\"1\":{\"98\":1}}],[\"inserter\",{\"1\":{\"92\":2}}],[\"inserted\",{\"1\":{\"80\":1}}],[\"inserting\",{\"1\":{\"81\":1}}],[\"insertselective\",{\"1\":{\"48\":3,\"80\":2,\"82\":2,\"109\":1}}],[\"insert\",{\"1\":{\"48\":4,\"80\":1,\"82\":1,\"110\":1,\"230\":3,\"300\":1}}],[\"inverted\",{\"1\":{\"287\":1}}],[\"invalid\",{\"1\":{\"289\":2}}],[\"invalidate\",{\"1\":{\"40\":1,\"237\":1}}],[\"invasive\",{\"1\":{\"269\":1}}],[\"invites\",{\"1\":{\"251\":1}}],[\"invited\",{\"1\":{\"248\":1}}],[\"inv\",{\"1\":{\"242\":14}}],[\"invoice\",{\"1\":{\"288\":1}}],[\"involved\",{\"1\":{\"99\":1,\"174\":1,\"179\":1,\"285\":1}}],[\"involves\",{\"1\":{\"80\":1,\"88\":1}}],[\"invocation\",{\"1\":{\"39\":1,\"171\":1,\"225\":1,\"234\":3,\"235\":1,\"237\":3,\"240\":2,\"241\":14,\"242\":1}}],[\"invoker\",{\"1\":{\"241\":3,\"242\":6}}],[\"invoker<\",{\"1\":{\"241\":1,\"242\":1}}],[\"invokehandler\",{\"1\":{\"207\":1}}],[\"invokesuper\",{\"1\":{\"164\":1}}],[\"invokes\",{\"1\":{\"104\":1,\"156\":1}}],[\"invoked\",{\"1\":{\"30\":1,\"104\":1,\"118\":1}}],[\"invoke\",{\"1\":{\"30\":1,\"101\":1,\"112\":4,\"122\":1,\"164\":1,\"241\":4,\"242\":3,\"244\":1}}],[\"indispensable\",{\"1\":{\"304\":1,\"315\":1}}],[\"indicators\",{\"1\":{\"212\":1}}],[\"indicator\",{\"1\":{\"180\":1}}],[\"indicates\",{\"1\":{\"197\":1,\"213\":1,\"214\":1}}],[\"indicate\",{\"1\":{\"156\":1}}],[\"indicating\",{\"1\":{\"100\":1,\"213\":1,\"214\":2,\"220\":1}}],[\"individual\",{\"1\":{\"85\":1,\"124\":1}}],[\"independently\",{\"1\":{\"214\":1,\"248\":1}}],[\"independent\",{\"1\":{\"117\":1,\"214\":1,\"307\":1,\"312\":1}}],[\"indeed\",{\"1\":{\"73\":1,\"162\":1}}],[\"index++\",{\"1\":{\"86\":1,\"104\":1,\"179\":1,\"235\":1}}],[\"indexof\",{\"1\":{\"82\":1}}],[\"index\",{\"1\":{\"35\":2,\"86\":3,\"104\":5,\"179\":1,\"235\":2,\"266\":1,\"288\":1,\"309\":1}}],[\"industry\",{\"1\":{\"19\":1}}],[\"incorrect\",{\"1\":{\"236\":1}}],[\"inconsistent\",{\"1\":{\"177\":1}}],[\"inconvenient\",{\"1\":{\"113\":1}}],[\"incompatible\",{\"0\":{\"287\":1},\"1\":{\"285\":1}}],[\"incomplete\",{\"1\":{\"151\":2}}],[\"incoming\",{\"1\":{\"117\":1,\"151\":1}}],[\"including\",{\"1\":{\"86\":1,\"116\":1,\"142\":1,\"242\":1,\"253\":1,\"264\":1}}],[\"includes\",{\"1\":{\"187\":1,\"214\":1}}],[\"include\",{\"1\":{\"30\":1,\"43\":2,\"180\":1,\"234\":1}}],[\"inception\",{\"1\":{\"81\":1}}],[\"incubated\",{\"1\":{\"21\":1}}],[\"increased\",{\"1\":{\"214\":1}}],[\"increasecurrent\",{\"1\":{\"91\":1}}],[\"increases\",{\"1\":{\"86\":1,\"91\":1,\"214\":1}}],[\"increase\",{\"1\":{\"3\":1,\"4\":1,\"33\":6,\"89\":1,\"91\":3,\"211\":4}}],[\"int\",{\"1\":{\"35\":5,\"36\":1,\"40\":3,\"43\":7,\"48\":2,\"89\":1,\"90\":5,\"91\":2,\"104\":2,\"105\":1,\"122\":1,\"123\":1,\"129\":2,\"176\":1,\"177\":3,\"184\":3,\"214\":1,\"220\":1,\"242\":2}}],[\"intention\",{\"1\":{\"252\":1}}],[\"intelligence\",{\"1\":{\"246\":1}}],[\"intelligent\",{\"1\":{\"225\":1}}],[\"integrating\",{\"1\":{\"280\":1}}],[\"integration\",{\"1\":{\"231\":1,\"278\":1}}],[\"integrated\",{\"1\":{\"269\":1}}],[\"integrate\",{\"1\":{\"269\":1,\"271\":1}}],[\"integrates\",{\"1\":{\"34\":2,\"212\":1}}],[\"integer\",{\"1\":{\"174\":1,\"176\":1,\"200\":1}}],[\"intersection\",{\"1\":{\"289\":1}}],[\"interpretation\",{\"0\":{\"170\":1,\"221\":1,\"254\":1},\"1\":{\"216\":1}}],[\"intercepts\",{\"0\":{\"242\":1},\"1\":{\"242\":1}}],[\"intercepting\",{\"1\":{\"240\":1}}],[\"intercept\",{\"0\":{\"241\":1},\"1\":{\"164\":1,\"240\":1,\"243\":1}}],[\"interact\",{\"1\":{\"300\":1}}],[\"interaction\",{\"1\":{\"101\":1}}],[\"interacts\",{\"1\":{\"99\":1,\"101\":1}}],[\"internally\",{\"1\":{\"172\":1,\"173\":1,\"177\":1,\"206\":1}}],[\"internal\",{\"1\":{\"93\":1,\"116\":1,\"185\":1,\"206\":1,\"214\":2,\"220\":1,\"221\":1,\"236\":2}}],[\"interesting\",{\"1\":{\"48\":1,\"316\":1}}],[\"interested\",{\"1\":{\"21\":1,\"46\":2,\"182\":1}}],[\"intervals\",{\"1\":{\"211\":1,\"289\":1}}],[\"interval\",{\"1\":{\"48\":1,\"174\":1,\"211\":1,\"214\":1,\"218\":1,\"219\":3}}],[\"interfere\",{\"1\":{\"22\":1}}],[\"interface=\",{\"1\":{\"233\":1,\"265\":1}}],[\"interfaces\",{\"1\":{\"182\":1,\"265\":1,\"279\":1}}],[\"interface\",{\"0\":{\"78\":1,\"108\":1,\"109\":1,\"193\":1,\"206\":1},\"1\":{\"11\":1,\"30\":1,\"46\":1,\"69\":1,\"73\":2,\"77\":3,\"80\":1,\"82\":1,\"83\":1,\"84\":2,\"86\":1,\"87\":1,\"92\":1,\"97\":3,\"104\":2,\"106\":3,\"108\":1,\"109\":1,\"112\":4,\"113\":1,\"114\":1,\"118\":1,\"121\":8,\"122\":1,\"123\":3,\"126\":1,\"129\":1,\"135\":1,\"138\":1,\"139\":1,\"156\":1,\"179\":1,\"182\":3,\"193\":1,\"195\":1,\"206\":3,\"207\":1,\"210\":1,\"214\":1,\"220\":2,\"225\":1,\"226\":3,\"230\":1,\"231\":2,\"234\":4,\"241\":1,\"272\":1,\"274\":1,\"275\":7,\"288\":1,\"289\":1,\"300\":2,\"303\":1,\"304\":2,\"307\":2,\"314\":1,\"315\":2,\"316\":1}}],[\"intricate\",{\"1\":{\"46\":1}}],[\"intrusion\",{\"1\":{\"34\":1,\"263\":1,\"300\":1}}],[\"intrusive\",{\"1\":{\"19\":2,\"278\":1}}],[\"introduced\",{\"1\":{\"162\":1,\"212\":1}}],[\"introduce\",{\"1\":{\"33\":1,\"182\":1,\"209\":2,\"214\":1,\"241\":1,\"243\":1}}],[\"introduces\",{\"1\":{\"11\":1}}],[\"introducing\",{\"1\":{\"14\":1}}],[\"introduction\",{\"0\":{\"1\":1,\"2\":1,\"69\":1,\"141\":1,\"142\":1,\"169\":1,\"225\":1,\"226\":1,\"231\":1,\"240\":1},\"1\":{\"1\":1,\"11\":2,\"14\":1,\"189\":1,\"218\":1,\"224\":4,\"263\":1}}],[\"into\",{\"1\":{\"5\":1,\"32\":2,\"80\":2,\"82\":1,\"86\":1,\"92\":2,\"103\":1,\"104\":1,\"109\":1,\"112\":1,\"122\":1,\"123\":1,\"124\":1,\"126\":1,\"128\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"139\":4,\"156\":1,\"161\":2,\"166\":2,\"177\":1,\"180\":1,\"181\":1,\"184\":2,\"195\":3,\"212\":2,\"240\":1,\"285\":1,\"303\":2,\"314\":2}}],[\"in\",{\"0\":{\"31\":1,\"66\":1,\"69\":1,\"72\":1,\"87\":1,\"116\":1,\"144\":1,\"148\":1,\"150\":1,\"151\":1,\"161\":1,\"162\":1,\"171\":1,\"172\":1,\"184\":1,\"185\":1,\"191\":1,\"195\":1,\"196\":1,\"202\":1,\"221\":1,\"265\":1,\"308\":1,\"311\":1},\"1\":{\"3\":2,\"5\":3,\"21\":2,\"22\":5,\"28\":2,\"29\":4,\"30\":4,\"31\":1,\"32\":3,\"33\":9,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"43\":5,\"46\":1,\"48\":37,\"56\":1,\"57\":1,\"59\":2,\"61\":1,\"64\":2,\"65\":2,\"68\":3,\"69\":8,\"70\":2,\"72\":3,\"74\":1,\"80\":2,\"81\":3,\"82\":3,\"83\":1,\"84\":3,\"85\":8,\"86\":11,\"87\":9,\"91\":5,\"92\":8,\"93\":2,\"96\":1,\"97\":2,\"98\":2,\"99\":1,\"100\":7,\"101\":8,\"104\":4,\"105\":7,\"106\":3,\"108\":2,\"109\":1,\"110\":2,\"112\":5,\"113\":4,\"114\":2,\"116\":1,\"117\":1,\"118\":3,\"119\":6,\"120\":2,\"121\":6,\"122\":3,\"123\":5,\"124\":4,\"125\":1,\"126\":4,\"127\":3,\"128\":4,\"129\":3,\"130\":3,\"131\":4,\"132\":1,\"133\":1,\"135\":3,\"136\":1,\"139\":1,\"141\":1,\"147\":1,\"149\":1,\"151\":7,\"156\":7,\"159\":1,\"160\":3,\"161\":1,\"162\":4,\"164\":6,\"165\":3,\"169\":3,\"171\":7,\"172\":5,\"173\":1,\"176\":4,\"177\":2,\"178\":2,\"179\":21,\"180\":7,\"181\":3,\"182\":8,\"183\":2,\"184\":5,\"185\":7,\"187\":5,\"189\":3,\"191\":4,\"192\":1,\"193\":1,\"195\":11,\"197\":1,\"198\":2,\"199\":2,\"200\":3,\"201\":1,\"202\":4,\"203\":2,\"204\":1,\"206\":2,\"209\":3,\"210\":5,\"211\":5,\"212\":18,\"213\":9,\"214\":10,\"216\":1,\"217\":1,\"218\":12,\"219\":3,\"220\":1,\"221\":3,\"225\":2,\"226\":3,\"229\":3,\"231\":1,\"235\":2,\"236\":1,\"241\":2,\"242\":3,\"243\":1,\"246\":2,\"247\":1,\"249\":2,\"250\":1,\"252\":1,\"253\":3,\"267\":2,\"269\":1,\"271\":3,\"275\":10,\"276\":1,\"278\":1,\"280\":2,\"283\":1,\"285\":5,\"287\":2,\"288\":2,\"289\":4,\"292\":1,\"293\":2,\"294\":1,\"295\":2,\"297\":2,\"298\":1,\"299\":1,\"300\":1,\"301\":1,\"303\":3,\"304\":3,\"305\":1,\"306\":1,\"307\":3,\"311\":7,\"312\":2,\"314\":3,\"315\":3,\"316\":9}}],[\"aim\",{\"0\":{\"216\":1,\"224\":1}}],[\"aimed\",{\"1\":{\"211\":1}}],[\"ain\",{\"1\":{\"155\":2}}],[\"ak\",{\"0\":{\"142\":1},\"1\":{\"142\":2}}],[\"avalibility\",{\"1\":{\"278\":1}}],[\"availability\",{\"0\":{\"308\":1},\"1\":{\"269\":1,\"270\":1}}],[\"availableprocessors\",{\"1\":{\"36\":1,\"43\":2}}],[\"available\",{\"1\":{\"19\":1,\"128\":1,\"151\":1,\"164\":2,\"172\":2,\"178\":2,\"200\":1}}],[\"avoid\",{\"1\":{\"211\":1}}],[\"avoided\",{\"1\":{\"124\":1}}],[\"average\",{\"1\":{\"177\":1,\"214\":1}}],[\"avg\",{\"1\":{\"65\":2,\"219\":1}}],[\"affordable\",{\"1\":{\"285\":1}}],[\"affairs\",{\"1\":{\"253\":1}}],[\"affected\",{\"1\":{\"182\":1}}],[\"affect\",{\"1\":{\"110\":1,\"184\":1}}],[\"af86\",{\"1\":{\"164\":4}}],[\"aforementioned\",{\"1\":{\"48\":1}}],[\"afterpropertiesset\",{\"1\":{\"111\":1,\"112\":1,\"156\":4,\"165\":2,\"195\":1}}],[\"afterpluginchanged\",{\"1\":{\"97\":2,\"100\":2}}],[\"after\",{\"0\":{\"195\":1},\"1\":{\"32\":2,\"43\":1,\"48\":8,\"65\":1,\"66\":1,\"68\":1,\"72\":1,\"80\":1,\"83\":1,\"87\":1,\"88\":1,\"91\":2,\"92\":1,\"96\":1,\"97\":2,\"98\":2,\"99\":1,\"100\":2,\"101\":2,\"104\":1,\"105\":1,\"106\":1,\"112\":2,\"114\":1,\"117\":1,\"118\":1,\"122\":1,\"123\":2,\"124\":2,\"129\":1,\"155\":2,\"156\":5,\"159\":1,\"160\":1,\"161\":2,\"164\":3,\"165\":3,\"166\":1,\"180\":3,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"198\":1,\"207\":1,\"212\":2,\"213\":2,\"214\":3,\"237\":1,\"240\":1,\"246\":1,\"247\":1,\"252\":4,\"253\":1,\"285\":2,\"297\":1}}],[\"age\",{\"1\":{\"285\":1}}],[\"agents\",{\"1\":{\"225\":1}}],[\"aggregates\",{\"1\":{\"279\":1}}],[\"again\",{\"1\":{\"46\":1,\"48\":2,\"62\":1,\"74\":1,\"81\":1,\"104\":1,\"105\":1,\"164\":1,\"193\":1,\"213\":2}}],[\"ago\",{\"1\":{\"37\":1}}],[\"aaa\",{\"1\":{\"33\":1}}],[\"alos\",{\"1\":{\"316\":1}}],[\"along\",{\"1\":{\"139\":1,\"316\":1}}],[\"always\",{\"1\":{\"252\":1}}],[\"almost\",{\"1\":{\"177\":1,\"300\":1}}],[\"alternative\",{\"1\":{\"217\":1}}],[\"alt\",{\"1\":{\"112\":1}}],[\"although\",{\"1\":{\"110\":1,\"129\":1,\"131\":1,\"184\":1}}],[\"algorithm\",{\"0\":{\"200\":1},\"1\":{\"89\":1,\"91\":2,\"120\":3,\"172\":1,\"177\":7,\"178\":1,\"189\":6,\"191\":2,\"199\":4,\"307\":1}}],[\"already\",{\"1\":{\"87\":1,\"98\":1,\"128\":1,\"179\":1,\"182\":1}}],[\"alias\",{\"1\":{\"288\":1}}],[\"ali\",{\"1\":{\"209\":1}}],[\"aliyun\",{\"1\":{\"164\":2}}],[\"aligned\",{\"1\":{\"72\":1}}],[\"alibabadubboplugin\",{\"1\":{\"85\":2,\"86\":1}}],[\"alibaba\",{\"1\":{\"57\":1,\"87\":2,\"164\":1,\"179\":2,\"212\":1,\"307\":1,\"311\":4,\"316\":1}}],[\"also\",{\"1\":{\"33\":2,\"48\":2,\"68\":1,\"69\":3,\"83\":1,\"86\":2,\"87\":2,\"88\":1,\"92\":1,\"96\":1,\"98\":3,\"100\":3,\"101\":2,\"103\":1,\"105\":1,\"110\":1,\"121\":1,\"124\":1,\"129\":1,\"131\":1,\"132\":1,\"133\":2,\"185\":1,\"187\":1,\"195\":2,\"210\":1,\"211\":2,\"214\":1,\"225\":1,\"275\":1,\"285\":1,\"303\":1,\"310\":1,\"312\":1,\"314\":1,\"316\":2}}],[\"allowunsaferenegotiation\",{\"1\":{\"288\":1}}],[\"allowunsafeservercertchange\",{\"1\":{\"288\":1}}],[\"allowed\",{\"1\":{\"189\":1,\"197\":4,\"200\":5}}],[\"allowing\",{\"1\":{\"100\":1,\"299\":1}}],[\"allow\",{\"1\":{\"62\":1,\"189\":1,\"310\":1}}],[\"allows\",{\"1\":{\"48\":1}}],[\"all\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"24\":2,\"32\":1,\"48\":2,\"69\":3,\"72\":1,\"85\":2,\"86\":4,\"90\":1,\"91\":1,\"100\":1,\"101\":1,\"104\":4,\"106\":1,\"107\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"117\":3,\"118\":2,\"121\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"139\":1,\"151\":1,\"156\":3,\"164\":4,\"165\":2,\"171\":1,\"182\":3,\"210\":1,\"213\":1,\"214\":5,\"217\":1,\"231\":2,\"251\":1,\"253\":1,\"264\":3,\"267\":1,\"282\":1,\"285\":2,\"287\":1,\"295\":1,\"298\":1,\"300\":1,\"302\":1,\"303\":3,\"307\":1,\"311\":2,\"312\":2,\"313\":1,\"314\":3,\"316\":2}}],[\"acm\",{\"1\":{\"164\":4}}],[\"aclass\",{\"1\":{\"137\":4,\"139\":6}}],[\"acquisition\",{\"1\":{\"100\":1}}],[\"acquired\",{\"1\":{\"151\":1,\"199\":1}}],[\"acquirebyname\",{\"1\":{\"82\":1,\"117\":1,\"118\":1}}],[\"acquire\",{\"1\":{\"40\":1,\"218\":1}}],[\"achieve\",{\"1\":{\"124\":1,\"272\":1,\"312\":1,\"316\":1}}],[\"achieved\",{\"1\":{\"100\":1}}],[\"achieving\",{\"1\":{\"30\":1,\"48\":2}}],[\"acc\",{\"1\":{\"123\":3}}],[\"accumulation\",{\"1\":{\"91\":1}}],[\"accumulated\",{\"1\":{\"90\":1}}],[\"accesskey\",{\"1\":{\"164\":2}}],[\"accesscontroller\",{\"1\":{\"123\":1,\"126\":1}}],[\"accessing\",{\"1\":{\"83\":1,\"282\":1}}],[\"accesses\",{\"1\":{\"77\":1,\"106\":1}}],[\"accessed\",{\"0\":{\"81\":1},\"1\":{\"48\":1,\"89\":1}}],[\"access\",{\"0\":{\"76\":1,\"80\":1,\"193\":1},\"1\":{\"48\":1,\"69\":1,\"80\":1,\"89\":1,\"142\":5,\"147\":1,\"151\":1,\"193\":1,\"212\":1,\"300\":1,\"307\":1,\"309\":1,\"311\":1}}],[\"according\",{\"0\":{\"46\":1},\"1\":{\"48\":1,\"69\":1,\"70\":1,\"81\":2,\"82\":1,\"91\":1,\"97\":1,\"104\":3,\"107\":1,\"113\":1,\"116\":1,\"118\":1,\"120\":1,\"122\":1,\"123\":1,\"125\":1,\"156\":1,\"162\":1,\"164\":1,\"171\":1,\"172\":1,\"175\":1,\"177\":1,\"179\":1,\"183\":1,\"185\":1,\"205\":1,\"207\":1,\"209\":1,\"217\":1,\"226\":1,\"235\":1,\"242\":1,\"312\":1}}],[\"accountcontroller\",{\"1\":{\"275\":1}}],[\"accountservice\",{\"1\":{\"265\":2}}],[\"accounts\",{\"1\":{\"253\":1}}],[\"account\",{\"1\":{\"32\":1,\"46\":2,\"251\":1,\"253\":1,\"265\":1,\"275\":2}}],[\"accidental\",{\"1\":{\"32\":1}}],[\"actuator<\",{\"1\":{\"310\":1}}],[\"actuator\",{\"1\":{\"57\":1,\"164\":1}}],[\"actually\",{\"1\":{\"40\":1,\"85\":1,\"97\":1,\"100\":1,\"123\":1,\"135\":1,\"214\":1,\"235\":1}}],[\"actual\",{\"1\":{\"23\":1,\"105\":2,\"123\":1,\"128\":1,\"182\":1,\"185\":1,\"210\":1,\"214\":1,\"253\":1}}],[\"actives=\",{\"1\":{\"265\":1}}],[\"actively\",{\"1\":{\"99\":1,\"164\":2,\"176\":1,\"178\":1}}],[\"activate\",{\"1\":{\"241\":1,\"242\":1}}],[\"activities\",{\"1\":{\"21\":1,\"253\":1}}],[\"activity\",{\"0\":{\"0\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"176\":1},\"1\":{\"5\":1,\"9\":1,\"12\":1,\"81\":1,\"173\":1,\"175\":2}}],[\"actions\",{\"1\":{\"179\":1}}],[\"action\",{\"1\":{\"39\":1,\"100\":1,\"179\":2,\"182\":1}}],[\"acts\",{\"1\":{\"22\":1,\"132\":1,\"156\":1}}],[\"aop\",{\"1\":{\"29\":2,\"31\":1,\"32\":1,\"36\":1,\"43\":1}}],[\"aslist\",{\"1\":{\"197\":2}}],[\"aside\",{\"1\":{\"100\":1}}],[\"ashttpheaders\",{\"1\":{\"93\":1,\"185\":1}}],[\"assignments\",{\"1\":{\"253\":1}}],[\"assign\",{\"1\":{\"221\":1}}],[\"assigned\",{\"1\":{\"219\":1,\"248\":1}}],[\"assist\",{\"1\":{\"22\":1}}],[\"assets\",{\"1\":{\"285\":1}}],[\"assemble\",{\"1\":{\"179\":1,\"183\":1}}],[\"assembly\",{\"1\":{\"93\":1}}],[\"assert\",{\"1\":{\"151\":1,\"183\":1,\"184\":1,\"214\":1,\"221\":1,\"236\":2}}],[\"associated\",{\"1\":{\"130\":1}}],[\"assuming\",{\"1\":{\"91\":1}}],[\"asyncrepository\",{\"1\":{\"275\":1}}],[\"async\",{\"1\":{\"241\":1,\"242\":1}}],[\"asynccontext\",{\"1\":{\"100\":12,\"101\":1}}],[\"asynctimeoutfuture\",{\"1\":{\"100\":4}}],[\"asyncthreads\",{\"1\":{\"33\":3}}],[\"asynchronously\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"36\":1,\"92\":1}}],[\"asynchronous\",{\"0\":{\"34\":1,\"35\":1,\"36\":1,\"41\":1},\"1\":{\"29\":3,\"33\":2,\"92\":2,\"236\":1,\"237\":1,\"271\":1}}],[\"as\",{\"0\":{\"143\":1},\"1\":{\"29\":2,\"30\":2,\"31\":1,\"33\":6,\"43\":2,\"48\":2,\"54\":1,\"57\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"69\":3,\"71\":2,\"72\":1,\"77\":1,\"81\":1,\"83\":1,\"86\":1,\"87\":4,\"88\":1,\"89\":2,\"91\":2,\"97\":1,\"98\":1,\"101\":1,\"105\":2,\"113\":2,\"114\":1,\"116\":2,\"117\":4,\"118\":4,\"119\":1,\"124\":2,\"126\":1,\"133\":2,\"134\":1,\"135\":2,\"137\":1,\"138\":1,\"139\":9,\"151\":1,\"156\":2,\"164\":1,\"165\":1,\"173\":1,\"177\":2,\"179\":5,\"180\":1,\"182\":2,\"183\":3,\"184\":1,\"185\":1,\"195\":2,\"197\":1,\"199\":1,\"201\":1,\"204\":1,\"207\":1,\"210\":2,\"211\":1,\"212\":7,\"213\":2,\"214\":5,\"218\":1,\"219\":1,\"221\":2,\"226\":1,\"235\":1,\"252\":2,\"253\":2,\"269\":2,\"275\":3,\"280\":2,\"298\":1,\"301\":1,\"303\":2,\"307\":2,\"312\":1,\"314\":2,\"316\":6}}],[\"aspects\",{\"0\":{\"41\":1}}],[\"aspectj\",{\"1\":{\"36\":1,\"43\":1}}],[\"aspect\",{\"1\":{\"29\":2,\"31\":1,\"32\":1,\"33\":2,\"36\":1,\"43\":2,\"91\":1}}],[\"ask\",{\"1\":{\"5\":1}}],[\"authpath\",{\"1\":{\"156\":2}}],[\"authurl\",{\"1\":{\"147\":2}}],[\"authenticate\",{\"1\":{\"141\":1,\"142\":2,\"155\":1}}],[\"authentication\",{\"0\":{\"147\":1,\"148\":1},\"1\":{\"19\":4,\"151\":2,\"164\":1,\"169\":1,\"179\":1,\"180\":2,\"185\":1,\"303\":2,\"304\":1,\"312\":1,\"314\":2,\"315\":1}}],[\"authdatahandler\",{\"1\":{\"117\":1}}],[\"authdatasubscriber\",{\"1\":{\"117\":1}}],[\"authdatasubscribers\",{\"1\":{\"104\":3,\"117\":2,\"161\":5}}],[\"authsubscribers\",{\"1\":{\"117\":2,\"161\":4,\"166\":2}}],[\"auth\",{\"1\":{\"48\":3,\"97\":1,\"104\":1,\"110\":1,\"111\":1,\"113\":2,\"117\":1,\"156\":2,\"161\":2,\"164\":1}}],[\"authority\",{\"1\":{\"253\":1}}],[\"authors\",{\"1\":{\"252\":1}}],[\"author\",{\"1\":{\"35\":1,\"36\":1,\"40\":1,\"43\":1,\"110\":2,\"112\":2,\"156\":2,\"252\":4}}],[\"auto\",{\"1\":{\"276\":1,\"283\":1}}],[\"autosql\",{\"1\":{\"275\":1}}],[\"autonomy\",{\"1\":{\"253\":1}}],[\"autocloseable\",{\"1\":{\"104\":1,\"161\":1}}],[\"autoproxy\",{\"1\":{\"43\":1}}],[\"autowired\",{\"1\":{\"35\":2,\"36\":2,\"275\":1}}],[\"automatictransitionfromopentohalfopenenabled\",{\"1\":{\"218\":1}}],[\"automatically\",{\"1\":{\"72\":3,\"129\":1,\"161\":1,\"164\":1,\"166\":2,\"210\":1,\"212\":1,\"218\":1}}],[\"automatic\",{\"1\":{\"34\":1,\"225\":1}}],[\"automated\",{\"1\":{\"19\":1}}],[\"apollo\",{\"1\":{\"270\":1,\"275\":3,\"279\":1,\"280\":1}}],[\"apachdubboplugin\",{\"0\":{\"236\":1},\"1\":{\"224\":1}}],[\"apachedubboproxyservice\",{\"0\":{\"237\":1}}],[\"apachedubboproxyserivce\",{\"1\":{\"224\":1}}],[\"apachedubboplugin\",{\"1\":{\"235\":1}}],[\"apache\",{\"0\":{\"223\":1,\"225\":1,\"227\":1,\"231\":1,\"241\":1},\"1\":{\"40\":1,\"57\":1,\"87\":2,\"121\":1,\"130\":3,\"155\":11,\"224\":3,\"225\":1,\"228\":5,\"230\":3,\"235\":1,\"282\":2,\"307\":1,\"311\":4,\"316\":4}}],[\"appid\",{\"1\":{\"275\":1}}],[\"applying\",{\"1\":{\"252\":1}}],[\"apply\",{\"1\":{\"252\":1}}],[\"applicationconfigcache\",{\"1\":{\"237\":3}}],[\"applicationconfig\",{\"1\":{\"232\":1}}],[\"applicationcontext\",{\"1\":{\"111\":7,\"156\":7,\"164\":1,\"165\":1,\"207\":1}}],[\"applicationlistener<datachangedevent>\",{\"1\":{\"97\":1,\"111\":1,\"156\":1}}],[\"applicationeventpublisher\",{\"1\":{\"80\":1,\"156\":1}}],[\"applicationname\",{\"1\":{\"43\":1}}],[\"application\",{\"1\":{\"19\":1,\"23\":1,\"31\":1,\"43\":1,\"48\":1,\"59\":1,\"105\":1,\"154\":2,\"164\":4,\"211\":1,\"226\":1,\"246\":1,\"252\":2,\"310\":1}}],[\"appkey\",{\"0\":{\"145\":1},\"1\":{\"149\":1,\"180\":1}}],[\"appclassloader\",{\"1\":{\"123\":1}}],[\"appauthservice\",{\"1\":{\"156\":1}}],[\"appauthdata\",{\"1\":{\"151\":4}}],[\"appauthdatalist\",{\"1\":{\"113\":2}}],[\"appauthdatarefresh\",{\"1\":{\"104\":1}}],[\"appauth\",{\"1\":{\"112\":2}}],[\"appname\",{\"1\":{\"59\":1,\"72\":1,\"80\":4,\"275\":4}}],[\"append\",{\"1\":{\"104\":4}}],[\"appenders\",{\"1\":{\"57\":1}}],[\"appeared\",{\"1\":{\"292\":1}}],[\"appear\",{\"1\":{\"74\":1,\"113\":1}}],[\"appears\",{\"1\":{\"30\":1}}],[\"app\",{\"1\":{\"48\":3,\"97\":1,\"104\":1,\"110\":1,\"111\":1,\"113\":2,\"117\":1,\"156\":2}}],[\"approach\",{\"1\":{\"30\":1,\"33\":1,\"182\":1}}],[\"approved\",{\"1\":{\"23\":1,\"246\":1,\"252\":1}}],[\"apis即可展示当前控制器中的所有\",{\"1\":{\"260\":1}}],[\"apis\",{\"0\":{\"260\":1},\"1\":{\"257\":1}}],[\"api\",{\"0\":{\"232\":1,\"259\":1},\"1\":{\"19\":2,\"43\":1,\"49\":1,\"87\":1,\"101\":1,\"164\":2,\"224\":1,\"231\":1,\"232\":1,\"257\":11,\"260\":1,\"265\":1}}],[\"able\",{\"1\":{\"303\":1,\"314\":1}}],[\"absvalueparser\",{\"1\":{\"287\":1}}],[\"absorbed\",{\"1\":{\"267\":1}}],[\"absolute\",{\"1\":{\"247\":1}}],[\"abstractmatchstrategy\",{\"1\":{\"182\":1}}],[\"abstractdatahandler<plugindata>\",{\"1\":{\"118\":1}}],[\"abstractdatahandler<t>\",{\"1\":{\"118\":1}}],[\"abstractdatahandler\",{\"1\":{\"117\":1,\"118\":2}}],[\"abstractdata\",{\"1\":{\"97\":2,\"104\":1}}],[\"abstractdatachangedlistener\",{\"1\":{\"48\":5,\"97\":2,\"100\":1}}],[\"abstracts\",{\"1\":{\"85\":1}}],[\"abstractsoulplugin\",{\"0\":{\"85\":1,\"182\":1},\"1\":{\"61\":2,\"64\":12,\"85\":1,\"87\":1,\"172\":2,\"182\":4,\"197\":2,\"214\":1,\"221\":1}}],[\"abstract\",{\"1\":{\"84\":2,\"97\":1,\"118\":2,\"182\":1,\"287\":1}}],[\"abstractplugin\",{\"1\":{\"84\":1}}],[\"abnormal\",{\"1\":{\"212\":10,\"213\":3,\"269\":1,\"271\":2}}],[\"abortpolicy\",{\"1\":{\"35\":1,\"36\":1}}],[\"above\",{\"0\":{\"254\":1},\"1\":{\"33\":2,\"48\":3,\"72\":1,\"126\":1,\"164\":1,\"173\":1,\"177\":1,\"182\":2,\"183\":2,\"185\":1,\"195\":2,\"197\":1,\"199\":1,\"211\":1,\"212\":1,\"213\":1,\"235\":1,\"242\":1,\"243\":1,\"264\":1,\"301\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"about\",{\"0\":{\"15\":1},\"1\":{\"43\":1,\"80\":1,\"98\":1,\"99\":1,\"122\":1,\"124\":1,\"207\":1,\"212\":3,\"275\":1,\"276\":2,\"281\":1,\"283\":1,\"300\":1}}],[\"abruptly\",{\"1\":{\"32\":1}}],[\"ability\",{\"1\":{\"3\":1,\"69\":1}}],[\"arabic\",{\"1\":{\"288\":1}}],[\"archive\",{\"1\":{\"252\":1}}],[\"architecture\",{\"0\":{\"267\":1,\"268\":1,\"279\":1,\"308\":1,\"311\":1},\"1\":{\"14\":2,\"212\":1,\"276\":1,\"278\":1,\"279\":2,\"282\":1,\"285\":2,\"303\":1,\"304\":1,\"307\":1,\"314\":1,\"315\":1}}],[\"archaius\",{\"1\":{\"217\":1}}],[\"argument\",{\"1\":{\"242\":1,\"287\":1}}],[\"arg\",{\"1\":{\"241\":6}}],[\"argv\",{\"1\":{\"200\":5}}],[\"args\",{\"1\":{\"122\":1,\"123\":1,\"129\":2,\"156\":1,\"200\":1,\"234\":4,\"241\":3,\"242\":14}}],[\"around\",{\"1\":{\"100\":1}}],[\"arrayutil\",{\"1\":{\"288\":1}}],[\"arrayutils\",{\"1\":{\"105\":1}}],[\"arraylist\",{\"1\":{\"207\":3}}],[\"arraylist<handlermapping>\",{\"1\":{\"207\":1}}],[\"arraylist<long>\",{\"1\":{\"197\":1}}],[\"arraylist<>\",{\"1\":{\"111\":1,\"156\":1,\"165\":2,\"166\":1}}],[\"arrays\",{\"1\":{\"105\":1,\"147\":1,\"197\":2}}],[\"array\",{\"1\":{\"48\":1}}],[\"artificial\",{\"1\":{\"246\":1}}],[\"artifactid>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"articles\",{\"1\":{\"164\":1}}],[\"article\",{\"1\":{\"29\":1,\"48\":3,\"80\":1,\"106\":1,\"110\":1,\"159\":3,\"164\":1,\"179\":3,\"180\":1,\"182\":1,\"187\":1,\"209\":2,\"212\":1,\"235\":1,\"251\":1}}],[\"arises\",{\"1\":{\"37\":1}}],[\"arise\",{\"0\":{\"37\":1,\"38\":1}}],[\"areas\",{\"1\":{\"28\":1}}],[\"area\",{\"1\":{\"5\":1}}],[\"are\",{\"0\":{\"98\":1,\"302\":1,\"305\":1,\"313\":1},\"1\":{\"5\":1,\"29\":1,\"31\":1,\"32\":1,\"35\":1,\"38\":1,\"40\":1,\"43\":1,\"48\":4,\"69\":2,\"70\":2,\"72\":1,\"74\":1,\"78\":1,\"80\":3,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":2,\"90\":4,\"91\":1,\"92\":1,\"97\":1,\"98\":3,\"99\":1,\"101\":2,\"104\":3,\"107\":1,\"110\":3,\"112\":5,\"113\":2,\"118\":2,\"119\":1,\"120\":2,\"122\":1,\"124\":2,\"126\":1,\"129\":1,\"134\":1,\"151\":2,\"164\":1,\"169\":1,\"171\":1,\"173\":1,\"174\":1,\"177\":3,\"179\":23,\"180\":1,\"182\":3,\"183\":2,\"184\":1,\"187\":1,\"189\":2,\"192\":1,\"195\":2,\"197\":1,\"198\":1,\"199\":2,\"200\":1,\"201\":1,\"206\":1,\"207\":2,\"209\":1,\"210\":4,\"211\":3,\"212\":3,\"213\":6,\"214\":5,\"231\":1,\"234\":1,\"236\":1,\"247\":2,\"253\":1,\"271\":2,\"273\":1,\"290\":1,\"293\":1,\"297\":1,\"301\":2,\"302\":1,\"303\":2,\"304\":3,\"311\":2,\"312\":1,\"313\":1,\"314\":2,\"315\":3,\"316\":9}}],[\"angle\",{\"1\":{\"211\":1,\"214\":1}}],[\"animal\",{\"1\":{\"122\":15,\"123\":5}}],[\"analyses\",{\"1\":{\"129\":1}}],[\"analysis\",{\"0\":{\"47\":1,\"48\":1,\"84\":1,\"94\":1,\"102\":1,\"106\":1,\"139\":1,\"150\":1,\"156\":1,\"200\":1},\"1\":{\"11\":2,\"14\":1,\"48\":5,\"80\":1,\"83\":2,\"85\":2,\"96\":2,\"100\":1,\"101\":1,\"103\":1,\"208\":1,\"243\":1}}],[\"analyzes\",{\"1\":{\"164\":1,\"209\":1}}],[\"analyzed\",{\"1\":{\"48\":5,\"81\":2,\"83\":1,\"100\":2,\"104\":2,\"105\":2,\"106\":1,\"187\":1}}],[\"analyze\",{\"1\":{\"48\":1,\"83\":1,\"86\":1,\"87\":2,\"101\":1,\"106\":1,\"110\":1,\"120\":1,\"122\":1,\"159\":1,\"164\":1}}],[\"analyzing\",{\"1\":{\"48\":1,\"100\":1,\"101\":1,\"120\":1,\"131\":1,\"159\":1}}],[\"another\",{\"0\":{\"38\":1},\"1\":{\"48\":2,\"86\":1,\"92\":2,\"100\":2,\"104\":1,\"110\":1,\"184\":1,\"210\":1,\"211\":1,\"252\":1,\"303\":1,\"314\":1}}],[\"announcements\",{\"1\":{\"252\":1}}],[\"announcement\",{\"1\":{\"251\":1}}],[\"annotated\",{\"1\":{\"156\":2}}],[\"annotate\",{\"1\":{\"46\":1}}],[\"annotationutil\",{\"1\":{\"288\":1}}],[\"annotations\",{\"1\":{\"230\":1,\"271\":2,\"280\":1}}],[\"annotationawareordercomparator\",{\"1\":{\"207\":3}}],[\"annotation<\",{\"1\":{\"43\":1,\"274\":1}}],[\"annotation\",{\"1\":{\"33\":1,\"35\":1,\"36\":1,\"59\":1,\"112\":1,\"114\":1,\"130\":2,\"139\":6,\"156\":1,\"164\":1,\"272\":1,\"275\":2,\"280\":1}}],[\"annual\",{\"1\":{\"28\":1}}],[\"an\",{\"0\":{\"38\":1,\"41\":1,\"59\":1,\"143\":1},\"1\":{\"29\":2,\"30\":2,\"31\":1,\"33\":1,\"36\":1,\"37\":1,\"38\":1,\"70\":1,\"80\":2,\"84\":3,\"86\":2,\"92\":1,\"97\":3,\"99\":1,\"101\":2,\"109\":1,\"110\":3,\"113\":1,\"117\":2,\"121\":3,\"124\":2,\"135\":1,\"138\":1,\"139\":1,\"147\":1,\"156\":3,\"162\":1,\"171\":1,\"172\":1,\"179\":3,\"180\":1,\"182\":2,\"183\":1,\"184\":1,\"185\":1,\"195\":1,\"197\":1,\"200\":1,\"210\":1,\"212\":2,\"214\":6,\"217\":1,\"231\":1,\"236\":1,\"251\":1,\"303\":1,\"304\":4,\"307\":1,\"310\":1,\"314\":1,\"315\":4,\"316\":3}}],[\"answered\",{\"1\":{\"124\":1}}],[\"answer\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"37\":1,\"38\":1,\"183\":1,\"195\":1}}],[\"anything\",{\"1\":{\"22\":1}}],[\"any\",{\"1\":{\"22\":1,\"46\":1,\"69\":1,\"99\":1,\"101\":2,\"189\":1,\"214\":1,\"312\":1}}],[\"and\",{\"0\":{\"4\":1,\"6\":1,\"31\":1,\"36\":1,\"84\":1,\"95\":1,\"103\":1,\"115\":1,\"146\":1,\"153\":2,\"159\":1,\"160\":1,\"161\":1,\"195\":1,\"253\":1,\"264\":1,\"280\":1,\"295\":1,\"302\":1,\"308\":2,\"313\":1},\"1\":{\"3\":1,\"4\":3,\"5\":1,\"11\":4,\"14\":3,\"17\":1,\"19\":4,\"21\":4,\"22\":2,\"23\":2,\"24\":2,\"28\":4,\"29\":3,\"30\":2,\"31\":1,\"33\":8,\"34\":3,\"38\":1,\"40\":1,\"42\":1,\"46\":3,\"48\":22,\"56\":4,\"57\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":2,\"65\":3,\"68\":1,\"69\":11,\"70\":6,\"72\":4,\"74\":4,\"78\":2,\"80\":8,\"81\":5,\"82\":5,\"83\":8,\"84\":1,\"85\":4,\"86\":4,\"87\":9,\"89\":1,\"90\":3,\"91\":7,\"92\":5,\"96\":1,\"97\":3,\"98\":1,\"99\":3,\"100\":7,\"101\":7,\"103\":2,\"104\":10,\"105\":7,\"106\":3,\"107\":1,\"108\":1,\"109\":1,\"110\":4,\"112\":6,\"113\":4,\"114\":2,\"116\":2,\"117\":4,\"118\":2,\"119\":2,\"120\":2,\"121\":6,\"122\":4,\"123\":7,\"124\":3,\"126\":1,\"128\":3,\"129\":2,\"131\":1,\"132\":1,\"135\":1,\"136\":2,\"137\":1,\"139\":2,\"141\":1,\"142\":2,\"151\":1,\"156\":6,\"157\":1,\"159\":4,\"161\":4,\"162\":5,\"164\":11,\"165\":6,\"166\":2,\"169\":2,\"171\":3,\"172\":8,\"173\":3,\"174\":1,\"175\":3,\"176\":3,\"177\":7,\"179\":6,\"180\":4,\"181\":1,\"182\":4,\"183\":5,\"184\":2,\"185\":7,\"187\":3,\"189\":1,\"192\":2,\"195\":4,\"197\":3,\"199\":2,\"200\":5,\"201\":3,\"202\":2,\"204\":1,\"207\":2,\"208\":1,\"209\":6,\"210\":5,\"211\":6,\"212\":19,\"213\":8,\"214\":17,\"217\":1,\"218\":2,\"219\":2,\"220\":2,\"221\":2,\"222\":2,\"225\":7,\"226\":5,\"229\":1,\"230\":3,\"231\":3,\"232\":1,\"234\":2,\"235\":1,\"236\":2,\"237\":3,\"240\":2,\"241\":2,\"242\":7,\"243\":3,\"246\":5,\"248\":3,\"249\":1,\"250\":1,\"251\":2,\"252\":6,\"253\":12,\"263\":1,\"264\":2,\"266\":1,\"267\":3,\"269\":2,\"270\":5,\"271\":3,\"275\":5,\"276\":2,\"277\":3,\"278\":3,\"279\":1,\"280\":1,\"281\":2,\"283\":2,\"284\":1,\"285\":5,\"287\":6,\"288\":3,\"289\":3,\"290\":2,\"293\":1,\"294\":2,\"297\":2,\"298\":1,\"299\":2,\"300\":1,\"301\":2,\"303\":4,\"305\":1,\"307\":7,\"309\":2,\"312\":9,\"314\":4,\"316\":11}}],[\"adimistration\",{\"0\":{\"303\":1,\"314\":1}}],[\"adheres\",{\"1\":{\"281\":1}}],[\"adhering\",{\"1\":{\"270\":1}}],[\"adjustment\",{\"1\":{\"276\":1,\"279\":1}}],[\"adjusted\",{\"1\":{\"267\":1}}],[\"adjust\",{\"0\":{\"279\":1},\"1\":{\"214\":1}}],[\"adaptive\",{\"1\":{\"212\":1}}],[\"adapterbeans\",{\"1\":{\"207\":2}}],[\"adriver\",{\"1\":{\"127\":3}}],[\"ado\",{\"1\":{\"48\":1,\"72\":1}}],[\"adminsoul\",{\"1\":{\"164\":1}}],[\"adminurl\",{\"1\":{\"59\":1}}],[\"admin\",{\"0\":{\"47\":1,\"56\":1,\"153\":1,\"159\":2,\"160\":1,\"165\":1,\"229\":1,\"309\":1},\"1\":{\"48\":10,\"56\":3,\"57\":1,\"68\":2,\"77\":1,\"78\":1,\"106\":4,\"108\":1,\"116\":1,\"154\":2,\"155\":1,\"156\":8,\"157\":1,\"159\":3,\"160\":2,\"162\":2,\"164\":12,\"165\":3,\"178\":1,\"202\":2,\"218\":3,\"224\":1,\"229\":1,\"230\":2,\"248\":1,\"269\":1,\"292\":1,\"295\":1,\"303\":1,\"307\":1,\"309\":4,\"310\":1,\"311\":1,\"312\":2,\"314\":1}}],[\"administrator\",{\"1\":{\"5\":1}}],[\"adds\",{\"1\":{\"166\":1,\"251\":1,\"288\":6}}],[\"addsubscribepath\",{\"1\":{\"162\":3}}],[\"addpath\",{\"1\":{\"162\":2}}],[\"addimg\",{\"1\":{\"288\":1}}],[\"addifabsent\",{\"1\":{\"126\":1}}],[\"adding\",{\"0\":{\"148\":1},\"1\":{\"121\":1,\"124\":1}}],[\"additional\",{\"1\":{\"276\":1}}],[\"addition\",{\"1\":{\"48\":1,\"100\":1,\"131\":1}}],[\"addall\",{\"1\":{\"92\":1,\"184\":1,\"197\":1}}],[\"adddivideupstream\",{\"1\":{\"79\":5,\"81\":6}}],[\"added\",{\"0\":{\"144\":1},\"1\":{\"48\":1,\"100\":1,\"101\":1,\"114\":1,\"162\":1,\"164\":1,\"192\":1,\"202\":1,\"211\":1,\"263\":1,\"265\":2,\"267\":1,\"275\":1,\"279\":7,\"280\":3,\"287\":2,\"288\":4,\"289\":1}}],[\"add\",{\"0\":{\"145\":1,\"147\":1,\"192\":1},\"1\":{\"39\":1,\"46\":3,\"48\":1,\"58\":1,\"59\":1,\"79\":1,\"80\":1,\"81\":1,\"83\":2,\"92\":2,\"100\":4,\"113\":1,\"114\":1,\"121\":2,\"146\":2,\"147\":1,\"165\":1,\"166\":1,\"175\":1,\"192\":2,\"203\":1,\"207\":1,\"212\":1,\"214\":2,\"218\":1,\"220\":1,\"237\":1,\"270\":2,\"272\":3,\"275\":3,\"288\":8,\"295\":1,\"303\":1,\"304\":1,\"307\":2,\"310\":2,\"311\":5,\"314\":1,\"315\":1}}],[\"addresshash\",{\"1\":{\"89\":2}}],[\"addresses\",{\"1\":{\"74\":1,\"183\":1}}],[\"address\",{\"1\":{\"28\":1,\"48\":3,\"72\":1,\"73\":1,\"82\":1,\"89\":5,\"179\":2,\"180\":1,\"183\":5,\"184\":2,\"185\":1,\"201\":1,\"229\":1,\"310\":1}}],[\"adventure\",{\"0\":{\"179\":1}}],[\"advertisement\",{\"1\":{\"28\":1}}],[\"advantage\",{\"1\":{\"124\":1}}],[\"advance\",{\"1\":{\"5\":1}}],[\"amount\",{\"1\":{\"211\":1,\"214\":1,\"304\":1,\"315\":1}}],[\"among\",{\"1\":{\"40\":2}}],[\"amp\",{\"1\":{\"33\":1,\"43\":1,\"46\":1}}],[\"am\",{\"1\":{\"5\":1}}],[\"attacked\",{\"1\":{\"304\":1,\"315\":1}}],[\"attachment\",{\"1\":{\"241\":1}}],[\"attitude\",{\"1\":{\"252\":1,\"316\":1}}],[\"attempting\",{\"0\":{\"284\":1}}],[\"attempt\",{\"1\":{\"155\":1}}],[\"attention\",{\"0\":{\"302\":1,\"313\":1},\"1\":{\"48\":1,\"210\":1}}],[\"attr\",{\"1\":{\"93\":1,\"184\":1,\"185\":1}}],[\"attributes\",{\"1\":{\"92\":1,\"180\":2,\"237\":1,\"288\":1}}],[\"attribute\",{\"1\":{\"43\":1,\"72\":1,\"86\":1,\"123\":1,\"236\":2}}],[\"atomicinteger\",{\"1\":{\"35\":3}}],[\"atomic\",{\"1\":{\"35\":1}}],[\"at\",{\"0\":{\"79\":1,\"82\":1,\"98\":1,\"196\":1,\"283\":1,\"306\":1},\"1\":{\"5\":1,\"23\":1,\"28\":1,\"48\":6,\"73\":1,\"74\":1,\"77\":1,\"81\":1,\"82\":1,\"83\":2,\"88\":1,\"91\":1,\"92\":1,\"97\":1,\"98\":3,\"100\":3,\"101\":2,\"103\":2,\"105\":2,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"120\":4,\"121\":1,\"122\":4,\"123\":1,\"124\":1,\"129\":2,\"132\":1,\"133\":1,\"164\":16,\"172\":1,\"173\":2,\"175\":1,\"177\":1,\"179\":2,\"181\":1,\"182\":2,\"184\":1,\"185\":1,\"191\":1,\"192\":1,\"200\":1,\"207\":1,\"211\":3,\"212\":1,\"213\":1,\"214\":2,\"219\":2,\"220\":1,\"230\":1,\"249\":1,\"253\":1,\"270\":1,\"278\":1,\"283\":1,\"303\":1,\"304\":2,\"307\":1,\"314\":1,\"315\":2,\"316\":4}}],[\"a\",{\"0\":{\"32\":1,\"35\":1,\"37\":1,\"79\":1,\"82\":1,\"117\":1,\"122\":1,\"189\":1,\"265\":1,\"308\":1},\"1\":{\"5\":2,\"11\":1,\"19\":2,\"23\":3,\"24\":1,\"28\":1,\"29\":4,\"30\":5,\"31\":2,\"33\":5,\"36\":1,\"37\":1,\"38\":2,\"39\":1,\"40\":2,\"43\":3,\"48\":34,\"49\":1,\"57\":1,\"69\":4,\"70\":2,\"71\":1,\"72\":3,\"77\":1,\"81\":1,\"82\":1,\"84\":2,\"85\":4,\"86\":5,\"87\":2,\"88\":1,\"89\":2,\"91\":8,\"92\":2,\"97\":4,\"98\":2,\"99\":3,\"100\":5,\"101\":5,\"104\":3,\"105\":8,\"108\":1,\"114\":2,\"119\":1,\"120\":10,\"121\":6,\"122\":5,\"123\":3,\"124\":5,\"126\":2,\"127\":2,\"128\":1,\"129\":2,\"130\":1,\"131\":2,\"132\":2,\"133\":2,\"136\":1,\"139\":2,\"147\":1,\"151\":1,\"156\":5,\"160\":1,\"161\":1,\"162\":1,\"164\":6,\"165\":2,\"172\":1,\"173\":1,\"177\":4,\"178\":3,\"179\":9,\"180\":4,\"181\":1,\"182\":4,\"184\":1,\"185\":1,\"189\":1,\"191\":1,\"195\":4,\"197\":2,\"199\":5,\"201\":2,\"204\":2,\"205\":1,\"207\":2,\"210\":2,\"211\":13,\"212\":11,\"213\":1,\"214\":7,\"217\":3,\"218\":3,\"221\":1,\"225\":1,\"226\":4,\"230\":1,\"231\":1,\"235\":2,\"236\":1,\"241\":3,\"242\":2,\"246\":1,\"251\":1,\"252\":3,\"253\":4,\"270\":1,\"275\":2,\"278\":2,\"279\":1,\"284\":1,\"285\":7,\"297\":2,\"299\":1,\"300\":5,\"301\":1,\"303\":5,\"304\":5,\"307\":1,\"311\":4,\"312\":1,\"314\":5,\"315\":5,\"316\":5}}],[\"sneakythrows\",{\"1\":{\"165\":1,\"166\":1}}],[\"smooth\",{\"1\":{\"164\":1}}],[\"smallest\",{\"1\":{\"198\":1}}],[\"smaller\",{\"1\":{\"70\":1,\"179\":1}}],[\"small\",{\"1\":{\"91\":2,\"212\":1,\"284\":1,\"285\":1,\"316\":1}}],[\"sk\",{\"0\":{\"142\":1},\"1\":{\"142\":2}}],[\"skipped\",{\"0\":{\"139\":1},\"1\":{\"84\":1,\"86\":1,\"100\":1,\"179\":13,\"235\":1}}],[\"skip\",{\"1\":{\"84\":1,\"85\":1,\"86\":3,\"120\":1,\"179\":3,\"235\":3}}],[\"skip=true\",{\"1\":{\"54\":4}}],[\"skills\",{\"1\":{\"4\":1}}],[\"src\",{\"1\":{\"130\":1,\"154\":2,\"164\":2}}],[\"sqlsever\",{\"1\":{\"280\":1}}],[\"sqlparser\",{\"1\":{\"279\":1}}],[\"sqlexception\",{\"1\":{\"126\":3,\"127\":5}}],[\"sql\",{\"1\":{\"126\":4,\"127\":3,\"128\":1,\"279\":2,\"282\":2}}],[\"svc\",{\"1\":{\"123\":2}}],[\"swap\",{\"0\":{\"311\":1},\"1\":{\"307\":1}}],[\"switch\",{\"1\":{\"97\":1,\"111\":1,\"113\":1,\"118\":1,\"156\":1,\"165\":2,\"174\":3,\"213\":1,\"214\":1,\"229\":1,\"298\":1}}],[\"switched\",{\"1\":{\"96\":1}}],[\"switching\",{\"1\":{\"96\":3,\"271\":1}}],[\"switchifempty\",{\"1\":{\"92\":1,\"207\":1}}],[\"sweet\",{\"1\":{\"19\":1}}],[\"slow\",{\"1\":{\"212\":1,\"213\":3}}],[\"slowly\",{\"1\":{\"211\":1}}],[\"slowed\",{\"1\":{\"210\":1}}],[\"slidingwindowtype\",{\"1\":{\"218\":1}}],[\"slidingwindowsize\",{\"1\":{\"218\":1}}],[\"sliding\",{\"1\":{\"189\":1,\"218\":2,\"219\":2}}],[\"slightly\",{\"1\":{\"65\":1,\"210\":1}}],[\"sleep\",{\"1\":{\"104\":1,\"105\":2,\"220\":2}}],[\"slf4j\",{\"1\":{\"100\":1,\"114\":1,\"117\":1,\"166\":1}}],[\"slander\",{\"1\":{\"22\":1}}],[\"sax\",{\"1\":{\"289\":1}}],[\"sasl\",{\"1\":{\"155\":1}}],[\"said\",{\"1\":{\"132\":1}}],[\"saw\",{\"1\":{\"120\":1,\"164\":1}}],[\"saving\",{\"1\":{\"48\":2}}],[\"save\",{\"1\":{\"39\":2}}],[\"saved\",{\"1\":{\"32\":1,\"48\":1}}],[\"savespringmvcmetadata\",{\"1\":{\"78\":1}}],[\"saves\",{\"0\":{\"32\":1},\"1\":{\"29\":1}}],[\"sameweight\",{\"1\":{\"90\":4,\"177\":2}}],[\"same\",{\"1\":{\"40\":1,\"43\":1,\"48\":1,\"72\":2,\"89\":4,\"90\":5,\"104\":1,\"105\":1,\"118\":1,\"119\":1,\"122\":1,\"124\":1,\"151\":1,\"164\":1,\"173\":3,\"212\":1,\"214\":3}}],[\"sayhello\",{\"1\":{\"275\":2}}],[\"saycancel\",{\"1\":{\"275\":4}}],[\"sayconfrim\",{\"1\":{\"275\":4}}],[\"say\",{\"1\":{\"30\":1,\"89\":1,\"121\":1,\"131\":1,\"275\":8,\"303\":1,\"314\":1}}],[\"scene\",{\"0\":{\"210\":1},\"1\":{\"306\":1}}],[\"scenes\",{\"0\":{\"204\":1}}],[\"scenario2\",{\"0\":{\"304\":1,\"315\":1}}],[\"scenario1\",{\"0\":{\"303\":1,\"314\":1}}],[\"scenarios\",{\"0\":{\"33\":1,\"302\":1,\"313\":1},\"1\":{\"32\":2,\"33\":7,\"201\":1,\"210\":1,\"269\":2}}],[\"scenario\",{\"1\":{\"29\":1,\"37\":1,\"38\":1,\"124\":1,\"184\":1,\"209\":1,\"210\":3,\"211\":3,\"212\":1}}],[\"scriptargs\",{\"0\":{\"199\":1},\"1\":{\"197\":2,\"199\":1}}],[\"script\",{\"0\":{\"199\":1},\"1\":{\"197\":3,\"199\":2}}],[\"screenshot\",{\"1\":{\"179\":1}}],[\"screening\",{\"1\":{\"69\":2,\"312\":1}}],[\"scheme\",{\"1\":{\"128\":1,\"217\":1,\"226\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"174\":1}}],[\"schedule\",{\"1\":{\"100\":2}}],[\"scheduler\",{\"1\":{\"86\":1,\"100\":7,\"235\":1}}],[\"scheduledinitdelay\",{\"1\":{\"275\":1}}],[\"scheduledphydeleteddelay\",{\"1\":{\"275\":1}}],[\"scheduledpool\",{\"1\":{\"43\":2}}],[\"scheduledcleandelay\",{\"1\":{\"275\":1}}],[\"scheduledrecoverydelay\",{\"1\":{\"275\":1}}],[\"scheduledtime\",{\"1\":{\"174\":2}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"174\":1}}],[\"scheduledthreadmax\",{\"1\":{\"33\":1,\"43\":2,\"46\":1,\"275\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"100\":1}}],[\"scheduleddelay\",{\"1\":{\"33\":1,\"43\":3,\"46\":1}}],[\"scheduled\",{\"1\":{\"30\":1,\"174\":3,\"175\":2}}],[\"scheduling\",{\"1\":{\"37\":1,\"225\":1,\"312\":1}}],[\"scores\",{\"1\":{\"91\":2}}],[\"score\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"91\":11}}],[\"scalability\",{\"1\":{\"225\":1}}],[\"scalable\",{\"1\":{\"19\":1}}],[\"scale\",{\"1\":{\"210\":1}}],[\"scan\",{\"1\":{\"43\":2}}],[\"split\",{\"1\":{\"176\":3,\"303\":1,\"314\":1}}],[\"spent\",{\"1\":{\"285\":1}}],[\"speed\",{\"1\":{\"189\":1,\"211\":1}}],[\"special\",{\"1\":{\"288\":1}}],[\"specially\",{\"1\":{\"179\":1}}],[\"specify\",{\"1\":{\"121\":1,\"275\":1}}],[\"specifies\",{\"1\":{\"213\":1,\"214\":1}}],[\"specified\",{\"1\":{\"97\":1,\"156\":1,\"171\":1,\"214\":3,\"275\":1}}],[\"specifics\",{\"1\":{\"301\":1}}],[\"specifications\",{\"1\":{\"123\":1,\"316\":1}}],[\"specification\",{\"1\":{\"122\":1,\"316\":1}}],[\"specifically\",{\"1\":{\"105\":1}}],[\"specific\",{\"1\":{\"85\":1,\"87\":1,\"88\":1,\"104\":1,\"120\":2,\"122\":1,\"131\":1,\"135\":1,\"136\":1,\"139\":1,\"165\":2,\"171\":1,\"172\":1,\"178\":1,\"180\":2,\"182\":3,\"187\":1,\"195\":1,\"197\":2,\"199\":2,\"206\":1,\"207\":2,\"212\":1,\"214\":1,\"240\":1}}],[\"speaking\",{\"1\":{\"72\":1,\"151\":1}}],[\"space\",{\"1\":{\"46\":1}}],[\"springdataredis\",{\"1\":{\"195\":1}}],[\"springapplication\",{\"1\":{\"164\":1}}],[\"springboot\",{\"1\":{\"156\":1,\"164\":5,\"166\":1,\"207\":1,\"307\":1,\"310\":1,\"316\":1}}],[\"springbeanutils\",{\"1\":{\"40\":2,\"114\":1,\"221\":1}}],[\"springmvcregisterdto\",{\"1\":{\"78\":5,\"79\":1,\"81\":1,\"82\":1}}],[\"springmvc\",{\"1\":{\"77\":1,\"78\":2,\"83\":1,\"182\":1}}],[\"springmvcclientbeanpostprocessor\",{\"1\":{\"77\":2}}],[\"springmvc<\",{\"1\":{\"59\":1}}],[\"springcloudrulehandle\",{\"1\":{\"82\":1}}],[\"springcloud<\",{\"1\":{\"44\":1,\"46\":1}}],[\"springcloud\",{\"0\":{\"44\":1},\"1\":{\"87\":2,\"263\":2,\"264\":1,\"269\":1,\"275\":1,\"307\":1}}],[\"springframework\",{\"1\":{\"35\":3,\"36\":2,\"164\":8,\"310\":2}}],[\"spring\",{\"0\":{\"46\":1,\"78\":1,\"233\":1,\"264\":1},\"1\":{\"29\":1,\"34\":3,\"46\":4,\"48\":2,\"59\":1,\"77\":1,\"78\":2,\"80\":2,\"86\":4,\"87\":20,\"92\":1,\"112\":1,\"116\":1,\"117\":2,\"144\":1,\"154\":1,\"156\":2,\"161\":4,\"164\":7,\"166\":1,\"203\":1,\"208\":2,\"217\":2,\"218\":1,\"224\":1,\"226\":1,\"228\":1,\"230\":2,\"257\":1,\"264\":1,\"265\":1,\"269\":2,\"270\":2,\"271\":2,\"274\":1,\"275\":2,\"278\":3,\"279\":1,\"280\":2,\"304\":1,\"307\":1,\"309\":3,\"310\":5,\"311\":4,\"315\":1,\"316\":1}}],[\"sponsorship\",{\"1\":{\"24\":1}}],[\"sponsor\",{\"1\":{\"24\":1}}],[\"spi\",{\"0\":{\"120\":1,\"121\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"130\":1,\"131\":1},\"1\":{\"11\":2,\"120\":3,\"121\":2,\"122\":2,\"124\":2,\"125\":1,\"126\":3,\"128\":2,\"129\":4,\"130\":7,\"131\":2,\"132\":3,\"133\":1,\"135\":1,\"136\":1,\"139\":5,\"177\":1,\"270\":3,\"279\":4,\"316\":5}}],[\"six\",{\"1\":{\"225\":1}}],[\"sigkey\",{\"1\":{\"151\":1}}],[\"signutils\",{\"1\":{\"151\":1}}],[\"signed\",{\"1\":{\"151\":2}}],[\"signauthdatacache\",{\"1\":{\"151\":1}}],[\"signature\",{\"1\":{\"149\":1,\"298\":1}}],[\"signdata\",{\"1\":{\"151\":2}}],[\"signverify\",{\"1\":{\"151\":1}}],[\"signplugin\",{\"1\":{\"151\":1,\"179\":1,\"180\":2}}],[\"sign<\",{\"1\":{\"144\":1}}],[\"sign\",{\"0\":{\"140\":1,\"144\":1,\"150\":1},\"1\":{\"87\":2,\"141\":2,\"144\":2,\"147\":2,\"149\":1,\"151\":5,\"179\":1,\"180\":1}}],[\"significance\",{\"1\":{\"80\":1,\"209\":1}}],[\"silly\",{\"1\":{\"131\":1}}],[\"sing\",{\"1\":{\"151\":1}}],[\"singleton\",{\"1\":{\"195\":9,\"197\":1}}],[\"singletonlist\",{\"1\":{\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"100\":1,\"109\":1,\"165\":1}}],[\"single\",{\"1\":{\"33\":1,\"74\":1,\"191\":1,\"195\":2}}],[\"since\",{\"1\":{\"48\":1,\"87\":1,\"104\":1,\"118\":1,\"180\":1,\"297\":1}}],[\"side\",{\"1\":{\"33\":4,\"98\":1,\"103\":1,\"105\":2,\"234\":2,\"240\":2,\"241\":1}}],[\"size\",{\"1\":{\"33\":4,\"35\":2,\"40\":1,\"43\":1,\"48\":2,\"85\":1,\"86\":1,\"90\":1,\"91\":2,\"104\":3,\"172\":1,\"175\":3,\"179\":1,\"182\":2,\"213\":2,\"218\":2,\"219\":1,\"235\":1,\"288\":1}}],[\"simplify\",{\"1\":{\"276\":1}}],[\"simplified\",{\"1\":{\"212\":1}}],[\"simplicity\",{\"1\":{\"270\":2,\"281\":1}}],[\"simply\",{\"1\":{\"129\":1,\"151\":1,\"212\":1}}],[\"simplevalueparser\",{\"1\":{\"287\":1}}],[\"simplest\",{\"1\":{\"177\":1}}],[\"simpleinstantiationstrategy\",{\"1\":{\"164\":4}}],[\"simple\",{\"1\":{\"19\":1,\"46\":1,\"126\":1,\"129\":2,\"212\":1,\"285\":1}}],[\"simulate\",{\"0\":{\"62\":1}}],[\"simultaneously\",{\"1\":{\"31\":2}}],[\"similar\",{\"1\":{\"29\":1,\"48\":1,\"71\":1,\"86\":1,\"124\":1,\"234\":1}}],[\"situation\",{\"1\":{\"11\":1,\"210\":2,\"214\":1,\"301\":1}}],[\"stmt\",{\"1\":{\"129\":4}}],[\"stuffed\",{\"1\":{\"101\":1}}],[\"students\",{\"1\":{\"164\":1}}],[\"study\",{\"1\":{\"83\":1}}],[\"studied\",{\"1\":{\"81\":1}}],[\"style\",{\"1\":{\"70\":1,\"270\":1}}],[\"stdev\",{\"1\":{\"65\":4}}],[\"step\",{\"1\":{\"81\":1,\"91\":1,\"96\":1,\"97\":1,\"185\":2}}],[\"steps\",{\"1\":{\"48\":1,\"91\":2,\"97\":1,\"104\":1,\"272\":1}}],[\"stereotype\",{\"1\":{\"35\":1,\"36\":1}}],[\"still\",{\"1\":{\"48\":3,\"66\":1,\"101\":1,\"110\":1,\"129\":1,\"131\":1,\"164\":2,\"179\":1,\"182\":1,\"197\":2,\"200\":1,\"211\":1,\"212\":1,\"213\":2}}],[\"story\",{\"0\":{\"316\":1},\"1\":{\"307\":1}}],[\"storing\",{\"1\":{\"139\":1,\"173\":2}}],[\"stores\",{\"1\":{\"136\":1,\"151\":1,\"285\":1}}],[\"storedays\",{\"1\":{\"275\":1}}],[\"storedkeys\",{\"1\":{\"147\":2}}],[\"stored\",{\"1\":{\"43\":1,\"81\":1,\"93\":1,\"151\":1,\"226\":3}}],[\"store\",{\"1\":{\"43\":2,\"114\":1,\"151\":1,\"200\":1,\"226\":1,\"316\":1}}],[\"storage\",{\"0\":{\"38\":1},\"1\":{\"33\":7,\"34\":1,\"38\":2,\"39\":1,\"56\":1,\"267\":1,\"269\":1,\"270\":1,\"271\":1,\"275\":1,\"279\":1}}],[\"stopping\",{\"1\":{\"32\":1}}],[\"stop\",{\"1\":{\"19\":1,\"219\":1}}],[\"strutil\",{\"1\":{\"288\":1}}],[\"structured\",{\"1\":{\"226\":1}}],[\"structure\",{\"0\":{\"87\":1},\"1\":{\"80\":1,\"81\":1,\"83\":1,\"139\":4,\"221\":1,\"234\":1,\"267\":1,\"275\":1,\"285\":1,\"287\":1,\"288\":1,\"301\":2}}],[\"strict\",{\"1\":{\"270\":1,\"316\":2}}],[\"strictly\",{\"1\":{\"214\":1}}],[\"striking\",{\"1\":{\"123\":1}}],[\"stringredisserializer\",{\"1\":{\"195\":1}}],[\"string>newserializationcontext\",{\"1\":{\"195\":1}}],[\"string>\",{\"1\":{\"105\":1,\"147\":1,\"180\":1,\"195\":2}}],[\"stringbuilder\",{\"1\":{\"104\":2}}],[\"string\",{\"1\":{\"40\":6,\"43\":3,\"70\":1,\"78\":5,\"79\":8,\"80\":7,\"81\":8,\"82\":8,\"85\":1,\"87\":2,\"89\":2,\"90\":1,\"91\":3,\"92\":1,\"97\":1,\"98\":3,\"104\":8,\"105\":9,\"109\":4,\"114\":3,\"117\":5,\"118\":2,\"120\":2,\"122\":1,\"123\":4,\"127\":10,\"129\":2,\"132\":1,\"135\":1,\"137\":1,\"139\":10,\"147\":9,\"151\":2,\"156\":4,\"161\":5,\"162\":4,\"165\":3,\"166\":4,\"172\":4,\"173\":1,\"176\":5,\"177\":3,\"180\":1,\"182\":1,\"183\":3,\"184\":1,\"197\":2,\"207\":1,\"214\":6,\"220\":1,\"221\":1,\"234\":5,\"236\":1,\"237\":3,\"241\":1,\"242\":5,\"275\":10,\"287\":1,\"300\":3}}],[\"stringutils\",{\"1\":{\"40\":2,\"48\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"104\":1,\"109\":4,\"114\":1,\"127\":4,\"139\":3,\"151\":3,\"165\":1,\"176\":3,\"180\":1,\"184\":1,\"207\":1,\"221\":1,\"236\":2,\"237\":2,\"242\":2}}],[\"straightforward\",{\"1\":{\"90\":1}}],[\"strategies\",{\"0\":{\"98\":1},\"1\":{\"88\":1,\"98\":2,\"112\":1,\"177\":1,\"299\":1}}],[\"strategy\",{\"1\":{\"48\":2,\"74\":1,\"87\":2,\"88\":1,\"106\":1,\"112\":2,\"114\":1,\"120\":1,\"172\":1,\"178\":1,\"182\":1,\"183\":1,\"184\":1,\"211\":5,\"214\":3,\"263\":1,\"265\":1}}],[\"strange\",{\"1\":{\"48\":1}}],[\"stream\",{\"1\":{\"86\":1,\"124\":1,\"147\":2,\"162\":1,\"165\":1,\"179\":1,\"207\":1,\"214\":4}}],[\"stress\",{\"1\":{\"33\":2}}],[\"strengthened\",{\"1\":{\"283\":1}}],[\"strength\",{\"1\":{\"3\":1,\"4\":1,\"91\":2}}],[\"strongly\",{\"1\":{\"19\":1}}],[\"stable\",{\"1\":{\"285\":1}}],[\"stability\",{\"1\":{\"212\":1,\"283\":1}}],[\"standard\",{\"1\":{\"281\":1}}],[\"stands\",{\"1\":{\"32\":1}}],[\"staff\",{\"1\":{\"246\":1,\"252\":2}}],[\"statintervalms\",{\"1\":{\"213\":1}}],[\"statistics\",{\"1\":{\"213\":1,\"218\":1}}],[\"statistical\",{\"1\":{\"180\":1,\"212\":2,\"213\":4}}],[\"station\",{\"1\":{\"97\":1}}],[\"static\",{\"1\":{\"36\":1,\"40\":8,\"82\":4,\"86\":2,\"97\":2,\"104\":1,\"112\":4,\"114\":3,\"116\":1,\"117\":1,\"120\":1,\"122\":3,\"123\":5,\"126\":8,\"127\":6,\"129\":3,\"132\":3,\"156\":1,\"176\":3,\"177\":1,\"214\":2}}],[\"stats\",{\"1\":{\"65\":2}}],[\"statuscode\",{\"1\":{\"93\":1,\"184\":1,\"185\":1,\"214\":2}}],[\"status\",{\"1\":{\"48\":1,\"81\":1,\"160\":1,\"175\":2,\"177\":1,\"185\":2,\"191\":2,\"214\":8,\"219\":1,\"221\":5}}],[\"statement\",{\"1\":{\"129\":2}}],[\"state\",{\"1\":{\"32\":1,\"155\":2,\"191\":1,\"212\":2,\"213\":4,\"218\":3,\"219\":2,\"226\":1,\"298\":1}}],[\"stars\",{\"1\":{\"246\":1}}],[\"startwith\",{\"1\":{\"288\":1}}],[\"startdatetime\",{\"1\":{\"180\":1}}],[\"startasync\",{\"1\":{\"100\":2}}],[\"starting\",{\"1\":{\"91\":1,\"123\":1,\"155\":3,\"164\":2,\"207\":1,\"212\":1,\"219\":1}}],[\"starttimer\",{\"1\":{\"86\":1}}],[\"startswith\",{\"1\":{\"176\":1,\"207\":1}}],[\"startswithignorecase\",{\"1\":{\"127\":4}}],[\"starts\",{\"1\":{\"48\":1,\"81\":1,\"86\":1,\"112\":1,\"166\":1,\"213\":1}}],[\"startup\",{\"0\":{\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"62\":1,\"104\":1,\"155\":1},\"1\":{\"38\":1,\"43\":2,\"57\":1,\"59\":1,\"62\":1,\"66\":1,\"87\":1,\"103\":1,\"105\":3,\"117\":1,\"122\":1,\"159\":2,\"161\":1,\"164\":1,\"230\":1}}],[\"starterhmilytransactionhandler\",{\"1\":{\"36\":2}}],[\"starter\",{\"1\":{\"36\":1,\"43\":1,\"46\":3,\"59\":1,\"86\":3,\"87\":17,\"117\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":6,\"166\":2,\"203\":1,\"218\":1,\"228\":1,\"230\":2,\"271\":1,\"274\":1,\"280\":1,\"310\":4,\"311\":4}}],[\"started\",{\"1\":{\"33\":3,\"48\":1,\"57\":2,\"72\":1,\"86\":1,\"104\":3,\"105\":2,\"107\":1,\"114\":1,\"155\":5,\"156\":3,\"157\":1,\"161\":1,\"164\":7,\"166\":1,\"316\":1}}],[\"start\",{\"0\":{\"46\":1,\"107\":1,\"122\":1,\"153\":1,\"159\":1},\"1\":{\"28\":1,\"35\":3,\"39\":3,\"48\":4,\"68\":2,\"72\":1,\"74\":1,\"84\":1,\"87\":1,\"92\":1,\"100\":1,\"104\":6,\"105\":3,\"106\":2,\"108\":1,\"144\":1,\"154\":1,\"155\":2,\"164\":8,\"166\":3,\"173\":1,\"174\":1,\"180\":1,\"206\":1,\"211\":2,\"218\":1,\"295\":1,\"310\":2,\"311\":4}}],[\"star\",{\"1\":{\"19\":1,\"46\":1,\"266\":1}}],[\"stack\",{\"1\":{\"17\":1,\"156\":1}}],[\"shuaiqiyu\",{\"1\":{\"283\":1}}],[\"shutdown\",{\"1\":{\"35\":1}}],[\"shaking\",{\"1\":{\"212\":1}}],[\"shardingsphere\",{\"1\":{\"282\":1,\"316\":2}}],[\"shares\",{\"1\":{\"253\":1}}],[\"share\",{\"1\":{\"129\":1,\"307\":1}}],[\"shared\",{\"1\":{\"33\":1,\"180\":1}}],[\"sharing\",{\"0\":{\"9\":1,\"12\":1},\"1\":{\"5\":2,\"11\":1,\"14\":6}}],[\"sh\",{\"1\":{\"155\":1}}],[\"shell\",{\"1\":{\"92\":1}}],[\"shen\",{\"1\":{\"14\":1}}],[\"shortcomings\",{\"1\":{\"131\":1}}],[\"showapis\",{\"1\":{\"260\":1}}],[\"show\",{\"1\":{\"120\":1,\"257\":1,\"270\":1,\"281\":1}}],[\"shows\",{\"1\":{\"104\":1,\"105\":1,\"121\":1}}],[\"showing\",{\"1\":{\"88\":1}}],[\"shown\",{\"1\":{\"48\":2,\"72\":1,\"164\":1,\"165\":1,\"179\":1,\"195\":1,\"206\":1,\"212\":1,\"213\":1,\"214\":1,\"218\":1}}],[\"shouldn\",{\"1\":{\"200\":1}}],[\"should\",{\"0\":{\"302\":1,\"313\":1},\"1\":{\"33\":4,\"97\":1,\"99\":1,\"128\":1,\"147\":2,\"205\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":4,\"226\":1,\"235\":1,\"285\":1,\"302\":1,\"310\":1,\"311\":4,\"313\":1,\"316\":4}}],[\"syncconnected\",{\"1\":{\"155\":2}}],[\"syncconfiguration\",{\"1\":{\"97\":1,\"116\":1,\"156\":1}}],[\"syncdata\",{\"1\":{\"117\":2,\"156\":3,\"161\":1}}],[\"syncdataserviceimpl\",{\"1\":{\"156\":2}}],[\"syncdataservice\",{\"1\":{\"104\":1,\"112\":3,\"114\":1,\"117\":1,\"156\":14,\"161\":3,\"164\":2,\"166\":1}}],[\"syncall\",{\"1\":{\"114\":1,\"156\":4}}],[\"sync\",{\"1\":{\"48\":2,\"57\":1,\"96\":2,\"97\":1,\"112\":6,\"116\":2,\"117\":5,\"119\":2,\"154\":4,\"155\":1,\"156\":5,\"161\":7,\"162\":2,\"164\":15,\"165\":1,\"166\":6,\"310\":3}}],[\"synchronously\",{\"1\":{\"162\":1}}],[\"synchronous\",{\"1\":{\"48\":1,\"100\":1,\"271\":1}}],[\"synchronizing\",{\"1\":{\"48\":1,\"68\":1,\"156\":1,\"159\":1,\"160\":1,\"166\":1}}],[\"synchronizes\",{\"1\":{\"48\":4,\"98\":1,\"156\":1,\"166\":1,\"230\":1,\"251\":1}}],[\"synchronized\",{\"1\":{\"48\":2,\"106\":1,\"126\":2,\"139\":2,\"159\":1,\"161\":1,\"164\":1,\"214\":1,\"226\":1,\"312\":1}}],[\"synchronize\",{\"0\":{\"114\":1,\"153\":1,\"159\":1,\"165\":1,\"166\":1},\"1\":{\"48\":1,\"106\":1,\"156\":3,\"157\":2,\"159\":1,\"164\":10,\"165\":5,\"166\":1}}],[\"synchronization\",{\"0\":{\"95\":1,\"98\":1,\"103\":1,\"106\":1,\"115\":1,\"152\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"299\":1},\"1\":{\"14\":2,\"48\":4,\"68\":2,\"96\":1,\"97\":1,\"98\":2,\"100\":1,\"101\":1,\"104\":1,\"106\":2,\"112\":2,\"114\":1,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"161\":1,\"162\":1,\"164\":4,\"166\":1,\"173\":1,\"176\":1,\"178\":1,\"182\":1,\"195\":2,\"226\":1,\"295\":1,\"299\":1,\"307\":2,\"312\":1,\"316\":1}}],[\"systems\",{\"0\":{\"107\":1},\"1\":{\"106\":1,\"269\":2}}],[\"system\",{\"0\":{\"97\":1},\"1\":{\"5\":1,\"38\":1,\"56\":1,\"57\":1,\"68\":1,\"81\":1,\"82\":1,\"91\":1,\"97\":1,\"106\":2,\"121\":1,\"122\":5,\"123\":3,\"129\":2,\"130\":1,\"147\":1,\"174\":2,\"175\":1,\"179\":2,\"191\":1,\"210\":1,\"211\":5,\"212\":2,\"214\":1,\"275\":6,\"276\":1,\"288\":1,\"301\":2,\"303\":2,\"304\":1,\"314\":2,\"315\":1}}],[\"soon\",{\"1\":{\"252\":1}}],[\"sorting\",{\"1\":{\"187\":1}}],[\"sortedmap<long\",{\"1\":{\"89\":1}}],[\"sorted\",{\"1\":{\"86\":1,\"101\":1,\"147\":1,\"165\":1,\"179\":1,\"183\":1,\"207\":1}}],[\"sort\",{\"1\":{\"80\":1,\"82\":2,\"179\":2,\"182\":1,\"207\":3}}],[\"socketlistener\",{\"1\":{\"116\":1}}],[\"socketcontroller\",{\"1\":{\"114\":1}}],[\"socketdata\",{\"1\":{\"112\":1,\"113\":2,\"117\":1}}],[\"socket\",{\"0\":{\"115\":1,\"116\":1,\"117\":1},\"1\":{\"68\":1,\"81\":1,\"82\":1,\"98\":1,\"106\":1,\"112\":3,\"113\":1,\"114\":5,\"116\":3,\"117\":3,\"155\":2,\"176\":5}}],[\"social\",{\"1\":{\"11\":1}}],[\"solves\",{\"1\":{\"289\":1,\"303\":1,\"314\":1}}],[\"solve\",{\"0\":{\"271\":1,\"280\":1},\"1\":{\"131\":1,\"164\":1,\"280\":1,\"283\":1,\"285\":2,\"304\":1,\"315\":1}}],[\"solved\",{\"1\":{\"48\":1,\"66\":1,\"129\":1,\"267\":1,\"285\":1}}],[\"solving\",{\"1\":{\"32\":1,\"281\":1}}],[\"solutions\",{\"1\":{\"211\":1,\"246\":1}}],[\"solution\",{\"1\":{\"19\":3,\"23\":1,\"32\":1,\"38\":1,\"164\":1,\"270\":1,\"278\":1}}],[\"so\",{\"0\":{\"307\":1},\"1\":{\"29\":1,\"30\":1,\"37\":1,\"48\":4,\"68\":1,\"69\":1,\"80\":3,\"86\":1,\"87\":2,\"91\":1,\"97\":1,\"98\":3,\"100\":1,\"101\":1,\"104\":3,\"112\":1,\"122\":1,\"123\":2,\"124\":1,\"126\":1,\"129\":1,\"131\":1,\"132\":1,\"164\":1,\"169\":1,\"179\":2,\"180\":2,\"182\":2,\"197\":1,\"200\":1,\"207\":1,\"212\":2,\"214\":2,\"219\":1,\"235\":1,\"236\":2,\"252\":1,\"253\":1,\"300\":1,\"303\":1,\"314\":1,\"316\":2}}],[\"something\",{\"1\":{\"101\":1,\"184\":1}}],[\"somewhat\",{\"1\":{\"29\":1}}],[\"some\",{\"1\":{\"28\":2,\"29\":1,\"46\":1,\"81\":1,\"84\":2,\"85\":1,\"92\":1,\"121\":1,\"131\":1,\"179\":2,\"210\":1,\"211\":1,\"214\":1,\"220\":2,\"285\":1,\"303\":2,\"311\":2,\"314\":2,\"316\":5}}],[\"soft\",{\"1\":{\"155\":1}}],[\"software\",{\"1\":{\"19\":1}}],[\"sofarulehandle\",{\"1\":{\"82\":1}}],[\"sofa\",{\"1\":{\"14\":1,\"80\":2,\"82\":1,\"87\":2,\"180\":1,\"269\":1}}],[\"soul3\",{\"1\":{\"306\":1}}],[\"souldubboclient\",{\"1\":{\"230\":2}}],[\"soulbootstrap\",{\"0\":{\"144\":1}}],[\"soulbootstrapapplication\",{\"1\":{\"57\":2,\"164\":4}}],[\"souladmin\",{\"1\":{\"151\":1}}],[\"souladminresult\",{\"1\":{\"109\":4}}],[\"souladminbootstrap\",{\"1\":{\"56\":1}}],[\"soulthreadfactory\",{\"1\":{\"104\":1,\"174\":1}}],[\"soulresultwrap\",{\"1\":{\"183\":2,\"184\":1,\"185\":2,\"197\":1,\"214\":3,\"236\":2,\"238\":2}}],[\"soulresultwarp\",{\"1\":{\"93\":2}}],[\"soulresultenum\",{\"1\":{\"93\":4,\"151\":1,\"183\":4,\"184\":2,\"185\":4,\"197\":2,\"214\":6,\"236\":4,\"238\":4}}],[\"soulresultmessage\",{\"1\":{\"78\":1,\"109\":1}}],[\"soulcontext\",{\"0\":{\"180\":1},\"1\":{\"87\":3,\"151\":11,\"172\":1,\"180\":9,\"181\":1,\"183\":4,\"184\":3,\"214\":3,\"221\":3,\"236\":4}}],[\"soulconfiguration\",{\"1\":{\"86\":1,\"164\":2,\"179\":1}}],[\"soulclientregisterserviceimpl\",{\"1\":{\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":2}}],[\"soulclientregisterservice\",{\"1\":{\"78\":1}}],[\"soulclientcontroller\",{\"1\":{\"78\":2}}],[\"soulwebsocketclient\",{\"1\":{\"117\":1,\"118\":1}}],[\"soulweb\",{\"1\":{\"86\":1,\"117\":1}}],[\"soulwebhandler\",{\"1\":{\"86\":7,\"179\":3,\"207\":5,\"235\":1}}],[\"soulplugins\",{\"1\":{\"86\":3,\"179\":2,\"207\":3}}],[\"soulpluginchain\",{\"0\":{\"86\":1},\"1\":{\"85\":1,\"86\":3,\"87\":1,\"92\":3,\"93\":1,\"172\":2,\"179\":3,\"180\":1,\"182\":1,\"183\":1,\"184\":3,\"185\":1,\"197\":1,\"207\":1,\"214\":1,\"221\":3,\"236\":1,\"238\":1}}],[\"soulplugin\",{\"1\":{\"84\":1,\"86\":7,\"87\":1,\"92\":1,\"179\":5,\"182\":2,\"207\":4,\"235\":1}}],[\"soulexception\",{\"1\":{\"82\":1,\"104\":3,\"105\":1,\"237\":3}}],[\"soulspringmvcconfig\",{\"1\":{\"77\":7}}],[\"soulspringmvcclient\",{\"1\":{\"59\":1}}],[\"soul\",{\"0\":{\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"47\":1,\"49\":1,\"51\":2,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"67\":1,\"76\":1,\"80\":1,\"81\":1,\"84\":1,\"94\":1,\"102\":1,\"106\":1,\"114\":1,\"120\":1,\"130\":1,\"140\":1,\"152\":1,\"153\":2,\"156\":1,\"158\":1,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"170\":1,\"179\":1,\"186\":1,\"201\":1,\"209\":1,\"215\":1,\"218\":1,\"223\":1,\"228\":1,\"229\":1,\"235\":1,\"291\":1,\"292\":1,\"297\":1,\"302\":1,\"307\":1,\"309\":1,\"312\":1,\"313\":1},\"1\":{\"11\":4,\"14\":1,\"48\":15,\"49\":4,\"52\":1,\"56\":3,\"57\":5,\"58\":2,\"59\":5,\"61\":3,\"62\":1,\"64\":13,\"65\":3,\"66\":1,\"68\":4,\"69\":3,\"72\":2,\"77\":6,\"78\":1,\"81\":4,\"82\":2,\"83\":6,\"86\":5,\"87\":37,\"88\":1,\"89\":1,\"96\":3,\"97\":1,\"104\":1,\"106\":9,\"108\":1,\"112\":6,\"114\":1,\"116\":3,\"117\":6,\"118\":1,\"119\":4,\"130\":2,\"131\":1,\"132\":5,\"135\":1,\"139\":1,\"144\":2,\"151\":1,\"154\":8,\"155\":4,\"156\":9,\"157\":2,\"159\":4,\"160\":2,\"161\":6,\"162\":6,\"164\":45,\"165\":3,\"166\":8,\"169\":3,\"174\":4,\"177\":1,\"178\":1,\"179\":7,\"180\":1,\"184\":1,\"185\":2,\"187\":2,\"191\":3,\"192\":1,\"195\":1,\"199\":1,\"201\":1,\"202\":3,\"203\":1,\"205\":1,\"207\":2,\"209\":4,\"212\":5,\"213\":3,\"214\":13,\"216\":1,\"218\":7,\"220\":1,\"221\":2,\"222\":1,\"224\":2,\"229\":1,\"230\":4,\"237\":1,\"292\":1,\"295\":2,\"296\":4,\"297\":1,\"300\":5,\"301\":5,\"302\":1,\"303\":4,\"304\":4,\"306\":4,\"307\":2,\"309\":4,\"310\":5,\"311\":13,\"312\":7,\"313\":1,\"314\":3,\"315\":3,\"316\":4}}],[\"sourced\",{\"1\":{\"297\":1,\"306\":1}}],[\"source\",{\"0\":{\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"47\":1,\"48\":1,\"50\":1,\"53\":1,\"54\":1,\"76\":1,\"139\":1,\"170\":1,\"194\":2,\"207\":1,\"221\":1,\"247\":1,\"316\":1},\"1\":{\"3\":1,\"5\":1,\"14\":1,\"16\":2,\"17\":2,\"18\":1,\"19\":1,\"20\":1,\"23\":1,\"28\":1,\"32\":1,\"48\":6,\"96\":1,\"100\":2,\"101\":1,\"159\":1,\"182\":1,\"207\":1,\"209\":1,\"212\":2,\"214\":3,\"216\":1,\"219\":1,\"221\":1,\"225\":1,\"246\":1,\"247\":1,\"251\":2,\"253\":2,\"267\":1,\"316\":8}}],[\"suffered\",{\"1\":{\"316\":1}}],[\"suffix\",{\"1\":{\"43\":2,\"248\":1}}],[\"suggestions\",{\"1\":{\"266\":1,\"297\":1}}],[\"superbenchmarker\",{\"1\":{\"219\":1}}],[\"super\",{\"1\":{\"214\":1,\"248\":1}}],[\"suppresswarnings\",{\"1\":{\"111\":1,\"113\":1,\"156\":1,\"165\":1}}],[\"supported\",{\"1\":{\"267\":1,\"271\":1,\"272\":1,\"282\":1}}],[\"supporter\",{\"1\":{\"24\":1}}],[\"supports\",{\"1\":{\"33\":2,\"34\":2,\"70\":1,\"177\":1,\"269\":2,\"292\":1,\"294\":2,\"307\":2,\"312\":1,\"316\":2}}],[\"supporting\",{\"1\":{\"24\":1}}],[\"support\",{\"0\":{\"24\":1,\"31\":1,\"144\":1,\"264\":1},\"1\":{\"24\":3,\"28\":1,\"40\":1,\"70\":1,\"112\":1,\"164\":3,\"169\":1,\"180\":1,\"264\":1,\"267\":1,\"269\":3,\"270\":4,\"271\":2,\"275\":1,\"276\":3,\"278\":1,\"279\":5,\"280\":4,\"282\":1,\"283\":3,\"285\":2,\"287\":3,\"288\":1,\"289\":1,\"292\":1,\"298\":2,\"305\":2,\"307\":4}}],[\"suspension\",{\"1\":{\"269\":1,\"271\":1,\"280\":1,\"283\":1}}],[\"suspended\",{\"1\":{\"105\":1,\"211\":1}}],[\"suspected\",{\"1\":{\"180\":1}}],[\"suitable\",{\"0\":{\"302\":1,\"313\":1},\"1\":{\"179\":1,\"303\":1,\"314\":1}}],[\"surrounding\",{\"1\":{\"285\":1}}],[\"surge\",{\"1\":{\"210\":1}}],[\"survival\",{\"1\":{\"175\":3}}],[\"surviving\",{\"1\":{\"173\":1,\"175\":2}}],[\"surpasses\",{\"1\":{\"91\":1}}],[\"sure\",{\"1\":{\"48\":1,\"57\":1,\"316\":1}}],[\"sum\",{\"0\":{\"83\":1,\"101\":1,\"167\":1,\"178\":1,\"222\":1,\"243\":1},\"1\":{\"91\":1,\"92\":1,\"224\":1}}],[\"summarizes\",{\"1\":{\"103\":1}}],[\"summarize\",{\"1\":{\"83\":1,\"119\":1,\"128\":1}}],[\"summarized\",{\"1\":{\"46\":1}}],[\"summary\",{\"0\":{\"128\":1,\"138\":1,\"157\":1,\"163\":1},\"1\":{\"11\":2,\"14\":1,\"105\":1,\"164\":1,\"165\":1,\"166\":1,\"297\":1}}],[\"suddenly\",{\"1\":{\"48\":1}}],[\"sudden\",{\"1\":{\"32\":1,\"210\":1,\"211\":1}}],[\"such\",{\"1\":{\"32\":1,\"37\":1,\"38\":1,\"43\":2,\"87\":1,\"117\":2,\"118\":3,\"119\":1,\"121\":1,\"135\":2,\"179\":1,\"185\":1,\"210\":1,\"212\":1,\"298\":1,\"301\":1,\"307\":2,\"312\":1,\"316\":2}}],[\"success\",{\"1\":{\"48\":2,\"56\":1,\"61\":2,\"64\":12,\"78\":1,\"85\":2,\"104\":3,\"109\":2,\"184\":1,\"197\":1,\"237\":1,\"238\":5}}],[\"successful\",{\"1\":{\"48\":1,\"57\":2,\"61\":1,\"64\":1,\"114\":1,\"184\":1,\"237\":1,\"246\":1,\"252\":1,\"316\":1}}],[\"successfully\",{\"1\":{\"31\":1,\"122\":1,\"164\":1,\"193\":1,\"197\":1}}],[\"succeeded\",{\"1\":{\"30\":1}}],[\"subtraction\",{\"1\":{\"200\":1}}],[\"subtype\",{\"1\":{\"123\":1}}],[\"sub\",{\"1\":{\"131\":1,\"253\":4,\"316\":2}}],[\"subscription\",{\"1\":{\"118\":1}}],[\"subscribe\",{\"1\":{\"162\":1}}],[\"subscribeplugindatachanges\",{\"1\":{\"161\":1}}],[\"subscribechildchanges\",{\"1\":{\"161\":1,\"162\":1}}],[\"subscribedatachanges\",{\"1\":{\"162\":1}}],[\"subscribedata\",{\"1\":{\"161\":1,\"162\":1}}],[\"subscriberuledatachanges\",{\"1\":{\"162\":2}}],[\"subscribers\",{\"1\":{\"105\":1,\"117\":2,\"161\":4}}],[\"subscriber\",{\"1\":{\"104\":2,\"117\":1,\"118\":4,\"161\":3}}],[\"subscribeon\",{\"1\":{\"86\":1,\"235\":1}}],[\"subsequent\",{\"1\":{\"24\":1,\"80\":1,\"81\":1,\"92\":1,\"173\":1,\"210\":1,\"211\":1,\"221\":1,\"226\":1,\"253\":1}}],[\"subclass\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"97\":2,\"119\":1,\"120\":3,\"121\":2,\"122\":2,\"124\":1,\"139\":3,\"182\":2,\"287\":1}}],[\"subclasses\",{\"1\":{\"85\":1,\"87\":1,\"118\":1,\"121\":2,\"131\":1,\"182\":1}}],[\"submit\",{\"1\":{\"28\":1,\"79\":2,\"80\":1,\"81\":3,\"173\":1,\"316\":1}}],[\"submitted\",{\"1\":{\"5\":1,\"248\":1}}],[\"submissions\",{\"1\":{\"23\":1}}],[\"submission\",{\"1\":{\"5\":1,\"246\":1}}],[\"sunday\",{\"1\":{\"2\":1,\"10\":1,\"13\":1}}],[\"semaphore\",{\"1\":{\"217\":1}}],[\"separated\",{\"1\":{\"226\":1}}],[\"separate\",{\"1\":{\"182\":1,\"226\":1,\"287\":3}}],[\"separately\",{\"1\":{\"48\":1}}],[\"several\",{\"1\":{\"104\":1,\"182\":1,\"195\":1,\"210\":1}}],[\"segment\",{\"1\":{\"90\":1,\"177\":1}}],[\"sense\",{\"0\":{\"162\":1},\"1\":{\"211\":1}}],[\"senses\",{\"1\":{\"159\":1}}],[\"sentine\",{\"1\":{\"214\":4}}],[\"sentinelreactortransformer<>\",{\"1\":{\"214\":1}}],[\"sentinelrulehandle\",{\"1\":{\"214\":2}}],[\"sentinelplugin\",{\"1\":{\"214\":2}}],[\"sentinelhandle\",{\"1\":{\"214\":19}}],[\"sentinelfallbackexception\",{\"1\":{\"214\":3}}],[\"sentinelfallbackhandler\",{\"1\":{\"214\":9}}],[\"sentinelfallback\",{\"1\":{\"214\":1}}],[\"sentinelurl\",{\"1\":{\"33\":1,\"46\":1}}],[\"sentinel\",{\"0\":{\"209\":1},\"1\":{\"33\":2,\"46\":1,\"87\":2,\"209\":3,\"212\":5,\"213\":3,\"214\":24}}],[\"sentence\",{\"1\":{\"100\":2}}],[\"sent\",{\"1\":{\"81\":2,\"83\":1,\"110\":1,\"113\":1,\"212\":1}}],[\"sending\",{\"1\":{\"118\":1}}],[\"sendtext\",{\"1\":{\"114\":2}}],[\"sendresponse\",{\"1\":{\"100\":6}}],[\"sends\",{\"1\":{\"82\":1,\"108\":1}}],[\"send\",{\"1\":{\"48\":3,\"83\":2,\"98\":3,\"100\":2,\"104\":3,\"112\":1,\"113\":6,\"114\":6,\"116\":1,\"285\":1,\"303\":1,\"314\":1}}],[\"seeing\",{\"1\":{\"110\":1,\"123\":1}}],[\"see\",{\"1\":{\"48\":2,\"57\":1,\"59\":1,\"61\":1,\"64\":1,\"68\":2,\"69\":1,\"71\":1,\"72\":1,\"77\":1,\"78\":1,\"80\":3,\"86\":2,\"87\":1,\"98\":1,\"99\":1,\"100\":2,\"101\":2,\"106\":2,\"108\":2,\"110\":1,\"112\":2,\"113\":1,\"122\":2,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"155\":2,\"164\":3,\"175\":1,\"179\":4,\"180\":1,\"183\":1,\"184\":1,\"189\":1,\"197\":1,\"202\":1}}],[\"seen\",{\"1\":{\"48\":3,\"86\":1,\"109\":1,\"112\":1,\"156\":1,\"164\":1,\"189\":1,\"197\":1}}],[\"season\",{\"1\":{\"283\":1}}],[\"seamlessly\",{\"1\":{\"34\":2}}],[\"searching\",{\"1\":{\"135\":1,\"139\":1}}],[\"search\",{\"0\":{\"108\":1,\"133\":1},\"1\":{\"28\":1,\"78\":1,\"109\":1,\"123\":1,\"134\":1}}],[\"seriously\",{\"1\":{\"210\":1}}],[\"serializable\",{\"1\":{\"300\":1}}],[\"serializationcontext\",{\"1\":{\"195\":2}}],[\"serialization\",{\"1\":{\"33\":2,\"34\":1,\"242\":2,\"270\":1,\"271\":1,\"280\":1,\"292\":3,\"295\":1}}],[\"serialize\",{\"1\":{\"240\":1,\"243\":1}}],[\"serializeenum\",{\"1\":{\"43\":1}}],[\"serializer\",{\"1\":{\"33\":2,\"43\":3,\"46\":1,\"195\":5,\"275\":1,\"279\":2}}],[\"serverhttprequest\",{\"1\":{\"180\":1,\"207\":1,\"221\":1}}],[\"serverhttpresponse\",{\"1\":{\"93\":1,\"185\":1,\"207\":1}}],[\"serverendpoint\",{\"1\":{\"114\":2}}],[\"serverendpointexporter\",{\"1\":{\"112\":4}}],[\"serverlist\",{\"1\":{\"104\":6}}],[\"serverweb\",{\"1\":{\"87\":1}}],[\"serverwebexchange\",{\"1\":{\"85\":1,\"86\":2,\"87\":1,\"92\":3,\"93\":1,\"172\":2,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":2,\"184\":3,\"185\":1,\"197\":1,\"207\":3,\"214\":2,\"221\":5,\"235\":2,\"236\":1,\"237\":1,\"238\":1}}],[\"server\",{\"1\":{\"81\":2,\"93\":1,\"100\":2,\"104\":9,\"105\":6,\"155\":4,\"172\":2,\"176\":1,\"185\":1,\"214\":2,\"220\":1,\"221\":1,\"236\":2,\"241\":1,\"275\":4,\"279\":1}}],[\"servicecacheruledata\",{\"1\":{\"162\":1}}],[\"serviceloaders\",{\"1\":{\"123\":2,\"124\":1}}],[\"serviceloader<driver>\",{\"1\":{\"126\":1}}],[\"serviceloader<>\",{\"1\":{\"123\":1}}],[\"serviceloader<s>\",{\"1\":{\"123\":4}}],[\"serviceloader<animal>\",{\"1\":{\"122\":2,\"123\":2}}],[\"serviceloader<interface>\",{\"1\":{\"121\":1}}],[\"serviceloader\",{\"1\":{\"121\":1,\"122\":3,\"123\":8,\"124\":1,\"126\":1,\"131\":1,\"132\":3,\"133\":2}}],[\"service\",{\"0\":{\"59\":1,\"60\":1,\"63\":1,\"147\":1,\"155\":1,\"230\":1,\"241\":1,\"242\":1},\"1\":{\"32\":1,\"33\":2,\"36\":3,\"43\":1,\"48\":1,\"64\":1,\"65\":2,\"69\":2,\"72\":3,\"78\":1,\"81\":1,\"87\":2,\"89\":1,\"92\":2,\"93\":4,\"104\":5,\"105\":1,\"106\":1,\"114\":1,\"117\":1,\"121\":2,\"123\":15,\"147\":1,\"154\":3,\"155\":4,\"156\":6,\"161\":6,\"162\":1,\"164\":3,\"166\":7,\"172\":2,\"173\":6,\"175\":10,\"176\":1,\"177\":3,\"178\":2,\"185\":4,\"201\":1,\"205\":2,\"206\":1,\"209\":1,\"210\":7,\"211\":7,\"212\":20,\"213\":7,\"214\":8,\"224\":1,\"225\":3,\"226\":2,\"230\":1,\"234\":2,\"235\":1,\"238\":2,\"240\":2,\"242\":2,\"243\":2,\"265\":1,\"272\":1,\"274\":2,\"275\":3,\"295\":1,\"304\":1,\"311\":1,\"315\":1}}],[\"services\",{\"0\":{\"62\":1},\"1\":{\"24\":1,\"69\":1,\"92\":1,\"123\":1,\"164\":1,\"172\":2,\"173\":3,\"175\":2,\"177\":3,\"178\":3,\"210\":4,\"212\":1,\"214\":2,\"218\":1,\"231\":1,\"303\":1,\"314\":1}}],[\"section\",{\"1\":{\"197\":1}}],[\"sections\",{\"1\":{\"29\":1}}],[\"secretary\",{\"1\":{\"251\":1}}],[\"secretkey\",{\"0\":{\"145\":1},\"1\":{\"147\":1,\"164\":2}}],[\"secret\",{\"1\":{\"142\":2,\"275\":1}}],[\"sec\",{\"1\":{\"65\":6,\"82\":1}}],[\"secondly\",{\"1\":{\"214\":1,\"310\":1}}],[\"seconds\",{\"1\":{\"33\":2,\"43\":3,\"48\":2,\"57\":1,\"101\":3,\"104\":2,\"105\":1,\"164\":1,\"174\":3,\"178\":1,\"200\":1,\"213\":3,\"214\":3}}],[\"second\",{\"0\":{\"137\":1},\"1\":{\"28\":1,\"38\":1,\"74\":1,\"85\":1,\"91\":2,\"97\":1,\"101\":1,\"109\":1,\"123\":1,\"137\":1,\"139\":1,\"189\":2,\"197\":1,\"198\":1,\"199\":2,\"210\":1,\"211\":3,\"212\":1,\"213\":5,\"219\":3}}],[\"sel\",{\"1\":{\"91\":1}}],[\"selects\",{\"1\":{\"177\":1,\"185\":1}}],[\"selecting\",{\"1\":{\"172\":1}}],[\"selection\",{\"1\":{\"128\":1,\"178\":1,\"182\":1,\"185\":1}}],[\"selective\",{\"1\":{\"81\":1}}],[\"select\",{\"1\":{\"82\":1,\"91\":2,\"120\":3,\"129\":2,\"172\":2,\"177\":1,\"179\":1,\"182\":3,\"183\":1,\"192\":1,\"214\":1}}],[\"selectorlog\",{\"1\":{\"182\":2}}],[\"selectorparentpath\",{\"1\":{\"98\":2}}],[\"selectortypeenum\",{\"1\":{\"80\":1,\"85\":1,\"172\":1,\"182\":1}}],[\"selectorid\",{\"1\":{\"78\":2,\"79\":5,\"81\":5,\"82\":5,\"173\":2}}],[\"selectorserviceimpl\",{\"1\":{\"80\":1}}],[\"selectorservice\",{\"1\":{\"79\":2,\"80\":1,\"81\":2,\"156\":1}}],[\"selectors\",{\"0\":{\"146\":1,\"192\":1},\"1\":{\"69\":1,\"70\":1,\"71\":1,\"80\":1,\"85\":4,\"172\":2,\"182\":4,\"185\":1,\"300\":1,\"312\":1}}],[\"selectormapper\",{\"1\":{\"48\":2,\"79\":1,\"80\":1,\"81\":1}}],[\"selectorconditionquery\",{\"1\":{\"48\":1}}],[\"selectorconditiondo\",{\"1\":{\"48\":5,\"80\":1}}],[\"selectorconditiondto\",{\"1\":{\"48\":6,\"80\":11}}],[\"selectorconditiondtos\",{\"1\":{\"48\":4,\"80\":3}}],[\"selectorconditionmapper\",{\"1\":{\"48\":3,\"80\":1}}],[\"selectorcount\",{\"1\":{\"48\":4}}],[\"selectordatahandler\",{\"1\":{\"117\":1,\"118\":1}}],[\"selectordatalist\",{\"1\":{\"113\":2,\"156\":2}}],[\"selectordatarefresh\",{\"1\":{\"104\":1}}],[\"selectordata\",{\"1\":{\"79\":4,\"81\":5,\"85\":8,\"87\":1,\"118\":5,\"172\":6,\"182\":7,\"183\":1,\"197\":1,\"207\":1,\"214\":1,\"221\":1,\"236\":1}}],[\"selectordo\",{\"1\":{\"48\":9,\"79\":7,\"80\":8,\"81\":7}}],[\"selectordto\",{\"1\":{\"48\":5,\"80\":20}}],[\"selector\",{\"0\":{\"70\":1,\"71\":1,\"79\":1},\"1\":{\"48\":5,\"61\":4,\"64\":25,\"69\":6,\"70\":1,\"72\":3,\"74\":1,\"79\":1,\"80\":4,\"81\":2,\"82\":1,\"83\":3,\"85\":6,\"87\":4,\"97\":1,\"104\":2,\"110\":2,\"111\":1,\"112\":2,\"113\":2,\"117\":1,\"118\":2,\"120\":2,\"146\":1,\"156\":1,\"157\":1,\"159\":1,\"164\":2,\"172\":9,\"173\":4,\"177\":2,\"182\":11,\"183\":5,\"185\":1,\"192\":2,\"197\":1,\"202\":2,\"207\":1,\"212\":1,\"214\":1,\"221\":1,\"236\":1}}],[\"selectedwrr\",{\"1\":{\"91\":3}}],[\"selectedinvoker\",{\"1\":{\"91\":4}}],[\"selected\",{\"1\":{\"5\":1,\"91\":5}}],[\"self\",{\"0\":{\"206\":1},\"1\":{\"21\":1,\"206\":1,\"207\":1,\"253\":1}}],[\"sessionid\",{\"1\":{\"155\":2}}],[\"sessions\",{\"1\":{\"114\":1,\"116\":1}}],[\"sessionkey\",{\"1\":{\"114\":1}}],[\"sessiontimeout=5000\",{\"1\":{\"155\":1}}],[\"sessiontimeout\",{\"1\":{\"33\":1,\"46\":1,\"154\":2}}],[\"session\",{\"0\":{\"9\":1,\"12\":1},\"1\":{\"98\":3,\"114\":38,\"116\":2,\"155\":3}}],[\"setfields\",{\"1\":{\"288\":1}}],[\"setfailureratethreshold\",{\"1\":{\"219\":1}}],[\"setfallbackuri\",{\"1\":{\"219\":1}}],[\"setinvoker\",{\"1\":{\"242\":1}}],[\"setinterface\",{\"1\":{\"232\":1}}],[\"setid\",{\"1\":{\"109\":1}}],[\"setattachment\",{\"1\":{\"237\":1,\"241\":1}}],[\"setapplication\",{\"1\":{\"232\":1}}],[\"setaction\",{\"1\":{\"39\":1}}],[\"setgeneric\",{\"1\":{\"232\":1}}],[\"setgrade\",{\"1\":{\"214\":2}}],[\"setname\",{\"1\":{\"230\":1}}],[\"setusername\",{\"1\":{\"220\":1}}],[\"setuserid\",{\"1\":{\"220\":1}}],[\"setwaitintervalfunctioninopenstate\",{\"1\":{\"219\":1}}],[\"setweight\",{\"1\":{\"91\":2}}],[\"setminimumnumberofcalls\",{\"1\":{\"219\":1}}],[\"setcircuitenable\",{\"1\":{\"219\":1}}],[\"setcontrolbehavior\",{\"1\":{\"214\":1}}],[\"setcontenttype\",{\"1\":{\"105\":1}}],[\"setcount\",{\"1\":{\"214\":2}}],[\"setcomplete\",{\"1\":{\"207\":1}}],[\"setlimitforperiod\",{\"1\":{\"219\":2}}],[\"setlimitrefreshperiod\",{\"1\":{\"219\":2}}],[\"setlastupdate\",{\"1\":{\"91\":1}}],[\"setex\",{\"1\":{\"200\":3}}],[\"set<string>\",{\"1\":{\"165\":1}}],[\"set<session>\",{\"1\":{\"114\":1}}],[\"setvalue\",{\"1\":{\"139\":2}}],[\"setregistry\",{\"1\":{\"232\":1}}],[\"setruleid\",{\"1\":{\"82\":1}}],[\"setruleconditions\",{\"1\":{\"82\":1}}],[\"setrole\",{\"1\":{\"39\":1}}],[\"setoperator\",{\"1\":{\"80\":1,\"82\":2}}],[\"setprotocol\",{\"1\":{\"232\":1}}],[\"setpermittednumberofcallsinhalfopenstate\",{\"1\":{\"219\":1}}],[\"setparamvalue\",{\"1\":{\"80\":1}}],[\"setparamname\",{\"1\":{\"80\":1}}],[\"setparamtype\",{\"1\":{\"80\":1}}],[\"setpluginid\",{\"1\":{\"80\":5}}],[\"sethandle\",{\"1\":{\"79\":2,\"80\":4,\"81\":2}}],[\"setslidingwindowtype\",{\"1\":{\"219\":1}}],[\"setslidingwindowsize\",{\"1\":{\"219\":1}}],[\"sets\",{\"1\":{\"172\":1}}],[\"setselectorconditions\",{\"1\":{\"80\":1}}],[\"setselectorid\",{\"1\":{\"48\":2,\"80\":1}}],[\"setstatuscode\",{\"1\":{\"93\":1,\"185\":1,\"197\":1,\"207\":1,\"214\":4,\"221\":1,\"236\":2}}],[\"setstatus\",{\"1\":{\"36\":1,\"175\":2}}],[\"settargetserviceuniquename\",{\"1\":{\"242\":1}}],[\"settimewindow\",{\"1\":{\"214\":1}}],[\"settimestamp\",{\"1\":{\"175\":1}}],[\"settimeoutduration\",{\"1\":{\"219\":2,\"220\":1}}],[\"settimeoutdurationrate\",{\"1\":{\"219\":1}}],[\"settimeout\",{\"1\":{\"100\":2}}],[\"setting\",{\"1\":{\"121\":1,\"211\":1}}],[\"settings\",{\"1\":{\"46\":1,\"96\":1,\"212\":1,\"287\":1,\"289\":1}}],[\"settransid\",{\"1\":{\"39\":1}}],[\"setdefaultexceptionhandler\",{\"1\":{\"35\":1}}],[\"set\",{\"0\":{\"117\":1},\"1\":{\"5\":1,\"30\":1,\"33\":4,\"39\":4,\"48\":1,\"82\":1,\"85\":1,\"91\":1,\"99\":1,\"101\":1,\"114\":8,\"165\":2,\"172\":1,\"174\":1,\"178\":1,\"182\":1,\"183\":2,\"184\":6,\"199\":1,\"200\":2,\"202\":2,\"212\":3,\"214\":12,\"219\":1,\"220\":1,\"221\":1,\"226\":11,\"241\":1,\"248\":2,\"310\":1,\"316\":1}}],[\"s\",{\"0\":{\"31\":1,\"38\":1,\"82\":1,\"144\":1,\"264\":1},\"1\":{\"3\":1,\"4\":1,\"5\":1,\"28\":3,\"29\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":4,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"43\":3,\"48\":15,\"57\":9,\"58\":1,\"59\":1,\"61\":1,\"64\":6,\"72\":1,\"77\":1,\"82\":4,\"86\":4,\"87\":1,\"88\":1,\"100\":3,\"104\":3,\"105\":2,\"110\":1,\"117\":1,\"120\":1,\"122\":2,\"123\":3,\"124\":1,\"126\":1,\"128\":1,\"129\":2,\"132\":2,\"133\":1,\"135\":1,\"142\":1,\"155\":2,\"162\":1,\"164\":13,\"165\":2,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":2,\"184\":1,\"191\":1,\"200\":2,\"202\":1,\"206\":1,\"207\":2,\"212\":1,\"213\":1,\"214\":2,\"219\":11,\"234\":1,\"235\":1,\"241\":3,\"242\":1,\"246\":1,\"251\":1,\"252\":1,\"253\":2,\"265\":1,\"270\":1,\"275\":1,\"276\":1,\"287\":1,\"297\":1,\"300\":2,\"304\":1,\"307\":1,\"315\":1}}],[\"pmc\",{\"1\":{\"248\":2,\"252\":1}}],[\"ps\",{\"1\":{\"182\":1,\"183\":1,\"184\":1,\"189\":1,\"195\":1,\"199\":1}}],[\"p9\",{\"1\":{\"182\":1}}],[\"php\",{\"1\":{\"300\":1}}],[\"phydeleted\",{\"1\":{\"275\":1}}],[\"physical\",{\"1\":{\"179\":1}}],[\"philosophy\",{\"1\":{\"252\":1}}],[\"phase\",{\"1\":{\"30\":1,\"32\":1,\"37\":1}}],[\"phases\",{\"1\":{\"5\":1,\"271\":1}}],[\"png\",{\"1\":{\"148\":1,\"285\":1}}],[\"pitfalls\",{\"1\":{\"164\":1}}],[\"pit\",{\"1\":{\"164\":1}}],[\"pick\",{\"1\":{\"179\":1}}],[\"pic\",{\"1\":{\"156\":4,\"160\":4,\"161\":1,\"162\":2,\"163\":1,\"164\":8,\"165\":4,\"166\":2,\"167\":1}}],[\"picture\",{\"1\":{\"48\":2,\"68\":2,\"69\":1,\"70\":1,\"71\":2,\"72\":3,\"73\":3,\"74\":4,\"132\":1,\"179\":1}}],[\"piece\",{\"1\":{\"100\":1,\"105\":1,\"226\":3,\"316\":1}}],[\"people\",{\"1\":{\"303\":1,\"314\":1,\"316\":3}}],[\"peak\",{\"1\":{\"210\":1}}],[\"pending\",{\"1\":{\"123\":4}}],[\"penalty\",{\"1\":{\"91\":2}}],[\"peripheral\",{\"1\":{\"285\":1}}],[\"periodically\",{\"1\":{\"100\":1}}],[\"period\",{\"1\":{\"5\":1,\"91\":1,\"99\":1,\"105\":1,\"184\":1,\"185\":1,\"211\":1,\"212\":3,\"213\":1,\"219\":2,\"253\":1}}],[\"percentage\",{\"1\":{\"213\":1,\"218\":1}}],[\"perceive\",{\"0\":{\"161\":1}}],[\"permitted\",{\"1\":{\"219\":1}}],[\"permittednumberofcallsinhalfopenstate\",{\"1\":{\"218\":1}}],[\"permissions\",{\"0\":{\"248\":1},\"1\":{\"248\":2}}],[\"permission\",{\"1\":{\"19\":1}}],[\"permanent\",{\"1\":{\"207\":1,\"253\":1}}],[\"per\",{\"1\":{\"189\":1,\"211\":2,\"213\":1,\"219\":1}}],[\"persist\",{\"1\":{\"83\":2,\"109\":1}}],[\"personal\",{\"1\":{\"252\":1}}],[\"person\",{\"1\":{\"5\":1,\"98\":2,\"249\":1,\"252\":1,\"253\":1}}],[\"performs\",{\"1\":{\"172\":1,\"179\":1}}],[\"performed\",{\"1\":{\"91\":1,\"205\":1,\"218\":1}}],[\"performing\",{\"1\":{\"48\":1}}],[\"perform\",{\"1\":{\"43\":1,\"48\":1,\"68\":1,\"156\":1,\"175\":1,\"207\":1,\"236\":1,\"237\":1,\"241\":1,\"295\":1}}],[\"performance\",{\"0\":{\"29\":1,\"34\":1,\"41\":1,\"307\":1,\"308\":1},\"1\":{\"19\":2,\"29\":3,\"33\":4,\"49\":1,\"65\":1,\"68\":1,\"122\":1,\"124\":2,\"131\":1,\"199\":1,\"225\":2,\"269\":2,\"270\":1,\"278\":1,\"288\":1,\"312\":1}}],[\"perfect\",{\"1\":{\"28\":1}}],[\"p\",{\"1\":{\"57\":1,\"123\":3}}],[\"plenty\",{\"1\":{\"281\":1}}],[\"pleasure\",{\"1\":{\"281\":1}}],[\"please\",{\"1\":{\"24\":1,\"43\":1,\"46\":1,\"56\":1,\"57\":2,\"193\":1,\"202\":1,\"252\":1,\"275\":1,\"309\":2,\"310\":3,\"311\":1}}],[\"plagiarism\",{\"1\":{\"253\":1}}],[\"platforms\",{\"1\":{\"252\":1}}],[\"platform\",{\"0\":{\"304\":1,\"315\":1},\"1\":{\"212\":1,\"246\":1,\"304\":1,\"315\":1}}],[\"place\",{\"1\":{\"112\":1,\"123\":1,\"124\":1}}],[\"placed\",{\"1\":{\"112\":1,\"123\":1,\"181\":1,\"184\":1,\"275\":1}}],[\"plays\",{\"1\":{\"181\":1,\"182\":1}}],[\"play\",{\"1\":{\"92\":1}}],[\"pluggability\",{\"1\":{\"316\":2}}],[\"pluggable\",{\"1\":{\"118\":1,\"119\":1,\"125\":1,\"307\":1,\"311\":2,\"316\":2}}],[\"plug\",{\"0\":{\"69\":1,\"72\":1,\"87\":1,\"150\":1,\"171\":1,\"172\":1,\"184\":1,\"185\":1,\"191\":1,\"196\":1,\"202\":1,\"221\":1,\"311\":1},\"1\":{\"68\":1,\"69\":9,\"72\":1,\"74\":1,\"81\":1,\"84\":3,\"85\":8,\"86\":10,\"87\":4,\"92\":4,\"93\":1,\"97\":1,\"104\":1,\"106\":1,\"108\":1,\"118\":2,\"119\":4,\"120\":1,\"135\":1,\"141\":1,\"149\":1,\"151\":3,\"160\":2,\"162\":3,\"165\":1,\"169\":4,\"171\":6,\"172\":5,\"176\":1,\"178\":2,\"179\":28,\"180\":7,\"181\":1,\"182\":3,\"184\":1,\"185\":6,\"187\":5,\"189\":1,\"191\":1,\"192\":2,\"193\":1,\"195\":6,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"209\":1,\"212\":5,\"214\":3,\"216\":1,\"218\":2,\"221\":3,\"225\":2,\"229\":1,\"235\":2,\"243\":1,\"294\":1,\"295\":2,\"298\":3,\"301\":1,\"303\":1,\"305\":1,\"307\":3,\"311\":3,\"312\":2,\"314\":1,\"316\":1}}],[\"pluginversion\",{\"1\":{\"261\":1}}],[\"pluginzks\",{\"1\":{\"161\":2}}],[\"pluginparent\",{\"1\":{\"161\":3}}],[\"pluginpath\",{\"1\":{\"98\":3,\"156\":2,\"161\":5}}],[\"plugintransfer\",{\"1\":{\"109\":1,\"165\":1}}],[\"pluginmapper\",{\"1\":{\"109\":2}}],[\"plugindo\",{\"1\":{\"109\":6,\"165\":1}}],[\"plugindto\",{\"1\":{\"109\":13,\"165\":4}}],[\"plugindatahandler>\",{\"1\":{\"118\":1}}],[\"plugindatahandler\",{\"1\":{\"117\":1,\"118\":4,\"119\":1,\"179\":1,\"214\":1}}],[\"plugindatarefresh\",{\"1\":{\"104\":1}}],[\"plugindatasubscriber\",{\"1\":{\"104\":9,\"117\":6,\"118\":4,\"161\":7,\"162\":1}}],[\"plugindatalist\",{\"1\":{\"98\":2,\"113\":2,\"156\":2}}],[\"plugindata\",{\"1\":{\"85\":5,\"87\":1,\"98\":1,\"104\":1,\"118\":6,\"172\":4,\"182\":4,\"195\":5}}],[\"plugincontroller\",{\"1\":{\"109\":2}}],[\"pluginconfiguration\",{\"1\":{\"86\":1}}],[\"pluginlist\",{\"1\":{\"86\":2,\"179\":1,\"207\":2}}],[\"plugin02\",{\"1\":{\"86\":1}}],[\"pluginnamed\",{\"1\":{\"214\":1}}],[\"pluginname\",{\"1\":{\"85\":11,\"161\":7,\"172\":3,\"182\":9}}],[\"pluginenum\",{\"1\":{\"80\":5,\"85\":2,\"179\":5,\"214\":3}}],[\"pluginsubscriber\",{\"1\":{\"117\":2,\"161\":3,\"166\":2}}],[\"pluginserviceimpl\",{\"1\":{\"109\":1}}],[\"pluginservice\",{\"1\":{\"97\":1,\"109\":1,\"156\":1}}],[\"plugins\",{\"1\":{\"48\":1,\"85\":1,\"86\":15,\"119\":1,\"169\":1,\"179\":5,\"207\":2,\"221\":1,\"235\":6}}],[\"plugin\",{\"0\":{\"67\":1,\"84\":1,\"140\":1,\"143\":1,\"168\":1,\"170\":1,\"180\":1,\"181\":1,\"186\":1,\"201\":1,\"209\":1,\"215\":1,\"223\":1,\"225\":1,\"227\":1,\"235\":1,\"298\":1},\"1\":{\"48\":8,\"61\":3,\"64\":18,\"72\":1,\"84\":1,\"85\":2,\"86\":8,\"87\":37,\"97\":2,\"98\":1,\"100\":1,\"104\":5,\"108\":2,\"109\":5,\"110\":2,\"111\":1,\"112\":2,\"113\":2,\"117\":1,\"118\":3,\"119\":4,\"144\":3,\"156\":2,\"157\":1,\"159\":1,\"161\":4,\"164\":5,\"165\":2,\"172\":3,\"179\":10,\"180\":1,\"181\":1,\"182\":3,\"184\":1,\"185\":1,\"195\":1,\"203\":1,\"207\":1,\"214\":3,\"218\":1,\"221\":1,\"224\":3,\"228\":1,\"235\":5,\"307\":2,\"311\":13}}],[\"pad\",{\"1\":{\"288\":1}}],[\"panorama\",{\"1\":{\"285\":1}}],[\"pair<string\",{\"1\":{\"237\":1}}],[\"pairs\",{\"1\":{\"151\":1}}],[\"pair\",{\"0\":{\"151\":1},\"1\":{\"151\":4,\"237\":5}}],[\"pattern\",{\"1\":{\"80\":1,\"84\":1,\"98\":2,\"121\":1,\"179\":1,\"195\":1,\"279\":1}}],[\"paths\",{\"1\":{\"207\":1,\"247\":1,\"289\":1}}],[\"pathvariable\",{\"1\":{\"109\":1}}],[\"path\",{\"1\":{\"43\":1,\"46\":1,\"57\":1,\"82\":9,\"85\":3,\"87\":3,\"92\":1,\"100\":1,\"104\":1,\"117\":1,\"124\":1,\"128\":1,\"132\":1,\"139\":3,\"147\":1,\"162\":2,\"164\":2,\"180\":3,\"205\":3,\"206\":1,\"207\":1,\"226\":5,\"230\":1,\"236\":1,\"237\":1,\"247\":1,\"275\":1,\"289\":1}}],[\"payment\",{\"1\":{\"275\":1}}],[\"pay\",{\"0\":{\"302\":1,\"313\":1},\"1\":{\"48\":1,\"210\":1}}],[\"pagination\",{\"1\":{\"48\":1}}],[\"pages\",{\"1\":{\"257\":2}}],[\"page\",{\"0\":{\"48\":1,\"108\":1,\"195\":1},\"1\":{\"48\":3,\"56\":1,\"106\":1,\"182\":1,\"183\":2,\"212\":1,\"229\":1,\"285\":1}}],[\"packaged\",{\"1\":{\"181\":1,\"285\":2,\"316\":1}}],[\"package=\",{\"1\":{\"43\":1}}],[\"packages\",{\"0\":{\"46\":1},\"1\":{\"43\":1,\"118\":1,\"263\":1}}],[\"package\",{\"0\":{\"126\":1},\"1\":{\"35\":1,\"36\":1,\"40\":1,\"42\":2,\"43\":1,\"54\":1,\"126\":1,\"217\":1,\"250\":1,\"270\":1,\"300\":1}}],[\"passive\",{\"1\":{\"275\":2}}],[\"passing\",{\"1\":{\"120\":1,\"123\":1,\"128\":1,\"211\":2,\"289\":1,\"312\":1}}],[\"passage\",{\"1\":{\"211\":1}}],[\"passwd\",{\"1\":{\"127\":1,\"129\":2}}],[\"password=\",{\"1\":{\"309\":1}}],[\"password\",{\"1\":{\"33\":4,\"43\":1,\"46\":2,\"56\":2,\"127\":1,\"275\":1,\"309\":2}}],[\"passed\",{\"1\":{\"100\":1,\"104\":1,\"105\":1,\"149\":1,\"151\":1,\"172\":1,\"180\":1,\"183\":1,\"211\":2,\"293\":2}}],[\"passes\",{\"1\":{\"29\":1,\"199\":2}}],[\"pass\",{\"1\":{\"48\":2,\"87\":1,\"123\":1,\"135\":1,\"175\":2,\"211\":1,\"242\":3,\"300\":1}}],[\"paste\",{\"1\":{\"96\":1}}],[\"past\",{\"1\":{\"29\":1,\"246\":1}}],[\"par\",{\"1\":{\"288\":1}}],[\"parser\",{\"1\":{\"282\":1,\"301\":2}}],[\"parseint\",{\"1\":{\"174\":1,\"176\":1}}],[\"parseboolean\",{\"1\":{\"174\":1}}],[\"parseurl\",{\"1\":{\"127\":3}}],[\"parse\",{\"1\":{\"123\":1,\"136\":1,\"139\":1}}],[\"parsing\",{\"0\":{\"76\":1,\"207\":1},\"1\":{\"207\":1,\"279\":1,\"288\":1,\"289\":1}}],[\"parentpath\",{\"1\":{\"161\":1,\"162\":2}}],[\"parent\",{\"1\":{\"100\":2,\"121\":2,\"156\":2,\"161\":1,\"214\":1,\"289\":1}}],[\"partition\",{\"0\":{\"279\":1},\"1\":{\"279\":1}}],[\"particularly\",{\"1\":{\"91\":1,\"198\":1,\"199\":1}}],[\"particular\",{\"1\":{\"40\":1}}],[\"participates\",{\"1\":{\"316\":1}}],[\"participate\",{\"1\":{\"275\":2,\"316\":2}}],[\"participating\",{\"1\":{\"28\":1}}],[\"participant\",{\"1\":{\"33\":2,\"39\":7}}],[\"participants\",{\"0\":{\"6\":1,\"8\":1},\"1\":{\"3\":1,\"40\":2,\"43\":1}}],[\"party\",{\"1\":{\"201\":1,\"263\":1}}],[\"part\",{\"0\":{\"270\":1},\"1\":{\"86\":1,\"101\":1,\"104\":1,\"106\":1,\"209\":1,\"285\":2}}],[\"parts\",{\"1\":{\"69\":1,\"214\":1,\"240\":1,\"285\":1}}],[\"parallelstream\",{\"1\":{\"104\":1}}],[\"parallel\",{\"1\":{\"62\":1}}],[\"paramcheckutils\",{\"1\":{\"237\":1}}],[\"paramplugin\",{\"1\":{\"179\":1}}],[\"params\",{\"1\":{\"104\":3,\"105\":3,\"151\":1,\"236\":2,\"242\":3,\"257\":1}}],[\"paramvalue\",{\"1\":{\"82\":1}}],[\"paramname\",{\"1\":{\"82\":1}}],[\"paramtype\",{\"1\":{\"82\":1}}],[\"paramtypeenum\",{\"1\":{\"80\":1,\"82\":1}}],[\"param\",{\"1\":{\"35\":4,\"39\":2,\"40\":3,\"77\":1,\"78\":1,\"82\":2,\"109\":3,\"112\":10,\"114\":8,\"156\":6,\"161\":9,\"165\":1,\"179\":2,\"214\":1,\"219\":1,\"234\":3,\"236\":2}}],[\"parametertypes\",{\"1\":{\"234\":4,\"236\":1,\"237\":1}}],[\"parameter\",{\"1\":{\"33\":2,\"43\":2,\"86\":1,\"96\":1,\"123\":1,\"180\":1,\"183\":1,\"197\":4,\"200\":2,\"214\":1,\"219\":2,\"222\":1,\"226\":1,\"230\":2,\"234\":5,\"237\":1,\"241\":3,\"242\":6,\"285\":1,\"287\":1,\"289\":1,\"294\":1,\"300\":2,\"301\":1,\"307\":2}}],[\"parameters\",{\"1\":{\"29\":1,\"33\":1,\"38\":1,\"43\":1,\"48\":1,\"126\":1,\"151\":3,\"171\":1,\"174\":1,\"179\":1,\"180\":1,\"183\":1,\"197\":1,\"199\":1,\"200\":1,\"213\":1,\"214\":1,\"231\":1,\"234\":3,\"236\":1,\"240\":1,\"241\":2,\"242\":5,\"243\":1,\"288\":1,\"293\":1}}],[\"poi\",{\"1\":{\"287\":1,\"288\":4,\"289\":2}}],[\"pointer\",{\"1\":{\"164\":1}}],[\"points\",{\"1\":{\"99\":1,\"128\":1,\"179\":1,\"182\":1,\"189\":1,\"195\":1}}],[\"point\",{\"1\":{\"36\":3,\"39\":4,\"48\":2,\"74\":1,\"81\":1,\"83\":2,\"86\":1,\"87\":2,\"98\":1,\"100\":1,\"101\":5,\"114\":1,\"122\":1,\"124\":1,\"156\":1,\"164\":1,\"179\":1,\"185\":1,\"212\":1,\"252\":1,\"283\":1}}],[\"poorly\",{\"1\":{\"252\":1}}],[\"pool\",{\"1\":{\"33\":2,\"36\":1,\"37\":1,\"48\":3,\"100\":4,\"101\":1,\"195\":2,\"211\":1,\"263\":1}}],[\"pojoutils\",{\"1\":{\"242\":1}}],[\"pojo\",{\"1\":{\"234\":3}}],[\"pojos\",{\"1\":{\"231\":1}}],[\"popular\",{\"0\":{\"264\":1}}],[\"popularity\",{\"1\":{\"28\":1,\"303\":1,\"314\":1}}],[\"populated\",{\"1\":{\"136\":1}}],[\"positive\",{\"1\":{\"252\":1}}],[\"positioning\",{\"1\":{\"171\":1}}],[\"pos\",{\"1\":{\"220\":1}}],[\"possible\",{\"1\":{\"101\":1,\"252\":1,\"285\":1,\"287\":11}}],[\"postgresql\",{\"1\":{\"279\":1,\"280\":1}}],[\"postforentity\",{\"1\":{\"105\":1}}],[\"posted\",{\"1\":{\"96\":1}}],[\"postmapping\",{\"1\":{\"78\":1,\"100\":1}}],[\"postman\",{\"1\":{\"73\":1,\"257\":1}}],[\"post\",{\"1\":{\"70\":1,\"77\":1,\"81\":1,\"113\":1,\"180\":1}}],[\"policy\",{\"0\":{\"265\":1},\"1\":{\"87\":1,\"112\":1,\"171\":1,\"183\":1,\"212\":1,\"213\":1,\"214\":1}}],[\"polls\",{\"0\":{\"105\":1}}],[\"poll\",{\"1\":{\"28\":1,\"105\":2}}],[\"polling\",{\"0\":{\"94\":1,\"95\":1,\"99\":1,\"100\":1,\"102\":1,\"103\":1},\"1\":{\"14\":1,\"48\":9,\"88\":1,\"97\":1,\"98\":3,\"99\":2,\"100\":2,\"101\":1,\"103\":4,\"104\":4,\"105\":2,\"112\":2,\"116\":1,\"177\":1,\"299\":1,\"312\":1}}],[\"pom\",{\"0\":{\"144\":1,\"228\":1,\"230\":1},\"1\":{\"48\":1,\"58\":1,\"59\":1,\"154\":1,\"164\":2,\"202\":1,\"203\":1,\"224\":2,\"311\":4}}],[\"portal\",{\"0\":{\"77\":1}}],[\"port\",{\"1\":{\"33\":1,\"57\":2,\"59\":1,\"62\":1,\"66\":2,\"72\":1,\"74\":1,\"164\":1,\"176\":7}}],[\"power\",{\"1\":{\"32\":1,\"33\":2}}],[\"pv\",{\"1\":{\"19\":1}}],[\"pragmatism\",{\"1\":{\"302\":1,\"313\":1}}],[\"practice\",{\"1\":{\"211\":1}}],[\"practical\",{\"1\":{\"126\":1}}],[\"pr\",{\"1\":{\"46\":1,\"80\":1,\"287\":2,\"288\":14,\"289\":5,\"316\":1}}],[\"priority\",{\"1\":{\"246\":1,\"275\":1}}],[\"privilegedaction<void>\",{\"1\":{\"126\":1}}],[\"private\",{\"1\":{\"35\":2,\"36\":3,\"40\":8,\"42\":1,\"43\":15,\"48\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":4,\"86\":2,\"92\":2,\"97\":1,\"100\":1,\"104\":6,\"105\":1,\"111\":2,\"114\":2,\"117\":3,\"118\":2,\"122\":2,\"123\":6,\"126\":2,\"127\":4,\"132\":2,\"134\":3,\"135\":1,\"136\":2,\"137\":2,\"139\":5,\"156\":5,\"161\":6,\"162\":2,\"165\":2,\"166\":1,\"174\":1,\"175\":2,\"176\":2,\"177\":1,\"184\":2,\"214\":1,\"221\":2,\"241\":1,\"275\":1,\"300\":2}}],[\"primary\",{\"1\":{\"109\":1,\"226\":1}}],[\"principles\",{\"1\":{\"253\":1,\"270\":1,\"281\":1}}],[\"principle\",{\"0\":{\"156\":1},\"1\":{\"121\":1,\"157\":1,\"159\":1,\"162\":1,\"164\":1,\"208\":2,\"249\":1,\"250\":1,\"253\":2,\"270\":1,\"277\":1,\"290\":1}}],[\"principal\",{\"0\":{\"7\":1}}],[\"printing\",{\"1\":{\"182\":2,\"212\":1}}],[\"printstacktrace\",{\"1\":{\"129\":3}}],[\"println\",{\"1\":{\"121\":1,\"122\":5,\"123\":2,\"129\":2,\"147\":1,\"179\":2,\"275\":6}}],[\"printed\",{\"1\":{\"48\":1,\"70\":1}}],[\"print\",{\"1\":{\"48\":2,\"70\":1}}],[\"preliminary\",{\"0\":{\"252\":1}}],[\"preparation\",{\"0\":{\"236\":1},\"1\":{\"224\":1}}],[\"prepare\",{\"0\":{\"50\":1},\"1\":{\"172\":1,\"226\":1}}],[\"preheating\",{\"1\":{\"211\":2}}],[\"preference\",{\"1\":{\"246\":1}}],[\"preferences\",{\"1\":{\"209\":1}}],[\"prefix\",{\"1\":{\"46\":1,\"48\":2,\"112\":2,\"117\":2,\"123\":3,\"127\":8,\"156\":1,\"166\":2,\"206\":1,\"207\":1,\"250\":1,\"251\":1}}],[\"precedence\",{\"1\":{\"187\":1}}],[\"preceding\",{\"1\":{\"70\":1,\"180\":1}}],[\"preset\",{\"1\":{\"211\":3}}],[\"present\",{\"1\":{\"101\":1,\"179\":1,\"200\":1,\"278\":1,\"316\":1}}],[\"pressure\",{\"1\":{\"212\":1}}],[\"press\",{\"0\":{\"65\":1},\"1\":{\"65\":1,\"80\":1,\"219\":1}}],[\"predicted\",{\"1\":{\"91\":1}}],[\"prevents\",{\"1\":{\"104\":1}}],[\"prevent\",{\"1\":{\"81\":1,\"105\":1,\"113\":1,\"269\":1}}],[\"previously\",{\"1\":{\"48\":3,\"122\":1,\"207\":1}}],[\"previous\",{\"1\":{\"48\":3,\"70\":1,\"81\":2,\"96\":1,\"105\":1,\"118\":1,\"124\":1,\"159\":2,\"173\":1,\"179\":1,\"187\":1,\"275\":1,\"293\":1,\"300\":1}}],[\"pre\",{\"1\":{\"32\":1,\"91\":1,\"179\":1,\"187\":1}}],[\"prometheus\",{\"1\":{\"307\":1}}],[\"promotions\",{\"1\":{\"210\":1}}],[\"promotion\",{\"1\":{\"21\":1,\"22\":1}}],[\"promote\",{\"1\":{\"3\":1,\"4\":1}}],[\"proxies\",{\"1\":{\"164\":1}}],[\"proxied\",{\"1\":{\"106\":1,\"230\":1}}],[\"proxy\",{\"1\":{\"164\":1,\"171\":2,\"182\":3,\"201\":1,\"226\":1,\"298\":2,\"305\":1}}],[\"proxy=\",{\"1\":{\"43\":1}}],[\"protection\",{\"1\":{\"212\":1,\"213\":1}}],[\"protect\",{\"1\":{\"210\":1,\"211\":1}}],[\"protected\",{\"1\":{\"87\":1,\"97\":4,\"100\":1,\"104\":1,\"118\":1,\"166\":1,\"172\":1,\"183\":1,\"197\":1,\"207\":2,\"210\":1,\"214\":1,\"221\":1,\"236\":1}}],[\"protobuf\",{\"1\":{\"279\":1}}],[\"protostuff\",{\"1\":{\"33\":4,\"34\":1}}],[\"protocolutils\",{\"1\":{\"241\":3,\"242\":4}}],[\"protocol\",{\"1\":{\"14\":1,\"68\":1,\"69\":1,\"81\":1,\"225\":1,\"226\":1,\"300\":3}}],[\"proces\",{\"1\":{\"207\":1}}],[\"processes\",{\"1\":{\"185\":1,\"210\":1,\"212\":1,\"242\":1}}],[\"processed\",{\"1\":{\"178\":1,\"207\":1,\"211\":1,\"212\":1,\"214\":1,\"312\":1}}],[\"processor\",{\"1\":{\"77\":1}}],[\"processing\",{\"0\":{\"113\":1,\"172\":1,\"185\":1},\"1\":{\"11\":1,\"69\":1,\"92\":1,\"104\":3,\"112\":1,\"113\":1,\"117\":2,\"118\":1,\"130\":1,\"165\":1,\"172\":5,\"177\":1,\"178\":1,\"179\":6,\"182\":3,\"184\":1,\"185\":2,\"187\":1,\"207\":2,\"210\":2,\"211\":1,\"212\":1,\"214\":5,\"218\":1,\"221\":1,\"226\":1,\"246\":1,\"252\":1,\"301\":1}}],[\"process\",{\"0\":{\"66\":1,\"160\":1},\"1\":{\"11\":1,\"14\":1,\"35\":1,\"69\":1,\"72\":1,\"74\":1,\"83\":2,\"84\":1,\"100\":1,\"103\":1,\"104\":2,\"105\":3,\"106\":3,\"118\":1,\"124\":1,\"159\":2,\"161\":1,\"164\":4,\"165\":2,\"172\":2,\"175\":1,\"176\":1,\"179\":3,\"181\":1,\"182\":2,\"184\":2,\"187\":1,\"195\":1,\"197\":1,\"212\":1,\"214\":2,\"226\":1,\"242\":1,\"243\":2,\"252\":1,\"312\":1}}],[\"proceed\",{\"1\":{\"36\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"36\":2,\"39\":1}}],[\"produces\",{\"1\":{\"123\":1}}],[\"produce\",{\"1\":{\"123\":1}}],[\"producertype\",{\"1\":{\"35\":2}}],[\"production\",{\"1\":{\"19\":1,\"210\":1}}],[\"products\",{\"1\":{\"19\":1}}],[\"propagates\",{\"1\":{\"316\":1}}],[\"propagation\",{\"1\":{\"34\":1}}],[\"proportion\",{\"1\":{\"212\":3,\"213\":2}}],[\"props\",{\"1\":{\"127\":1}}],[\"properly\",{\"1\":{\"57\":1,\"100\":1,\"131\":1}}],[\"property\",{\"1\":{\"48\":1,\"112\":1,\"123\":1,\"139\":1,\"179\":1,\"180\":1}}],[\"property>\",{\"1\":{\"33\":6,\"43\":1}}],[\"propertiesset\",{\"1\":{\"112\":1,\"156\":1}}],[\"properties\",{\"1\":{\"43\":1,\"127\":4,\"136\":5,\"139\":5,\"156\":1,\"166\":4,\"180\":1,\"184\":1,\"275\":1}}],[\"proper\",{\"1\":{\"39\":1}}],[\"probe\",{\"0\":{\"173\":1},\"1\":{\"174\":2,\"175\":1,\"176\":1}}],[\"probability\",{\"1\":{\"89\":1}}],[\"probably\",{\"1\":{\"32\":1,\"65\":1}}],[\"problem\",{\"0\":{\"66\":1},\"1\":{\"48\":1,\"66\":1,\"105\":1,\"129\":1,\"164\":2,\"211\":2,\"271\":1,\"283\":1,\"285\":2,\"287\":1,\"289\":1}}],[\"problems\",{\"1\":{\"11\":1,\"19\":1,\"131\":2,\"280\":1,\"285\":1,\"289\":1,\"303\":1,\"314\":1}}],[\"providers\",{\"1\":{\"123\":2}}],[\"provider\",{\"0\":{\"242\":1},\"1\":{\"43\":1,\"121\":2,\"123\":3,\"234\":2,\"240\":1,\"242\":2,\"243\":1,\"274\":1,\"275\":1}}],[\"provides\",{\"1\":{\"34\":1,\"97\":1,\"214\":1,\"217\":1,\"222\":1,\"225\":1,\"265\":1,\"278\":2,\"284\":1,\"288\":2,\"298\":1,\"299\":1,\"312\":1}}],[\"provided\",{\"1\":{\"33\":1,\"72\":1,\"104\":1,\"117\":1,\"120\":1,\"212\":1,\"230\":1,\"297\":1,\"316\":1}}],[\"provide\",{\"1\":{\"24\":1,\"46\":1,\"84\":1,\"87\":1,\"116\":1,\"212\":1,\"234\":1,\"266\":1,\"269\":1,\"276\":1,\"300\":1,\"304\":1,\"315\":1}}],[\"project\",{\"0\":{\"23\":1,\"68\":1,\"87\":1,\"245\":1,\"252\":1},\"1\":{\"19\":1,\"21\":1,\"22\":1,\"23\":4,\"43\":2,\"46\":1,\"48\":1,\"54\":1,\"72\":1,\"86\":2,\"87\":4,\"107\":1,\"109\":1,\"116\":1,\"117\":2,\"119\":3,\"132\":1,\"154\":1,\"156\":1,\"161\":1,\"164\":1,\"182\":1,\"202\":1,\"203\":1,\"218\":1,\"228\":1,\"247\":2,\"248\":4,\"252\":9,\"253\":6,\"267\":1,\"275\":2,\"304\":1,\"310\":1,\"315\":1,\"316\":3}}],[\"projects\",{\"0\":{\"19\":1,\"317\":1},\"1\":{\"19\":1,\"21\":2,\"22\":4,\"23\":2,\"68\":1,\"86\":1,\"246\":10,\"247\":1,\"252\":1,\"253\":3,\"300\":1,\"303\":1,\"314\":1,\"316\":2}}],[\"prospects\",{\"1\":{\"11\":1,\"14\":1}}],[\"programmer\",{\"1\":{\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"programmers\",{\"1\":{\"300\":2}}],[\"programming\",{\"1\":{\"11\":1,\"48\":2,\"184\":2,\"217\":1,\"221\":2,\"235\":1,\"304\":2,\"315\":2}}],[\"program\",{\"1\":{\"38\":1,\"131\":1,\"235\":1,\"300\":1,\"312\":1}}],[\"progress\",{\"1\":{\"4\":1}}],[\"punycode\",{\"1\":{\"287\":1}}],[\"punished\",{\"1\":{\"5\":1,\"91\":1}}],[\"punishment\",{\"1\":{\"5\":1,\"91\":1}}],[\"push\",{\"1\":{\"252\":1}}],[\"puzzle\",{\"1\":{\"179\":1}}],[\"purchase\",{\"1\":{\"285\":1}}],[\"pursues\",{\"1\":{\"270\":1}}],[\"pursuit\",{\"1\":{\"83\":1}}],[\"purposes\",{\"1\":{\"134\":1}}],[\"purpose\",{\"0\":{\"4\":1},\"1\":{\"156\":1,\"179\":1,\"180\":1,\"304\":1,\"315\":1}}],[\"publishconfig\",{\"1\":{\"165\":5}}],[\"publishes\",{\"1\":{\"81\":1,\"156\":1,\"165\":1}}],[\"published\",{\"1\":{\"80\":1,\"110\":1,\"113\":1,\"156\":1,\"250\":1}}],[\"publishevent\",{\"1\":{\"35\":2,\"39\":2,\"48\":5,\"79\":1,\"80\":2,\"81\":3,\"82\":2,\"109\":1,\"156\":3,\"165\":2}}],[\"publisher\",{\"1\":{\"35\":2,\"156\":1}}],[\"publish\",{\"0\":{\"110\":1},\"1\":{\"35\":1,\"79\":1,\"81\":1,\"109\":2,\"156\":1,\"157\":1,\"159\":1,\"162\":1,\"165\":1,\"303\":2,\"314\":2}}],[\"public\",{\"1\":{\"35\":5,\"36\":3,\"39\":2,\"40\":6,\"43\":1,\"48\":1,\"77\":1,\"78\":2,\"80\":1,\"82\":3,\"85\":1,\"86\":8,\"89\":1,\"90\":1,\"91\":1,\"92\":2,\"93\":1,\"97\":7,\"98\":4,\"100\":7,\"104\":6,\"105\":1,\"109\":3,\"110\":2,\"111\":4,\"112\":9,\"113\":7,\"114\":6,\"116\":2,\"117\":7,\"118\":7,\"120\":2,\"122\":6,\"123\":8,\"126\":6,\"127\":5,\"129\":2,\"132\":3,\"135\":1,\"139\":2,\"147\":1,\"156\":13,\"161\":5,\"162\":2,\"165\":4,\"166\":6,\"172\":1,\"173\":1,\"176\":1,\"177\":2,\"179\":2,\"180\":1,\"182\":1,\"184\":1,\"185\":1,\"195\":1,\"197\":1,\"207\":2,\"214\":13,\"219\":1,\"220\":1,\"221\":2,\"230\":1,\"234\":1,\"235\":2,\"237\":1,\"238\":1,\"241\":2,\"242\":2,\"275\":14,\"300\":2}}],[\"publicity\",{\"1\":{\"21\":1,\"22\":1,\"253\":1}}],[\"puts\",{\"1\":{\"288\":1}}],[\"putmapping\",{\"1\":{\"109\":1}}],[\"putall\",{\"1\":{\"93\":2,\"185\":2}}],[\"putifabsent\",{\"1\":{\"91\":2,\"132\":1,\"137\":1,\"139\":2}}],[\"put\",{\"1\":{\"32\":1,\"40\":1,\"48\":1,\"82\":3,\"87\":2,\"89\":1,\"91\":1,\"97\":1,\"100\":1,\"104\":5,\"105\":1,\"108\":1,\"114\":1,\"117\":5,\"123\":2,\"124\":1,\"126\":1,\"139\":2,\"147\":3,\"162\":1,\"165\":1,\"172\":3,\"175\":1,\"180\":2,\"183\":3,\"184\":5,\"195\":2,\"212\":1,\"237\":2,\"316\":1}}],[\"pulled\",{\"1\":{\"104\":1}}],[\"pulling\",{\"1\":{\"103\":1,\"104\":1,\"105\":1,\"211\":1}}],[\"pull\",{\"0\":{\"104\":1},\"1\":{\"28\":1,\"104\":5,\"105\":1,\"279\":1}}],[\"oh\",{\"1\":{\"285\":1}}],[\"october\",{\"1\":{\"297\":1}}],[\"occupied\",{\"1\":{\"211\":1}}],[\"occur\",{\"1\":{\"247\":1}}],[\"occurred\",{\"1\":{\"48\":1}}],[\"occurrences\",{\"1\":{\"32\":1}}],[\"occurs\",{\"0\":{\"32\":1},\"1\":{\"36\":1,\"221\":1,\"271\":1}}],[\"oc\",{\"1\":{\"166\":3}}],[\"oschina\",{\"1\":{\"244\":1}}],[\"os\",{\"1\":{\"155\":1}}],[\"observability\",{\"1\":{\"269\":1}}],[\"observe\",{\"1\":{\"162\":1}}],[\"observer\",{\"1\":{\"80\":1}}],[\"obey\",{\"1\":{\"253\":1}}],[\"obviously\",{\"1\":{\"123\":1}}],[\"obtains\",{\"1\":{\"161\":1,\"172\":1,\"199\":1}}],[\"obtainselectordata\",{\"1\":{\"85\":1,\"172\":1,\"182\":1}}],[\"obtainauthdata\",{\"1\":{\"151\":1}}],[\"obtain\",{\"1\":{\"85\":1,\"89\":1,\"105\":1,\"151\":1,\"165\":1,\"172\":2,\"173\":1,\"182\":2,\"183\":4,\"184\":3,\"198\":1}}],[\"obtainruledata\",{\"1\":{\"85\":1,\"172\":1,\"182\":1}}],[\"obtainplugindata\",{\"1\":{\"85\":1,\"172\":1,\"182\":1}}],[\"obtained\",{\"1\":{\"82\":1,\"89\":1,\"90\":1,\"112\":1,\"131\":2,\"156\":1,\"161\":1,\"173\":2,\"182\":1,\"183\":1,\"197\":1,\"198\":1,\"246\":1}}],[\"obtaining\",{\"0\":{\"147\":1},\"1\":{\"48\":1,\"289\":1}}],[\"objectutil\",{\"1\":{\"289\":1}}],[\"objectholder\",{\"1\":{\"135\":2,\"139\":6}}],[\"object>\",{\"1\":{\"134\":1,\"137\":1}}],[\"objectprovider<configservice>\",{\"1\":{\"166\":1}}],[\"objectprovider<zkclient>\",{\"1\":{\"161\":1}}],[\"objectprovider<list<authdatasubscriber>>\",{\"1\":{\"117\":1,\"161\":1,\"166\":1}}],[\"objectprovider<list<metadatasubscriber>>\",{\"1\":{\"117\":1,\"161\":1,\"166\":1}}],[\"objectprovider<list<soulplugin>>\",{\"1\":{\"86\":1,\"179\":1,\"207\":1}}],[\"objectprovider<plugindatasubscriber>\",{\"1\":{\"117\":1,\"161\":1,\"166\":1}}],[\"objectprovider<websocketconfig>\",{\"1\":{\"117\":1}}],[\"objectprovider\",{\"1\":{\"86\":1}}],[\"objects\",{\"1\":{\"39\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":2,\"85\":2,\"93\":1,\"109\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"137\":1,\"139\":3,\"172\":1,\"182\":2,\"183\":2,\"185\":1,\"195\":3,\"207\":2,\"221\":2,\"237\":2,\"238\":1}}],[\"object\",{\"0\":{\"180\":1},\"1\":{\"36\":2,\"80\":1,\"82\":3,\"92\":1,\"93\":2,\"101\":1,\"118\":1,\"122\":1,\"123\":4,\"124\":2,\"128\":1,\"131\":3,\"132\":2,\"135\":5,\"136\":1,\"137\":4,\"139\":9,\"162\":1,\"165\":1,\"172\":1,\"180\":7,\"181\":1,\"183\":2,\"184\":2,\"185\":3,\"197\":1,\"214\":1,\"221\":2,\"234\":8,\"236\":2,\"237\":2,\"238\":3,\"241\":4,\"242\":3}}],[\"o\",{\"1\":{\"48\":6,\"57\":4,\"61\":3,\"64\":18,\"133\":1,\"137\":3,\"139\":4,\"164\":6,\"219\":9}}],[\"otherwise\",{\"1\":{\"101\":1,\"175\":1,\"176\":1,\"177\":1,\"211\":1,\"221\":1}}],[\"other\",{\"0\":{\"98\":1,\"305\":1},\"1\":{\"34\":1,\"48\":1,\"74\":1,\"81\":1,\"85\":1,\"91\":2,\"98\":2,\"103\":1,\"112\":1,\"113\":1,\"119\":1,\"164\":1,\"180\":1,\"185\":1,\"201\":1,\"221\":1,\"253\":1,\"263\":1,\"267\":1,\"269\":1,\"276\":1,\"278\":1,\"300\":1,\"303\":2,\"314\":2}}],[\"others\",{\"1\":{\"22\":1}}],[\"omits\",{\"1\":{\"212\":1}}],[\"omitted\",{\"1\":{\"164\":2,\"241\":1}}],[\"om\",{\"1\":{\"33\":1}}],[\"ourselves\",{\"1\":{\"130\":1}}],[\"our\",{\"1\":{\"33\":4,\"72\":1,\"98\":1,\"100\":3,\"101\":2,\"121\":1,\"123\":1,\"124\":1,\"179\":1,\"211\":1,\"214\":1,\"267\":1,\"303\":1,\"314\":1}}],[\"outstanding\",{\"1\":{\"267\":1}}],[\"outer\",{\"1\":{\"129\":1}}],[\"outputs\",{\"1\":{\"219\":1}}],[\"output\",{\"1\":{\"57\":1,\"66\":1,\"179\":1,\"219\":1}}],[\"out\",{\"1\":{\"5\":1,\"30\":1,\"43\":1,\"48\":4,\"86\":1,\"101\":1,\"104\":2,\"106\":1,\"112\":1,\"121\":1,\"122\":5,\"123\":2,\"124\":1,\"128\":1,\"129\":3,\"147\":1,\"172\":1,\"179\":4,\"182\":2,\"183\":2,\"184\":2,\"187\":1,\"207\":1,\"211\":1,\"226\":1,\"252\":1,\"275\":6,\"279\":1,\"304\":1,\"315\":1}}],[\"opt\",{\"1\":{\"287\":1}}],[\"options\",{\"1\":{\"212\":2}}],[\"option\",{\"1\":{\"182\":1,\"229\":1}}],[\"optional\",{\"1\":{\"39\":1,\"40\":3,\"118\":3,\"162\":2,\"184\":2}}],[\"optimizations\",{\"1\":{\"263\":1}}],[\"optimization\",{\"1\":{\"104\":1,\"297\":1}}],[\"optimizes\",{\"1\":{\"288\":2}}],[\"optimize\",{\"1\":{\"80\":1,\"288\":1,\"307\":1}}],[\"optimized\",{\"0\":{\"132\":1},\"1\":{\"33\":1,\"131\":1,\"301\":1}}],[\"opportunity\",{\"0\":{\"174\":1}}],[\"opposite\",{\"1\":{\"156\":1}}],[\"operatorenum\",{\"1\":{\"80\":1,\"82\":2}}],[\"operating\",{\"1\":{\"24\":1}}],[\"operations\",{\"1\":{\"29\":1,\"48\":2,\"80\":1,\"81\":1,\"185\":1,\"187\":1,\"246\":1}}],[\"operation\",{\"0\":{\"48\":1,\"108\":1,\"159\":1},\"1\":{\"19\":1,\"22\":1,\"30\":2,\"82\":1,\"104\":1,\"164\":1,\"200\":1,\"208\":2,\"221\":2,\"225\":1,\"253\":2,\"303\":1,\"314\":1}}],[\"operates\",{\"1\":{\"162\":1}}],[\"operated\",{\"1\":{\"48\":1,\"248\":1,\"252\":1}}],[\"operate\",{\"1\":{\"24\":1,\"109\":1,\"198\":1}}],[\"openness\",{\"1\":{\"270\":1}}],[\"opendoc\",{\"1\":{\"259\":1}}],[\"openstream\",{\"1\":{\"139\":1}}],[\"opens\",{\"1\":{\"114\":1}}],[\"opened\",{\"1\":{\"70\":1,\"185\":1}}],[\"open\",{\"0\":{\"53\":1,\"304\":1,\"315\":1,\"316\":1},\"1\":{\"11\":1,\"16\":2,\"17\":2,\"18\":1,\"19\":1,\"20\":1,\"23\":1,\"28\":1,\"48\":2,\"69\":1,\"70\":2,\"86\":1,\"106\":1,\"108\":1,\"114\":2,\"212\":3,\"213\":7,\"218\":6,\"219\":2,\"220\":1,\"225\":1,\"229\":1,\"246\":1,\"251\":2,\"252\":1,\"253\":2,\"267\":1,\"270\":1,\"281\":1,\"297\":1,\"304\":1,\"306\":1,\"312\":1,\"315\":1,\"316\":7}}],[\"opening\",{\"1\":{\"11\":1,\"14\":1,\"121\":1,\"155\":1}}],[\"ownership\",{\"1\":{\"90\":1,\"253\":1}}],[\"own\",{\"0\":{\"310\":1},\"1\":{\"30\":1,\"43\":1,\"84\":1,\"86\":1,\"87\":2,\"91\":1,\"128\":1,\"206\":1,\"212\":1,\"265\":1,\"287\":1}}],[\"oldclass\",{\"1\":{\"139\":2}}],[\"oldval\",{\"1\":{\"97\":2}}],[\"old\",{\"1\":{\"21\":2,\"48\":5,\"97\":2,\"101\":1,\"276\":1,\"285\":2}}],[\"onrulesubscribe\",{\"1\":{\"118\":2,\"162\":1}}],[\"onrulechanged\",{\"1\":{\"48\":1,\"97\":2,\"111\":1,\"112\":1,\"113\":2,\"165\":4}}],[\"onchange\",{\"1\":{\"166\":1}}],[\"onclose\",{\"1\":{\"114\":2}}],[\"once\",{\"1\":{\"46\":1,\"91\":1,\"174\":1}}],[\"onmessage\",{\"1\":{\"114\":2}}],[\"onmetadatachanged\",{\"1\":{\"48\":1,\"97\":2,\"111\":1,\"112\":1,\"113\":2}}],[\"onopen\",{\"1\":{\"114\":3}}],[\"onselectorsubscribe\",{\"1\":{\"118\":2}}],[\"onselectorchanged\",{\"1\":{\"48\":1,\"97\":2,\"111\":1,\"112\":1,\"113\":2}}],[\"onsubscribe\",{\"1\":{\"104\":1,\"118\":5}}],[\"onappauthchanged\",{\"1\":{\"97\":2,\"111\":1,\"112\":1,\"113\":2,\"156\":1}}],[\"onapplicationevent\",{\"1\":{\"97\":1,\"111\":1,\"113\":1,\"156\":2,\"160\":1,\"165\":3}}],[\"onpluginchanged\",{\"1\":{\"48\":1,\"97\":5,\"98\":5,\"100\":2,\"111\":1,\"112\":1,\"113\":2}}],[\"onlyif\",{\"1\":{\"184\":1}}],[\"only\",{\"1\":{\"24\":1,\"31\":1,\"43\":1,\"69\":1,\"74\":1,\"85\":2,\"86\":2,\"88\":1,\"89\":1,\"92\":1,\"101\":1,\"104\":1,\"113\":1,\"121\":2,\"124\":1,\"128\":1,\"129\":1,\"156\":1,\"164\":2,\"172\":1,\"179\":3,\"180\":1,\"182\":1,\"195\":1,\"202\":1,\"212\":1,\"214\":2,\"218\":3,\"226\":1,\"234\":1,\"235\":1,\"265\":1,\"272\":1,\"273\":1,\"275\":1,\"276\":1,\"282\":1,\"288\":1,\"300\":1,\"303\":1,\"314\":1,\"316\":2}}],[\"online\",{\"1\":{\"5\":1,\"9\":1,\"12\":1,\"19\":1}}],[\"onerrormap\",{\"1\":{\"237\":1}}],[\"onerrorresume\",{\"1\":{\"197\":1,\"214\":1,\"221\":4}}],[\"onerror\",{\"1\":{\"114\":2,\"221\":1}}],[\"one\",{\"0\":{\"267\":1},\"1\":{\"19\":1,\"28\":1,\"48\":2,\"69\":1,\"70\":1,\"72\":2,\"81\":3,\"85\":1,\"91\":1,\"103\":1,\"104\":1,\"113\":1,\"119\":1,\"126\":1,\"128\":1,\"175\":2,\"181\":1,\"182\":1,\"184\":1,\"187\":1,\"189\":1,\"199\":1,\"200\":1,\"201\":1,\"210\":1,\"213\":1,\"214\":5,\"226\":1,\"235\":4,\"303\":1,\"312\":1,\"314\":1}}],[\"on\",{\"0\":{\"99\":1,\"104\":1,\"294\":1},\"1\":{\"5\":1,\"14\":1,\"32\":1,\"35\":1,\"46\":1,\"48\":11,\"57\":1,\"69\":1,\"70\":4,\"85\":2,\"86\":2,\"87\":1,\"90\":2,\"91\":3,\"96\":1,\"98\":1,\"100\":1,\"103\":1,\"104\":1,\"105\":3,\"106\":1,\"112\":1,\"114\":5,\"117\":2,\"118\":1,\"130\":1,\"133\":1,\"134\":1,\"155\":4,\"156\":1,\"162\":2,\"164\":5,\"169\":1,\"174\":1,\"176\":1,\"177\":3,\"179\":1,\"180\":2,\"183\":1,\"184\":1,\"185\":3,\"187\":1,\"191\":2,\"195\":1,\"199\":1,\"202\":1,\"207\":1,\"209\":1,\"210\":1,\"212\":3,\"213\":3,\"214\":3,\"217\":2,\"218\":4,\"226\":1,\"229\":1,\"235\":3,\"237\":3,\"242\":1,\"246\":1,\"252\":2,\"253\":2,\"270\":1,\"274\":1,\"279\":1,\"285\":1,\"301\":1,\"303\":1,\"314\":1,\"316\":4}}],[\"overriding\",{\"1\":{\"310\":1}}],[\"overrides\",{\"1\":{\"112\":1}}],[\"override\",{\"1\":{\"35\":1,\"36\":1,\"40\":1,\"78\":1,\"80\":1,\"82\":1,\"85\":1,\"86\":1,\"87\":1,\"92\":1,\"97\":2,\"98\":2,\"100\":5,\"104\":2,\"105\":1,\"109\":1,\"111\":2,\"112\":1,\"113\":6,\"118\":5,\"122\":2,\"156\":4,\"162\":2,\"165\":4,\"166\":1,\"207\":1,\"214\":7,\"221\":2,\"235\":2,\"236\":1,\"238\":1,\"241\":1,\"242\":1}}],[\"overtime\",{\"1\":{\"269\":1}}],[\"overload\",{\"1\":{\"288\":1}}],[\"overloaded\",{\"1\":{\"234\":1}}],[\"overly\",{\"1\":{\"38\":1}}],[\"overview\",{\"0\":{\"171\":1},\"1\":{\"134\":1,\"179\":1}}],[\"overwritable\",{\"1\":{\"97\":1}}],[\"overall\",{\"1\":{\"14\":1,\"103\":1,\"105\":1,\"132\":1,\"179\":1,\"195\":1,\"200\":1,\"304\":1,\"315\":1}}],[\"over\",{\"1\":{\"5\":1,\"100\":1,\"124\":1,\"129\":1,\"131\":2,\"134\":1,\"171\":1,\"182\":1,\"185\":1,\"199\":1}}],[\"oracle\",{\"1\":{\"269\":1,\"279\":1,\"280\":1,\"288\":1}}],[\"ordinary\",{\"1\":{\"121\":1}}],[\"ordered\",{\"1\":{\"89\":1,\"287\":1}}],[\"order\",{\"1\":{\"3\":1,\"5\":1,\"33\":2,\"70\":2,\"73\":2,\"82\":2,\"105\":1,\"106\":1,\"113\":1,\"156\":4,\"179\":4,\"187\":1,\"212\":1,\"214\":1,\"235\":1,\"241\":1,\"242\":1,\"285\":1,\"287\":1,\"303\":1,\"314\":1}}],[\"orpost\",{\"1\":{\"92\":1}}],[\"orelse\",{\"1\":{\"40\":2,\"184\":2}}],[\"originally\",{\"1\":{\"178\":1,\"285\":1}}],[\"original\",{\"1\":{\"22\":1,\"23\":1,\"246\":1,\"251\":1,\"285\":1}}],[\"oriented\",{\"1\":{\"19\":1}}],[\"or\",{\"0\":{\"37\":1},\"1\":{\"21\":1,\"22\":3,\"24\":1,\"32\":3,\"33\":2,\"46\":1,\"48\":2,\"59\":1,\"70\":5,\"72\":1,\"81\":1,\"83\":3,\"86\":1,\"89\":1,\"90\":2,\"98\":1,\"99\":1,\"101\":2,\"104\":1,\"106\":1,\"109\":1,\"116\":1,\"156\":1,\"165\":1,\"184\":1,\"210\":3,\"211\":1,\"212\":2,\"214\":8,\"241\":1,\"242\":4,\"246\":1,\"251\":1,\"252\":2,\"253\":2,\"274\":1,\"275\":2,\"293\":1,\"304\":1,\"307\":1,\"311\":1,\"315\":1,\"316\":1}}],[\"organize\",{\"1\":{\"237\":1}}],[\"organized\",{\"1\":{\"3\":1,\"316\":1}}],[\"organizational\",{\"0\":{\"253\":1},\"1\":{\"253\":4}}],[\"organizations\",{\"1\":{\"21\":1}}],[\"organization\",{\"0\":{\"251\":1},\"1\":{\"21\":1,\"23\":1,\"246\":3,\"247\":1,\"248\":2,\"251\":1,\"252\":7,\"253\":7}}],[\"org\",{\"0\":{\"241\":1},\"1\":{\"18\":1,\"20\":1,\"25\":1,\"35\":3,\"36\":3,\"40\":1,\"49\":1,\"56\":1,\"57\":1,\"130\":2,\"155\":15,\"156\":6,\"160\":2,\"161\":2,\"162\":2,\"164\":22,\"165\":2,\"166\":2,\"179\":2,\"248\":1,\"249\":1,\"250\":1,\"252\":1,\"265\":1,\"266\":1,\"275\":1,\"296\":1,\"306\":1,\"311\":3}}],[\"ofemptyable\",{\"1\":{\"287\":1}}],[\"ofseconds\",{\"1\":{\"184\":1}}],[\"ofmillis\",{\"1\":{\"92\":1,\"184\":2}}],[\"often\",{\"1\":{\"78\":1,\"210\":2}}],[\"ofnullable\",{\"1\":{\"39\":1,\"40\":2,\"118\":3,\"162\":2,\"184\":2}}],[\"offer\",{\"1\":{\"281\":1}}],[\"offers\",{\"1\":{\"34\":1,\"217\":1}}],[\"off\",{\"1\":{\"218\":1,\"220\":1,\"222\":1}}],[\"offline\",{\"1\":{\"173\":1}}],[\"offset\",{\"1\":{\"90\":3,\"177\":3}}],[\"officially\",{\"1\":{\"253\":1}}],[\"official\",{\"0\":{\"189\":1},\"1\":{\"18\":1,\"106\":1,\"162\":1,\"164\":2,\"189\":2,\"214\":1,\"217\":1,\"218\":1,\"246\":1,\"249\":1,\"251\":1,\"252\":2,\"253\":2,\"266\":1,\"296\":1,\"310\":1}}],[\"of\",{\"0\":{\"22\":1,\"35\":1,\"36\":1,\"39\":1,\"40\":1,\"68\":1,\"72\":1,\"99\":1,\"123\":1,\"147\":1,\"149\":1,\"150\":1,\"156\":2,\"174\":1,\"189\":1,\"200\":1,\"221\":1,\"267\":1,\"297\":1,\"302\":1,\"312\":1,\"313\":1},\"1\":{\"3\":4,\"4\":1,\"11\":1,\"14\":3,\"16\":1,\"19\":1,\"21\":5,\"22\":2,\"23\":2,\"24\":3,\"28\":1,\"29\":1,\"32\":1,\"33\":12,\"34\":1,\"35\":1,\"39\":1,\"43\":2,\"48\":16,\"57\":2,\"61\":1,\"64\":1,\"65\":2,\"66\":3,\"68\":1,\"69\":10,\"70\":5,\"71\":2,\"72\":2,\"74\":2,\"80\":2,\"81\":3,\"82\":1,\"83\":4,\"84\":3,\"85\":5,\"86\":7,\"87\":5,\"88\":4,\"89\":4,\"90\":1,\"91\":10,\"92\":3,\"96\":1,\"97\":5,\"98\":1,\"99\":4,\"100\":9,\"101\":7,\"103\":4,\"104\":10,\"105\":6,\"106\":2,\"110\":2,\"112\":5,\"113\":2,\"114\":2,\"116\":4,\"117\":4,\"118\":8,\"119\":5,\"120\":9,\"121\":5,\"122\":3,\"123\":4,\"124\":1,\"126\":4,\"128\":2,\"129\":2,\"130\":4,\"131\":4,\"132\":4,\"133\":3,\"134\":2,\"135\":5,\"137\":6,\"138\":2,\"139\":4,\"147\":4,\"151\":4,\"155\":1,\"156\":11,\"159\":1,\"160\":2,\"161\":2,\"162\":4,\"164\":8,\"169\":3,\"171\":1,\"172\":7,\"173\":4,\"174\":1,\"175\":3,\"177\":5,\"178\":7,\"179\":15,\"180\":10,\"181\":1,\"182\":11,\"183\":3,\"184\":4,\"185\":8,\"187\":5,\"189\":6,\"191\":2,\"192\":2,\"195\":7,\"197\":8,\"198\":4,\"199\":5,\"200\":8,\"204\":1,\"208\":2,\"209\":4,\"210\":7,\"211\":14,\"212\":16,\"213\":16,\"214\":18,\"216\":1,\"217\":2,\"218\":7,\"219\":5,\"220\":1,\"221\":4,\"226\":7,\"229\":2,\"230\":1,\"234\":6,\"235\":3,\"237\":3,\"241\":1,\"242\":1,\"243\":2,\"246\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":2,\"253\":10,\"263\":2,\"264\":1,\"265\":1,\"269\":2,\"270\":3,\"271\":3,\"273\":1,\"275\":5,\"276\":5,\"277\":1,\"278\":5,\"279\":5,\"280\":1,\"281\":2,\"282\":1,\"283\":1,\"285\":8,\"287\":1,\"288\":4,\"289\":3,\"290\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":4,\"297\":1,\"300\":2,\"301\":2,\"302\":1,\"303\":6,\"304\":3,\"307\":2,\"312\":4,\"313\":1,\"314\":6,\"315\":3,\"316\":4}}],[\"eureka\",{\"1\":{\"307\":1}}],[\"et\",{\"1\":{\"237\":1}}],[\"etcd\",{\"1\":{\"279\":1,\"280\":1}}],[\"etc\",{\"1\":{\"34\":1,\"85\":1,\"86\":1,\"92\":1,\"117\":1,\"118\":1,\"119\":1,\"157\":1,\"159\":1,\"247\":1,\"253\":2,\"269\":1,\"270\":1,\"279\":1,\"298\":1,\"301\":1,\"307\":1,\"312\":1,\"316\":2}}],[\"evaluated\",{\"1\":{\"210\":1}}],[\"evenly\",{\"1\":{\"214\":1}}],[\"even\",{\"0\":{\"46\":1},\"1\":{\"28\":1,\"32\":2,\"38\":1,\"91\":1,\"179\":1,\"211\":1,\"213\":1}}],[\"eventthread\",{\"1\":{\"155\":2}}],[\"eventtype\",{\"1\":{\"97\":8,\"98\":5,\"100\":1,\"109\":3,\"110\":1,\"112\":10,\"113\":15,\"117\":4,\"118\":3,\"165\":3}}],[\"eventtypeenum\",{\"1\":{\"35\":2,\"39\":1,\"118\":2}}],[\"eventpublisher\",{\"1\":{\"79\":1,\"81\":2,\"109\":1,\"156\":4,\"165\":2}}],[\"events\",{\"0\":{\"111\":1},\"1\":{\"32\":1,\"104\":1,\"110\":1,\"111\":1,\"156\":2,\"160\":1,\"165\":1}}],[\"eventually\",{\"1\":{\"120\":1}}],[\"eventual\",{\"1\":{\"30\":1}}],[\"event\",{\"0\":{\"2\":1,\"32\":1,\"110\":1,\"113\":1},\"1\":{\"3\":1,\"35\":3,\"48\":3,\"79\":1,\"80\":1,\"81\":2,\"97\":16,\"109\":2,\"110\":7,\"111\":13,\"112\":8,\"113\":14,\"117\":2,\"118\":3,\"155\":2,\"156\":13,\"157\":2,\"159\":2,\"160\":1,\"162\":2,\"165\":14,\"195\":1}}],[\"ever\",{\"1\":{\"19\":1}}],[\"everything\",{\"1\":{\"29\":1,\"134\":1,\"173\":1,\"276\":1}}],[\"every\",{\"1\":{\"5\":1,\"16\":1,\"48\":2,\"101\":2,\"131\":3,\"174\":1,\"178\":1,\"214\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"everyone\",{\"1\":{\"3\":1,\"4\":1,\"5\":1,\"24\":1,\"28\":1,\"267\":1,\"281\":1,\"316\":2}}],[\"edition\",{\"1\":{\"133\":1}}],[\"editing\",{\"1\":{\"121\":1}}],[\"edge\",{\"1\":{\"38\":1}}],[\"errors\",{\"1\":{\"212\":1,\"214\":2}}],[\"error\",{\"1\":{\"86\":1,\"92\":2,\"93\":9,\"105\":1,\"109\":1,\"114\":9,\"123\":2,\"139\":2,\"149\":2,\"151\":3,\"155\":1,\"164\":4,\"183\":9,\"184\":5,\"185\":9,\"197\":7,\"207\":1,\"212\":1,\"213\":1,\"214\":21,\"218\":1,\"220\":1,\"221\":1,\"236\":14,\"238\":5,\"241\":2,\"289\":2}}],[\"ervice\",{\"1\":{\"80\":1}}],[\"eq\",{\"1\":{\"82\":1}}],[\"equally\",{\"1\":{\"90\":1}}],[\"equals\",{\"1\":{\"79\":1,\"80\":4,\"81\":1,\"85\":2,\"114\":1,\"165\":1,\"180\":1,\"195\":1,\"214\":4,\"219\":1,\"241\":2,\"242\":2}}],[\"equal\",{\"1\":{\"70\":1}}],[\"equivalent\",{\"1\":{\"69\":1,\"72\":1,\"156\":1,\"316\":1}}],[\"estimated\",{\"1\":{\"214\":1}}],[\"establishment\",{\"1\":{\"155\":2}}],[\"establishing\",{\"1\":{\"117\":1}}],[\"establish\",{\"0\":{\"116\":1},\"1\":{\"156\":1,\"253\":1}}],[\"established\",{\"1\":{\"81\":1,\"155\":1}}],[\"essentially\",{\"1\":{\"29\":1}}],[\"elasticseach\",{\"1\":{\"316\":1}}],[\"elaborated\",{\"1\":{\"182\":1}}],[\"elegant\",{\"1\":{\"284\":1}}],[\"elegance\",{\"1\":{\"270\":1,\"281\":1}}],[\"element\",{\"1\":{\"231\":1}}],[\"elements\",{\"1\":{\"100\":1}}],[\"eliminated\",{\"1\":{\"81\":1}}],[\"else\",{\"1\":{\"48\":1,\"79\":2,\"80\":6,\"81\":2,\"82\":1,\"85\":1,\"86\":2,\"93\":1,\"104\":2,\"109\":1,\"123\":3,\"126\":1,\"127\":1,\"172\":1,\"175\":2,\"176\":2,\"180\":1,\"182\":1,\"184\":1,\"207\":1,\"214\":3,\"237\":1,\"241\":1,\"242\":4}}],[\"efficient\",{\"1\":{\"284\":1,\"299\":1}}],[\"effective\",{\"1\":{\"171\":1,\"220\":1,\"312\":1}}],[\"effectiveness\",{\"1\":{\"48\":1}}],[\"effect\",{\"0\":{\"195\":1},\"1\":{\"70\":1,\"122\":1,\"124\":1,\"131\":1,\"210\":1,\"214\":3,\"219\":2}}],[\"effort\",{\"1\":{\"32\":1}}],[\"e\",{\"1\":{\"40\":1,\"57\":1,\"82\":2,\"92\":4,\"104\":5,\"105\":6,\"114\":4,\"126\":1,\"129\":6,\"139\":3,\"162\":2,\"164\":1,\"176\":1,\"184\":4,\"219\":9,\"234\":2,\"242\":8}}],[\"email\",{\"1\":{\"252\":2}}],[\"emails\",{\"1\":{\"248\":1}}],[\"emailing\",{\"1\":{\"20\":1}}],[\"emptylist\",{\"1\":{\"86\":1,\"117\":2,\"161\":2,\"166\":2,\"207\":1}}],[\"empty\",{\"1\":{\"48\":1,\"86\":1,\"104\":1,\"109\":1,\"164\":1,\"165\":1,\"179\":1,\"235\":1,\"236\":1,\"237\":1,\"310\":1}}],[\"employed\",{\"1\":{\"35\":1}}],[\"embedded\",{\"1\":{\"34\":1,\"57\":1,\"164\":1,\"263\":1}}],[\"earlier\",{\"1\":{\"179\":1}}],[\"ease\",{\"1\":{\"269\":1,\"278\":2}}],[\"easier\",{\"0\":{\"46\":1},\"1\":{\"276\":1,\"316\":1}}],[\"easily\",{\"1\":{\"33\":1,\"70\":1,\"210\":1}}],[\"easy\",{\"0\":{\"27\":1,\"307\":1},\"1\":{\"120\":2,\"169\":1,\"211\":1,\"214\":1,\"270\":1,\"312\":1}}],[\"each\",{\"1\":{\"5\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":3,\"91\":2,\"97\":1,\"104\":3,\"117\":1,\"118\":1,\"119\":2,\"122\":2,\"123\":1,\"126\":1,\"134\":2,\"156\":1,\"175\":1,\"179\":2,\"180\":1,\"212\":1,\"214\":5,\"218\":1,\"219\":2,\"226\":1,\"241\":1,\"253\":5,\"285\":2,\"301\":1,\"312\":1}}],[\"env\",{\"1\":{\"275\":1}}],[\"environments\",{\"0\":{\"31\":1},\"1\":{\"40\":1}}],[\"environment\",{\"0\":{\"49\":1,\"154\":1},\"1\":{\"30\":1,\"31\":1,\"155\":6,\"164\":1,\"257\":1,\"299\":1}}],[\"engineer\",{\"1\":{\"303\":1,\"314\":1}}],[\"engine\",{\"1\":{\"226\":1}}],[\"engage\",{\"1\":{\"21\":1,\"22\":3}}],[\"enhance\",{\"1\":{\"217\":1,\"307\":1}}],[\"enhanced\",{\"0\":{\"133\":1},\"1\":{\"11\":1,\"131\":1,\"134\":1,\"307\":1}}],[\"encoding\",{\"1\":{\"287\":3}}],[\"encountered\",{\"1\":{\"164\":2,\"210\":1,\"316\":1}}],[\"encounter\",{\"1\":{\"113\":1,\"164\":1}}],[\"encapsulation\",{\"1\":{\"180\":1}}],[\"encapsulating\",{\"1\":{\"80\":1,\"197\":1}}],[\"encapsulates\",{\"1\":{\"184\":1,\"185\":1,\"214\":1}}],[\"encapsulated\",{\"1\":{\"110\":1,\"113\":1,\"180\":1,\"183\":1,\"195\":1}}],[\"encapsulate\",{\"1\":{\"93\":1,\"180\":1}}],[\"enumutil\",{\"1\":{\"288\":1}}],[\"enummap<>\",{\"1\":{\"104\":1,\"117\":1}}],[\"enummap<configgroupenum\",{\"1\":{\"104\":1,\"117\":1}}],[\"enum\",{\"1\":{\"104\":7,\"110\":5,\"117\":7}}],[\"enumeration<url>\",{\"1\":{\"139\":1}}],[\"enumeration\",{\"1\":{\"104\":1,\"110\":2,\"179\":2,\"195\":1,\"288\":1}}],[\"enums\",{\"1\":{\"35\":1,\"36\":1,\"43\":2}}],[\"endwith\",{\"1\":{\"288\":1}}],[\"endless\",{\"1\":{\"105\":1}}],[\"ending\",{\"1\":{\"97\":1}}],[\"ended\",{\"1\":{\"72\":1}}],[\"endpoint\",{\"1\":{\"57\":1,\"164\":3}}],[\"endpointlinksresolver\",{\"1\":{\"57\":1,\"164\":1}}],[\"end\",{\"0\":{\"303\":1,\"314\":1},\"1\":{\"48\":1,\"98\":1,\"100\":2,\"103\":1,\"104\":3,\"105\":1,\"144\":1,\"172\":1,\"185\":1,\"200\":3,\"213\":1,\"214\":1,\"230\":2,\"301\":1,\"303\":2,\"311\":4,\"314\":2}}],[\"energy\",{\"1\":{\"48\":1}}],[\"enough\",{\"1\":{\"48\":1,\"200\":1}}],[\"ensures\",{\"1\":{\"211\":1,\"212\":1}}],[\"ensure\",{\"0\":{\"195\":1},\"1\":{\"48\":1,\"211\":1,\"212\":1,\"214\":1}}],[\"ensuring\",{\"1\":{\"38\":1,\"39\":1,\"40\":1}}],[\"enables\",{\"1\":{\"156\":1,\"221\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"97\":1,\"112\":2,\"116\":1,\"156\":3}}],[\"enable=false\",{\"1\":{\"48\":1}}],[\"enabled\",{\"1\":{\"48\":1,\"69\":1,\"80\":1,\"82\":2,\"96\":2,\"97\":1,\"112\":4,\"116\":2,\"155\":1,\"164\":3,\"171\":1,\"182\":1,\"191\":1,\"192\":1,\"214\":2,\"221\":1,\"265\":1,\"310\":1}}],[\"enable\",{\"0\":{\"191\":1},\"1\":{\"43\":1,\"100\":1,\"104\":1,\"116\":1,\"212\":1,\"214\":2,\"218\":1,\"219\":1,\"226\":1,\"311\":1}}],[\"enlistparticipant\",{\"1\":{\"39\":1}}],[\"entrance\",{\"0\":{\"304\":1,\"315\":1},\"1\":{\"69\":1,\"117\":1,\"210\":1,\"304\":1,\"315\":1}}],[\"entryset\",{\"1\":{\"91\":1}}],[\"entry\",{\"1\":{\"40\":2,\"48\":3,\"86\":1,\"118\":1,\"132\":1,\"156\":1,\"159\":1,\"235\":1,\"289\":1}}],[\"entered\",{\"1\":{\"162\":1,\"235\":1,\"253\":1}}],[\"entering\",{\"1\":{\"48\":1}}],[\"enter\",{\"1\":{\"48\":2,\"74\":1,\"80\":1,\"85\":1,\"91\":1,\"113\":1,\"213\":3,\"214\":1}}],[\"enters\",{\"1\":{\"48\":1,\"212\":1}}],[\"enterprise\",{\"1\":{\"19\":2}}],[\"entity\",{\"1\":{\"35\":2,\"36\":1,\"40\":1,\"48\":1,\"156\":2}}],[\"entire\",{\"1\":{\"31\":1,\"179\":1,\"180\":1,\"210\":2,\"243\":1,\"253\":1,\"267\":1,\"316\":1}}],[\"enthusiast\",{\"1\":{\"16\":1}}],[\"enthusiasm\",{\"1\":{\"3\":1}}],[\"exhaustion\",{\"1\":{\"211\":1}}],[\"exactly\",{\"1\":{\"195\":1}}],[\"example\",{\"0\":{\"143\":1},\"1\":{\"86\":2,\"97\":1,\"98\":1,\"121\":1,\"165\":1,\"211\":1,\"275\":2,\"280\":1,\"285\":1,\"300\":1,\"301\":1,\"303\":1,\"314\":1,\"316\":1}}],[\"examples\",{\"1\":{\"58\":1,\"59\":2,\"62\":1,\"72\":2,\"87\":1,\"179\":1,\"218\":1,\"220\":1,\"273\":1}}],[\"examining\",{\"1\":{\"48\":1,\"132\":1}}],[\"ex\",{\"1\":{\"127\":1}}],[\"extname\",{\"1\":{\"288\":1}}],[\"ext\",{\"1\":{\"226\":2}}],[\"ext`\",{\"1\":{\"226\":1}}],[\"external\",{\"1\":{\"147\":1}}],[\"extensiable\",{\"1\":{\"316\":1}}],[\"extensible\",{\"1\":{\"297\":1,\"301\":2}}],[\"extensions\",{\"1\":{\"182\":1,\"292\":1}}],[\"extensionloader<>\",{\"1\":{\"132\":1}}],[\"extensionloader<\",{\"1\":{\"132\":1}}],[\"extensionloader<t>\",{\"1\":{\"132\":6}}],[\"extensionloader\",{\"1\":{\"120\":2,\"132\":4,\"134\":1,\"139\":1,\"177\":1,\"242\":1}}],[\"extension\",{\"0\":{\"132\":1},\"1\":{\"104\":1,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"138\":1,\"139\":1,\"177\":1,\"178\":1,\"226\":1,\"288\":1}}],[\"extent\",{\"1\":{\"211\":1,\"285\":1}}],[\"extend\",{\"1\":{\"130\":1}}],[\"extends\",{\"1\":{\"82\":3,\"100\":1,\"117\":1,\"118\":1,\"126\":1,\"214\":2}}],[\"extreme\",{\"1\":{\"211\":1,\"271\":1}}],[\"extremely\",{\"1\":{\"38\":1}}],[\"extract\",{\"1\":{\"270\":3}}],[\"extra\",{\"1\":{\"65\":1,\"101\":1,\"129\":1,\"214\":1}}],[\"exclusive\",{\"1\":{\"253\":1}}],[\"excluding\",{\"1\":{\"210\":1}}],[\"excute\",{\"1\":{\"179\":2,\"180\":2,\"182\":2,\"184\":1,\"185\":1,\"197\":1}}],[\"exchangefunction\",{\"1\":{\"92\":1}}],[\"exchange\",{\"1\":{\"85\":11,\"86\":6,\"87\":7,\"92\":15,\"93\":6,\"105\":1,\"151\":2,\"172\":12,\"179\":4,\"180\":8,\"182\":9,\"183\":11,\"184\":22,\"185\":6,\"197\":4,\"207\":9,\"214\":11,\"221\":18,\"235\":6,\"236\":13,\"237\":5,\"238\":5}}],[\"excited\",{\"1\":{\"80\":1}}],[\"excelwriter\",{\"1\":{\"288\":1}}],[\"excelbase\",{\"1\":{\"288\":1}}],[\"excelreader\",{\"1\":{\"288\":2}}],[\"excelutil\",{\"1\":{\"287\":1}}],[\"excellent\",{\"1\":{\"212\":1,\"214\":1,\"266\":1}}],[\"exceeded\",{\"1\":{\"213\":1,\"218\":1}}],[\"exceeding\",{\"1\":{\"212\":1,\"246\":1}}],[\"exceed\",{\"1\":{\"211\":1,\"214\":1}}],[\"exceeds\",{\"1\":{\"30\":1,\"211\":3,\"214\":2}}],[\"excessive\",{\"1\":{\"32\":1}}],[\"exceptions\",{\"0\":{\"37\":1},\"1\":{\"210\":1,\"280\":1}}],[\"exception\",{\"0\":{\"38\":1},\"1\":{\"36\":3,\"37\":1,\"82\":1,\"105\":1,\"109\":1,\"114\":2,\"129\":2,\"151\":1,\"164\":6,\"165\":1,\"166\":1,\"184\":1,\"213\":7,\"214\":4,\"220\":3,\"221\":1,\"234\":1,\"237\":4,\"242\":1,\"280\":2}}],[\"except\",{\"1\":{\"22\":1}}],[\"existing\",{\"1\":{\"214\":2}}],[\"exists\",{\"1\":{\"156\":3,\"161\":1,\"226\":1}}],[\"exist\",{\"1\":{\"78\":2,\"79\":4,\"81\":4,\"86\":1,\"195\":1}}],[\"exits\",{\"1\":{\"252\":1}}],[\"exiting\",{\"1\":{\"252\":2,\"253\":1}}],[\"exit\",{\"0\":{\"252\":1},\"1\":{\"32\":1,\"252\":5}}],[\"exeute\",{\"1\":{\"182\":1}}],[\"exec\",{\"1\":{\"48\":1}}],[\"executor=\",{\"1\":{\"104\":1}}],[\"executorservice\",{\"1\":{\"77\":1}}],[\"executor\",{\"1\":{\"35\":5,\"36\":6,\"104\":6,\"117\":2,\"118\":1,\"221\":3}}],[\"executes\",{\"1\":{\"166\":1,\"172\":1,\"179\":1,\"241\":1}}],[\"executequery\",{\"1\":{\"129\":2}}],[\"execute\",{\"0\":{\"199\":1},\"1\":{\"33\":2,\"36\":6,\"48\":1,\"84\":2,\"85\":9,\"86\":6,\"87\":1,\"88\":1,\"92\":4,\"93\":2,\"100\":3,\"104\":1,\"105\":1,\"156\":1,\"165\":4,\"172\":5,\"177\":1,\"178\":1,\"179\":3,\"180\":2,\"182\":3,\"183\":1,\"184\":2,\"185\":2,\"189\":2,\"197\":3,\"207\":1,\"214\":1,\"219\":1,\"221\":5,\"235\":4,\"236\":1,\"238\":2}}],[\"executed\",{\"1\":{\"32\":1,\"36\":2,\"48\":6,\"70\":1,\"156\":2,\"174\":1,\"179\":2,\"180\":1,\"181\":1,\"221\":1}}],[\"executionexception\",{\"1\":{\"40\":2}}],[\"execution\",{\"0\":{\"36\":1},\"1\":{\"32\":1,\"33\":2,\"38\":1,\"43\":1,\"70\":2,\"84\":1,\"122\":1,\"156\":1,\"179\":4,\"197\":2,\"212\":1,\"214\":1,\"221\":1,\"253\":1,\"270\":1,\"279\":1}}],[\"executing\",{\"1\":{\"21\":1,\"37\":1,\"87\":1,\"172\":2,\"180\":1,\"199\":1}}],[\"exercise\",{\"1\":{\"3\":1,\"4\":1}}],[\"expansion\",{\"1\":{\"316\":1}}],[\"expand\",{\"1\":{\"4\":1,\"169\":1}}],[\"export\",{\"1\":{\"234\":1}}],[\"exponential\",{\"1\":{\"184\":1}}],[\"exposing\",{\"1\":{\"57\":1,\"164\":1}}],[\"exposes\",{\"1\":{\"100\":1,\"101\":1}}],[\"expose\",{\"1\":{\"43\":1}}],[\"explore\",{\"1\":{\"174\":1}}],[\"exploration\",{\"0\":{\"174\":1,\"175\":1},\"1\":{\"173\":1}}],[\"explicitly\",{\"1\":{\"129\":1}}],[\"explanations\",{\"1\":{\"275\":1}}],[\"explanation\",{\"1\":{\"86\":1,\"164\":1,\"189\":1,\"197\":1}}],[\"explained\",{\"1\":{\"48\":1,\"182\":2}}],[\"explain\",{\"1\":{\"29\":1,\"91\":1,\"200\":1,\"235\":1}}],[\"expressions\",{\"1\":{\"217\":1,\"304\":1,\"315\":1}}],[\"expression\",{\"1\":{\"70\":1,\"294\":1,\"304\":1,\"315\":1}}],[\"expressive\",{\"1\":{\"3\":1}}],[\"experiment\",{\"1\":{\"122\":1}}],[\"experience\",{\"0\":{\"218\":1,\"308\":1,\"311\":1},\"1\":{\"14\":1,\"16\":1,\"96\":1,\"216\":1}}],[\"expected\",{\"1\":{\"211\":3}}],[\"expect\",{\"1\":{\"86\":1}}],[\"expenses\",{\"1\":{\"24\":1}}],[\"tps\",{\"1\":{\"307\":1}}],[\"ttl\",{\"1\":{\"200\":6}}],[\"turned\",{\"1\":{\"174\":1,\"213\":3}}],[\"turning\",{\"1\":{\"113\":1}}],[\"turn\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"179\":1,\"241\":1}}],[\"turren\",{\"1\":{\"104\":2}}],[\"tureen\",{\"1\":{\"104\":1}}],[\"tuning\",{\"0\":{\"33\":1}}],[\"t8\",{\"1\":{\"65\":2}}],[\"typename\",{\"1\":{\"288\":1}}],[\"type`\",{\"1\":{\"226\":1}}],[\"type\",{\"1\":{\"35\":3,\"70\":1,\"80\":1,\"82\":8,\"85\":2,\"86\":1,\"87\":1,\"92\":2,\"97\":1,\"104\":7,\"105\":1,\"110\":3,\"112\":8,\"113\":1,\"114\":6,\"117\":4,\"118\":3,\"119\":2,\"121\":1,\"156\":8,\"182\":1,\"184\":2,\"214\":4,\"218\":1,\"219\":1,\"226\":2,\"230\":1,\"234\":1,\"237\":2,\"242\":3}}],[\"types`\",{\"1\":{\"226\":1}}],[\"types\",{\"1\":{\"34\":1,\"82\":1,\"85\":1,\"97\":1,\"105\":2,\"110\":5,\"113\":1,\"118\":1,\"134\":1,\"180\":1,\"198\":1,\"226\":1,\"234\":1,\"237\":1,\"242\":2}}],[\"tccfileconfig\",{\"1\":{\"43\":2}}],[\"tccconfig\",{\"1\":{\"43\":1}}],[\"tcc<\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3}}],[\"tccroleenum\",{\"1\":{\"39\":2}}],[\"tccredisconfig\",{\"1\":{\"33\":6,\"43\":2,\"46\":1}}],[\"tccactionenum\",{\"1\":{\"36\":2,\"39\":1}}],[\"tcctransaction>\",{\"1\":{\"40\":3}}],[\"tcctransactioncachemanager\",{\"1\":{\"40\":7}}],[\"tcctransactioncontext\",{\"1\":{\"36\":2,\"39\":3}}],[\"tcctransaction\",{\"1\":{\"35\":6,\"36\":7,\"39\":10,\"40\":18}}],[\"tcczookeeperconfig\",{\"1\":{\"33\":2,\"43\":2}}],[\"tccmongoconfig\",{\"1\":{\"33\":2,\"43\":2}}],[\"tccdbconfig\",{\"1\":{\"33\":2,\"43\":4,\"46\":1}}],[\"tcc\",{\"0\":{\"34\":1,\"41\":1,\"42\":1},\"1\":{\"33\":9,\"35\":10,\"36\":7,\"40\":6,\"43\":9,\"44\":1,\"45\":1,\"46\":7,\"279\":4,\"282\":1,\"283\":3}}],[\"trend\",{\"1\":{\"304\":1,\"315\":1}}],[\"treemap\",{\"1\":{\"89\":5}}],[\"tree\",{\"0\":{\"42\":1}}],[\"trouble\",{\"1\":{\"304\":1,\"315\":1}}],[\"troubles\",{\"1\":{\"303\":2,\"314\":2}}],[\"truth\",{\"1\":{\"112\":1}}],[\"true\",{\"1\":{\"33\":4,\"43\":1,\"46\":1,\"80\":3,\"81\":1,\"82\":2,\"90\":1,\"91\":1,\"96\":1,\"97\":1,\"104\":3,\"112\":6,\"116\":2,\"123\":3,\"156\":1,\"161\":1,\"174\":1,\"175\":1,\"176\":1,\"182\":1,\"184\":1,\"207\":3,\"218\":1,\"232\":1,\"233\":1,\"242\":3,\"265\":1,\"275\":5,\"289\":1,\"310\":1,\"316\":1}}],[\"trial\",{\"1\":{\"253\":3}}],[\"triggers\",{\"1\":{\"214\":2}}],[\"trigger\",{\"1\":{\"212\":2,\"218\":1}}],[\"triggering\",{\"1\":{\"211\":1,\"213\":1}}],[\"triggered\",{\"1\":{\"48\":1,\"114\":1,\"126\":1,\"136\":1,\"212\":3,\"213\":2,\"214\":2}}],[\"trim\",{\"1\":{\"147\":1,\"242\":1}}],[\"tried\",{\"1\":{\"74\":1,\"105\":1,\"124\":1}}],[\"trying\",{\"1\":{\"36\":1,\"39\":1}}],[\"try\",{\"1\":{\"30\":1,\"32\":3,\"36\":4,\"37\":1,\"39\":1,\"40\":2,\"82\":1,\"91\":1,\"104\":3,\"105\":3,\"114\":3,\"123\":3,\"126\":2,\"127\":1,\"129\":3,\"139\":4,\"160\":1,\"164\":1,\"176\":3,\"193\":1,\"242\":2,\"271\":1,\"276\":1}}],[\"traditional\",{\"1\":{\"307\":1,\"316\":1}}],[\"travis\",{\"1\":{\"280\":1}}],[\"traverse\",{\"1\":{\"156\":2,\"165\":1,\"241\":1}}],[\"traversed\",{\"1\":{\"101\":1,\"113\":1,\"123\":1}}],[\"traversing\",{\"1\":{\"100\":1,\"128\":1,\"175\":2}}],[\"traversal\",{\"1\":{\"99\":1,\"101\":1}}],[\"tracked\",{\"1\":{\"179\":1}}],[\"tracks\",{\"0\":{\"160\":1},\"1\":{\"159\":1}}],[\"track\",{\"1\":{\"159\":1,\"179\":1}}],[\"tracking\",{\"1\":{\"19\":1,\"160\":1}}],[\"tracing\",{\"1\":{\"156\":1,\"182\":1}}],[\"traces\",{\"1\":{\"180\":1}}],[\"traced\",{\"1\":{\"114\":1,\"179\":1,\"180\":1}}],[\"trace\",{\"1\":{\"86\":1,\"100\":1}}],[\"traffic\",{\"1\":{\"69\":3,\"70\":6,\"210\":2,\"211\":2,\"212\":4,\"225\":1,\"312\":4}}],[\"transient\",{\"1\":{\"289\":1}}],[\"transition\",{\"1\":{\"218\":1}}],[\"transit\",{\"1\":{\"97\":1}}],[\"transmit\",{\"1\":{\"214\":1}}],[\"transmitting\",{\"1\":{\"211\":1}}],[\"transmitted\",{\"1\":{\"195\":1,\"214\":1}}],[\"transformdeferred\",{\"1\":{\"221\":3}}],[\"transform\",{\"1\":{\"214\":1}}],[\"transformer\",{\"1\":{\"214\":1}}],[\"transformmap\",{\"1\":{\"180\":1}}],[\"transformation\",{\"1\":{\"133\":1,\"276\":1}}],[\"transferred\",{\"1\":{\"247\":1}}],[\"transferring\",{\"1\":{\"246\":1,\"247\":1}}],[\"transfer\",{\"1\":{\"39\":1,\"65\":2,\"246\":1,\"249\":1,\"252\":3,\"294\":1}}],[\"translator\",{\"1\":{\"35\":1}}],[\"transactional\",{\"1\":{\"78\":1,\"109\":1,\"165\":1}}],[\"transactioncontextlocal\",{\"1\":{\"39\":1}}],[\"transactions\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"29\":2,\"33\":1,\"246\":1,\"269\":1,\"275\":2,\"316\":1}}],[\"transaction\",{\"0\":{\"34\":1,\"35\":1,\"267\":1,\"278\":1},\"1\":{\"19\":3,\"33\":2,\"34\":3,\"36\":1,\"39\":3,\"40\":2,\"43\":2,\"263\":1,\"269\":3,\"270\":4,\"271\":4,\"272\":1,\"275\":2,\"278\":2,\"279\":4,\"280\":5,\"283\":2,\"316\":1}}],[\"tac\",{\"1\":{\"276\":1,\"279\":4,\"282\":1,\"283\":2}}],[\"talk\",{\"1\":{\"207\":1,\"270\":1,\"281\":1}}],[\"tar\",{\"1\":{\"288\":1}}],[\"target\",{\"1\":{\"172\":1,\"178\":1,\"201\":1}}],[\"tars\",{\"1\":{\"80\":2,\"87\":2,\"276\":1}}],[\"taking\",{\"1\":{\"128\":1}}],[\"take\",{\"0\":{\"79\":1,\"82\":1,\"143\":1},\"1\":{\"48\":3,\"70\":1,\"82\":1,\"87\":1,\"88\":1,\"91\":1,\"92\":1,\"97\":2,\"100\":2,\"104\":1,\"120\":2,\"123\":1,\"126\":1,\"172\":1,\"173\":1,\"177\":1,\"181\":1,\"182\":1,\"184\":1,\"200\":1,\"207\":1,\"214\":1,\"304\":1,\"307\":1,\"315\":1}}],[\"takes\",{\"0\":{\"195\":1},\"1\":{\"30\":1,\"105\":1,\"212\":1,\"272\":1}}],[\"tailmap\",{\"1\":{\"89\":1}}],[\"tablemap\",{\"1\":{\"288\":1}}],[\"tables\",{\"1\":{\"80\":2,\"82\":1,\"83\":1,\"173\":1}}],[\"table\",{\"1\":{\"43\":2,\"48\":1,\"80\":2,\"81\":1,\"82\":2,\"83\":2,\"173\":2,\"175\":3,\"179\":1,\"226\":4,\"288\":1,\"295\":1,\"316\":1}}],[\"tasks\",{\"1\":{\"35\":1,\"81\":1,\"253\":1,\"276\":1}}],[\"task\",{\"1\":{\"30\":1,\"33\":4,\"48\":1,\"100\":1,\"105\":2,\"174\":3,\"175\":2,\"176\":1,\"253\":1}}],[\"tag\",{\"1\":{\"19\":1,\"237\":3,\"289\":1}}],[\"t\",{\"1\":{\"29\":1,\"30\":1,\"32\":3,\"33\":1,\"40\":2,\"42\":1,\"48\":2,\"78\":1,\"82\":1,\"86\":3,\"87\":1,\"106\":1,\"124\":1,\"126\":2,\"129\":1,\"135\":2,\"137\":2,\"139\":4,\"179\":1,\"183\":1,\"184\":3,\"192\":1,\"200\":2,\"217\":1,\"221\":4,\"275\":1,\"276\":1,\"300\":1,\"304\":1,\"311\":1,\"315\":1}}],[\"title\",{\"1\":{\"288\":1}}],[\"timing\",{\"1\":{\"280\":1}}],[\"timetamp\",{\"1\":{\"147\":3}}],[\"time++\",{\"1\":{\"105\":1}}],[\"timed\",{\"1\":{\"48\":4,\"100\":1,\"174\":1}}],[\"timeunit\",{\"1\":{\"35\":2,\"36\":2,\"77\":1,\"100\":2,\"104\":2,\"105\":2,\"174\":1,\"221\":1}}],[\"timestamps\",{\"1\":{\"200\":1}}],[\"timestamp\",{\"1\":{\"81\":1,\"147\":2,\"180\":2,\"197\":1,\"198\":2,\"200\":6,\"226\":1}}],[\"times\",{\"1\":{\"30\":1,\"33\":2,\"91\":1,\"104\":2,\"105\":2,\"124\":1,\"172\":1,\"183\":1,\"184\":1,\"210\":1,\"211\":2,\"213\":1}}],[\"timeoutms\",{\"1\":{\"275\":1}}],[\"timeout=\",{\"1\":{\"265\":1}}],[\"timeoutexception\",{\"1\":{\"221\":1}}],[\"timeoutduration\",{\"1\":{\"218\":1}}],[\"timeoutdurationrate\",{\"1\":{\"218\":1}}],[\"timeouttime\",{\"1\":{\"100\":3}}],[\"timeout\",{\"1\":{\"30\":3,\"33\":2,\"82\":1,\"92\":4,\"93\":3,\"100\":4,\"149\":1,\"151\":3,\"155\":2,\"172\":3,\"183\":3,\"184\":9,\"185\":4,\"211\":1,\"218\":2,\"219\":3,\"220\":2,\"221\":4,\"271\":1,\"280\":1}}],[\"timeouts\",{\"0\":{\"30\":1}}],[\"time\",{\"0\":{\"98\":1},\"1\":{\"10\":1,\"13\":1,\"33\":2,\"43\":2,\"48\":3,\"86\":3,\"91\":4,\"96\":1,\"99\":4,\"100\":4,\"101\":3,\"104\":2,\"105\":5,\"110\":1,\"114\":1,\"120\":1,\"131\":3,\"133\":1,\"134\":1,\"151\":2,\"164\":2,\"171\":1,\"172\":2,\"173\":1,\"174\":1,\"179\":1,\"180\":1,\"183\":2,\"184\":1,\"199\":1,\"200\":5,\"210\":1,\"211\":10,\"212\":9,\"213\":3,\"214\":3,\"217\":1,\"218\":3,\"219\":5,\"220\":1,\"225\":1,\"226\":2,\"279\":1,\"283\":1,\"289\":1,\"303\":1,\"314\":1}}],[\"tinyint\",{\"1\":{\"226\":1}}],[\"ting\",{\"1\":{\"14\":1}}],[\"tier\",{\"0\":{\"134\":1,\"135\":1,\"137\":1},\"1\":{\"135\":1}}],[\"tips\",{\"0\":{\"119\":1}}],[\"ticket\",{\"1\":{\"38\":1}}],[\"tianye\",{\"1\":{\"14\":1}}],[\"terms\",{\"1\":{\"253\":1,\"278\":1,\"316\":1}}],[\"team\",{\"0\":{\"267\":1},\"1\":{\"253\":2,\"267\":1}}],[\"tease\",{\"1\":{\"182\":1}}],[\"teasing\",{\"1\":{\"179\":2}}],[\"ten\",{\"1\":{\"200\":1}}],[\"tencent\",{\"1\":{\"10\":1,\"13\":1}}],[\"temporarily\",{\"1\":{\"179\":1}}],[\"temporary\",{\"1\":{\"173\":1}}],[\"temp\",{\"1\":{\"173\":5,\"175\":2}}],[\"template\",{\"1\":{\"84\":1,\"97\":1,\"182\":1}}],[\"tests\",{\"1\":{\"33\":4}}],[\"testing\",{\"1\":{\"29\":1,\"32\":1,\"219\":1,\"246\":1}}],[\"test\",{\"0\":{\"58\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"73\":1,\"74\":1},\"1\":{\"11\":1,\"48\":1,\"54\":1,\"58\":1,\"60\":1,\"61\":3,\"63\":1,\"64\":13,\"65\":7,\"68\":1,\"70\":1,\"73\":2,\"74\":1,\"122\":3,\"123\":4,\"129\":2,\"176\":8,\"179\":1,\"193\":1,\"219\":11,\"220\":2,\"312\":1}}],[\"text\",{\"1\":{\"5\":1}}],[\"technical\",{\"1\":{\"4\":1,\"23\":1,\"251\":1,\"253\":1}}],[\"technology\",{\"1\":{\"3\":1,\"17\":1,\"316\":2}}],[\"twice\",{\"1\":{\"104\":1}}],[\"two\",{\"0\":{\"62\":1},\"1\":{\"5\":1,\"40\":1,\"48\":1,\"64\":1,\"65\":1,\"68\":2,\"69\":2,\"74\":1,\"80\":1,\"81\":1,\"84\":1,\"85\":1,\"91\":2,\"97\":1,\"98\":1,\"103\":1,\"119\":2,\"122\":1,\"124\":1,\"131\":3,\"133\":1,\"134\":1,\"173\":1,\"174\":1,\"189\":1,\"198\":1,\"199\":1,\"200\":2,\"201\":1,\"210\":1,\"212\":1,\"219\":1,\"240\":1,\"271\":1,\"285\":1,\"289\":1,\"303\":1,\"307\":1,\"314\":1}}],[\"twelve\",{\"1\":{\"5\":1}}],[\"thus\",{\"1\":{\"195\":1,\"302\":1,\"313\":1}}],[\"threshold\",{\"1\":{\"199\":1,\"211\":6,\"212\":3,\"213\":7,\"214\":16,\"218\":2,\"219\":1}}],[\"threw\",{\"1\":{\"164\":2}}],[\"three\",{\"1\":{\"82\":1,\"87\":1,\"99\":1,\"134\":2,\"177\":1,\"184\":1,\"211\":1,\"212\":2,\"213\":1,\"214\":3,\"218\":1,\"272\":1,\"299\":1}}],[\"threadutils\",{\"1\":{\"104\":1,\"105\":2}}],[\"threadlocalutil\",{\"1\":{\"114\":5}}],[\"threadlocal\",{\"0\":{\"39\":1},\"1\":{\"39\":2,\"40\":2,\"180\":1,\"275\":1}}],[\"threadpoolexecutor\",{\"1\":{\"35\":3,\"36\":3,\"77\":1,\"104\":1}}],[\"threadpool\",{\"1\":{\"35\":1,\"36\":1}}],[\"thread\",{\"1\":{\"33\":3,\"35\":3,\"36\":4,\"37\":1,\"40\":1,\"43\":1,\"48\":10,\"65\":2,\"92\":2,\"100\":5,\"101\":1,\"104\":1,\"105\":2,\"123\":1,\"155\":2,\"199\":1,\"211\":1,\"214\":1,\"220\":1,\"263\":1,\"271\":1,\"279\":1,\"312\":1}}],[\"threadsize\",{\"1\":{\"35\":8,\"104\":3}}],[\"threads\",{\"1\":{\"33\":1,\"48\":1,\"61\":3,\"64\":18,\"65\":2,\"104\":1,\"211\":2,\"214\":4,\"219\":1}}],[\"throttling\",{\"1\":{\"214\":3,\"219\":1}}],[\"throughput\",{\"1\":{\"211\":1}}],[\"through\",{\"0\":{\"232\":1,\"242\":1},\"1\":{\"48\":2,\"68\":2,\"73\":3,\"80\":1,\"81\":2,\"82\":1,\"83\":2,\"85\":1,\"96\":1,\"100\":2,\"101\":2,\"106\":1,\"114\":1,\"124\":1,\"137\":1,\"138\":1,\"156\":1,\"165\":1,\"173\":1,\"176\":1,\"177\":2,\"179\":1,\"189\":1,\"211\":2,\"212\":2,\"214\":1,\"221\":1,\"226\":1,\"231\":1,\"232\":1,\"235\":1,\"288\":1,\"293\":2,\"312\":1}}],[\"thrown\",{\"1\":{\"220\":1,\"234\":1}}],[\"throw\",{\"0\":{\"37\":1},\"1\":{\"36\":1,\"82\":1,\"97\":1,\"104\":2,\"105\":1,\"111\":1,\"113\":1,\"123\":2,\"126\":2,\"139\":2,\"151\":1,\"156\":1,\"165\":1,\"197\":1,\"214\":1,\"220\":1,\"221\":2,\"242\":5}}],[\"throwable\",{\"1\":{\"36\":4,\"114\":1,\"123\":1,\"126\":1,\"197\":3,\"214\":8,\"221\":3}}],[\"throws\",{\"1\":{\"36\":1,\"104\":1,\"126\":2,\"127\":4,\"129\":1,\"136\":1,\"139\":2,\"166\":1,\"220\":1,\"234\":3,\"237\":1,\"241\":1,\"242\":1}}],[\"though\",{\"1\":{\"303\":1,\"314\":1}}],[\"thought\",{\"1\":{\"48\":1,\"124\":1,\"285\":1}}],[\"thoughts\",{\"1\":{\"32\":1}}],[\"thorough\",{\"1\":{\"130\":1}}],[\"those\",{\"1\":{\"5\":1,\"31\":1,\"46\":1,\"78\":1,\"246\":1}}],[\"than\",{\"0\":{\"127\":1},\"1\":{\"33\":2,\"80\":1,\"89\":1,\"90\":1,\"175\":1,\"193\":1,\"210\":1,\"211\":2,\"212\":3,\"213\":1,\"214\":1,\"219\":1,\"221\":1,\"222\":1,\"235\":1,\"285\":1}}],[\"thank\",{\"1\":{\"28\":1,\"46\":1,\"267\":1,\"285\":2}}],[\"that\",{\"0\":{\"195\":1},\"1\":{\"22\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"39\":1,\"40\":1,\"43\":1,\"46\":1,\"48\":11,\"68\":1,\"69\":3,\"70\":4,\"71\":1,\"72\":4,\"73\":1,\"74\":4,\"77\":1,\"80\":1,\"81\":3,\"84\":1,\"85\":1,\"86\":2,\"87\":1,\"89\":1,\"91\":5,\"92\":1,\"97\":1,\"98\":1,\"100\":7,\"101\":3,\"105\":3,\"106\":2,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":2,\"118\":1,\"119\":3,\"120\":2,\"121\":1,\"123\":5,\"124\":5,\"126\":1,\"128\":1,\"129\":1,\"131\":2,\"132\":2,\"133\":2,\"134\":1,\"156\":2,\"161\":1,\"162\":1,\"164\":2,\"165\":1,\"173\":1,\"176\":1,\"179\":15,\"180\":1,\"182\":4,\"184\":1,\"185\":4,\"187\":1,\"189\":2,\"191\":1,\"195\":4,\"197\":2,\"198\":2,\"199\":3,\"200\":1,\"207\":4,\"210\":5,\"211\":8,\"212\":7,\"213\":5,\"214\":13,\"217\":1,\"219\":1,\"220\":2,\"235\":1,\"246\":1,\"252\":3,\"253\":1,\"270\":2,\"284\":1,\"285\":2,\"292\":1,\"300\":1,\"301\":2,\"303\":1,\"311\":1,\"314\":1,\"316\":5}}],[\"third\",{\"1\":{\"91\":1,\"101\":1,\"139\":1,\"197\":1,\"201\":1,\"211\":1,\"263\":1}}],[\"thinking\",{\"0\":{\"99\":1,\"124\":1},\"1\":{\"100\":1,\"101\":1,\"129\":1}}],[\"think\",{\"1\":{\"80\":1,\"98\":1,\"99\":1,\"128\":1,\"129\":2,\"212\":1,\"281\":1,\"302\":1,\"312\":1,\"313\":1}}],[\"thinks\",{\"1\":{\"30\":1}}],[\"thing\",{\"1\":{\"48\":1,\"123\":2,\"135\":1,\"301\":1}}],[\"things\",{\"1\":{\"21\":1,\"22\":1,\"48\":1,\"133\":1,\"184\":1,\"241\":1,\"301\":1,\"316\":2}}],[\"this\",{\"0\":{\"46\":1,\"98\":1,\"199\":1},\"1\":{\"3\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":10,\"35\":3,\"36\":2,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"43\":6,\"48\":22,\"72\":1,\"73\":1,\"74\":1,\"77\":1,\"81\":1,\"82\":1,\"83\":2,\"85\":1,\"86\":7,\"91\":2,\"92\":5,\"96\":1,\"97\":4,\"98\":3,\"100\":10,\"101\":5,\"104\":12,\"105\":6,\"106\":1,\"109\":1,\"110\":1,\"111\":2,\"112\":7,\"114\":4,\"118\":1,\"120\":3,\"121\":1,\"122\":1,\"123\":3,\"124\":2,\"126\":1,\"129\":1,\"131\":1,\"132\":1,\"134\":1,\"137\":1,\"156\":7,\"159\":1,\"161\":4,\"162\":1,\"164\":5,\"165\":1,\"166\":1,\"174\":1,\"179\":8,\"180\":3,\"182\":3,\"183\":2,\"184\":2,\"185\":2,\"187\":1,\"189\":3,\"195\":1,\"197\":4,\"198\":1,\"199\":1,\"207\":12,\"209\":3,\"210\":4,\"211\":4,\"212\":3,\"213\":5,\"214\":6,\"218\":3,\"226\":1,\"234\":1,\"235\":7,\"253\":2,\"267\":1,\"275\":2,\"283\":2,\"285\":5,\"300\":1,\"301\":1,\"303\":3,\"304\":1,\"311\":1,\"312\":3,\"314\":3,\"315\":1}}],[\"theory\",{\"1\":{\"69\":1}}],[\"thenapply\",{\"1\":{\"237\":1}}],[\"then\",{\"1\":{\"48\":11,\"56\":1,\"73\":1,\"80\":1,\"81\":1,\"87\":1,\"92\":2,\"93\":1,\"98\":1,\"101\":2,\"105\":1,\"121\":1,\"136\":1,\"156\":3,\"164\":1,\"165\":1,\"172\":2,\"177\":1,\"185\":1,\"200\":3,\"207\":2,\"209\":1,\"212\":2,\"214\":2,\"226\":1,\"230\":1,\"236\":1,\"238\":1,\"240\":1,\"241\":2,\"243\":1,\"252\":1,\"275\":1,\"302\":1,\"307\":1,\"311\":3,\"313\":1,\"316\":2}}],[\"therefore\",{\"1\":{\"42\":1,\"48\":2,\"86\":1,\"199\":1}}],[\"there\",{\"0\":{\"38\":1,\"305\":1},\"1\":{\"36\":1,\"37\":1,\"40\":1,\"43\":1,\"48\":6,\"69\":1,\"70\":1,\"74\":1,\"80\":1,\"81\":2,\"82\":1,\"86\":2,\"87\":2,\"99\":3,\"100\":1,\"101\":4,\"104\":1,\"105\":6,\"106\":1,\"110\":3,\"112\":2,\"113\":1,\"119\":1,\"120\":1,\"121\":3,\"123\":1,\"124\":1,\"127\":1,\"129\":2,\"164\":5,\"174\":1,\"177\":2,\"182\":2,\"187\":1,\"189\":1,\"195\":1,\"199\":2,\"200\":1,\"201\":1,\"210\":2,\"211\":2,\"214\":2,\"234\":1,\"247\":1,\"273\":1,\"281\":1,\"285\":2,\"301\":1,\"304\":1,\"315\":1,\"316\":1}}],[\"theme\",{\"1\":{\"183\":1}}],[\"themselves\",{\"0\":{\"37\":1},\"1\":{\"91\":1}}],[\"them\",{\"1\":{\"32\":1,\"83\":2,\"86\":2,\"91\":1,\"117\":1,\"119\":1,\"121\":1,\"187\":1,\"214\":1,\"303\":2,\"314\":2}}],[\"these\",{\"0\":{\"41\":1},\"1\":{\"32\":1,\"48\":2,\"97\":1,\"98\":1,\"101\":3,\"104\":1,\"110\":1,\"112\":1,\"118\":1,\"119\":1,\"129\":2,\"131\":1,\"134\":1,\"212\":1,\"316\":1}}],[\"they\",{\"1\":{\"5\":1,\"48\":2,\"107\":1,\"177\":1,\"199\":1,\"210\":1,\"213\":1,\"221\":1,\"247\":1,\"252\":2,\"303\":1,\"314\":1,\"316\":1}}],[\"their\",{\"1\":{\"5\":1,\"42\":1,\"43\":1,\"86\":2,\"87\":2,\"91\":1,\"98\":1,\"122\":1,\"139\":1,\"164\":1,\"182\":1,\"209\":1,\"300\":1}}],[\"the\",{\"0\":{\"8\":1,\"37\":1,\"52\":1,\"53\":1,\"54\":1,\"60\":1,\"63\":1,\"66\":1,\"68\":1,\"79\":2,\"82\":2,\"98\":1,\"99\":1,\"105\":1,\"110\":1,\"116\":1,\"117\":1,\"147\":1,\"148\":1,\"149\":1,\"153\":1,\"159\":2,\"160\":2,\"189\":1,\"191\":1,\"194\":1,\"195\":4,\"196\":2,\"225\":1,\"232\":3,\"241\":1,\"242\":2,\"254\":3,\"264\":1,\"267\":2,\"280\":1,\"297\":1,\"308\":1,\"311\":1},\"1\":{\"3\":6,\"4\":3,\"5\":5,\"11\":2,\"14\":3,\"16\":1,\"19\":1,\"20\":1,\"21\":8,\"22\":2,\"23\":9,\"24\":3,\"28\":5,\"29\":5,\"30\":11,\"31\":1,\"32\":8,\"33\":27,\"35\":3,\"36\":3,\"37\":2,\"38\":4,\"39\":2,\"40\":5,\"42\":3,\"43\":8,\"46\":3,\"48\":119,\"54\":1,\"56\":7,\"57\":7,\"58\":1,\"59\":3,\"60\":1,\"61\":5,\"62\":1,\"63\":1,\"64\":9,\"65\":6,\"66\":4,\"68\":15,\"69\":23,\"70\":18,\"71\":1,\"72\":17,\"73\":6,\"74\":8,\"77\":7,\"78\":4,\"80\":16,\"81\":27,\"82\":19,\"83\":16,\"84\":9,\"85\":25,\"86\":25,\"87\":22,\"88\":6,\"89\":13,\"90\":20,\"91\":35,\"92\":18,\"93\":5,\"96\":9,\"97\":12,\"98\":18,\"99\":16,\"100\":51,\"101\":40,\"103\":7,\"104\":47,\"105\":39,\"106\":16,\"107\":1,\"108\":4,\"109\":6,\"110\":6,\"111\":1,\"112\":41,\"113\":15,\"114\":22,\"116\":9,\"117\":17,\"118\":22,\"119\":14,\"120\":13,\"121\":14,\"122\":14,\"123\":36,\"124\":16,\"125\":2,\"126\":15,\"127\":3,\"128\":14,\"129\":12,\"130\":7,\"131\":13,\"132\":13,\"133\":8,\"134\":2,\"135\":16,\"136\":6,\"137\":9,\"138\":4,\"139\":26,\"141\":1,\"142\":4,\"147\":3,\"151\":15,\"154\":1,\"155\":7,\"156\":54,\"157\":8,\"159\":16,\"160\":6,\"161\":27,\"162\":16,\"164\":40,\"165\":19,\"166\":10,\"169\":3,\"171\":10,\"172\":24,\"173\":23,\"174\":6,\"175\":14,\"176\":14,\"177\":22,\"178\":5,\"179\":53,\"180\":29,\"181\":4,\"182\":37,\"183\":21,\"184\":24,\"185\":28,\"187\":6,\"189\":14,\"191\":8,\"192\":6,\"193\":4,\"195\":30,\"197\":23,\"198\":12,\"199\":13,\"200\":28,\"201\":7,\"202\":4,\"203\":2,\"204\":1,\"205\":4,\"206\":8,\"207\":13,\"209\":11,\"210\":21,\"211\":64,\"212\":59,\"213\":55,\"214\":79,\"217\":4,\"218\":11,\"219\":15,\"220\":6,\"221\":4,\"222\":5,\"224\":2,\"225\":4,\"226\":16,\"229\":4,\"230\":7,\"231\":3,\"232\":2,\"234\":15,\"235\":12,\"236\":2,\"237\":4,\"240\":6,\"241\":11,\"242\":31,\"243\":8,\"246\":6,\"247\":4,\"248\":6,\"249\":3,\"250\":3,\"251\":7,\"252\":24,\"253\":26,\"263\":1,\"265\":2,\"267\":3,\"270\":8,\"271\":10,\"272\":2,\"273\":2,\"275\":17,\"276\":8,\"277\":1,\"278\":1,\"279\":2,\"280\":6,\"281\":4,\"282\":1,\"283\":3,\"285\":20,\"287\":2,\"288\":3,\"289\":2,\"290\":1,\"292\":4,\"293\":5,\"294\":1,\"295\":3,\"299\":1,\"300\":9,\"301\":10,\"303\":12,\"304\":10,\"306\":1,\"307\":9,\"309\":1,\"310\":2,\"311\":8,\"312\":13,\"314\":12,\"315\":10,\"316\":16}}],[\"together\",{\"1\":{\"252\":1,\"281\":1,\"285\":1,\"290\":1}}],[\"tomillis\",{\"1\":{\"221\":1}}],[\"torun\",{\"1\":{\"221\":2}}],[\"top\",{\"1\":{\"214\":1,\"316\":1}}],[\"topics\",{\"1\":{\"187\":1}}],[\"tonumber\",{\"1\":{\"200\":6}}],[\"token\",{\"1\":{\"189\":4,\"191\":3,\"197\":1,\"198\":1,\"199\":4,\"200\":5}}],[\"tokens+\",{\"1\":{\"200\":1}}],[\"tokensleft\",{\"1\":{\"197\":2}}],[\"tokens\",{\"1\":{\"189\":1,\"197\":1,\"198\":1,\"199\":3,\"200\":18,\"218\":3,\"219\":4}}],[\"tos\",{\"1\":{\"182\":1}}],[\"tostring\",{\"1\":{\"104\":1,\"105\":1,\"121\":1,\"183\":1,\"197\":1,\"236\":1}}],[\"touppercase\",{\"1\":{\"147\":1}}],[\"toarray\",{\"1\":{\"147\":1}}],[\"toepochmilli\",{\"1\":{\"147\":2}}],[\"toinstant\",{\"1\":{\"147\":2}}],[\"took\",{\"1\":{\"219\":1}}],[\"tool\",{\"1\":{\"120\":1,\"219\":1,\"246\":1,\"284\":1,\"285\":1}}],[\"tools\",{\"1\":{\"19\":2,\"246\":2}}],[\"too\",{\"1\":{\"91\":1,\"197\":3,\"210\":1,\"214\":4}}],[\"total=310mb\",{\"1\":{\"155\":1}}],[\"totalweight\",{\"1\":{\"90\":4,\"91\":3,\"177\":5}}],[\"total\",{\"1\":{\"90\":4,\"91\":1,\"177\":4}}],[\"told\",{\"1\":{\"304\":1,\"315\":1}}],[\"tolerance\",{\"1\":{\"212\":1,\"217\":2,\"225\":1}}],[\"tolerant\",{\"1\":{\"11\":1,\"252\":1}}],[\"tolist\",{\"1\":{\"86\":1,\"147\":1,\"165\":1,\"179\":1,\"207\":1,\"214\":4}}],[\"tojson\",{\"1\":{\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"97\":1,\"98\":1,\"113\":5,\"117\":1,\"165\":1}}],[\"todatabuffers\",{\"1\":{\"93\":1,\"185\":1}}],[\"today\",{\"1\":{\"33\":1,\"74\":1,\"77\":1,\"106\":1}}],[\"todo\",{\"1\":{\"78\":1,\"113\":1,\"114\":1}}],[\"to\",{\"0\":{\"42\":1,\"46\":2,\"51\":1,\"62\":1,\"69\":1,\"79\":1,\"80\":1,\"105\":1,\"114\":1,\"116\":1,\"153\":2,\"159\":2,\"188\":1,\"189\":1,\"195\":1,\"225\":1,\"226\":1,\"231\":1,\"240\":1,\"295\":2,\"302\":1,\"313\":1},\"1\":{\"3\":1,\"5\":4,\"11\":3,\"17\":1,\"19\":3,\"20\":1,\"22\":3,\"24\":4,\"28\":2,\"29\":4,\"30\":2,\"31\":1,\"32\":3,\"33\":3,\"35\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":2,\"42\":4,\"43\":2,\"46\":3,\"48\":31,\"56\":4,\"58\":1,\"59\":1,\"62\":1,\"65\":1,\"68\":3,\"69\":7,\"70\":8,\"71\":1,\"72\":7,\"73\":2,\"74\":3,\"77\":2,\"78\":3,\"80\":4,\"81\":12,\"82\":11,\"83\":7,\"84\":3,\"85\":4,\"86\":14,\"87\":5,\"88\":1,\"89\":4,\"90\":1,\"91\":7,\"92\":6,\"93\":2,\"96\":1,\"97\":4,\"98\":6,\"99\":3,\"100\":12,\"101\":8,\"103\":1,\"104\":16,\"105\":10,\"106\":10,\"107\":2,\"108\":1,\"109\":2,\"110\":2,\"112\":4,\"113\":4,\"114\":4,\"116\":4,\"117\":3,\"118\":7,\"119\":3,\"120\":5,\"121\":7,\"122\":4,\"123\":5,\"124\":7,\"125\":1,\"126\":2,\"127\":1,\"129\":5,\"131\":7,\"132\":1,\"133\":2,\"135\":1,\"136\":1,\"137\":1,\"139\":4,\"141\":1,\"142\":1,\"147\":2,\"151\":4,\"154\":1,\"155\":2,\"156\":20,\"157\":2,\"159\":5,\"160\":3,\"161\":1,\"162\":6,\"164\":26,\"165\":11,\"166\":5,\"169\":2,\"171\":2,\"172\":8,\"173\":3,\"174\":2,\"175\":2,\"176\":2,\"177\":6,\"178\":1,\"179\":11,\"180\":9,\"182\":10,\"183\":4,\"184\":4,\"185\":6,\"189\":2,\"191\":2,\"192\":3,\"193\":1,\"195\":3,\"197\":2,\"198\":2,\"199\":3,\"200\":4,\"201\":6,\"202\":1,\"205\":1,\"206\":2,\"207\":6,\"209\":5,\"210\":5,\"211\":16,\"212\":17,\"213\":12,\"214\":20,\"217\":4,\"218\":6,\"219\":5,\"220\":2,\"221\":10,\"224\":4,\"225\":5,\"226\":5,\"229\":1,\"230\":3,\"234\":7,\"235\":3,\"236\":1,\"237\":1,\"240\":4,\"241\":1,\"242\":7,\"243\":3,\"246\":5,\"247\":3,\"248\":1,\"249\":1,\"250\":3,\"251\":3,\"252\":11,\"253\":4,\"263\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"269\":2,\"270\":5,\"271\":3,\"272\":2,\"273\":3,\"275\":14,\"276\":3,\"277\":2,\"278\":1,\"279\":1,\"280\":2,\"281\":1,\"283\":2,\"285\":15,\"287\":6,\"288\":4,\"289\":2,\"290\":1,\"292\":1,\"294\":1,\"298\":1,\"299\":2,\"300\":10,\"301\":3,\"302\":2,\"303\":10,\"304\":5,\"307\":4,\"310\":3,\"311\":4,\"312\":7,\"313\":2,\"314\":10,\"315\":5,\"316\":7}}],[\"blue\",{\"1\":{\"312\":1}}],[\"black\",{\"1\":{\"307\":1,\"312\":1}}],[\"bloomfilter\",{\"1\":{\"288\":1}}],[\"blob\",{\"1\":{\"130\":1}}],[\"blockexception\",{\"1\":{\"214\":1}}],[\"blocked\",{\"1\":{\"99\":2,\"100\":1,\"101\":1,\"214\":1}}],[\"blocks\",{\"1\":{\"100\":1}}],[\"block\",{\"1\":{\"100\":2,\"210\":1,\"214\":2}}],[\"blockingqueue\",{\"1\":{\"100\":1}}],[\"blocking\",{\"1\":{\"48\":1,\"100\":2,\"101\":5,\"212\":1}}],[\"blockingwaitstrategy\",{\"1\":{\"35\":2}}],[\"blog\",{\"0\":{\"26\":1},\"1\":{\"189\":1,\"244\":1}}],[\"btree\",{\"1\":{\"226\":1}}],[\"bring\",{\"1\":{\"301\":1,\"303\":1,\"314\":1}}],[\"brief\",{\"1\":{\"212\":1}}],[\"briefly\",{\"1\":{\"87\":1,\"209\":1}}],[\"browser\",{\"1\":{\"288\":1}}],[\"brpc\",{\"1\":{\"276\":1,\"283\":1}}],[\"brand\",{\"1\":{\"253\":2}}],[\"branch\",{\"1\":{\"81\":1}}],[\"brain\",{\"1\":{\"121\":1}}],[\"breaker\",{\"1\":{\"212\":2,\"214\":10,\"217\":1,\"218\":7,\"221\":4,\"298\":1,\"304\":1,\"307\":1,\"311\":1,\"312\":1,\"315\":1}}],[\"break\",{\"1\":{\"97\":5,\"104\":1,\"111\":5,\"113\":5,\"118\":4,\"156\":1,\"165\":2}}],[\"breakpoint\",{\"1\":{\"48\":1,\"162\":2,\"164\":1}}],[\"breakpoints\",{\"1\":{\"48\":1}}],[\"b\",{\"1\":{\"57\":4,\"155\":1,\"164\":3,\"312\":1}}],[\"bom\",{\"1\":{\"279\":1}}],[\"borrows\",{\"1\":{\"217\":1}}],[\"bottom\",{\"0\":{\"196\":1},\"1\":{\"122\":1,\"214\":1}}],[\"bothering\",{\"1\":{\"164\":1}}],[\"both\",{\"1\":{\"29\":1,\"192\":1,\"303\":1,\"314\":1}}],[\"bodyparamplugin\",{\"1\":{\"179\":1}}],[\"bodyextractors\",{\"1\":{\"93\":1,\"185\":1}}],[\"bodyinserters\",{\"1\":{\"92\":1,\"184\":1}}],[\"body\",{\"1\":{\"92\":2,\"93\":1,\"179\":1,\"184\":1,\"185\":1,\"214\":3,\"236\":8,\"237\":4,\"293\":1,\"300\":1}}],[\"box\",{\"1\":{\"48\":1,\"270\":1}}],[\"boolean\",{\"1\":{\"80\":3,\"82\":2,\"86\":1,\"90\":1,\"104\":6,\"123\":2,\"151\":2,\"156\":1,\"174\":2,\"175\":1,\"176\":3,\"177\":1,\"179\":1,\"197\":1,\"235\":1,\"241\":1}}],[\"boot<\",{\"1\":{\"310\":2}}],[\"boot\",{\"0\":{\"46\":1},\"1\":{\"34\":1,\"46\":3,\"59\":1,\"86\":3,\"87\":17,\"117\":1,\"144\":1,\"154\":1,\"161\":2,\"164\":2,\"166\":1,\"203\":1,\"218\":1,\"228\":1,\"230\":2,\"269\":1,\"270\":1,\"271\":1,\"274\":1,\"278\":1,\"280\":1,\"310\":4,\"311\":4}}],[\"bootstrapsoul\",{\"1\":{\"164\":1}}],[\"bootstrappom\",{\"1\":{\"86\":1}}],[\"bootstrap\",{\"0\":{\"57\":1,\"114\":1,\"153\":1,\"161\":1,\"162\":1,\"166\":1,\"228\":1,\"309\":1},\"1\":{\"33\":1,\"43\":1,\"48\":12,\"57\":2,\"61\":1,\"64\":1,\"68\":3,\"86\":1,\"106\":3,\"114\":1,\"117\":1,\"154\":3,\"155\":1,\"159\":1,\"161\":3,\"162\":1,\"164\":12,\"166\":2,\"202\":1,\"203\":1,\"218\":1,\"224\":1,\"230\":1,\"309\":1,\"310\":1}}],[\"book\",{\"0\":{\"1\":1,\"2\":1},\"1\":{\"1\":1,\"121\":1}}],[\"boundary\",{\"1\":{\"211\":1}}],[\"bound\",{\"1\":{\"31\":1}}],[\"buy\",{\"1\":{\"285\":1}}],[\"buying\",{\"1\":{\"38\":1}}],[\"buddy\",{\"1\":{\"257\":3}}],[\"burden\",{\"1\":{\"285\":1}}],[\"burstcapacity\",{\"1\":{\"197\":2}}],[\"bury\",{\"1\":{\"179\":1}}],[\"bucket\",{\"1\":{\"189\":4,\"191\":3,\"199\":3}}],[\"bugs\",{\"0\":{\"271\":1,\"280\":1},\"1\":{\"267\":1,\"280\":1,\"281\":1}}],[\"bug\",{\"0\":{\"131\":1},\"1\":{\"210\":1,\"263\":1,\"271\":1,\"280\":3,\"285\":1,\"292\":1,\"307\":3}}],[\"busy\",{\"1\":{\"98\":1}}],[\"business\",{\"1\":{\"69\":1,\"80\":1,\"82\":1,\"106\":1,\"210\":4,\"212\":1,\"269\":2,\"301\":2,\"303\":1,\"314\":1}}],[\"built\",{\"1\":{\"37\":1,\"48\":2,\"82\":1,\"121\":1,\"122\":1,\"155\":1,\"169\":1}}],[\"building\",{\"0\":{\"281\":1},\"1\":{\"278\":1}}],[\"buildparameter\",{\"1\":{\"237\":1}}],[\"buildparamsmap\",{\"1\":{\"151\":1}}],[\"buildplugindo\",{\"1\":{\"109\":1}}],[\"buildpluginpath\",{\"1\":{\"98\":1,\"161\":1}}],[\"buildmediatype\",{\"1\":{\"92\":1,\"184\":1}}],[\"buildrealpath\",{\"1\":{\"162\":1}}],[\"buildrealurl\",{\"1\":{\"87\":1,\"172\":1,\"183\":1}}],[\"buildruleparentpath\",{\"1\":{\"98\":1}}],[\"buildruleconditiondo\",{\"1\":{\"82\":1}}],[\"buildruledo\",{\"1\":{\"82\":1}}],[\"builddomain\",{\"1\":{\"87\":1,\"172\":1,\"183\":1}}],[\"builddivideupstream\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\"buildspringcloudselectorhandle\",{\"1\":{\"80\":1}}],[\"buildselectorparentpath\",{\"1\":{\"98\":1}}],[\"buildselectorconditiondo\",{\"1\":{\"48\":2,\"80\":1}}],[\"buildselectordo\",{\"1\":{\"48\":1,\"80\":1}}],[\"builder\",{\"1\":{\"80\":1,\"82\":2,\"180\":2}}],[\"buildbyname\",{\"1\":{\"79\":1,\"81\":1}}],[\"buildtcctransaction\",{\"1\":{\"39\":1}}],[\"build\",{\"0\":{\"310\":1},\"1\":{\"17\":1,\"19\":1,\"39\":1,\"40\":1,\"80\":1,\"82\":2,\"92\":3,\"105\":1,\"117\":2,\"180\":2,\"183\":1,\"195\":1,\"207\":2,\"221\":6,\"280\":1,\"288\":1}}],[\"buffer\",{\"1\":{\"33\":2,\"35\":1,\"218\":1}}],[\"buffersize\",{\"1\":{\"33\":2,\"35\":4,\"43\":2,\"275\":1}}],[\"but\",{\"1\":{\"22\":1,\"30\":2,\"40\":1,\"48\":1,\"66\":1,\"86\":1,\"87\":1,\"88\":1,\"100\":1,\"101\":2,\"104\":1,\"105\":1,\"120\":1,\"121\":1,\"123\":1,\"124\":4,\"127\":1,\"164\":1,\"173\":1,\"179\":1,\"195\":1,\"200\":1,\"210\":2,\"211\":1,\"214\":3,\"253\":1,\"275\":1,\"284\":1,\"285\":1,\"303\":1,\"304\":1,\"311\":1,\"314\":1,\"315\":1,\"316\":4}}],[\"bilibili\",{\"1\":{\"257\":1}}],[\"billion\",{\"1\":{\"19\":1}}],[\"bigexcelwriter\",{\"1\":{\"287\":1}}],[\"big\",{\"1\":{\"246\":1}}],[\"biggest\",{\"1\":{\"105\":1,\"312\":1}}],[\"bigger\",{\"1\":{\"4\":2}}],[\"bin\",{\"1\":{\"155\":3}}],[\"bind\",{\"1\":{\"29\":1}}],[\"bit\",{\"1\":{\"91\":1,\"200\":1}}],[\"byin\",{\"1\":{\"275\":1}}],[\"byte\",{\"1\":{\"241\":2,\"242\":2}}],[\"byteimg\",{\"1\":{\"182\":1}}],[\"by\",{\"1\":{\"11\":10,\"14\":10,\"20\":1,\"23\":1,\"29\":1,\"40\":1,\"43\":1,\"48\":3,\"69\":1,\"72\":2,\"77\":1,\"81\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":3,\"87\":1,\"89\":1,\"90\":1,\"97\":2,\"99\":2,\"100\":1,\"104\":1,\"105\":1,\"106\":2,\"107\":1,\"110\":1,\"112\":1,\"118\":1,\"120\":1,\"121\":1,\"123\":1,\"124\":1,\"125\":1,\"128\":2,\"130\":1,\"132\":1,\"155\":1,\"161\":1,\"162\":1,\"164\":3,\"171\":1,\"174\":2,\"175\":1,\"176\":1,\"177\":3,\"178\":2,\"179\":2,\"180\":1,\"181\":1,\"182\":2,\"183\":1,\"185\":1,\"195\":1,\"197\":1,\"199\":1,\"200\":4,\"207\":3,\"210\":3,\"211\":2,\"212\":2,\"213\":1,\"214\":5,\"220\":1,\"221\":1,\"222\":1,\"231\":2,\"234\":1,\"235\":3,\"236\":1,\"246\":1,\"247\":1,\"253\":2,\"269\":1,\"272\":1,\"275\":1,\"280\":1,\"285\":2,\"287\":1,\"300\":2,\"304\":1,\"307\":1,\"312\":1,\"315\":1,\"316\":2}}],[\"barservice\",{\"1\":{\"233\":2}}],[\"bad\",{\"1\":{\"93\":1,\"185\":1,\"253\":1}}],[\"basis\",{\"1\":{\"91\":1,\"214\":1}}],[\"basically\",{\"1\":{\"100\":1}}],[\"basic\",{\"0\":{\"246\":1},\"1\":{\"69\":1,\"74\":1,\"84\":1,\"101\":1,\"246\":1,\"270\":1}}],[\"base62\",{\"1\":{\"287\":1}}],[\"base58\",{\"1\":{\"287\":1}}],[\"base32\",{\"1\":{\"287\":1,\"288\":1}}],[\"base\",{\"1\":{\"43\":1,\"57\":1,\"61\":2,\"64\":12,\"87\":1,\"118\":1,\"119\":2,\"164\":1,\"272\":1}}],[\"basedatacache\",{\"1\":{\"85\":3,\"118\":3,\"172\":3,\"182\":4}}],[\"based\",{\"1\":{\"5\":1,\"14\":1,\"33\":1,\"35\":1,\"48\":2,\"70\":4,\"86\":1,\"91\":1,\"100\":1,\"117\":2,\"118\":1,\"133\":1,\"177\":3,\"183\":1,\"185\":3,\"191\":2,\"195\":1,\"199\":1,\"207\":1,\"214\":2,\"217\":1,\"218\":2,\"237\":3,\"242\":1,\"303\":1,\"314\":1,\"316\":1}}],[\"balancing\",{\"0\":{\"74\":1,\"84\":1,\"88\":1,\"177\":1,\"265\":1},\"1\":{\"69\":1,\"72\":1,\"74\":1,\"87\":3,\"88\":1,\"89\":1,\"120\":1,\"135\":1,\"171\":1,\"172\":4,\"177\":5,\"178\":3,\"183\":2,\"225\":1,\"263\":1,\"265\":1,\"307\":1}}],[\"balancer\",{\"1\":{\"120\":1}}],[\"balance\",{\"0\":{\"62\":1,\"64\":1},\"1\":{\"64\":1,\"303\":1,\"314\":1}}],[\"balanced\",{\"1\":{\"40\":1,\"171\":1}}],[\"backward\",{\"1\":{\"214\":1,\"287\":1}}],[\"backoff\",{\"1\":{\"184\":2}}],[\"back\",{\"0\":{\"303\":1,\"314\":1},\"1\":{\"81\":2,\"86\":1,\"100\":1,\"105\":1,\"113\":2,\"114\":1,\"172\":1,\"179\":1,\"182\":1,\"211\":1,\"212\":2,\"213\":1,\"214\":1,\"252\":1,\"303\":2,\"314\":2}}],[\"backend\",{\"0\":{\"59\":1,\"62\":1},\"1\":{\"48\":3,\"65\":1,\"117\":1,\"230\":1}}],[\"background\",{\"0\":{\"3\":1,\"95\":1,\"103\":1,\"109\":1,\"115\":1,\"116\":1,\"195\":1},\"1\":{\"48\":3,\"68\":1,\"86\":1,\"88\":2,\"96\":2,\"97\":1,\"99\":4,\"100\":2,\"101\":7,\"104\":6,\"105\":8,\"108\":1,\"116\":1,\"117\":1,\"118\":1,\"155\":1,\"160\":1,\"162\":1,\"202\":1,\"229\":1}}],[\"believe\",{\"1\":{\"303\":1,\"314\":1}}],[\"below\",{\"1\":{\"48\":3,\"70\":1,\"164\":1,\"214\":1,\"219\":9,\"264\":1}}],[\"besides\",{\"1\":{\"275\":1}}],[\"best\",{\"1\":{\"32\":1,\"38\":1,\"48\":1}}],[\"bear\",{\"1\":{\"211\":1}}],[\"beancopier\",{\"1\":{\"285\":1,\"287\":1}}],[\"beancreationexception\",{\"1\":{\"164\":1}}],[\"beanname\",{\"1\":{\"207\":1}}],[\"beanfactoryutils\",{\"1\":{\"207\":3}}],[\"beaninstantiationexception\",{\"1\":{\"164\":2}}],[\"beansoftypeincludingancestors\",{\"1\":{\"207\":3}}],[\"beans\",{\"1\":{\"35\":2,\"36\":1,\"86\":2,\"87\":2,\"97\":1,\"112\":1,\"117\":2,\"118\":1,\"156\":1,\"164\":9,\"165\":1,\"207\":2}}],[\"bean\",{\"1\":{\"35\":2,\"36\":2,\"40\":1,\"43\":1,\"77\":1,\"86\":3,\"87\":1,\"97\":2,\"112\":7,\"116\":2,\"117\":3,\"156\":4,\"161\":3,\"164\":2,\"166\":3,\"207\":1,\"241\":2,\"242\":2,\"285\":1,\"287\":1,\"300\":1,\"310\":1}}],[\"bean>\",{\"1\":{\"33\":7,\"43\":2}}],[\"behavior\",{\"1\":{\"142\":1,\"214\":1}}],[\"behind\",{\"1\":{\"69\":1,\"110\":1,\"316\":1}}],[\"beneath\",{\"1\":{\"57\":1,\"164\":1}}],[\"between\",{\"0\":{\"95\":1,\"103\":1,\"115\":1},\"1\":{\"48\":1,\"101\":1,\"105\":1,\"136\":1,\"151\":1,\"177\":1,\"179\":1,\"200\":1,\"211\":1,\"272\":1,\"312\":1}}],[\"better\",{\"1\":{\"24\":1,\"28\":1,\"133\":1,\"214\":1,\"276\":1}}],[\"beginning\",{\"1\":{\"101\":1,\"201\":1,\"316\":2}}],[\"begin\",{\"1\":{\"36\":1,\"39\":2}}],[\"being\",{\"1\":{\"32\":1,\"81\":1,\"89\":1,\"91\":1,\"100\":1,\"104\":1,\"211\":1}}],[\"before\",{\"0\":{\"32\":1,\"295\":1},\"1\":{\"43\":1,\"48\":1,\"104\":1,\"120\":1,\"123\":2,\"124\":1,\"129\":1,\"179\":1,\"187\":1,\"197\":1,\"207\":1,\"246\":1,\"252\":1,\"253\":1}}],[\"because\",{\"1\":{\"30\":1,\"37\":1,\"40\":1,\"48\":2,\"65\":1,\"81\":1,\"112\":1,\"124\":2,\"164\":1,\"197\":1,\"198\":1,\"276\":1,\"295\":1,\"312\":1}}],[\"becomes\",{\"1\":{\"235\":1}}],[\"become\",{\"1\":{\"24\":1,\"213\":1,\"303\":1,\"314\":1}}],[\"been\",{\"0\":{\"81\":1},\"1\":{\"29\":1,\"33\":1,\"42\":1,\"46\":1,\"48\":4,\"57\":1,\"80\":1,\"81\":3,\"82\":1,\"87\":1,\"91\":1,\"100\":2,\"104\":1,\"105\":1,\"129\":1,\"164\":1,\"182\":1,\"187\":1,\"193\":1,\"195\":1,\"197\":1,\"200\":1,\"207\":1,\"275\":1,\"283\":1,\"285\":1,\"292\":1,\"293\":1,\"297\":1,\"301\":1,\"306\":2}}],[\"be\",{\"0\":{\"139\":1},\"1\":{\"5\":2,\"23\":4,\"24\":1,\"33\":5,\"35\":1,\"40\":2,\"48\":14,\"57\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"77\":1,\"80\":1,\"81\":4,\"84\":1,\"85\":1,\"86\":3,\"91\":5,\"97\":2,\"99\":2,\"100\":3,\"101\":5,\"104\":6,\"105\":3,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"112\":1,\"114\":4,\"116\":1,\"118\":1,\"122\":1,\"123\":7,\"124\":3,\"126\":1,\"129\":2,\"131\":2,\"132\":2,\"139\":2,\"147\":2,\"151\":2,\"154\":1,\"156\":3,\"159\":1,\"160\":1,\"161\":1,\"164\":5,\"165\":1,\"171\":1,\"172\":3,\"174\":1,\"176\":2,\"177\":3,\"178\":1,\"179\":4,\"180\":4,\"182\":6,\"184\":1,\"185\":1,\"189\":1,\"191\":1,\"195\":2,\"197\":1,\"199\":2,\"200\":1,\"202\":1,\"205\":2,\"210\":4,\"211\":4,\"212\":6,\"213\":9,\"214\":7,\"217\":1,\"218\":2,\"219\":1,\"222\":1,\"226\":3,\"231\":1,\"235\":1,\"243\":1,\"246\":5,\"247\":1,\"248\":2,\"250\":1,\"252\":2,\"253\":2,\"273\":1,\"275\":4,\"276\":2,\"282\":2,\"283\":2,\"285\":3,\"294\":1,\"300\":1,\"301\":1,\"303\":1,\"304\":1,\"307\":1,\"312\":2,\"314\":1,\"315\":1,\"316\":3}}],[\"2==0\",{\"1\":{\"220\":1}}],[\"261\",{\"1\":{\"155\":1}}],[\"26379\",{\"1\":{\"33\":6,\"46\":3}}],[\"28\",{\"1\":{\"65\":1,\"219\":1}}],[\"29812\",{\"1\":{\"61\":3,\"64\":18}}],[\"2\",{\"0\":{\"30\":1,\"36\":1,\"52\":1,\"55\":1,\"56\":1,\"57\":2,\"61\":1,\"62\":1,\"63\":1,\"64\":2,\"65\":1,\"66\":1,\"67\":1,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":2,\"82\":1,\"107\":2,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":2,\"114\":1,\"136\":1,\"161\":1,\"175\":1,\"257\":1,\"259\":1,\"262\":2,\"263\":2,\"265\":2,\"267\":1,\"295\":1,\"297\":1,\"307\":1},\"1\":{\"23\":1,\"33\":3,\"43\":4,\"48\":7,\"57\":2,\"65\":2,\"91\":2,\"114\":2,\"122\":1,\"123\":1,\"147\":1,\"164\":22,\"166\":1,\"179\":2,\"182\":1,\"183\":1,\"184\":2,\"200\":6,\"214\":3,\"219\":5,\"241\":1,\"242\":1,\"246\":1,\"264\":1,\"270\":1,\"273\":1,\"275\":1,\"282\":1,\"283\":2,\"289\":1,\"293\":1,\"301\":1,\"303\":1,\"306\":1,\"310\":6,\"311\":4,\"314\":1,\"316\":1}}],[\"249\",{\"1\":{\"219\":1}}],[\"244\",{\"1\":{\"164\":1}}],[\"24\",{\"1\":{\"13\":1,\"64\":3,\"219\":1}}],[\"2222\",{\"1\":{\"289\":1}}],[\"2202\",{\"1\":{\"289\":1}}],[\"2204\",{\"1\":{\"288\":1}}],[\"2210\",{\"1\":{\"289\":1}}],[\"2217\",{\"1\":{\"288\":1}}],[\"2218\",{\"1\":{\"288\":1}}],[\"2213\",{\"1\":{\"288\":1}}],[\"2211\",{\"1\":{\"288\":1}}],[\"2212\",{\"1\":{\"287\":1,\"289\":1}}],[\"22\",{\"1\":{\"11\":5,\"48\":7,\"64\":3,\"65\":1,\"275\":3}}],[\"2195\",{\"1\":{\"288\":1}}],[\"2197\",{\"1\":{\"288\":1}}],[\"2188\",{\"1\":{\"289\":1}}],[\"2189\",{\"1\":{\"289\":1}}],[\"2180\",{\"1\":{\"288\":1}}],[\"2181\",{\"1\":{\"33\":1,\"46\":1,\"154\":2,\"155\":11}}],[\"2179\",{\"1\":{\"288\":1}}],[\"21\",{\"1\":{\"11\":8,\"48\":3,\"64\":3}}],[\"250\",{\"1\":{\"219\":5}}],[\"252\",{\"1\":{\"219\":3}}],[\"254\",{\"1\":{\"155\":1}}],[\"255\",{\"1\":{\"65\":1,\"226\":6}}],[\"25ms\",{\"1\":{\"65\":1}}],[\"25\",{\"1\":{\"11\":4,\"14\":4,\"64\":3,\"164\":7,\"219\":1}}],[\"23\",{\"1\":{\"10\":1,\"64\":3,\"65\":1,\"219\":2,\"285\":1}}],[\"2017\",{\"1\":{\"316\":1}}],[\"2014\",{\"1\":{\"304\":1,\"315\":1}}],[\"2018\",{\"1\":{\"244\":1}}],[\"2019ms\",{\"1\":{\"219\":1}}],[\"2019\",{\"1\":{\"155\":1}}],[\"2001ms\",{\"1\":{\"219\":1}}],[\"20000\",{\"1\":{\"241\":1,\"242\":1}}],[\"2000\",{\"1\":{\"154\":2,\"220\":1}}],[\"200\",{\"1\":{\"91\":1,\"184\":1,\"219\":1,\"275\":1,\"301\":1}}],[\"20800\",{\"1\":{\"48\":7}}],[\"20\",{\"1\":{\"10\":1,\"11\":9,\"14\":2,\"48\":1,\"61\":3,\"64\":18,\"155\":17,\"164\":1,\"184\":1,\"265\":1,\"275\":1}}],[\"2023\",{\"0\":{\"257\":1}}],[\"2022\",{\"1\":{\"253\":1}}],[\"20210130230250748\",{\"1\":{\"135\":1}}],[\"20210130214402997\",{\"1\":{\"132\":1}}],[\"20210130202512831\",{\"1\":{\"126\":1}}],[\"20210129113307494\",{\"1\":{\"123\":1}}],[\"20210129111231212\",{\"1\":{\"123\":1}}],[\"20210129103451844\",{\"1\":{\"122\":1}}],[\"20210129103047851\",{\"1\":{\"122\":1}}],[\"20210129095703911\",{\"1\":{\"122\":1}}],[\"20210129095623013\",{\"1\":{\"122\":1}}],[\"20210122172333111\",{\"1\":{\"118\":1}}],[\"2021\",{\"0\":{\"10\":1,\"13\":1},\"1\":{\"10\":1,\"13\":1,\"48\":11,\"57\":5,\"61\":3,\"64\":18,\"82\":2,\"155\":16,\"164\":7,\"219\":11,\"253\":1}}],[\"2020ms\",{\"1\":{\"219\":4}}],[\"2020\",{\"0\":{\"2\":1},\"1\":{\"2\":1}}],[\"27017\",{\"1\":{\"33\":1,\"46\":1}}],[\"27\",{\"1\":{\"2\":1,\"61\":1,\"64\":6}}],[\"dhmily\",{\"1\":{\"275\":2}}],[\"d19cf79f647a465ab9c5c66f430cad28\",{\"1\":{\"147\":1}}],[\"dto\",{\"1\":{\"78\":8,\"79\":6,\"80\":2,\"81\":6,\"82\":5}}],[\"d30s\",{\"1\":{\"65\":2}}],[\"dcheckstyle\",{\"1\":{\"54\":1}}],[\"dmaven\",{\"1\":{\"54\":2}}],[\"d751713988987e9331980363e24189ce\",{\"1\":{\"48\":2}}],[\"d\",{\"1\":{\"48\":6,\"57\":4,\"61\":3,\"64\":18,\"155\":1,\"164\":5,\"219\":9,\"257\":1}}],[\"dynamically\",{\"1\":{\"121\":1}}],[\"dynamic\",{\"1\":{\"48\":1,\"121\":1,\"226\":1,\"270\":1,\"282\":1,\"298\":1}}],[\"dsl\",{\"1\":{\"35\":2}}],[\"db\",{\"1\":{\"33\":1,\"43\":3,\"46\":1,\"79\":1,\"81\":1,\"287\":1,\"288\":4}}],[\"duration\",{\"1\":{\"92\":1,\"184\":3,\"212\":1,\"213\":2,\"218\":1,\"219\":2}}],[\"during\",{\"0\":{\"38\":1},\"1\":{\"5\":1,\"38\":2,\"105\":1,\"117\":1,\"156\":1,\"173\":1,\"207\":1,\"210\":1,\"213\":1,\"214\":1,\"226\":1,\"253\":2}}],[\"dubbobodyisempty\",{\"1\":{\"237\":1}}],[\"dubbotagroutefromhttpheaders\",{\"1\":{\"237\":3}}],[\"dubbotest\",{\"1\":{\"230\":6,\"300\":3}}],[\"dubboparamresolveservice\",{\"1\":{\"237\":1}}],[\"dubboparams\",{\"1\":{\"180\":1}}],[\"dubboproxyservice\",{\"1\":{\"236\":1}}],[\"dubboresponseplugin\",{\"0\":{\"238\":1},\"1\":{\"224\":1}}],[\"dubborulehandle\",{\"1\":{\"82\":1}}],[\"dubbo<\",{\"1\":{\"43\":1,\"46\":1,\"228\":2,\"230\":1,\"274\":2,\"311\":2}}],[\"dubbo\",{\"0\":{\"43\":1,\"143\":1,\"223\":1,\"225\":1,\"227\":1,\"230\":1,\"231\":1,\"235\":1,\"240\":1,\"241\":1,\"274\":1,\"293\":1},\"1\":{\"30\":1,\"34\":1,\"46\":1,\"57\":1,\"80\":2,\"82\":1,\"85\":1,\"87\":4,\"119\":1,\"121\":1,\"130\":4,\"147\":1,\"164\":2,\"179\":2,\"180\":2,\"224\":6,\"225\":6,\"226\":3,\"229\":1,\"230\":2,\"232\":1,\"235\":2,\"236\":5,\"237\":5,\"238\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"264\":1,\"265\":2,\"269\":1,\"271\":2,\"273\":1,\"274\":2,\"275\":3,\"278\":1,\"280\":2,\"292\":1,\"293\":1,\"294\":1,\"298\":1,\"300\":3,\"301\":1,\"304\":2,\"307\":4,\"311\":8,\"315\":2,\"316\":3}}],[\"due\",{\"1\":{\"29\":1,\"30\":1,\"42\":1,\"46\":1,\"285\":2}}],[\"du\",{\"1\":{\"14\":1}}],[\"dict\",{\"1\":{\"288\":1}}],[\"dir>\",{\"1\":{\"275\":1}}],[\"dir\",{\"1\":{\"275\":1}}],[\"direction\",{\"1\":{\"304\":1,\"315\":1}}],[\"direct\",{\"1\":{\"133\":1,\"214\":3}}],[\"directory\",{\"1\":{\"123\":1,\"132\":1,\"139\":1,\"221\":1,\"275\":2}}],[\"directly\",{\"1\":{\"48\":3,\"65\":1,\"85\":1,\"92\":1,\"96\":2,\"98\":1,\"99\":1,\"100\":2,\"101\":1,\"104\":1,\"124\":1,\"127\":1,\"135\":1,\"136\":1,\"139\":1,\"172\":1,\"201\":1,\"211\":5,\"212\":2,\"213\":1,\"214\":6,\"219\":2,\"222\":1,\"234\":1,\"242\":1,\"252\":1}}],[\"division\",{\"1\":{\"270\":1}}],[\"dividing\",{\"1\":{\"200\":1}}],[\"divide<\",{\"1\":{\"86\":1}}],[\"divideplugindatahandler\",{\"1\":{\"87\":2,\"118\":1}}],[\"dividepluginconfiguration\",{\"1\":{\"86\":1}}],[\"divideplugin\",{\"0\":{\"181\":1,\"183\":1},\"1\":{\"85\":2,\"86\":3,\"87\":5,\"92\":1,\"172\":2,\"179\":2,\"182\":2,\"187\":2}}],[\"dividerulehandle\",{\"1\":{\"82\":2,\"87\":2,\"172\":2,\"183\":2}}],[\"divideupstream>\",{\"1\":{\"89\":2}}],[\"divideupstream\",{\"1\":{\"79\":3,\"80\":4,\"81\":3,\"87\":3,\"89\":2,\"90\":5,\"91\":3,\"120\":3,\"172\":3,\"175\":8,\"177\":7,\"183\":4}}],[\"divide\",{\"0\":{\"67\":1,\"69\":1,\"72\":1,\"170\":1},\"1\":{\"48\":1,\"61\":2,\"64\":12,\"68\":1,\"69\":4,\"72\":2,\"74\":1,\"80\":2,\"81\":1,\"87\":3,\"108\":2,\"118\":1,\"119\":1,\"120\":1,\"135\":1,\"160\":1,\"162\":1,\"171\":1,\"172\":2,\"173\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"181\":1,\"183\":2,\"184\":1,\"185\":1}}],[\"divided\",{\"1\":{\"5\":1,\"103\":1,\"134\":1,\"212\":1,\"240\":1,\"267\":1,\"303\":1,\"314\":1}}],[\"dimensions\",{\"1\":{\"212\":1}}],[\"digit\",{\"1\":{\"197\":1}}],[\"digestutils\",{\"1\":{\"147\":1}}],[\"difficult\",{\"1\":{\"179\":2,\"180\":1,\"267\":1}}],[\"difference\",{\"1\":{\"105\":1,\"177\":1,\"200\":1}}],[\"differentiated\",{\"1\":{\"124\":1}}],[\"different\",{\"0\":{\"46\":1},\"1\":{\"34\":1,\"40\":1,\"97\":2,\"98\":1,\"110\":1,\"113\":1,\"118\":4,\"120\":1,\"122\":1,\"123\":1,\"131\":1,\"134\":2,\"179\":1,\"180\":1,\"185\":1,\"209\":1,\"210\":1,\"299\":1,\"300\":1,\"301\":2,\"316\":1}}],[\"diligent\",{\"1\":{\"97\":1}}],[\"diagram\",{\"1\":{\"84\":2,\"166\":1,\"304\":1,\"315\":1}}],[\"did\",{\"1\":{\"48\":1,\"86\":1,\"133\":1}}],[\"didn\",{\"1\":{\"32\":1}}],[\"disassemble\",{\"1\":{\"303\":1,\"314\":1}}],[\"disable\",{\"1\":{\"116\":1,\"149\":1,\"311\":1}}],[\"disabled\",{\"1\":{\"48\":1}}],[\"distinguish\",{\"1\":{\"129\":1,\"139\":1}}],[\"distinguished\",{\"1\":{\"104\":1}}],[\"distinguishable\",{\"1\":{\"70\":1}}],[\"distributes\",{\"1\":{\"195\":1}}],[\"distribute\",{\"1\":{\"118\":1,\"177\":1}}],[\"distributed\",{\"0\":{\"27\":1,\"34\":1,\"41\":1,\"267\":1,\"278\":1},\"1\":{\"19\":5,\"29\":1,\"30\":1,\"33\":1,\"69\":1,\"101\":1,\"172\":3,\"207\":1,\"212\":1,\"214\":3,\"246\":2,\"269\":1,\"270\":1,\"275\":3,\"278\":2,\"280\":1,\"316\":2}}],[\"distribution\",{\"1\":{\"69\":3,\"97\":1,\"177\":1}}],[\"dispatcherhandler\",{\"1\":{\"206\":1,\"207\":7,\"221\":4}}],[\"display\",{\"1\":{\"164\":1}}],[\"displayed\",{\"1\":{\"48\":2}}],[\"dispersed\",{\"1\":{\"104\":1}}],[\"disposablebean\",{\"1\":{\"35\":2}}],[\"disruptor<>\",{\"1\":{\"35\":1}}],[\"disruptor<hmilytransactionevent>\",{\"1\":{\"35\":1}}],[\"disruptor\",{\"0\":{\"35\":2},\"1\":{\"29\":1,\"33\":4,\"35\":25,\"43\":2}}],[\"discarded\",{\"1\":{\"287\":1}}],[\"discuss\",{\"1\":{\"80\":1,\"101\":1,\"180\":1,\"281\":1}}],[\"discussions\",{\"1\":{\"46\":1}}],[\"discussed\",{\"1\":{\"29\":1,\"285\":1,\"316\":1}}],[\"disclosure\",{\"1\":{\"24\":1}}],[\"discovery\",{\"1\":{\"14\":1,\"121\":2,\"225\":1}}],[\"domino\",{\"1\":{\"210\":1}}],[\"domain\",{\"1\":{\"87\":2,\"172\":2,\"176\":1,\"183\":2,\"300\":1}}],[\"doprivileged\",{\"1\":{\"126\":1}}],[\"dog\",{\"1\":{\"122\":1}}],[\"dodelete\",{\"1\":{\"118\":1}}],[\"double\",{\"1\":{\"139\":1,\"197\":2,\"210\":2,\"306\":1}}],[\"doubtful\",{\"1\":{\"113\":1,\"114\":1}}],[\"doubts\",{\"1\":{\"78\":1,\"101\":1,\"200\":1}}],[\"doupdate\",{\"1\":{\"118\":2}}],[\"dorefresh\",{\"1\":{\"118\":1}}],[\"dofetchgroup\",{\"1\":{\"104\":1}}],[\"dofetchgroupconfig\",{\"1\":{\"104\":2,\"105\":3}}],[\"dolongpolling\",{\"1\":{\"100\":5,\"105\":3}}],[\"doing\",{\"0\":{\"98\":1},\"1\":{\"98\":1,\"105\":1,\"252\":1}}],[\"doonerror\",{\"1\":{\"92\":1,\"184\":1,\"197\":1,\"221\":1}}],[\"doonsuccess\",{\"1\":{\"86\":1,\"214\":1,\"221\":1}}],[\"doselect\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"177\":2}}],[\"doexcute\",{\"1\":{\"182\":3,\"197\":1}}],[\"doexecuteresilience4jplugn\",{\"1\":{\"221\":1}}],[\"doexecute\",{\"1\":{\"84\":1,\"85\":4,\"87\":3,\"172\":3,\"182\":1,\"183\":1,\"197\":1,\"207\":1,\"214\":1,\"221\":2,\"236\":1}}],[\"doesn\",{\"1\":{\"29\":1,\"40\":1,\"86\":1,\"184\":2}}],[\"does\",{\"0\":{\"30\":1,\"117\":1,\"161\":2,\"162\":1,\"165\":1,\"166\":1,\"241\":1},\"1\":{\"22\":1,\"48\":1,\"69\":1,\"70\":1,\"74\":1,\"89\":2,\"97\":1,\"98\":2,\"99\":1,\"100\":3,\"101\":2,\"110\":1,\"122\":1,\"126\":1,\"131\":2,\"133\":1,\"164\":1,\"172\":1,\"182\":1,\"195\":1,\"210\":1,\"212\":1,\"214\":1,\"231\":1,\"241\":1,\"271\":2,\"280\":2,\"303\":1,\"314\":1}}],[\"docs\",{\"1\":{\"49\":1,\"266\":1,\"275\":1,\"296\":1,\"306\":1,\"311\":3}}],[\"documents\",{\"0\":{\"189\":1,\"266\":1},\"1\":{\"155\":1,\"189\":1}}],[\"document\",{\"1\":{\"49\":1,\"189\":1,\"249\":1,\"266\":1,\"293\":1,\"296\":1,\"301\":1,\"306\":1}}],[\"documentation\",{\"0\":{\"249\":1},\"1\":{\"23\":1,\"246\":1}}],[\"download\",{\"1\":{\"305\":1,\"309\":1}}],[\"downtime\",{\"1\":{\"210\":1,\"303\":1,\"314\":1}}],[\"downstream\",{\"1\":{\"87\":2,\"92\":3,\"171\":1,\"172\":2,\"178\":1,\"181\":1,\"183\":1,\"184\":1,\"211\":1}}],[\"down\",{\"1\":{\"31\":1,\"33\":2,\"43\":1,\"78\":1,\"81\":2,\"200\":1,\"210\":1}}],[\"donor\",{\"1\":{\"285\":1}}],[\"donext\",{\"1\":{\"92\":2,\"184\":3}}],[\"done\",{\"1\":{\"77\":1,\"83\":1,\"123\":1,\"184\":1,\"187\":1,\"197\":1}}],[\"don\",{\"1\":{\"40\":1,\"48\":2,\"78\":1,\"82\":1,\"86\":1,\"87\":1,\"106\":1,\"129\":1,\"183\":1,\"184\":1,\"192\":1,\"217\":1,\"275\":1,\"276\":1,\"300\":1,\"304\":1,\"311\":1,\"315\":1}}],[\"donated\",{\"1\":{\"22\":3,\"23\":1,\"246\":1,\"247\":1,\"252\":1}}],[\"donation\",{\"0\":{\"23\":1,\"245\":1,\"252\":1},\"1\":{\"21\":1,\"285\":2}}],[\"dongdong\",{\"1\":{\"14\":1}}],[\"do\",{\"1\":{\"5\":1,\"17\":1,\"22\":2,\"69\":1,\"85\":1,\"92\":1,\"97\":3,\"98\":2,\"99\":3,\"101\":3,\"105\":1,\"112\":1,\"123\":1,\"126\":3,\"129\":2,\"134\":1,\"180\":2,\"195\":1,\"212\":2,\"285\":1,\"303\":4,\"304\":2,\"311\":2,\"312\":1,\"314\":4,\"315\":2,\"316\":5}}],[\"dalston\",{\"1\":{\"264\":1}}],[\"damage\",{\"1\":{\"210\":1}}],[\"da\",{\"1\":{\"126\":2}}],[\"dao\",{\"1\":{\"80\":1,\"82\":1}}],[\"daemon\",{\"1\":{\"48\":4}}],[\"daily\",{\"1\":{\"19\":2,\"253\":1}}],[\"data`\",{\"1\":{\"226\":1}}],[\"dataid\",{\"1\":{\"165\":2,\"166\":5,\"275\":1}}],[\"datapath\",{\"1\":{\"162\":3}}],[\"datalist\",{\"1\":{\"118\":7}}],[\"datahandlerhandler\",{\"1\":{\"118\":1}}],[\"datahandler>\",{\"1\":{\"117\":1}}],[\"datahandler\",{\"1\":{\"117\":2,\"118\":3}}],[\"datarefresh>\",{\"1\":{\"104\":1}}],[\"datarefreshfactory\",{\"1\":{\"104\":5}}],[\"datarefresh\",{\"1\":{\"104\":4}}],[\"datachangetask\",{\"1\":{\"100\":3}}],[\"datachange\",{\"1\":{\"98\":1,\"165\":1}}],[\"datachangedlistener\",{\"1\":{\"97\":7,\"98\":2,\"111\":2,\"112\":6,\"113\":3,\"156\":5,\"165\":3}}],[\"datachangedevent\",{\"1\":{\"79\":1,\"81\":1,\"97\":1,\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"156\":4,\"157\":1,\"159\":1,\"165\":6}}],[\"datachangedeventdispatcher\",{\"1\":{\"48\":1,\"97\":2,\"101\":2,\"111\":3,\"112\":1,\"113\":1,\"156\":6,\"160\":1,\"165\":5}}],[\"datasubscriber\",{\"1\":{\"117\":1}}],[\"datasyncconfiguration\",{\"1\":{\"96\":1,\"97\":1,\"112\":2,\"116\":2}}],[\"datasource\",{\"1\":{\"56\":1,\"309\":3}}],[\"dataeventtypeenum\",{\"1\":{\"79\":1,\"81\":1,\"97\":7,\"98\":3,\"100\":1,\"109\":3,\"110\":1,\"112\":5,\"113\":5,\"114\":5,\"118\":2,\"156\":3,\"165\":1}}],[\"database\",{\"1\":{\"33\":1,\"48\":4,\"80\":2,\"81\":2,\"82\":2,\"99\":1,\"101\":3,\"109\":1,\"126\":1,\"128\":1,\"226\":1,\"275\":1,\"316\":2}}],[\"data\",{\"0\":{\"95\":1,\"97\":1,\"103\":1,\"104\":1,\"106\":1,\"114\":1,\"115\":1,\"118\":1,\"152\":1,\"153\":1,\"156\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":2,\"162\":1,\"164\":1,\"165\":1,\"166\":1,\"299\":1},\"1\":{\"14\":2,\"43\":2,\"48\":20,\"56\":1,\"57\":1,\"68\":3,\"80\":2,\"81\":4,\"82\":5,\"83\":4,\"85\":1,\"97\":9,\"98\":5,\"99\":6,\"100\":3,\"101\":11,\"103\":1,\"104\":33,\"105\":9,\"106\":3,\"110\":4,\"111\":1,\"112\":4,\"113\":3,\"114\":2,\"116\":1,\"117\":8,\"118\":3,\"119\":2,\"151\":5,\"154\":2,\"155\":1,\"156\":19,\"157\":4,\"159\":8,\"160\":2,\"161\":12,\"162\":9,\"164\":29,\"165\":9,\"166\":10,\"172\":3,\"173\":1,\"176\":1,\"177\":1,\"178\":1,\"182\":4,\"183\":3,\"185\":1,\"193\":1,\"195\":6,\"220\":3,\"226\":3,\"230\":2,\"236\":5,\"246\":1,\"287\":1,\"298\":1,\"299\":1,\"301\":1,\"307\":2,\"310\":2,\"316\":2}}],[\"datetime\",{\"1\":{\"226\":2}}],[\"date\",{\"1\":{\"2\":1,\"10\":1,\"13\":1,\"82\":2,\"104\":1}}],[\"day\",{\"1\":{\"5\":3,\"304\":1,\"315\":1}}],[\"demand\",{\"1\":{\"316\":1}}],[\"demonstrated\",{\"1\":{\"74\":1}}],[\"demonstrate\",{\"1\":{\"72\":1}}],[\"demonstration\",{\"1\":{\"48\":1}}],[\"demo\",{\"0\":{\"42\":1,\"122\":1,\"129\":1,\"149\":1},\"1\":{\"29\":1,\"43\":1,\"122\":1,\"129\":1,\"179\":2,\"183\":1,\"265\":1,\"280\":1}}],[\"dev\",{\"1\":{\"275\":1}}],[\"deventdispatcher\",{\"1\":{\"98\":1,\"165\":1}}],[\"developing\",{\"1\":{\"280\":1,\"303\":1,\"314\":1}}],[\"develop\",{\"1\":{\"252\":1,\"298\":1}}],[\"developers\",{\"0\":{\"301\":1},\"1\":{\"19\":1,\"301\":1,\"303\":1,\"304\":1,\"314\":1,\"315\":1}}],[\"development\",{\"0\":{\"5\":1},\"1\":{\"11\":1,\"14\":1,\"246\":1,\"252\":1,\"253\":1,\"276\":2,\"282\":1,\"305\":1}}],[\"degradeexception\",{\"1\":{\"214\":1}}],[\"degrade\",{\"1\":{\"214\":1}}],[\"degraderule\",{\"1\":{\"214\":2}}],[\"degraderulemanager\",{\"1\":{\"214\":4}}],[\"degraderules\",{\"1\":{\"214\":3}}],[\"degradation\",{\"1\":{\"212\":3}}],[\"deepen\",{\"1\":{\"197\":1}}],[\"deal\",{\"1\":{\"112\":1,\"212\":2,\"226\":1,\"304\":1,\"315\":1}}],[\"decoding\",{\"1\":{\"287\":3}}],[\"decentralized\",{\"1\":{\"269\":1}}],[\"december\",{\"1\":{\"2\":1}}],[\"decision\",{\"1\":{\"253\":2}}],[\"decide\",{\"1\":{\"129\":1,\"212\":1}}],[\"declaration\",{\"1\":{\"207\":1,\"232\":1}}],[\"decreases\",{\"1\":{\"211\":1}}],[\"decrease\",{\"1\":{\"89\":1}}],[\"define\",{\"1\":{\"119\":1,\"121\":1,\"279\":1,\"301\":2}}],[\"defined\",{\"1\":{\"112\":1,\"113\":1,\"121\":1,\"122\":1,\"164\":1,\"179\":1,\"205\":1,\"294\":1}}],[\"defines\",{\"1\":{\"84\":2,\"86\":1,\"97\":1,\"132\":1,\"270\":2}}],[\"definition\",{\"1\":{\"112\":1,\"121\":1,\"300\":1,\"310\":1}}],[\"definitely\",{\"1\":{\"104\":1,\"121\":1,\"304\":1,\"315\":1}}],[\"defer\",{\"1\":{\"86\":1,\"92\":1,\"93\":1,\"179\":1,\"185\":1,\"235\":1,\"238\":1}}],[\"defaultsoulcontext\",{\"1\":{\"180\":1}}],[\"defaultsoulpluginchain\",{\"1\":{\"86\":4,\"235\":2}}],[\"defaultsignservice\",{\"1\":{\"151\":1}}],[\"defaults\",{\"1\":{\"127\":1,\"221\":1,\"310\":1}}],[\"defaultwebclient\",{\"1\":{\"92\":2}}],[\"default\",{\"1\":{\"29\":1,\"33\":4,\"35\":1,\"43\":1,\"48\":1,\"69\":1,\"72\":1,\"82\":4,\"89\":1,\"97\":6,\"107\":1,\"111\":1,\"112\":9,\"113\":1,\"114\":1,\"118\":1,\"155\":1,\"156\":1,\"164\":2,\"165\":2,\"174\":3,\"177\":2,\"178\":1,\"179\":3,\"207\":5,\"213\":3,\"214\":2,\"218\":12,\"219\":3,\"220\":1,\"221\":2,\"222\":3,\"226\":5,\"234\":1,\"237\":1,\"275\":3,\"287\":2,\"292\":1,\"300\":1,\"301\":1,\"309\":1}}],[\"debugging\",{\"1\":{\"48\":1,\"156\":1}}],[\"debug\",{\"0\":{\"197\":1},\"1\":{\"39\":1,\"48\":1,\"105\":1,\"123\":1,\"160\":1,\"161\":1,\"164\":1,\"165\":1,\"179\":1,\"183\":1,\"235\":1}}],[\"destined\",{\"1\":{\"300\":1}}],[\"destroy\",{\"1\":{\"35\":1}}],[\"deserialize\",{\"1\":{\"242\":8}}],[\"deserve\",{\"1\":{\"83\":1}}],[\"desc\",{\"1\":{\"230\":1}}],[\"desc`\",{\"1\":{\"226\":1}}],[\"describes\",{\"1\":{\"209\":1}}],[\"described\",{\"1\":{\"124\":1,\"212\":1}}],[\"describe\",{\"1\":{\"87\":1}}],[\"description\",{\"0\":{\"210\":1},\"1\":{\"48\":4,\"100\":1,\"212\":1,\"226\":1}}],[\"desired\",{\"1\":{\"139\":1}}],[\"designating\",{\"1\":{\"253\":1}}],[\"designed\",{\"1\":{\"130\":1}}],[\"design\",{\"1\":{\"11\":1,\"69\":2,\"81\":1,\"84\":1,\"99\":1,\"101\":1,\"125\":1,\"130\":1,\"131\":1,\"169\":1,\"208\":1,\"269\":1,\"285\":2,\"304\":1,\"307\":1,\"315\":1,\"316\":3}}],[\"deprecated\",{\"1\":{\"287\":1}}],[\"depends\",{\"1\":{\"274\":1}}],[\"dependent\",{\"1\":{\"270\":1}}],[\"dependencies\",{\"1\":{\"202\":1,\"217\":1,\"230\":1,\"272\":1,\"273\":1,\"279\":1,\"311\":4}}],[\"dependency>\",{\"1\":{\"43\":2,\"44\":1,\"45\":1,\"46\":3,\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":2,\"203\":1,\"217\":1,\"218\":1,\"228\":5,\"230\":1,\"274\":3,\"310\":4,\"311\":4}}],[\"dependency\",{\"0\":{\"203\":1,\"273\":1},\"1\":{\"34\":1,\"48\":2,\"59\":1,\"86\":1,\"161\":1,\"166\":1,\"203\":1,\"217\":2,\"218\":1,\"274\":1,\"279\":1,\"310\":1,\"311\":1}}],[\"depend\",{\"1\":{\"210\":1,\"301\":1}}],[\"depending\",{\"1\":{\"90\":1}}],[\"deployed\",{\"1\":{\"214\":1}}],[\"deploys\",{\"1\":{\"214\":1}}],[\"deploy\",{\"1\":{\"42\":1,\"81\":1}}],[\"deployments\",{\"1\":{\"303\":1,\"314\":1}}],[\"deployment\",{\"0\":{\"31\":1},\"1\":{\"19\":1,\"31\":1,\"191\":1,\"195\":1,\"269\":1}}],[\"delegate\",{\"1\":{\"214\":1}}],[\"deletion\",{\"1\":{\"161\":1,\"162\":1,\"289\":1}}],[\"deletezkpathrecursive\",{\"1\":{\"98\":3}}],[\"deleted\",{\"1\":{\"48\":1}}],[\"deletebyquery\",{\"1\":{\"48\":1}}],[\"delete\",{\"1\":{\"48\":2,\"98\":2,\"110\":3,\"117\":1,\"118\":2,\"214\":2,\"287\":1}}],[\"deltarate\",{\"1\":{\"200\":1}}],[\"delta\",{\"1\":{\"200\":4}}],[\"delay\",{\"1\":{\"33\":2,\"100\":1,\"105\":1,\"151\":2,\"211\":1,\"307\":1,\"312\":1}}],[\"delved\",{\"1\":{\"32\":1}}],[\"determination\",{\"1\":{\"213\":1}}],[\"determining\",{\"1\":{\"197\":1}}],[\"determines\",{\"1\":{\"128\":1,\"165\":1}}],[\"determined\",{\"1\":{\"92\":1,\"212\":1,\"213\":1}}],[\"determine\",{\"1\":{\"78\":1,\"86\":1,\"90\":1,\"104\":1,\"114\":1,\"117\":1,\"127\":1,\"151\":1,\"177\":1,\"184\":1,\"212\":2,\"241\":2,\"242\":1}}],[\"detection\",{\"1\":{\"100\":1,\"174\":3}}],[\"detected\",{\"1\":{\"100\":1,\"212\":1}}],[\"detect\",{\"1\":{\"81\":1,\"212\":1}}],[\"detailed\",{\"0\":{\"139\":1},\"1\":{\"164\":2,\"275\":1}}],[\"detail\",{\"1\":{\"40\":1,\"48\":1,\"80\":1,\"200\":1,\"218\":1}}],[\"details\",{\"0\":{\"11\":1,\"14\":1},\"1\":{\"43\":1,\"46\":1,\"92\":1,\"97\":1,\"120\":1,\"124\":1,\"177\":1,\"189\":1,\"202\":1,\"243\":1,\"311\":1}}],[\"detrimental\",{\"1\":{\"22\":2}}],[\"dedicated\",{\"1\":{\"19\":2}}],[\"deducted\",{\"1\":{\"5\":1}}],[\"druiddatasource\",{\"1\":{\"288\":1}}],[\"drawn\",{\"1\":{\"85\":1}}],[\"drat\",{\"1\":{\"54\":1}}],[\"drastic\",{\"0\":{\"32\":1}}],[\"drivers\",{\"1\":{\"127\":1,\"128\":2}}],[\"driversiterator\",{\"1\":{\"126\":3}}],[\"driverinfo\",{\"1\":{\"126\":1,\"127\":1}}],[\"driveraction\",{\"1\":{\"126\":1}}],[\"drivermanager\",{\"1\":{\"126\":7,\"127\":3,\"128\":4,\"129\":5}}],[\"driver\",{\"0\":{\"126\":1,\"127\":1},\"1\":{\"33\":1,\"43\":1,\"46\":1,\"125\":1,\"126\":18,\"127\":8,\"128\":5,\"129\":3,\"131\":1,\"275\":1,\"285\":1}}],[\"driverclassname\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"275\":1}}],[\"dropped\",{\"1\":{\"189\":1}}],[\"drops\",{\"1\":{\"65\":1}}],[\"drop\",{\"1\":{\"29\":1}}],[\"dromara<\",{\"1\":{\"59\":1,\"86\":1,\"144\":1,\"154\":1,\"161\":1,\"164\":1,\"203\":1,\"218\":1,\"228\":1,\"230\":1,\"274\":3,\"310\":2,\"311\":4}}],[\"dromara\",{\"0\":{\"1\":1,\"2\":2,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"51\":1,\"254\":1,\"267\":1},\"1\":{\"1\":1,\"3\":1,\"4\":1,\"8\":1,\"9\":1,\"12\":1,\"18\":2,\"20\":2,\"22\":3,\"23\":2,\"24\":4,\"25\":1,\"28\":1,\"49\":2,\"56\":1,\"130\":1,\"156\":5,\"160\":2,\"161\":2,\"162\":2,\"164\":14,\"165\":2,\"166\":2,\"179\":2,\"237\":1,\"246\":2,\"247\":3,\"248\":3,\"249\":2,\"250\":1,\"251\":4,\"252\":8,\"253\":2,\"265\":1,\"266\":2,\"275\":1,\"277\":2,\"283\":1,\"290\":2,\"296\":3,\"301\":1,\"306\":3,\"311\":3}}],[\"dreams\",{\"1\":{\"81\":1}}],[\"dream\",{\"0\":{\"1\":1,\"2\":1},\"1\":{\"1\":1,\"11\":1,\"14\":1}}],[\"csvreadconfig\",{\"1\":{\"288\":1}}],[\"cpu\",{\"1\":{\"285\":1,\"307\":1}}],[\"ci\",{\"1\":{\"226\":10,\"280\":1}}],[\"circular\",{\"1\":{\"218\":1}}],[\"circuitbreakeroperator\",{\"1\":{\"221\":1}}],[\"circuitbreaker\",{\"1\":{\"221\":5}}],[\"circuitbreakerstatuscodeexception\",{\"1\":{\"221\":1}}],[\"circuitbreaker<\",{\"1\":{\"217\":1}}],[\"circuitenable\",{\"1\":{\"218\":1,\"221\":1}}],[\"circuit\",{\"1\":{\"212\":2,\"214\":10,\"217\":1,\"218\":7,\"219\":1,\"221\":4,\"298\":1,\"304\":1,\"307\":1,\"311\":1,\"312\":1,\"315\":1}}],[\"circumstances\",{\"1\":{\"38\":1}}],[\"ctor\",{\"1\":{\"219\":9}}],[\"cglib\",{\"1\":{\"164\":1}}],[\"cglib$nacossyncdataservice$0\",{\"1\":{\"164\":1}}],[\"c11b7e26bc554b8523dc929761dd28808913f091\",{\"1\":{\"155\":1}}],[\"cfg\",{\"1\":{\"155\":1}}],[\"cycles\",{\"1\":{\"105\":1}}],[\"cyclic\",{\"1\":{\"105\":1}}],[\"certification\",{\"1\":{\"303\":1,\"314\":1}}],[\"certainly\",{\"1\":{\"101\":1}}],[\"certain\",{\"1\":{\"99\":1,\"104\":2,\"122\":1,\"156\":1,\"177\":1,\"211\":3,\"212\":1,\"303\":1,\"314\":1}}],[\"center\",{\"1\":{\"270\":1,\"275\":2,\"280\":1}}],[\"centers\",{\"1\":{\"267\":1,\"270\":1,\"282\":1,\"307\":1}}],[\"central\",{\"1\":{\"42\":1}}],[\"ceutils\",{\"1\":{\"177\":1}}],[\"c40\",{\"1\":{\"65\":2}}],[\"cchenxi\",{\"0\":{\"51\":1},\"1\":{\"52\":1}}],[\"cn\",{\"1\":{\"49\":1,\"123\":6,\"182\":1,\"257\":1,\"266\":1,\"275\":1,\"296\":1,\"306\":1,\"311\":3}}],[\"c\",{\"1\":{\"39\":3,\"123\":4,\"219\":3}}],[\"cross\",{\"1\":{\"300\":1}}],[\"cronpatternparser\",{\"1\":{\"288\":1}}],[\"cron\",{\"1\":{\"287\":1,\"288\":1}}],[\"crypto\",{\"1\":{\"288\":1}}],[\"crash\",{\"1\":{\"285\":1}}],[\"crashes\",{\"1\":{\"31\":1,\"38\":1}}],[\"crushed\",{\"1\":{\"211\":1}}],[\"crush\",{\"1\":{\"211\":1}}],[\"crud\",{\"1\":{\"48\":1,\"78\":1}}],[\"creation\",{\"1\":{\"226\":1}}],[\"creating\",{\"1\":{\"164\":1}}],[\"createuri\",{\"1\":{\"207\":1,\"214\":1,\"221\":1}}],[\"createnotfounderror\",{\"1\":{\"207\":2}}],[\"createlettuceconnectionfactory\",{\"1\":{\"195\":1}}],[\"createconfigservice\",{\"1\":{\"166\":1}}],[\"createpersistent\",{\"1\":{\"161\":1}}],[\"createextension\",{\"1\":{\"137\":1,\"139\":3}}],[\"createstatement\",{\"1\":{\"129\":2}}],[\"createorupdate\",{\"1\":{\"48\":1,\"109\":2,\"165\":1}}],[\"created`\",{\"1\":{\"226\":1}}],[\"createdefault\",{\"1\":{\"82\":1}}],[\"created\",{\"1\":{\"43\":1,\"48\":3,\"82\":1,\"174\":1}}],[\"create\",{\"1\":{\"29\":1,\"35\":1,\"36\":1,\"48\":1,\"98\":1,\"104\":1,\"109\":2,\"110\":2,\"118\":2,\"128\":1,\"164\":1,\"165\":1,\"174\":1,\"226\":1,\"270\":1,\"275\":1,\"287\":1,\"310\":1}}],[\"critical\",{\"1\":{\"92\":1,\"125\":1,\"139\":1}}],[\"criteria\",{\"1\":{\"70\":1}}],[\"chips\",{\"1\":{\"316\":1}}],[\"chinese\",{\"1\":{\"288\":1,\"316\":2}}],[\"china\",{\"1\":{\"28\":1,\"29\":1,\"212\":1}}],[\"childrenlist\",{\"1\":{\"162\":1}}],[\"child\",{\"1\":{\"161\":1,\"162\":1}}],[\"cherryrum\",{\"1\":{\"285\":1}}],[\"cheap\",{\"1\":{\"270\":1,\"281\":1}}],[\"cheated\",{\"1\":{\"105\":1}}],[\"checkstyle\",{\"1\":{\"281\":1,\"316\":1}}],[\"checkselector\",{\"1\":{\"85\":2}}],[\"check=\",{\"1\":{\"265\":1}}],[\"checkmetadata\",{\"1\":{\"236\":1}}],[\"checkip\",{\"1\":{\"176\":1}}],[\"checking\",{\"1\":{\"175\":2}}],[\"checkurl\",{\"1\":{\"175\":1,\"176\":2}}],[\"checkutils\",{\"1\":{\"85\":4,\"176\":2}}],[\"checked\",{\"1\":{\"139\":1,\"219\":1}}],[\"checkdata\",{\"1\":{\"109\":1,\"214\":2,\"219\":1,\"220\":1,\"221\":1}}],[\"checkpoint\",{\"1\":{\"92\":1}}],[\"checkrule\",{\"1\":{\"85\":2}}],[\"check\",{\"0\":{\"176\":1},\"1\":{\"48\":2,\"57\":1,\"85\":1,\"99\":1,\"104\":1,\"164\":1,\"174\":7,\"175\":6,\"176\":3,\"182\":2,\"195\":1,\"200\":1,\"219\":1,\"221\":1,\"235\":2,\"236\":3,\"241\":2,\"242\":1,\"270\":1}}],[\"choose\",{\"1\":{\"56\":1,\"62\":1,\"117\":1,\"183\":1,\"209\":1,\"212\":1,\"214\":1,\"271\":1,\"299\":1}}],[\"choice\",{\"1\":{\"48\":1}}],[\"channels\",{\"1\":{\"253\":1}}],[\"changing\",{\"1\":{\"124\":1}}],[\"changetime\",{\"1\":{\"100\":1}}],[\"changetime=\",{\"1\":{\"100\":1}}],[\"change\",{\"0\":{\"118\":1},\"1\":{\"48\":1,\"62\":1,\"74\":1,\"79\":1,\"81\":1,\"83\":2,\"97\":1,\"98\":1,\"101\":3,\"104\":1,\"105\":4,\"109\":1,\"114\":1,\"117\":2,\"118\":2,\"119\":1,\"124\":1,\"156\":2,\"157\":1,\"159\":1,\"160\":1,\"162\":1,\"165\":2,\"166\":2,\"191\":1,\"195\":1,\"250\":1,\"273\":1,\"287\":2,\"288\":1,\"294\":1,\"300\":1}}],[\"changedevent\",{\"1\":{\"160\":1}}],[\"changedgroups\",{\"1\":{\"100\":6,\"105\":4}}],[\"changedlistener\",{\"0\":{\"97\":1,\"100\":1},\"1\":{\"97\":3,\"100\":3,\"101\":1,\"112\":2,\"113\":1,\"156\":2,\"160\":1,\"165\":5}}],[\"changed\",{\"0\":{\"195\":1},\"1\":{\"48\":1,\"82\":1,\"97\":9,\"98\":2,\"99\":2,\"100\":4,\"101\":3,\"104\":3,\"105\":3,\"112\":16,\"155\":2,\"156\":3,\"165\":2,\"195\":1,\"213\":1,\"247\":1,\"275\":1,\"287\":3,\"292\":1}}],[\"changes\",{\"0\":{\"105\":1,\"160\":1,\"161\":1,\"162\":1,\"273\":1,\"275\":1,\"293\":1},\"1\":{\"48\":1,\"97\":3,\"98\":2,\"100\":1,\"101\":1,\"103\":1,\"104\":1,\"105\":1,\"112\":2,\"117\":1,\"118\":4,\"132\":1,\"156\":1,\"159\":2,\"161\":1,\"162\":1,\"195\":2,\"275\":2,\"295\":1,\"298\":1,\"312\":1}}],[\"charsequence\",{\"1\":{\"287\":1}}],[\"charge\",{\"1\":{\"249\":1,\"253\":1}}],[\"characterencoding=utf\",{\"1\":{\"309\":1}}],[\"characterencoding=utf8\",{\"1\":{\"33\":1,\"43\":1,\"46\":1,\"275\":1}}],[\"character\",{\"1\":{\"226\":10}}],[\"chart\",{\"1\":{\"138\":1,\"182\":3}}],[\"chapters\",{\"1\":{\"173\":1}}],[\"chapter\",{\"1\":{\"101\":2,\"103\":1,\"185\":1,\"187\":1,\"235\":1}}],[\"chains\",{\"1\":{\"246\":1}}],[\"chained\",{\"1\":{\"86\":1}}],[\"chain\",{\"0\":{\"84\":1,\"118\":1,\"168\":1,\"197\":1},\"1\":{\"30\":1,\"39\":1,\"85\":11,\"86\":3,\"87\":2,\"92\":8,\"93\":3,\"172\":8,\"178\":1,\"179\":1,\"180\":3,\"181\":2,\"182\":7,\"183\":3,\"184\":6,\"185\":2,\"197\":2,\"207\":2,\"210\":1,\"214\":2,\"221\":9,\"235\":1,\"236\":2,\"238\":2}}],[\"cl\",{\"1\":{\"123\":5}}],[\"clazz\",{\"1\":{\"82\":3,\"132\":5,\"139\":2}}],[\"classpath\",{\"1\":{\"136\":2,\"139\":5}}],[\"classnotfoundexception\",{\"1\":{\"123\":1,\"129\":2,\"139\":2,\"242\":1}}],[\"classloader\",{\"1\":{\"123\":5,\"139\":5}}],[\"classification\",{\"1\":{\"97\":1}}],[\"class<t>\",{\"1\":{\"132\":1}}],[\"class<s>\",{\"1\":{\"123\":3}}],[\"class<\",{\"1\":{\"82\":3,\"123\":1,\"127\":1,\"134\":1,\"136\":2,\"137\":1,\"139\":10,\"242\":1}}],[\"classes\",{\"1\":{\"48\":1,\"84\":1,\"104\":3,\"117\":2,\"118\":2,\"119\":2,\"120\":1,\"122\":1,\"124\":1,\"126\":2,\"128\":1,\"129\":1,\"136\":3,\"139\":22,\"156\":4,\"164\":9,\"165\":1,\"179\":4,\"182\":1}}],[\"class=\",{\"1\":{\"33\":7,\"43\":2}}],[\"class\",{\"1\":{\"19\":1,\"35\":1,\"36\":1,\"40\":2,\"43\":3,\"48\":12,\"78\":1,\"79\":1,\"81\":1,\"82\":12,\"84\":3,\"86\":6,\"87\":4,\"92\":1,\"96\":2,\"97\":8,\"98\":2,\"100\":9,\"104\":6,\"105\":4,\"109\":3,\"111\":2,\"112\":19,\"113\":2,\"114\":2,\"116\":5,\"117\":8,\"118\":6,\"119\":3,\"120\":4,\"121\":1,\"122\":6,\"123\":16,\"124\":3,\"126\":7,\"127\":2,\"128\":4,\"129\":5,\"130\":1,\"131\":3,\"132\":3,\"133\":3,\"135\":5,\"136\":1,\"137\":3,\"138\":1,\"139\":19,\"156\":21,\"161\":2,\"164\":2,\"165\":9,\"166\":4,\"172\":1,\"177\":1,\"179\":5,\"182\":4,\"183\":1,\"195\":6,\"197\":3,\"207\":4,\"214\":7,\"221\":4,\"231\":1,\"235\":2,\"241\":4,\"242\":4,\"275\":3,\"284\":1,\"285\":1,\"300\":1}}],[\"cleandelaytime\",{\"1\":{\"275\":1}}],[\"clean\",{\"1\":{\"54\":1}}],[\"clear\",{\"1\":{\"28\":1,\"100\":1,\"104\":1,\"114\":4,\"123\":1,\"200\":1}}],[\"client<\",{\"1\":{\"164\":1,\"228\":1}}],[\"clientcnxn\",{\"1\":{\"155\":4}}],[\"clientip\",{\"1\":{\"100\":2}}],[\"clientrequest\",{\"1\":{\"92\":1}}],[\"clientresponseplugin\",{\"0\":{\"185\":1},\"1\":{\"179\":1}}],[\"clientresponseclient\",{\"1\":{\"93\":1}}],[\"clientresponse\",{\"1\":{\"92\":1,\"93\":7,\"184\":1,\"185\":8}}],[\"clientplugin\",{\"0\":{\"184\":1},\"1\":{\"92\":2,\"179\":1}}],[\"clients\",{\"1\":{\"48\":1,\"100\":9,\"316\":1}}],[\"client\",{\"0\":{\"76\":1},\"1\":{\"48\":2,\"59\":1,\"77\":2,\"83\":1,\"92\":1,\"93\":1,\"100\":10,\"117\":1,\"155\":8,\"156\":3,\"161\":3,\"164\":1,\"166\":1,\"179\":2,\"184\":4,\"185\":2,\"214\":1,\"230\":3,\"231\":1,\"237\":1,\"285\":1,\"300\":1,\"307\":1}}],[\"clicked\",{\"1\":{\"48\":1}}],[\"click\",{\"1\":{\"28\":1,\"101\":1,\"164\":2,\"212\":1,\"285\":2}}],[\"closing\",{\"1\":{\"121\":1}}],[\"closely\",{\"1\":{\"195\":1}}],[\"close\",{\"1\":{\"106\":1,\"114\":1}}],[\"closed\",{\"1\":{\"48\":2}}],[\"clone\",{\"0\":{\"52\":1},\"1\":{\"42\":1,\"52\":1}}],[\"cloud\",{\"1\":{\"29\":1,\"34\":1,\"46\":1,\"80\":2,\"164\":1,\"217\":1,\"226\":1,\"265\":1,\"271\":1,\"275\":2,\"278\":1,\"280\":1}}],[\"clusters\",{\"0\":{\"265\":1},\"1\":{\"40\":1}}],[\"clusterurl\",{\"1\":{\"33\":1}}],[\"clustered\",{\"1\":{\"31\":1,\"40\":1}}],[\"cluster\",{\"0\":{\"31\":2},\"1\":{\"31\":3,\"33\":5,\"68\":1,\"69\":1,\"87\":1,\"90\":1,\"104\":1,\"120\":1,\"191\":2,\"214\":1,\"265\":1,\"269\":1,\"299\":1,\"312\":1}}],[\"club\",{\"0\":{\"1\":1,\"2\":1},\"1\":{\"1\":1}}],[\"capabilities\",{\"1\":{\"225\":1}}],[\"capability\",{\"1\":{\"69\":1}}],[\"capacity\",{\"1\":{\"189\":2,\"192\":1,\"197\":1,\"200\":7,\"210\":1}}],[\"came\",{\"1\":{\"178\":1}}],[\"caching\",{\"1\":{\"99\":1,\"101\":1,\"131\":1,\"134\":1}}],[\"caches\",{\"1\":{\"132\":1,\"134\":1,\"139\":1}}],[\"cacheselectdata\",{\"1\":{\"118\":1}}],[\"cacheruledata\",{\"1\":{\"118\":1,\"162\":3}}],[\"cacheplugindata\",{\"1\":{\"118\":1,\"161\":2}}],[\"cacheconfigdata\",{\"1\":{\"105\":1}}],[\"cacheconfig\",{\"1\":{\"105\":3}}],[\"cachetcctransaction\",{\"1\":{\"40\":4}}],[\"cacheloader<string\",{\"1\":{\"40\":1}}],[\"cacheloader\",{\"1\":{\"40\":1}}],[\"cachebuilder\",{\"1\":{\"40\":2}}],[\"cache\",{\"0\":{\"39\":1,\"40\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1},\"1\":{\"39\":1,\"40\":17,\"48\":6,\"87\":3,\"91\":8,\"97\":6,\"99\":1,\"100\":1,\"101\":3,\"104\":7,\"105\":1,\"117\":2,\"118\":1,\"122\":1,\"123\":1,\"124\":3,\"126\":1,\"133\":2,\"135\":1,\"136\":1,\"137\":4,\"138\":1,\"139\":8,\"161\":1,\"173\":1,\"174\":2,\"175\":2,\"176\":1,\"195\":1,\"217\":1,\"312\":1}}],[\"cacheddefaultname\",{\"1\":{\"139\":1}}],[\"cachedclasses\",{\"0\":{\"136\":1},\"1\":{\"134\":1,\"136\":5,\"139\":5}}],[\"cachedinstances\",{\"0\":{\"135\":1},\"1\":{\"134\":1,\"135\":2,\"139\":6}}],[\"cached\",{\"1\":{\"38\":1,\"81\":1,\"136\":1}}],[\"calendar\",{\"1\":{\"289\":2}}],[\"calcite\",{\"1\":{\"282\":1}}],[\"calculation\",{\"1\":{\"177\":1,\"200\":2,\"218\":1}}],[\"calculating\",{\"1\":{\"91\":1}}],[\"calculatetotalweight\",{\"1\":{\"177\":1}}],[\"calculated\",{\"1\":{\"177\":1,\"199\":1,\"211\":1,\"218\":1}}],[\"calculate\",{\"1\":{\"90\":1,\"200\":4}}],[\"callback\",{\"1\":{\"92\":2}}],[\"calling\",{\"0\":{\"184\":1},\"1\":{\"80\":1,\"83\":1,\"100\":1,\"104\":2,\"120\":1,\"142\":1,\"165\":1,\"179\":1,\"183\":1,\"231\":2,\"241\":1}}],[\"called\",{\"1\":{\"48\":1,\"68\":1,\"77\":1,\"84\":1,\"86\":3,\"87\":1,\"92\":1,\"100\":3,\"108\":1,\"112\":1,\"118\":6,\"123\":4,\"126\":1,\"129\":1,\"135\":1,\"156\":1,\"179\":1,\"180\":1,\"184\":1,\"221\":1,\"234\":2,\"235\":1,\"242\":3,\"301\":1,\"311\":1}}],[\"callers\",{\"1\":{\"132\":1}}],[\"callercl\",{\"1\":{\"127\":1}}],[\"caller\",{\"1\":{\"30\":2,\"86\":1,\"127\":1,\"179\":2,\"265\":1,\"275\":1}}],[\"calls\",{\"0\":{\"231\":1,\"232\":1,\"233\":1,\"240\":1,\"241\":1},\"1\":{\"33\":2,\"39\":1,\"43\":1,\"48\":1,\"85\":1,\"86\":1,\"89\":1,\"92\":3,\"98\":1,\"100\":2,\"101\":1,\"118\":3,\"122\":1,\"151\":1,\"156\":1,\"180\":2,\"185\":2,\"213\":1,\"219\":2,\"220\":1,\"221\":1,\"224\":4,\"225\":2,\"263\":1,\"272\":1}}],[\"call\",{\"0\":{\"30\":1,\"118\":1,\"197\":1,\"234\":1,\"235\":1,\"236\":1},\"1\":{\"19\":1,\"29\":1,\"77\":1,\"86\":1,\"87\":2,\"92\":3,\"97\":1,\"100\":4,\"101\":1,\"104\":6,\"105\":2,\"106\":1,\"117\":1,\"118\":2,\"120\":1,\"122\":3,\"123\":6,\"124\":2,\"128\":1,\"129\":2,\"138\":1,\"139\":1,\"151\":2,\"155\":2,\"156\":1,\"179\":6,\"180\":3,\"181\":2,\"183\":3,\"184\":3,\"185\":5,\"193\":1,\"197\":1,\"198\":2,\"200\":8,\"201\":1,\"212\":1,\"213\":2,\"214\":1,\"220\":1,\"224\":3,\"226\":1,\"232\":1,\"234\":2,\"235\":1,\"236\":2,\"237\":1,\"241\":4,\"242\":2,\"243\":2,\"269\":1,\"300\":2,\"301\":1,\"307\":1}}],[\"categories\",{\"1\":{\"85\":1}}],[\"catch\",{\"1\":{\"36\":1,\"40\":1,\"82\":1,\"104\":2,\"105\":2,\"114\":2,\"123\":3,\"126\":2,\"127\":1,\"129\":3,\"139\":2,\"176\":2,\"242\":3}}],[\"card\",{\"1\":{\"316\":1}}],[\"care\",{\"1\":{\"275\":1,\"276\":1,\"300\":1}}],[\"carefully\",{\"1\":{\"80\":1}}],[\"carrying\",{\"1\":{\"289\":1}}],[\"carry\",{\"1\":{\"211\":1,\"226\":1}}],[\"carried\",{\"1\":{\"5\":1}}],[\"causes\",{\"1\":{\"210\":1,\"211\":1,\"214\":1}}],[\"caused\",{\"1\":{\"164\":2,\"210\":2}}],[\"cause\",{\"1\":{\"40\":1,\"84\":1,\"131\":2,\"212\":1,\"271\":1,\"301\":1,\"303\":1,\"314\":1}}],[\"cas\",{\"1\":{\"104\":1}}],[\"cases\",{\"1\":{\"113\":2,\"211\":1,\"271\":1,\"316\":1}}],[\"case\",{\"1\":{\"30\":1,\"38\":1,\"97\":5,\"99\":1,\"101\":1,\"110\":1,\"111\":5,\"113\":5,\"118\":5,\"156\":1,\"165\":1,\"182\":2,\"191\":1,\"210\":1,\"220\":1,\"316\":3}}],[\"cast\",{\"1\":{\"28\":1,\"123\":1}}],[\"cancelmethod\",{\"1\":{\"275\":2}}],[\"cancel\",{\"0\":{\"36\":1,\"37\":1},\"1\":{\"29\":1,\"30\":1,\"33\":4,\"36\":3,\"100\":2,\"246\":1,\"252\":1,\"271\":1,\"275\":3,\"276\":2,\"283\":1}}],[\"cannot\",{\"1\":{\"23\":1,\"48\":1,\"80\":1,\"123\":2,\"156\":1,\"164\":4,\"183\":4,\"184\":2,\"213\":1,\"246\":1,\"252\":1,\"316\":1}}],[\"can\",{\"0\":{\"139\":1},\"1\":{\"20\":1,\"24\":1,\"32\":1,\"33\":1,\"35\":1,\"38\":1,\"43\":1,\"46\":1,\"48\":6,\"54\":1,\"59\":1,\"61\":1,\"64\":1,\"68\":3,\"69\":4,\"71\":2,\"72\":4,\"74\":1,\"80\":2,\"81\":2,\"84\":1,\"85\":1,\"86\":2,\"87\":1,\"89\":1,\"91\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"104\":1,\"106\":3,\"108\":1,\"109\":1,\"110\":1,\"112\":3,\"113\":1,\"114\":1,\"116\":1,\"121\":1,\"123\":3,\"124\":2,\"126\":1,\"127\":1,\"129\":1,\"130\":1,\"132\":1,\"134\":1,\"135\":1,\"139\":2,\"151\":1,\"155\":2,\"176\":2,\"179\":5,\"180\":1,\"182\":1,\"184\":1,\"185\":1,\"189\":2,\"191\":1,\"192\":1,\"197\":2,\"200\":1,\"201\":1,\"207\":1,\"209\":1,\"210\":1,\"211\":3,\"212\":6,\"214\":5,\"217\":1,\"231\":1,\"252\":4,\"275\":2,\"281\":2,\"285\":2,\"300\":1,\"301\":1,\"303\":5,\"305\":1,\"310\":1,\"311\":5,\"312\":1,\"314\":5}}],[\"cumbersome\",{\"1\":{\"303\":1,\"314\":1}}],[\"cumulative\",{\"1\":{\"90\":1,\"91\":1}}],[\"cusmized\",{\"1\":{\"297\":1}}],[\"customized\",{\"1\":{\"312\":1}}],[\"customize\",{\"1\":{\"72\":1,\"97\":1,\"218\":1,\"301\":1,\"305\":1}}],[\"custom\",{\"1\":{\"70\":3,\"71\":1,\"80\":1,\"172\":3,\"205\":1,\"270\":1,\"279\":1,\"288\":2,\"292\":1}}],[\"curl\",{\"1\":{\"257\":2}}],[\"curator\",{\"1\":{\"228\":3,\"270\":1}}],[\"curator<\",{\"1\":{\"228\":3}}],[\"cur\",{\"1\":{\"91\":3}}],[\"curious\",{\"1\":{\"86\":1}}],[\"currentchildren\",{\"1\":{\"161\":3,\"162\":3}}],[\"currentthread\",{\"1\":{\"123\":1,\"220\":1}}],[\"currenttimemillis\",{\"1\":{\"91\":1,\"97\":1,\"175\":1}}],[\"currenttransaction\",{\"1\":{\"36\":4}}],[\"currently\",{\"0\":{\"232\":1},\"1\":{\"85\":1,\"180\":3,\"247\":1}}],[\"current\",{\"0\":{\"192\":1,\"196\":1,\"200\":1,\"219\":1},\"1\":{\"11\":1,\"39\":1,\"86\":1,\"89\":1,\"91\":1,\"113\":1,\"120\":1,\"161\":1,\"162\":1,\"169\":1,\"179\":2,\"185\":1,\"189\":2,\"191\":1,\"195\":6,\"197\":1,\"198\":1,\"199\":2,\"200\":6,\"211\":3,\"214\":3,\"216\":1,\"219\":9,\"220\":1,\"221\":1,\"222\":1,\"226\":1,\"235\":1,\"242\":1}}],[\"cutting\",{\"1\":{\"180\":1}}],[\"cut\",{\"1\":{\"39\":1}}],[\"cui\",{\"1\":{\"7\":1,\"14\":1}}],[\"cost\",{\"1\":{\"283\":2}}],[\"copyoptions\",{\"1\":{\"289\":1}}],[\"copyonwritearraylist<>\",{\"1\":{\"126\":1}}],[\"copyonwritearraylist<driverinfo>\",{\"1\":{\"126\":1}}],[\"copyonwritearrayset<>\",{\"1\":{\"114\":1}}],[\"copyright\",{\"1\":{\"253\":1}}],[\"copy\",{\"1\":{\"237\":1,\"285\":1}}],[\"column\",{\"1\":{\"288\":2}}],[\"cold\",{\"1\":{\"211\":2}}],[\"colons\",{\"1\":{\"176\":2}}],[\"collate\",{\"1\":{\"226\":10}}],[\"collaborations\",{\"1\":{\"104\":1}}],[\"collector\",{\"1\":{\"116\":1}}],[\"collectors\",{\"1\":{\"86\":1,\"147\":2,\"165\":1,\"179\":1,\"207\":1,\"214\":4}}],[\"collect\",{\"1\":{\"86\":1,\"117\":1,\"118\":1,\"147\":2,\"165\":1,\"179\":1,\"207\":1,\"214\":4}}],[\"collection<datachangedlistener>\",{\"1\":{\"111\":1,\"156\":1,\"165\":1}}],[\"collection<selectordata>\",{\"1\":{\"85\":1,\"172\":1,\"182\":1}}],[\"collection\",{\"1\":{\"97\":1,\"100\":1,\"114\":1,\"133\":1,\"287\":1}}],[\"collectionutils\",{\"1\":{\"85\":2,\"97\":1,\"104\":1,\"118\":1,\"161\":1,\"162\":1,\"182\":2,\"183\":1}}],[\"collections\",{\"1\":{\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"86\":1,\"100\":1,\"109\":1,\"111\":1,\"117\":2,\"156\":1,\"161\":2,\"165\":2,\"166\":2,\"207\":2}}],[\"collectively\",{\"0\":{\"41\":1}}],[\"collocation\",{\"1\":{\"70\":1}}],[\"cooperate\",{\"1\":{\"225\":1,\"253\":1,\"280\":1}}],[\"cookies\",{\"1\":{\"93\":1,\"185\":1}}],[\"coordinatorservice\",{\"1\":{\"35\":9,\"40\":6}}],[\"coordinator\",{\"1\":{\"35\":1,\"40\":1}}],[\"coordinating\",{\"1\":{\"21\":1}}],[\"corporation\",{\"1\":{\"155\":1}}],[\"cornerstone\",{\"1\":{\"316\":1}}],[\"corner\",{\"1\":{\"48\":1}}],[\"correspond\",{\"1\":{\"72\":1,\"113\":1}}],[\"corresponding\",{\"0\":{\"191\":1,\"193\":1,\"195\":1},\"1\":{\"48\":7,\"56\":1,\"72\":1,\"82\":1,\"101\":2,\"105\":2,\"112\":2,\"113\":1,\"117\":1,\"118\":2,\"124\":1,\"129\":1,\"137\":2,\"139\":1,\"156\":1,\"172\":2,\"175\":1,\"177\":1,\"182\":3,\"183\":4,\"185\":2,\"189\":1,\"195\":5,\"199\":1,\"234\":2}}],[\"corresponds\",{\"1\":{\"48\":1,\"69\":1,\"81\":1,\"82\":1,\"112\":1,\"214\":1}}],[\"correct\",{\"1\":{\"38\":1,\"151\":1}}],[\"core\",{\"1\":{\"3\":1,\"33\":1,\"35\":7,\"36\":4,\"40\":3,\"43\":1,\"57\":1,\"69\":2,\"87\":1,\"91\":1,\"92\":1,\"132\":1,\"164\":1,\"179\":1,\"185\":1,\"189\":2,\"200\":1,\"207\":3,\"210\":1,\"211\":2,\"212\":1,\"221\":2,\"225\":1,\"241\":1,\"270\":1,\"279\":4,\"287\":7,\"288\":14,\"289\":12}}],[\"could\",{\"1\":{\"57\":1,\"123\":1,\"124\":2,\"301\":1}}],[\"course\",{\"1\":{\"33\":1,\"43\":1,\"48\":1,\"89\":1}}],[\"counting\",{\"1\":{\"213\":1}}],[\"counter\",{\"1\":{\"189\":1}}],[\"count\",{\"1\":{\"33\":3,\"40\":2,\"129\":8,\"172\":2,\"183\":1,\"184\":1,\"200\":4,\"214\":1,\"218\":1}}],[\"co\",{\"0\":{\"290\":1},\"1\":{\"17\":1}}],[\"comfortable\",{\"1\":{\"316\":1}}],[\"combine\",{\"1\":{\"316\":1}}],[\"combinedexecutor\",{\"1\":{\"221\":4}}],[\"combined\",{\"1\":{\"70\":1,\"180\":1,\"213\":1,\"221\":3}}],[\"combing\",{\"1\":{\"185\":1,\"195\":1}}],[\"combed\",{\"1\":{\"179\":2,\"187\":1,\"197\":1}}],[\"come\",{\"1\":{\"86\":1,\"113\":1,\"135\":1,\"277\":1,\"290\":1}}],[\"comes\",{\"1\":{\"86\":1,\"92\":1,\"112\":1,\"119\":1,\"176\":1,\"189\":1,\"199\":1,\"211\":2}}],[\"com\",{\"0\":{\"42\":1},\"1\":{\"28\":2,\"33\":7,\"35\":15,\"36\":7,\"40\":8,\"43\":7,\"46\":2,\"49\":1,\"52\":1,\"57\":1,\"126\":1,\"129\":1,\"130\":1,\"164\":2,\"182\":1,\"233\":1,\"237\":1,\"247\":2,\"257\":1,\"266\":2,\"275\":1,\"277\":2,\"283\":2,\"290\":2,\"296\":2,\"301\":1,\"306\":2,\"316\":1}}],[\"completablefuture\",{\"1\":{\"234\":2}}],[\"completablefuture<object>\",{\"1\":{\"234\":2,\"237\":1}}],[\"completely\",{\"1\":{\"283\":1,\"300\":1,\"307\":1,\"312\":1,\"316\":1}}],[\"completedfuture\",{\"1\":{\"234\":1}}],[\"completed\",{\"1\":{\"80\":1,\"96\":1,\"100\":1,\"151\":1,\"198\":1,\"200\":1,\"300\":1}}],[\"completes\",{\"1\":{\"32\":1,\"81\":1,\"184\":1}}],[\"complete\",{\"1\":{\"23\":1,\"92\":1,\"100\":4,\"123\":1,\"155\":2,\"179\":1,\"210\":1,\"246\":1,\"253\":1,\"284\":1,\"303\":1,\"314\":1}}],[\"complexity\",{\"1\":{\"133\":1}}],[\"complex\",{\"1\":{\"131\":1,\"269\":1,\"307\":1,\"312\":1}}],[\"complicated\",{\"1\":{\"91\":1,\"182\":1}}],[\"companies\",{\"1\":{\"303\":1,\"314\":1}}],[\"company\",{\"0\":{\"304\":1,\"315\":1},\"1\":{\"301\":1,\"304\":2,\"315\":2}}],[\"compatibility\",{\"1\":{\"276\":1,\"287\":12,\"289\":2}}],[\"compatible\",{\"1\":{\"31\":1,\"287\":1}}],[\"comparingindexed\",{\"1\":{\"288\":1}}],[\"comparingint\",{\"1\":{\"86\":1,\"179\":1,\"207\":1}}],[\"comparison\",{\"1\":{\"101\":1,\"105\":1}}],[\"comparator\",{\"1\":{\"86\":1,\"147\":1,\"165\":1,\"179\":1,\"207\":1}}],[\"compareutil\",{\"1\":{\"288\":1}}],[\"compared\",{\"1\":{\"121\":1,\"226\":1}}],[\"comparechangedgroup\",{\"1\":{\"100\":2}}],[\"compareandset\",{\"1\":{\"91\":1,\"104\":1}}],[\"compare\",{\"1\":{\"65\":1,\"89\":1,\"99\":1,\"101\":1}}],[\"compilation\",{\"1\":{\"48\":1,\"217\":1}}],[\"compiled\",{\"1\":{\"48\":1}}],[\"compile\",{\"0\":{\"54\":1},\"1\":{\"42\":1,\"54\":1}}],[\"composed\",{\"1\":{\"69\":1,\"253\":1}}],[\"composition\",{\"1\":{\"19\":1}}],[\"components\",{\"1\":{\"209\":1}}],[\"component\",{\"1\":{\"35\":2,\"36\":2,\"43\":1,\"111\":1,\"112\":1,\"156\":2,\"209\":2,\"212\":1,\"214\":2,\"221\":3}}],[\"comprehensive\",{\"1\":{\"17\":1}}],[\"commodity\",{\"1\":{\"303\":1,\"314\":1}}],[\"commonconstants\",{\"1\":{\"237\":1,\"241\":1,\"242\":1}}],[\"commonplugindatasubscriber\",{\"1\":{\"118\":1}}],[\"commonplugindata\",{\"1\":{\"118\":1}}],[\"commons\",{\"1\":{\"40\":1}}],[\"common\",{\"1\":{\"11\":1,\"33\":6,\"35\":3,\"36\":3,\"40\":5,\"43\":4,\"57\":1,\"84\":1,\"130\":2,\"164\":2,\"189\":1}}],[\"comma\",{\"1\":{\"226\":1}}],[\"commandlinerunner\",{\"1\":{\"156\":2}}],[\"commandline\",{\"1\":{\"156\":2}}],[\"communicate\",{\"1\":{\"252\":2}}],[\"communication\",{\"1\":{\"117\":2,\"118\":2}}],[\"community\",{\"0\":{\"17\":1,\"251\":1,\"277\":1,\"280\":1,\"281\":1,\"290\":1},\"1\":{\"3\":3,\"4\":2,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"18\":1,\"20\":1,\"21\":4,\"22\":5,\"23\":2,\"24\":4,\"28\":1,\"29\":1,\"246\":2,\"251\":4,\"252\":2,\"253\":6,\"267\":1,\"270\":1,\"277\":1,\"280\":3,\"281\":1,\"297\":1}}],[\"committers\",{\"1\":{\"248\":2}}],[\"committed\",{\"1\":{\"24\":1}}],[\"committee\",{\"0\":{\"254\":1},\"1\":{\"23\":1,\"253\":3}}],[\"commented\",{\"1\":{\"48\":3}}],[\"comment\",{\"1\":{\"48\":1,\"86\":1,\"226\":12}}],[\"comments\",{\"1\":{\"23\":1,\"200\":1,\"246\":1}}],[\"commercialization\",{\"1\":{\"22\":1}}],[\"conn\",{\"1\":{\"129\":4}}],[\"connecttimeoutexception\",{\"1\":{\"184\":1}}],[\"connectable\",{\"1\":{\"176\":1}}],[\"connectstring=localhost\",{\"1\":{\"155\":1}}],[\"connected\",{\"1\":{\"81\":1,\"114\":1,\"116\":1,\"176\":2}}],[\"connect\",{\"1\":{\"48\":1,\"106\":1,\"127\":3,\"176\":1}}],[\"connectivity\",{\"1\":{\"176\":1}}],[\"connectiontimeout\",{\"1\":{\"154\":2,\"275\":1}}],[\"connections\",{\"1\":{\"48\":1,\"65\":2,\"117\":1}}],[\"connection\",{\"0\":{\"195\":1},\"1\":{\"48\":3,\"57\":1,\"81\":1,\"82\":1,\"100\":1,\"114\":3,\"116\":1,\"117\":1,\"126\":1,\"127\":5,\"129\":2,\"155\":3,\"156\":1,\"176\":1,\"195\":4,\"229\":1}}],[\"connecting\",{\"1\":{\"48\":1}}],[\"con\",{\"1\":{\"127\":3}}],[\"conversion\",{\"1\":{\"226\":1,\"234\":2,\"288\":1,\"289\":3,\"300\":1}}],[\"converting\",{\"1\":{\"234\":1,\"287\":1}}],[\"converts\",{\"1\":{\"234\":1}}],[\"converted\",{\"1\":{\"156\":1}}],[\"convert\",{\"1\":{\"104\":1,\"118\":1,\"147\":1,\"225\":1,\"234\":1}}],[\"convenient\",{\"0\":{\"297\":1},\"1\":{\"219\":1,\"284\":1,\"300\":1,\"301\":1}}],[\"convenience\",{\"1\":{\"48\":1}}],[\"conditionalonclass\",{\"1\":{\"117\":1,\"166\":1}}],[\"conditionalonbean\",{\"1\":{\"100\":1,\"156\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"97\":1,\"112\":7,\"116\":1,\"156\":4}}],[\"conditionalonproperty\",{\"1\":{\"97\":1,\"112\":5,\"116\":1,\"117\":1,\"156\":1,\"166\":1}}],[\"condition\",{\"1\":{\"48\":1,\"70\":3,\"80\":1,\"82\":1,\"83\":2,\"85\":1,\"212\":1}}],[\"conditions\",{\"0\":{\"246\":1},\"1\":{\"48\":1,\"70\":2,\"164\":1}}],[\"conducted\",{\"1\":{\"48\":1}}],[\"conduct\",{\"0\":{\"22\":1}}],[\"concatmap\",{\"1\":{\"207\":1}}],[\"concat\",{\"1\":{\"147\":1}}],[\"concrete\",{\"1\":{\"131\":1,\"139\":1}}],[\"conclusions\",{\"1\":{\"85\":1,\"101\":1}}],[\"concept\",{\"1\":{\"88\":1,\"89\":1}}],[\"concepts\",{\"1\":{\"69\":1}}],[\"concern\",{\"1\":{\"38\":1}}],[\"concurrency\",{\"0\":{\"33\":1,\"35\":1},\"1\":{\"33\":8,\"211\":3,\"306\":1}}],[\"concurrentmap<string\",{\"1\":{\"91\":2,\"97\":1}}],[\"concurrentskiplistmap<>\",{\"1\":{\"89\":1}}],[\"concurrentskiplistmap<long\",{\"1\":{\"89\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"82\":1,\"91\":2,\"97\":1,\"132\":1,\"134\":2,\"135\":1,\"137\":1}}],[\"concurrent\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"35\":6,\"36\":5,\"40\":1,\"214\":2}}],[\"congratulations\",{\"1\":{\"38\":1}}],[\"conflicts\",{\"1\":{\"279\":1}}],[\"conf>\",{\"1\":{\"275\":1}}],[\"conf\",{\"1\":{\"155\":1,\"221\":6,\"275\":1}}],[\"confused\",{\"1\":{\"118\":1,\"124\":1}}],[\"confusion\",{\"1\":{\"28\":1,\"301\":1}}],[\"configmode\",{\"1\":{\"275\":3}}],[\"configinfo\",{\"1\":{\"165\":2,\"166\":2}}],[\"configeventlistener\",{\"1\":{\"156\":1}}],[\"configdata\",{\"1\":{\"113\":6}}],[\"configdata<\",{\"1\":{\"105\":1}}],[\"configdata<t>\",{\"1\":{\"104\":1}}],[\"configdatacache\",{\"1\":{\"97\":3}}],[\"configdatacache>\",{\"1\":{\"97\":1}}],[\"configservice\",{\"1\":{\"112\":3,\"165\":1,\"166\":4,\"275\":1}}],[\"configs\",{\"1\":{\"100\":1,\"104\":4,\"105\":3,\"123\":5}}],[\"configcontroller\",{\"1\":{\"100\":2}}],[\"configgroupenum\",{\"1\":{\"79\":1,\"81\":1,\"97\":2,\"98\":1,\"100\":1,\"104\":10,\"105\":4,\"109\":1,\"110\":1,\"113\":5,\"117\":9,\"156\":3,\"165\":1}}],[\"config\",{\"1\":{\"33\":6,\"43\":8,\"48\":7,\"56\":1,\"77\":1,\"97\":1,\"104\":5,\"105\":1,\"155\":1,\"156\":2,\"275\":3,\"279\":2}}],[\"configures\",{\"1\":{\"97\":1}}],[\"configured\",{\"1\":{\"35\":1,\"48\":2,\"57\":1,\"68\":1,\"72\":2,\"86\":1,\"135\":1,\"151\":1,\"164\":1,\"200\":1,\"207\":1,\"214\":3,\"312\":1}}],[\"configure\",{\"0\":{\"146\":1},\"1\":{\"33\":4,\"43\":1,\"46\":1,\"48\":1,\"59\":1,\"64\":1,\"72\":1,\"117\":1,\"164\":1,\"201\":1,\"205\":1,\"209\":1,\"212\":2,\"243\":1,\"263\":1}}],[\"configuring\",{\"1\":{\"33\":2}}],[\"configurationclassenhancer\",{\"1\":{\"164\":1}}],[\"configurationclassenhancer$beanmethodinterceptor\",{\"1\":{\"164\":1}}],[\"configurationproperties\",{\"1\":{\"117\":1,\"156\":3,\"166\":1}}],[\"configuration\",{\"0\":{\"33\":1,\"49\":1,\"96\":1,\"127\":1,\"154\":1,\"195\":1,\"202\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"275\":1},\"1\":{\"33\":2,\"34\":1,\"38\":1,\"43\":4,\"48\":8,\"57\":1,\"68\":1,\"71\":2,\"72\":1,\"74\":2,\"86\":2,\"88\":2,\"96\":4,\"97\":2,\"100\":1,\"101\":1,\"107\":1,\"110\":1,\"112\":10,\"116\":5,\"117\":4,\"123\":1,\"154\":2,\"156\":6,\"161\":3,\"164\":8,\"166\":3,\"174\":1,\"183\":1,\"191\":1,\"192\":1,\"195\":7,\"201\":1,\"202\":1,\"205\":1,\"206\":2,\"207\":1,\"212\":8,\"213\":4,\"214\":8,\"218\":2,\"219\":2,\"220\":1,\"221\":3,\"224\":4,\"229\":1,\"265\":2,\"267\":1,\"270\":3,\"272\":1,\"275\":6,\"280\":2,\"282\":3,\"310\":1}}],[\"configurations\",{\"1\":{\"29\":1,\"74\":1,\"212\":1,\"214\":7,\"300\":1,\"312\":1}}],[\"confirmmethod\",{\"1\":{\"275\":2}}],[\"confirms\",{\"1\":{\"85\":1}}],[\"confirm\",{\"0\":{\"36\":1,\"37\":1},\"1\":{\"29\":1,\"33\":4,\"36\":3,\"40\":1,\"86\":1,\"252\":1,\"271\":1,\"275\":3,\"276\":1,\"301\":1}}],[\"container\",{\"1\":{\"86\":1,\"112\":2,\"156\":5,\"161\":3,\"165\":1,\"166\":2,\"246\":1}}],[\"contains\",{\"1\":{\"86\":1}}],[\"contact\",{\"0\":{\"25\":1},\"1\":{\"20\":1,\"135\":1,\"246\":1,\"249\":1,\"252\":2}}],[\"contribute\",{\"1\":{\"277\":1,\"290\":1}}],[\"contributions\",{\"1\":{\"46\":1}}],[\"contrast\",{\"1\":{\"217\":1}}],[\"contract\",{\"0\":{\"127\":1}}],[\"controlled\",{\"1\":{\"211\":1,\"312\":1}}],[\"controller\",{\"1\":{\"48\":2,\"59\":2,\"100\":1,\"101\":1,\"219\":9,\"260\":1}}],[\"control\",{\"0\":{\"211\":1,\"214\":1},\"1\":{\"100\":1,\"209\":4,\"211\":8,\"212\":5,\"214\":26,\"312\":1}}],[\"contexttransmittalmode\",{\"1\":{\"275\":1}}],[\"contextpath\",{\"1\":{\"59\":1,\"72\":4,\"79\":6,\"80\":3,\"81\":9,\"180\":1,\"226\":1}}],[\"context\",{\"1\":{\"36\":2,\"39\":6,\"85\":1,\"86\":1,\"87\":5,\"92\":1,\"93\":1,\"100\":1,\"151\":2,\"164\":2,\"180\":1,\"183\":2,\"184\":1,\"185\":1,\"207\":4,\"211\":1,\"214\":1,\"221\":1,\"236\":2,\"242\":1}}],[\"contents\",{\"1\":{\"161\":1,\"162\":1}}],[\"contenttype\",{\"1\":{\"92\":1,\"184\":2}}],[\"content\",{\"1\":{\"5\":1,\"33\":1,\"175\":1,\"230\":1,\"275\":1}}],[\"continuing\",{\"1\":{\"80\":1}}],[\"continues\",{\"1\":{\"212\":1,\"316\":1}}],[\"continued\",{\"1\":{\"80\":1}}],[\"continue\",{\"1\":{\"24\":1,\"74\":1,\"86\":1,\"87\":1,\"91\":1,\"92\":1,\"96\":1,\"98\":1,\"101\":1,\"105\":1,\"106\":1,\"110\":2,\"128\":1,\"151\":1,\"159\":1,\"172\":2,\"175\":1,\"213\":2}}],[\"continuously\",{\"1\":{\"48\":1,\"199\":1,\"246\":1}}],[\"continuous\",{\"1\":{\"23\":1}}],[\"consume\",{\"1\":{\"199\":1,\"200\":1}}],[\"consumers\",{\"1\":{\"35\":7}}],[\"consumer\",{\"0\":{\"241\":1},\"1\":{\"33\":2,\"35\":1,\"234\":2,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"consumerthreads\",{\"1\":{\"33\":3,\"43\":2,\"275\":1}}],[\"consumption\",{\"1\":{\"101\":1,\"122\":1,\"123\":1,\"312\":1}}],[\"console\",{\"1\":{\"48\":1,\"57\":1,\"61\":1,\"64\":1,\"66\":1,\"72\":1,\"74\":1,\"156\":1,\"218\":2,\"219\":1}}],[\"constant\",{\"1\":{\"211\":1}}],[\"constants\",{\"1\":{\"87\":2,\"92\":1,\"93\":1,\"151\":2,\"172\":3,\"176\":2,\"180\":1,\"183\":4,\"184\":7,\"185\":1,\"214\":3,\"219\":11,\"221\":1,\"236\":3,\"237\":4,\"238\":1}}],[\"constantly\",{\"1\":{\"48\":1,\"105\":1}}],[\"constructed\",{\"1\":{\"116\":1}}],[\"construct\",{\"1\":{\"82\":1,\"104\":1,\"117\":1,\"139\":3}}],[\"constructorresolver\",{\"1\":{\"164\":2}}],[\"constructor\",{\"1\":{\"48\":1,\"86\":1}}],[\"construction\",{\"0\":{\"290\":1},\"1\":{\"3\":1,\"288\":1}}],[\"constraints\",{\"1\":{\"46\":1,\"253\":1}}],[\"consistency\",{\"1\":{\"30\":1}}],[\"consistent\",{\"1\":{\"19\":1,\"177\":2,\"179\":1,\"180\":2,\"195\":1,\"212\":1,\"253\":1}}],[\"considers\",{\"1\":{\"210\":1}}],[\"considered\",{\"1\":{\"104\":1,\"316\":1}}],[\"considering\",{\"1\":{\"40\":1,\"182\":1,\"195\":1,\"211\":1,\"252\":1}}],[\"consider\",{\"1\":{\"24\":1,\"38\":1,\"99\":1,\"101\":1,\"211\":3,\"214\":1,\"316\":1}}],[\"consciousness\",{\"1\":{\"5\":1}}],[\"codes\",{\"1\":{\"129\":1}}],[\"code\",{\"0\":{\"1\":1,\"2\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"22\":1,\"47\":1,\"48\":1,\"50\":1,\"53\":1,\"54\":1,\"76\":1,\"139\":1,\"170\":1,\"194\":2,\"207\":1,\"221\":1},\"1\":{\"1\":1,\"3\":1,\"5\":1,\"11\":1,\"14\":2,\"23\":2,\"32\":2,\"34\":1,\"42\":1,\"48\":12,\"81\":1,\"85\":1,\"88\":1,\"92\":1,\"96\":1,\"100\":3,\"105\":2,\"111\":1,\"113\":2,\"120\":2,\"121\":1,\"122\":1,\"123\":1,\"126\":2,\"129\":1,\"139\":1,\"159\":1,\"179\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":2,\"193\":1,\"195\":3,\"197\":2,\"199\":1,\"200\":3,\"207\":2,\"209\":1,\"214\":4,\"216\":1,\"219\":1,\"220\":1,\"221\":1,\"241\":1,\"246\":2,\"247\":1,\"263\":1,\"266\":1,\"270\":3,\"281\":4,\"285\":4,\"290\":1,\"301\":1,\"312\":1,\"316\":4}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
